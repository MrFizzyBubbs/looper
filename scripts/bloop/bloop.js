/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 969:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;


__webpack_unused_export__ = ({
  value: true
});
__webpack_unused_export__ = exports.l1 = void 0;

var value_1 = __webpack_require__(909);

Object.defineProperty(exports, "l1", ({
  enumerable: true,
  get: function get() {
    return value_1.makeValue;
  }
}));

var wanderer_1 = __webpack_require__(823);

__webpack_unused_export__ = ({
  enumerable: true,
  get: function get() {
    return wanderer_1.WandererManager;
  }
});

/***/ }),

/***/ 909:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38, _templateObject39, _templateObject40, _templateObject41, _templateObject42, _templateObject43, _templateObject44, _templateObject45, _templateObject46, _templateObject47, _templateObject48, _templateObject49, _templateObject50, _templateObject51, _templateObject52, _templateObject53, _templateObject54, _templateObject55, _templateObject56, _templateObject57, _templateObject58, _templateObject59, _templateObject60, _templateObject61, _templateObject62, _templateObject63, _templateObject64, _templateObject65, _templateObject66, _templateObject67;

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.makeValue = void 0;

var kolmafia_1 = __webpack_require__(530);

var libram_1 = __webpack_require__(542);

function makeValue() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var regularValueCache = new Map();
  var historicalValueCache = new Map();
  var inputValues = options.itemValues ? _toConsumableArray(options.itemValues.entries()).map(_ref => {
    var _ref2 = _slicedToArray(_ref, 2),
        item = _ref2[0],
        val = _ref2[1];

    return [item, () => (0, libram_1.undelay)(val)];
  }) : [];
  var specialValueLookup = new Map([[(0, libram_1.$item)(_templateObject || (_templateObject = _taggedTemplateLiteral(["Freddy Kruegerand"]))), currency.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["bottle of Bloodweiser, electric Kool-Aid, Dreadsylvanian skeleton key"])))))], [(0, libram_1.$item)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Beach Buck"]))), currency((0, libram_1.$item)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["one-day ticket to Spring Break Beach"]))))], [(0, libram_1.$item)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Coinspiracy"]))), currency.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Merc Core deployment orders, karma shawarma"])))))], [(0, libram_1.$item)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["FunFunds\u2122"]))), currency((0, libram_1.$item)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["one-day ticket to Dinseylandfill"]))))], [(0, libram_1.$item)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Volcoino"]))), currency((0, libram_1.$item)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["one-day ticket to That 70s Volcano"]))))], [(0, libram_1.$item)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["Wal-Mart gift certificate"]))), currency((0, libram_1.$item)(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["one-day ticket to The Glaciest"]))))], [(0, libram_1.$item)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["Rubee\u2122"]))), currency((0, libram_1.$item)(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["FantasyRealm guest pass"]))))], [(0, libram_1.$item)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["Guzzlrbuck"]))), currency((0, libram_1.$item)(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["Never Don't Stop Not Striving"]))))]].concat(_toConsumableArray(complexCandy()), [[(0, libram_1.$item)(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["Merc Core deployment orders"]))), () => value((0, libram_1.$item)(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["one-day ticket to Conspiracy Island"]))))], [(0, libram_1.$item)(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["free-range mushroom"]))), () => 3 * Math.max(value((0, libram_1.$item)(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["mushroom tea"])))) - value((0, libram_1.$item)(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["soda water"])))), value((0, libram_1.$item)(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["mushroom whiskey"])))) - value((0, libram_1.$item)(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["fermenting powder"])))), value((0, libram_1.$item)(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["mushroom filet"])))))], [(0, libram_1.$item)(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["little firkin"]))), () => averageValue.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["martini, screwdriver, strawberry daiquiri, margarita, vodka martini, tequila sunrise, bottle of Amontillado, barrel-aged martini, barrel gun"])))))], [(0, libram_1.$item)(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["normal barrel"]))), () => averageValue.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["a little sump'm sump'm, pink pony, rockin' wagon, roll in the hay, slip 'n' slide, slap and tickle"])))))], [(0, libram_1.$item)(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["big tun"]))), () => averageValue.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["gibson, gin and tonic, mimosette, tequila sunset, vodka and tonic, zmobie"])))))], [(0, libram_1.$item)(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["weathered barrel"]))), () => averageValue.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["bean burrito, enchanted bean burrito, jumping bean burrito"])))))], [(0, libram_1.$item)(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["dusty barrel"]))), () => averageValue.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["spicy bean burrito, spicy enchanted bean burrito, spicy jumping bean burrito"])))))], [(0, libram_1.$item)(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral(["disintegrating barrel"]))), () => averageValue.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral(["insanely spicy bean burrito, insanely spicy enchanted bean burrito, insanely spicy jumping bean burrito"])))))], [(0, libram_1.$item)(_templateObject37 || (_templateObject37 = _taggedTemplateLiteral(["moist barrel"]))), () => averageValue.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject38 || (_templateObject38 = _taggedTemplateLiteral(["cast, concentrated magicalness pill, enchanted barbell, giant moxie weed, Mountain Stream soda"])))))], [(0, libram_1.$item)(_templateObject39 || (_templateObject39 = _taggedTemplateLiteral(["rotting barrel"]))), () => averageValue.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject40 || (_templateObject40 = _taggedTemplateLiteral(["Doc Galaktik's Ailment Ointment, extra-strength strongness elixir, jug-o-magicalness, Marquis de Poivre soda, suntan lotion of moxiousness"])))))], [(0, libram_1.$item)(_templateObject41 || (_templateObject41 = _taggedTemplateLiteral(["mouldering barrel"]))), () => averageValue.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject42 || (_templateObject42 = _taggedTemplateLiteral(["creepy ginger ale, haunted battery, scroll of drastic healing, synthetic marrow, the funk"])))))], [(0, libram_1.$item)(_templateObject43 || (_templateObject43 = _taggedTemplateLiteral(["barnacled barrel"]))), () => averageValue.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject44 || (_templateObject44 = _taggedTemplateLiteral(["Alewife\u2122 Ale, bazookafish bubble gum, beefy fish meat, eel battery, glistening fish meat, ink bladder, pufferfish spine, shark cartilage, slick fish meat, slug of rum, slug of shochu, slug of vodka, temporary teardrop tattoo"])))))], [(0, libram_1.$item)(_templateObject45 || (_templateObject45 = _taggedTemplateLiteral(["psychoanalytic jar"]))), () => // Exclude jick because he's rate-limited
  Math.max.apply(Math, _toConsumableArray((0, libram_1.$items)(_templateObject46 || (_templateObject46 = _taggedTemplateLiteral(["jar of psychoses (The Meatsmith), jar of psychoses (The Captain of the Gourd), jar of psychoses (The Crackpot Mystic), jar of psychoses (The Pretentious Artist), jar of psychoses (The Old Man), jar of psychoses (The Suspicious-Looking Guy)"]))).map(jar => value(jar))))], [(0, libram_1.$item)(_templateObject47 || (_templateObject47 = _taggedTemplateLiteral(["warbear whosit"]))), () => (0.35 * averageValue.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject48 || (_templateObject48 = _taggedTemplateLiteral(["warbear auto-anvil, warbear chemistry lab, warbear high-efficiency still, warbear induction oven, warbear jackhammer drill press, warbear LP-ROM burner, warbear energy bracers, warbear exhaust manifold, warbear exo-arm, warbear foil hat, warbear laser beacon, warbear oil pan"]))))) + 0.65 * averageValue.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject49 || (_templateObject49 = _taggedTemplateLiteral(["warbear metalworking primer, warbear beeping telegram, warbear gyrocopter, warbear procedural hilarity drone, warbear robo-camouflage unit, warbear sequential gaiety distribution system"])))))) / 100]], _toConsumableArray((0, libram_1.$items)(_templateObject50 || (_templateObject50 = _taggedTemplateLiteral(["worthless gewgaw, worthless knick-knack, worthless trinket"]))).map(i => [i, currency.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject51 || (_templateObject51 = _taggedTemplateLiteral(["seal tooth, chisel, petrified noodles, jaba\xF1ero pepper, banjo strings, hot buttered roll, wooden figurine, ketchup, catsup, volleyball"])))).concat(_toConsumableArray((0, kolmafia_1.myClass)() === (0, libram_1.$class)(_templateObject52 || (_templateObject52 = _taggedTemplateLiteral(["Seal Clubber"]))) ? (0, libram_1.$items)(_templateObject53 || (_templateObject53 = _taggedTemplateLiteral(["figurine of an ancient seal"]))) : [])))])), [[(0, libram_1.$item)(_templateObject54 || (_templateObject54 = _taggedTemplateLiteral(["Boris's key"]))), () => value((0, libram_1.$item)(_templateObject55 || (_templateObject55 = _taggedTemplateLiteral(["Boris's key lime"])))) - value((0, libram_1.$item)(_templateObject56 || (_templateObject56 = _taggedTemplateLiteral(["lime"]))))], [(0, libram_1.$item)(_templateObject57 || (_templateObject57 = _taggedTemplateLiteral(["Jarlsberg's key"]))), () => value((0, libram_1.$item)(_templateObject58 || (_templateObject58 = _taggedTemplateLiteral(["Jarlsberg's key lime"])))) - value((0, libram_1.$item)(_templateObject59 || (_templateObject59 = _taggedTemplateLiteral(["lime"]))))], [(0, libram_1.$item)(_templateObject60 || (_templateObject60 = _taggedTemplateLiteral(["Sneaky Pete's key"]))), () => value((0, libram_1.$item)(_templateObject61 || (_templateObject61 = _taggedTemplateLiteral(["Sneaky Pete's key lime"])))) - value((0, libram_1.$item)(_templateObject62 || (_templateObject62 = _taggedTemplateLiteral(["lime"]))))], [(0, libram_1.$item)(_templateObject63 || (_templateObject63 = _taggedTemplateLiteral(["fat loot token"]))), currency.apply(void 0, _toConsumableArray((0, libram_1.$items)(_templateObject64 || (_templateObject64 = _taggedTemplateLiteral(["Boris's key, Jarlsberg's key, Sneaky Pete's key, Boris's ring, Jarlsberg's earring, Sneaky Pete's breath spray, potato sprout, sewing kit, Spellbook: Singer's Faithful Ocelot, Spellbook: Drescher's Annoying Noise, Spellbook: Walberg's Dim Bulb, dried gelatinous cube"])))))], [(0, libram_1.$item)(_templateObject65 || (_templateObject65 = _taggedTemplateLiteral(["inflammable leaf"]))), inflammableLeafCurrency()]], _toConsumableArray(inputValues)));
  var exclusions = new Set([// For tradeable items which can be "consumed" infinitely
  (0, libram_1.$item)(_templateObject66 || (_templateObject66 = _taggedTemplateLiteral(["ChibiBuddy\u2122 (off)"])))]);

  function saleValue(item, useHistorical) {
    if (useHistorical) {
      if ((0, kolmafia_1.historicalAge)(item) <= 7.0 && (0, kolmafia_1.historicalPrice)(item) > 0) {
        var isMallMin = (0, kolmafia_1.historicalPrice)(item) === Math.max(100, 2 * (0, kolmafia_1.autosellPrice)(item));
        return isMallMin ? (0, kolmafia_1.autosellPrice)(item) : 0.9 * (0, kolmafia_1.historicalPrice)(item);
      }
    }

    return (0, libram_1.getSaleValue)(item);
  }

  function currency() {
    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
      items[_key] = arguments[_key];
    }

    var unitCost = items.map(i => {
      var coinmaster = kolmafia_1.Coinmaster.all().find(c => (0, kolmafia_1.sellPrice)(c, i) > 0);

      if (!coinmaster) {
        throw "Invalid coinmaster item ".concat(i);
      } else {
        return [i, (0, kolmafia_1.sellPrice)(coinmaster, i)];
      }
    });
    return () => Math.max.apply(Math, _toConsumableArray(unitCost.map(_ref3 => {
      var _ref4 = _slicedToArray(_ref3, 2),
          item = _ref4[0],
          cost = _ref4[1];

      return value(item) / cost;
    })));
  }

  function inflammableLeafCurrency() {
    if (!libram_1.BurningLeaves.have()) return () => 0;
    var ignored = (0, libram_1.$items)(_templateObject67 || (_templateObject67 = _taggedTemplateLiteral(["lit leaf lasso, day shortener"]))); // Ignore limited purchases

    var unitCost = _toConsumableArray(libram_1.BurningLeaves.burnFor).filter(entry => entry[0] instanceof kolmafia_1.Item && entry[0].tradeable && !ignored.includes(entry[0]));

    return () => Math.max.apply(Math, _toConsumableArray(unitCost.map(_ref5 => {
      var _ref6 = _slicedToArray(_ref5, 2),
          item = _ref6[0],
          cost = _ref6[1];

      return value(item) / cost;
    })));
  }

  function complexCandy() {
    var candies = kolmafia_1.Item.all().filter(i => i.candyType === "complex");
    var candyLookup = [[], [], [], [], []];

    var _iterator = _createForOfIteratorHelper(candies),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var candy = _step.value;
        var id = (0, kolmafia_1.toInt)(candy) % 5;

        if (candy.tradeable) {
          candyLookup[id].push(candy);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var candyIdPrices = candies.filter(i => !i.tradeable).map(i => [i, () => Math.min.apply(Math, _toConsumableArray(candyLookup[(0, kolmafia_1.toInt)(i) % 5].map(i => value(i))))]);
    return candyIdPrices;
  }

  function value(inputItem) {
    var _regularValueCache$ge;

    var useHistorical = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var _ref7 = inputItem instanceof kolmafia_1.Item ? {
      item: inputItem,
      quantity: 1
    } : inputItem,
        item = _ref7.item,
        quantity = _ref7.quantity;

    if (exclusions.has(item)) return 0;
    var cachedValue = (_regularValueCache$ge = regularValueCache.get(item)) !== null && _regularValueCache$ge !== void 0 ? _regularValueCache$ge : useHistorical ? historicalValueCache.get(item) : undefined;

    if (cachedValue === undefined) {
      var _specialValueCompute;

      var specialValueCompute = specialValueLookup.get(item);

      var _value = (_specialValueCompute = specialValueCompute === null || specialValueCompute === void 0 ? void 0 : specialValueCompute()) !== null && _specialValueCompute !== void 0 ? _specialValueCompute : saleValue(item, useHistorical);

      (useHistorical ? historicalValueCache : regularValueCache).set(item, _value);
      return _value;
    }

    return quantity * cachedValue;
  }

  function averageValue() {
    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      items[_key2] = arguments[_key2];
    }

    return (0, libram_1.sum)(items, value) / items.length;
  }

  return {
    averageValue: averageValue,
    value: value
  };
}

exports.makeValue = makeValue;

/***/ }),

/***/ 770:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.eightbitFactory = exports.TREASURE_HOUSE_FAT_LOOT_TOKEN_COST = exports.bonusColor = void 0;

var kolmafia_1 = __webpack_require__(530);

var lib_1 = __webpack_require__(598);

var libram_1 = __webpack_require__(542);

exports.bonusColor = ["black", "blue", "green", "red"];
exports.TREASURE_HOUSE_FAT_LOOT_TOKEN_COST = 20000; // taken from tour guide, who took it from beldur

var locationColor = {
  black: (0, libram_1.$location)(_templateObject || (_templateObject = _taggedTemplateLiteral(["Vanya's Castle"]))),
  blue: (0, libram_1.$location)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Megalo-City"]))),
  green: (0, libram_1.$location)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Hero's Field"]))),
  red: (0, libram_1.$location)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["The Fungus Plains"])))
};

function value(color, options) {
  var denominator = options.ascend ? (0, libram_1.get)("8BitScore") - exports.TREASURE_HOUSE_FAT_LOOT_TOKEN_COST : exports.TREASURE_HOUSE_FAT_LOOT_TOKEN_COST;
  return options.itemValue((0, libram_1.$item)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["fat loot token"])))) * (0, kolmafia_1.eightBitPoints)(locationColor[color]) / denominator;
}

function eightbitFactory(type, locationSkiplist, options) {
  if ((0, libram_1.have)((0, libram_1.$item)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["continuum transfunctioner"])))) && type !== "backup" && (0, libram_1.get)("8BitScore") < exports.TREASURE_HOUSE_FAT_LOOT_TOKEN_COST) {
    return exports.bonusColor.map(color => new lib_1.WandererTarget("8-bit (".concat(color, ")"), locationColor[color], value(color, options))).filter(t => !locationSkiplist.includes(t.location));
  }

  return [];
}

exports.eightbitFactory = eightbitFactory;

/***/ }),

/***/ 741:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.freefightFactory = void 0;

var kolmafia_1 = __webpack_require__(530);

var libram_1 = __webpack_require__(542);

var lib_1 = __webpack_require__(598);

function averageYrValue(location, forceItemDrops, options) {
  var badAttributes = ["LUCKY", "ULTRARARE", "BOSS"];
  var rates = (0, kolmafia_1.appearanceRates)(location);
  var monsters = (0, kolmafia_1.getMonsters)(location).filter(m => !badAttributes.some(s => m.attributes.includes(s)) && rates[m.name] > 0);
  var canDuplicate = libram_1.SourceTerminal.have() && libram_1.SourceTerminal.duplicateUsesRemaining() > 0;

  if (monsters.length === 0) {
    return 0;
  } else {
    return (0, libram_1.sum)(monsters, m => {
      var items = (0, kolmafia_1.itemDropsArray)(m).filter(drop => ["", "n"].includes(drop.type));
      var duplicateFactor = canDuplicate && !m.attributes.includes("NOCOPY") ? 2 : 1; // TODO: this should consider unbuffed meat drop and unbuffed item drop, probably

      var meatDrop = (0, libram_1.clamp)((m.minMeat + m.maxMeat) / 2, 0, 1000);
      var itemDrop = duplicateFactor * (0, libram_1.sum)(items, drop => {
        var yrRate = (drop.type === "" && forceItemDrops ? 100 : drop.rate) / 100;
        return yrRate * options.itemValue(drop.drop);
      });
      return itemDrop + meatDrop + (0, lib_1.bofaValue)(options, m);
    }) / monsters.length;
  }
}

function monsterValues(forceItemDrops, options) {
  var values = new Map();

  var _iterator = _createForOfIteratorHelper(kolmafia_1.Location.all().filter(l => (0, lib_1.canAdventureOrUnlock)(l) && !(0, lib_1.underwater)(l))),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var location = _step.value;
      values.set(location, averageYrValue(location, forceItemDrops, options) + options.freeFightExtraValue(location));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return values;
} // Doing a free fight + yellow ray combination against a random enemy


function freefightFactory(type, locationSkiplist, options) {
  if (type === "yellow ray" || type === "freefight") {
    var _ret = function () {
      var validLocations = kolmafia_1.Location.all().filter(location => (0, lib_1.canWander)(location, "yellow ray") && (0, lib_1.canAdventureOrUnlock)(location));
      var locationValues = monsterValues(type === "yellow ray", options);
      var bestZones = new Set(validLocations.length > 0 ? [(0, libram_1.maxBy)(validLocations, l => {
        var _locationValues$get;

        return (_locationValues$get = locationValues.get(l)) !== null && _locationValues$get !== void 0 ? _locationValues$get : 0;
      })] : []);

      var _iterator2 = _createForOfIteratorHelper(lib_1.UnlockableZones),
          _step2;

      try {
        var _loop = function _loop() {
          var unlockableZone = _step2.value;
          var extraLocations = kolmafia_1.Location.all().filter(l => l.zone === unlockableZone.zone && !locationSkiplist.includes(l));

          if (extraLocations.length > 0) {
            bestZones.add((0, libram_1.maxBy)(extraLocations, l => {
              var _locationValues$get3;

              return (_locationValues$get3 = locationValues.get(l)) !== null && _locationValues$get3 !== void 0 ? _locationValues$get3 : 0;
            }));
          }
        };

        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      if (bestZones.size > 0) {
        return {
          v: _toConsumableArray(bestZones).map(l => {
            var _locationValues$get2;

            return new lib_1.WandererTarget("Yellow Ray ".concat(l), l, (_locationValues$get2 = locationValues.get(l)) !== null && _locationValues$get2 !== void 0 ? _locationValues$get2 : 0);
          })
        };
      }
    }();

    if (typeof _ret === "object") return _ret.v;
  }

  return [];
}

exports.freefightFactory = freefightFactory;

/***/ }),

/***/ 684:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.guzzlrFactory = void 0;

var kolmafia_1 = __webpack_require__(530);

var libram_1 = __webpack_require__(542);

var lib_1 = __webpack_require__(598);

function considerAbandon(options, locationSkiplist) {
  var location = libram_1.Guzzlr.getLocation();
  var remaningTurns = Math.ceil((100 - (0, libram_1.get)("guzzlrDeliveryProgress")) / (10 - (0, libram_1.get)("_guzzlrDeliveries")));
  (0, kolmafia_1.print)("Got guzzlr quest ".concat(libram_1.Guzzlr.getTier(), " at ").concat(libram_1.Guzzlr.getLocation(), " with remaining turns ").concat(remaningTurns));

  if (libram_1.Guzzlr.canAbandon() && ( // consider abandoning
  !location || // if mafia failed to track the location correctly
  locationSkiplist.includes(location) || !(0, lib_1.canAdventureOrUnlock)(location) || // or the zone is marked as "generally cannot adv"
  options.ascend && (0, lib_1.wandererTurnsAvailableToday)(options, location) < remaningTurns) // or ascending and not enough turns to finish
  ) {
    (0, kolmafia_1.print)("Abandoning...");
    libram_1.Guzzlr.abandon();
  }
}

function acceptGuzzlrQuest(options, locationSkiplist) {
  if (libram_1.Guzzlr.isQuestActive()) considerAbandon(options, locationSkiplist);

  while (!libram_1.Guzzlr.isQuestActive()) {
    (0, kolmafia_1.print)("Picking a guzzlr quest");

    if (libram_1.Guzzlr.canPlatinum() && !(options.prioritizeCappingGuzzlr && libram_1.Guzzlr.haveFullPlatinumBonus())) {
      libram_1.Guzzlr.acceptPlatinum();
    } else if (libram_1.Guzzlr.canGold() && (libram_1.Guzzlr.haveFullBronzeBonus() || !libram_1.Guzzlr.haveFullGoldBonus())) {
      // if gold is not maxed, do that first since they are limited per day
      libram_1.Guzzlr.acceptGold();
    } else {
      // fall back to bronze when can't plat, can't gold, or bronze is not maxed
      libram_1.Guzzlr.acceptBronze();
    }

    considerAbandon(options, locationSkiplist);
  }
}

function guzzlrValuePerTurn(buckValue, tier, guzzlrBooze) {
  var turnsToCompleteQuest = 100 / Math.max(3, 10 - (0, libram_1.get)("_guzzlrDeliveries"));
  var boozePrice = (0, kolmafia_1.mallPrice)(guzzlrBooze);

  switch (tier) {
    case null:
      return 0;

    case "bronze":
      return (3 * buckValue - boozePrice) / turnsToCompleteQuest;

    case "gold":
      return (6 * buckValue - boozePrice) / turnsToCompleteQuest;

    case "platinum":
      return (21.5 * buckValue - boozePrice) / turnsToCompleteQuest;
  }
}

function guzzlrFactory(_type, locationSkiplist, options) {
  if (libram_1.Guzzlr.have()) {
    var buckValue = options.itemValue((0, libram_1.$item)(_templateObject || (_templateObject = _taggedTemplateLiteral(["Guzzlrbuck"]))));
    acceptGuzzlrQuest(options, locationSkiplist);
    var location = libram_1.Guzzlr.getLocation();

    if (location !== null) {
      var guzzlrBooze = libram_1.Guzzlr.getTier() === "platinum" ? libram_1.Guzzlr.getCheapestPlatinumCocktail() : libram_1.Guzzlr.getBooze();
      return guzzlrBooze ? [new lib_1.WandererTarget("Guzzlr", location, guzzlrValuePerTurn(buckValue, libram_1.Guzzlr.getTier(), guzzlrBooze), () => {
        if (!guzzlrBooze) {
          // this is an error state - accepted a guzzlr quest but mafia doesn't know the booze
          return false;
        }

        if (!(0, libram_1.have)(guzzlrBooze)) {
          var fancy = guzzlrBooze && (0, kolmafia_1.craftType)(guzzlrBooze).includes("fancy");

          if (guzzlrBooze && (!fancy || fancy && (0, libram_1.freeCrafts)("booze") > 0)) {
            (0, kolmafia_1.retrieveItem)(guzzlrBooze);
          } else if (guzzlrBooze) {
            (0, kolmafia_1.buy)(1, guzzlrBooze, buckValue * libram_1.Guzzlr.expectedReward());
          }
        }

        return (0, libram_1.have)(guzzlrBooze);
      })] : [];
    }
  }

  return [];
}

exports.guzzlrFactory = guzzlrFactory;

/***/ }),

/***/ 823:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.WandererManager = void 0;

var kolmafia_1 = __webpack_require__(530);

var libram_1 = __webpack_require__(542);

var guzzlr_1 = __webpack_require__(684);

var lib_1 = __webpack_require__(598);

var lovebugs_1 = __webpack_require__(401);

var freefight_1 = __webpack_require__(741);

var eightbit_1 = __webpack_require__(770);

function sober() {
  return (0, kolmafia_1.myInebriety)() <= (0, kolmafia_1.inebrietyLimit)() + ((0, kolmafia_1.myFamiliar)() === (0, libram_1.$familiar)(_templateObject || (_templateObject = _taggedTemplateLiteral(["Stooper"]))) ? -1 : 0);
}

var wanderFactories = [lib_1.defaultFactory, freefight_1.freefightFactory, lovebugs_1.lovebugsFactory, guzzlr_1.guzzlrFactory, eightbit_1.eightbitFactory];

function bestWander(type, locationSkiplist, nameSkiplist, options) {
  var possibleLocations = new Map();

  var _iterator = _createForOfIteratorHelper(wanderFactories),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var wanderFactory = _step.value;
      var wanderTargets = wanderFactory(type, locationSkiplist, options);

      var _iterator2 = _createForOfIteratorHelper(wanderTargets),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var wanderTarget = _step2.value;

          if (!nameSkiplist.includes(wanderTarget.name) && !locationSkiplist.includes(wanderTarget.location) && (0, lib_1.canWander)(wanderTarget.location, type)) {
            var _possibleLocations$ge;

            var wandererLocation = (_possibleLocations$ge = possibleLocations.get(wanderTarget.location)) !== null && _possibleLocations$ge !== void 0 ? _possibleLocations$ge : {
              location: wanderTarget.location,
              targets: [],
              value: 0
            };
            wandererLocation.targets = [].concat(_toConsumableArray(wandererLocation.targets), [wanderTarget]);
            wandererLocation.value += wanderTarget.value;
            possibleLocations.set(wandererLocation.location, wandererLocation);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (possibleLocations.size === 0) {
    throw "Could not determine a wander target!";
  }

  return (0, libram_1.maxBy)(_toConsumableArray(possibleLocations.values()), "value");
}
/**
 * Recursively Check for zones to wander to
 * @param type type of fight we are looking for
 * @param nameSkiplist Any wanderer tasks that should be skipped because they could not be prepared
 * @param locationSkiplist Any locations that should be skipped because they could not be unlocked
 * @returns A location at which to wander
 */


function wanderWhere(options, type) {
  var nameSkiplist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var locationSkiplist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var candidate = bestWander(type, locationSkiplist, nameSkiplist, options);
  var failed = candidate.targets.filter(target => !target.prepareTurn());
  var badLocation = !(0, lib_1.canAdventureOrUnlock)(candidate.location) || !(0, lib_1.unlock)(candidate.location, candidate.value) || !(0, lib_1.canWander)(candidate.location, type) ? [candidate.location] : [];

  if (failed.length > 0 || badLocation.length > 0) {
    return wanderWhere(options, type, [].concat(_toConsumableArray(nameSkiplist), _toConsumableArray(failed.map(target => target.name))), [].concat(_toConsumableArray(locationSkiplist), badLocation));
  } else {
    var targets = candidate.targets.map(t => t.name).join("; ");
    var value = candidate.value.toFixed(2);
    (0, kolmafia_1.print)("Wandering at ".concat(candidate.location, " for expected value ").concat(value, " (").concat(targets, ")"), (0, kolmafia_1.isDarkMode)() ? "yellow" : "blue");
    return candidate.location;
  }
}

var defaultWanderOptions = {
  drunkSafe: true,
  allowEquipment: true
};

var WandererManager = /*#__PURE__*/function () {
  function WandererManager(_options) {
    _classCallCheck(this, WandererManager);

    _defineProperty(this, "unsupportedChoices", new Map([[(0, libram_1.$location)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["The Spooky Forest"]))), {
      502: 2,
      505: 2
    }], [(0, libram_1.$location)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Guano Junction"]))), {
      1427: 1
    }], [(0, libram_1.$location)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["The Hidden Apartment Building"]))), {
      780: 6,
      1578: 6
    }], [(0, libram_1.$location)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["The Black Forest"]))), {
      923: 1,
      924: 1
    }], [(0, libram_1.$location)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["LavaCo\u2122 Lamp Factory"]))), {
      1091: 9
    }], [(0, libram_1.$location)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["The Haunted Laboratory"]))), {
      884: 6
    }], [(0, libram_1.$location)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["The Haunted Nursery"]))), {
      885: 6
    }], [(0, libram_1.$location)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["The Haunted Storage Room"]))), {
      886: 6
    }], [(0, libram_1.$location)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["The Haunted Ballroom"]))), // Skip, and Choose currently playing song, or skip
    () => ({
      90: 3,
      106: (0, libram_1.get)("lastQuartetRequest") || 4
    })], [(0, libram_1.$location)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["The Haunted Library"]))), {
      163: 4,
      888: 5,
      889: 5
    }], [(0, libram_1.$location)(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["The Haunted Gallery"]))), {
      89: 6,
      91: 2
    }], [(0, libram_1.$location)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["The Hidden Park"]))), {
      789: 6
    }], [(0, libram_1.$location)(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["A Mob of Zeppelin Protesters"]))), {
      1432: 1,
      856: 2,
      857: 3,
      858: 2
    }], [(0, libram_1.$location)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["A-Boo Peak"]))), {
      1430: 2
    }], [(0, libram_1.$location)(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["Sloppy Seconds Diner"]))), {
      919: 6
    }], [(0, libram_1.$location)(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["VYKEA"]))), {
      1115: 6
    }], [(0, libram_1.$location)(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["The Ice Hotel"]))), (options, valueOfTurn) => {
      var valueOfCertificates = (0, libram_1.get)("_iceHotelRoomsRaided") ? 0 : options.itemValue((0, libram_1.$item)(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["Wal-Mart gift certificate"])))) * 3;
      return {
        1116: valueOfCertificates > valueOfTurn ? 5 : 6
      };
    }], [(0, libram_1.$location)(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["The Castle in the Clouds in the Sky (Basement)"]))), {
      669: 1,
      670: 4,
      671: 4
    }], [(0, libram_1.$location)(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["The Haunted Bedroom"]))), {
      876: 1,
      877: 1,
      878: 1,
      879: 2,
      880: 2 // a dumb 75 meat club

    }], [(0, libram_1.$location)(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["The Copperhead Club"]))), {
      855: 4
    }], [(0, libram_1.$location)(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["The Haunted Bathroom"]))), {
      882: 2
    }], [(0, libram_1.$location)(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["The Castle in the Clouds in the Sky (Top Floor)"]))), {
      1431: 1,
      675: 4,
      676: 4,
      677: 1,
      678: 3 // Go to Steampunk choice

    }], [(0, libram_1.$location)(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["The Castle in the Clouds in the Sky (Ground Floor)"]))), {
      672: 3,
      673: 3,
      674: 3,
      1026: 3 // Skip

    }], [(0, libram_1.$location)(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["The Hidden Office Building"]))), {
      786: 6
    }], [(0, libram_1.$location)(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["Cobb's Knob Barracks"]))), {
      522: 2
    }], [(0, libram_1.$location)(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["The Penultimate Fantasy Airship"]))), {
      178: 2,
      182: 1
    }], [(0, libram_1.$location)(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["The Haiku Dungeon"]))), {
      297: 3
    }], [(0, libram_1.$location)(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["Frat House"]))), {
      1425: 4
    }] // fight eXtreme Sports Orcs
    ]));

    _defineProperty(this, "equipment", new Map([].concat(_toConsumableArray(kolmafia_1.Location.all().filter(l => l.zone === "The 8-Bit Realm").map(l => [l, (0, libram_1.$items)(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["continuum transfunctioner"])))])), [[(0, libram_1.$location)(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["Shadow Rift (The 8-Bit Realm)"]))), (0, libram_1.$items)(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["continuum transfunctioner"])))]])));

    _defineProperty(this, "cacheKey", "");

    _defineProperty(this, "targets", {});

    _defineProperty(this, "options", void 0);

    this.options = _options;
  }

  _createClass(WandererManager, [{
    key: "getTarget",
    value: function getTarget(wanderer) {
      var _this$targets, _ref2, _this$targets$_ref;

      var _ref = (0, lib_1.isDraggableFight)(wanderer) ? {
        draggableFight: wanderer,
        options: {}
      } : {
        draggableFight: wanderer.wanderer,
        options: wanderer
      },
          draggableFight = _ref.draggableFight,
          options = _ref.options;

      var _defaultWanderOptions = _objectSpread(_objectSpread({}, defaultWanderOptions), options),
          drunkSafe = _defaultWanderOptions.drunkSafe,
          allowEquipment = _defaultWanderOptions.allowEquipment;

      var newKey = "".concat((0, kolmafia_1.myTotalTurnsSpent)(), ";").concat((0, kolmafia_1.totalTurnsPlayed)(), ";").concat((0, libram_1.get)("familiarSweat"));
      if (this.cacheKey !== newKey) this.clear();
      this.cacheKey = newKey;
      var locationSkipList = allowEquipment ? [] : _toConsumableArray(this.equipment.keys());
      return sober() || !drunkSafe ? (_this$targets$_ref = (_this$targets = this.targets)[_ref2 = "".concat(draggableFight, ":").concat(allowEquipment)]) !== null && _this$targets$_ref !== void 0 ? _this$targets$_ref : _this$targets[_ref2] = wanderWhere(this.options, draggableFight, [], locationSkipList) : (0, libram_1.$location)(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["Drunken Stupor"])));
    }
    /**
     * Get choice map for the upcoming wander
     * @param target Description of the wander or location in which to wander
     * @param takeTurnForProfit Should the choices include any that would make a profit from your valueOfAdventure
     * @returns Map of choice numbers to decisions
     */

  }, {
    key: "getChoices",
    value: function getChoices(target) {
      var _this$options$valueOf, _this$unsupportedChoi;

      var takeTurnForProfit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.takeTurnForProfit;
      var location = target instanceof kolmafia_1.Location ? target : this.getTarget(target);
      var valueOfTurn = takeTurnForProfit ? ((_this$options$valueOf = this.options.valueOfAdventure) !== null && _this$options$valueOf !== void 0 ? _this$options$valueOf : 0) + (0, libram_1.sum)((0, libram_1.getActiveEffects)(), e => this.options.effectValue(e, 1)) : Infinity;
      return (0, libram_1.undelay)((_this$unsupportedChoi = this.unsupportedChoices.get(location)) !== null && _this$unsupportedChoi !== void 0 ? _this$unsupportedChoi : {}, this.options, valueOfTurn);
    }
  }, {
    key: "clear",
    value: function clear() {
      this.targets = {};
    }
  }, {
    key: "getEquipment",
    value: function getEquipment(wanderer) {
      var _this$equipment$get;

      return (_this$equipment$get = this.equipment.get(this.getTarget(wanderer))) !== null && _this$equipment$get !== void 0 ? _this$equipment$get : [];
    }
  }]);

  return WandererManager;
}();

exports.WandererManager = WandererManager;

/***/ }),

/***/ 598:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27;

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bofaValue = exports.wandererTurnsAvailableToday = exports.defaultFactory = exports.WandererTarget = exports.canWander = exports.unlock = exports.canAdventureOrUnlock = exports.underwater = exports.UnlockableZones = exports.isDraggableFight = exports.draggableFights = void 0;

var kolmafia_1 = __webpack_require__(530);

var libram_1 = __webpack_require__(542);

exports.draggableFights = ["backup", "wanderer", "yellow ray", "freefight"];

function isDraggableFight(fight) {
  return exports.draggableFights.includes(fight);
}

exports.isDraggableFight = isDraggableFight;
exports.UnlockableZones = [{
  zone: "Spaaace",
  available: () => (0, libram_1.have)((0, libram_1.$effect)(_templateObject || (_templateObject = _taggedTemplateLiteral(["Transpondent"])))),
  unlocker: (0, libram_1.$item)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["transporter transponder"]))),
  noInv: false
}, {
  zone: "Wormwood",
  available: () => (0, libram_1.have)((0, libram_1.$effect)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Absinthe-Minded"])))),
  unlocker: (0, libram_1.$item)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["tiny bottle of absinthe"]))),
  noInv: false
}, {
  zone: "Rabbit Hole",
  available: () => (0, libram_1.have)((0, libram_1.$effect)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Down the Rabbit Hole"])))),
  unlocker: (0, libram_1.$item)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\"DRINK ME\" potion"]))),
  noInv: false
}, {
  zone: "Conspiracy Island",
  available: () => (0, libram_1.realmAvailable)("spooky"),
  unlocker: (0, libram_1.$item)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["one-day ticket to Conspiracy Island"]))),
  noInv: true
}, {
  zone: "Dinseylandfill",
  available: () => (0, libram_1.realmAvailable)("stench"),
  unlocker: (0, libram_1.$item)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["one-day ticket to Dinseylandfill"]))),
  noInv: true
}, {
  zone: "The Glaciest",
  available: () => (0, libram_1.realmAvailable)("cold"),
  unlocker: (0, libram_1.$item)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["one-day ticket to The Glaciest"]))),
  noInv: true
}, {
  zone: "Spring Break Beach",
  available: () => (0, libram_1.realmAvailable)("sleaze"),
  unlocker: (0, libram_1.$item)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["one-day ticket to Spring Break Beach"]))),
  noInv: true
}];

function underwater(location) {
  return location.environment === "underwater";
}

exports.underwater = underwater;
var ILLEGAL_PARENTS = ["Clan Basement", "Psychoses", "PirateRealm", "A Monorail Station"];
var ILLEGAL_ZONES = ["The Drip", "Suburbs"];
var canAdventureOrUnlockSkipList = [].concat(_toConsumableArray((0, libram_1.$locations)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["The Oasis, The Bubblin' Caldera, Barrrney's Barrr, The F'c'le, The Poop Deck, Belowdecks, Madness Bakery, The Secret Government Laboratory, The Dire Warren, Inside the Palindome, The Haiku Dungeon, An Incredibly Strange Place (Bad Trip), An Incredibly Strange Place (Mediocre Trip), An Incredibly Strange Place (Great Trip), El Vibrato Island, The Daily Dungeon, Trick-or-Treating, Seaside Megalopolis, Frat House, Through the Spacegate"])))), _toConsumableArray(kolmafia_1.Location.all().filter(_ref => {
  var parent = _ref.parent,
      zone = _ref.zone;
  return ILLEGAL_PARENTS.includes(parent) || ILLEGAL_ZONES.includes(zone);
})));

function canAdventureOrUnlock(loc) {
  var skiplist = _toConsumableArray(canAdventureOrUnlockSkipList);

  if (!(0, libram_1.have)((0, libram_1.$item)(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["repaid diaper"])))) && (0, libram_1.have)((0, libram_1.$item)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["Great Wolf's beastly trousers"]))))) {
    skiplist.push((0, libram_1.$location)(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["The Icy Peak"]))));
  }

  if (libram_1.GingerBread.minutesToNoon() === 0 || libram_1.GingerBread.minutesToMidnight() === 0) {
    skiplist.push.apply(skiplist, _toConsumableArray(libram_1.GingerBread.LOCATIONS));
  }

  var canUnlock = exports.UnlockableZones.some(z => loc.zone === z.zone && (z.available() || !z.noInv));
  return !underwater(loc) && !skiplist.includes(loc) && ((0, kolmafia_1.canAdventure)(loc) || canUnlock);
}

exports.canAdventureOrUnlock = canAdventureOrUnlock;

function unlock(loc, value) {
  var unlockableZone = exports.UnlockableZones.find(z => z.zone === loc.zone);
  if (!unlockableZone) return (0, kolmafia_1.canAdventure)(loc);
  if (unlockableZone.available()) return true;
  if ((0, kolmafia_1.buy)(1, unlockableZone.unlocker, value) === 0) return false;
  return (0, kolmafia_1.use)(unlockableZone.unlocker);
}

exports.unlock = unlock;
var backupSkiplist = (0, libram_1.$locations)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["The Overgrown Lot, The Skeleton Store, The Mansion of Dr. Weirdeaux, Professor Jacking's Huge-A-Ma-tron"]))); // These are locations where all non-combats have skips or lead to a combat.

var backupSafelist = (0, libram_1.$locations)(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["The Haunted Gallery, The Haunted Ballroom, The Haunted Library, The Penultimate Fantasy Airship, Cobb's Knob Barracks, The Castle in the Clouds in the Sky (Basement), The Castle in the Clouds in the Sky (Ground Floor), The Castle in the Clouds in the Sky (Top Floor), The Haiku Dungeon, Twin Peak, A Mob of Zeppelin Protesters, The Upper Chamber, Frat House"]))); // These are locations where all non-combats are skippable

var yellowRaySafelist = (0, libram_1.$locations)(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["The Haunted Gallery, The Haunted Ballroom, The Haunted Library, Cobb's Knob Barracks, The Castle in the Clouds in the Sky (Basement), The Castle in the Clouds in the Sky (Ground Floor), The Haiku Dungeon, Twin Peak, A Mob of Zeppelin Protesters, The Upper Chamber"])));

function canWanderTypeBackup(location) {
  return !backupSkiplist.includes(location) && (location.combatPercent >= 100 || backupSafelist.includes(location));
}

function canWanderTypeFreeFight(location) {
  if (location === (0, libram_1.$location)(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["The Fun-Guy Mansion"]))) && (0, libram_1.get)("funGuyMansionKills", 0) >= 100) {
    return false;
  }

  return !backupSkiplist.includes(location) && (location.combatPercent >= 100 || yellowRaySafelist.includes(location));
}

var wandererSkiplist = (0, libram_1.$locations)(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["The Batrat and Ratbat Burrow, Guano Junction, The Beanbat Chamber, A-Boo Peak, The Mouldering Mansion, The Rogue Windmill, The Stately Pleasure Dome, Pandamonium Slums"])));

function canWanderTypeWander(location) {
  return !wandererSkiplist.includes(location) && location.wanderers;
}

function canWander(location, type) {
  if (underwater(location)) return false;

  switch (type) {
    case "backup":
      return canWanderTypeBackup(location);

    case "freefight":
    case "yellow ray":
      return canWanderTypeFreeFight(location);

    case "wanderer":
      return canWanderTypeWander(location);
  }
}

exports.canWander = canWander;

var WandererTarget = /*#__PURE__*/_createClass(
/**
 * Process for determining where to put a wanderer to extract additional value from it
 * @param name name of this wanderer - for documentation/logging purposes
 * @param location returns the location to adventure to target this; null only if something goes wrong
 * @param value the expected additional value of putting a single wanderer-fight into the zone for this
 * @param prepareTurn attempt to set up, spending meat and or items as necessary
 */
function WandererTarget(name, location, value) {
  var prepareTurn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => true;

  _classCallCheck(this, WandererTarget);

  _defineProperty(this, "name", void 0);

  _defineProperty(this, "value", void 0);

  _defineProperty(this, "location", void 0);

  _defineProperty(this, "prepareTurn", void 0);

  this.name = name;
  this.value = value;
  this.location = location;
  this.prepareTurn = prepareTurn;
});

exports.WandererTarget = WandererTarget;

function defaultFactory() {
  return [new WandererTarget("Default", (0, libram_1.$location)(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["The Haunted Kitchen"]))), 0)];
}

exports.defaultFactory = defaultFactory;
var WanderingSources = [{
  name: "CMG",
  item: (0, libram_1.$item)(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["cursed magnifying glass"]))),
  max: 3,
  property: "_voidFreeFights",
  type: "wanderer"
}, {
  name: "Voter",
  item: (0, libram_1.$item)(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["\"I Voted!\" sticker"]))),
  max: 3,
  property: "_voteFreeFights",
  type: "wanderer"
}, {
  name: "Voter",
  item: (0, libram_1.$item)(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["\"I Voted!\" sticker"]))),
  max: 3,
  property: "_voteFreeFights",
  type: "wanderer"
}, {
  name: "Backup",
  item: (0, libram_1.$item)(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["backup camera"]))),
  max: 11,
  property: "_backUpUses",
  type: "backup"
}];

function wandererTurnsAvailableToday(options, location) {
  var canWanderCache = {
    backup: canWander(location, "backup"),
    wanderer: canWander(location, "wanderer"),
    "yellow ray": canWander(location, "yellow ray"),
    freefight: canWander(location, "freefight")
  };
  var digitize = canWanderCache["backup"] && options.digitzesRemaining ? options.digitzesRemaining(options.estimatedTurns()) : 0;
  var pigSkinnerRay = canWanderCache["backup"] && (0, libram_1.have)((0, libram_1.$skill)(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["Free-For-All"])))) ? Math.floor(options.estimatedTurns() / 25) : 0;
  var yellowRayCooldown = (0, libram_1.have)((0, libram_1.$skill)(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["Fondeluge"])))) ? 50 : 100;
  var yellowRay = canWanderCache["yellow ray"] ? Math.floor(options.estimatedTurns() / yellowRayCooldown) : 0;
  var wanderers = (0, libram_1.sum)(WanderingSources, source => canWanderCache[source.type] && (0, libram_1.have)(source.item) ? (0, libram_1.clamp)((0, libram_1.get)(source.property), 0, source.max) : 0);
  return digitize + pigSkinnerRay + yellowRay + wanderers;
}

exports.wandererTurnsAvailableToday = wandererTurnsAvailableToday;
var LIMITED_BOFA_DROPS = (0, libram_1.$items)(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["pocket wish, tattered scrap of paper"])));

function bofaValue(_ref2, monster) {
  var plentifulMonsters = _ref2.plentifulMonsters,
      itemValue = _ref2.itemValue,
      effectValue = _ref2.effectValue;

  switch (monster.factType) {
    case "item":
      {
        var item = (0, kolmafia_1.itemFact)(monster);
        var quantity = (0, kolmafia_1.numericFact)(monster);

        if (LIMITED_BOFA_DROPS.includes(item) && plentifulMonsters.some(monster => (0, kolmafia_1.toItem)(monster.fact) === item)) {
          return 0;
        }

        return quantity * itemValue(item);
      }

    case "effect":
      {
        var effect = (0, kolmafia_1.effectFact)(monster);
        var duration = (0, kolmafia_1.numericFact)(monster);
        return effectValue(effect, duration);
      }

    case "meat":
      {
        return (0, kolmafia_1.numericFact)(monster);
      }

    default:
      return 0;
  }
}

exports.bofaValue = bofaValue;

/***/ }),

/***/ 401:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.lovebugsFactory = void 0;

var libram_1 = __webpack_require__(542);

var lib_1 = __webpack_require__(598);

var LovebugTargets = [// exclude barf mountain because we spend most of our turns there anyway
{
  element: "cold",
  location: (0, libram_1.$location)(_templateObject || (_templateObject = _taggedTemplateLiteral(["VYKEA"]))),
  currency: (0, libram_1.$item)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Wal-Mart gift certificate"])))
}, {
  element: "sleaze",
  location: (0, libram_1.$location)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["The Fun-Guy Mansion"]))),
  currency: (0, libram_1.$item)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Beach Buck"])))
}, {
  element: "spooky",
  location: (0, libram_1.$location)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["The Deep Dark Jungle"]))),
  currency: (0, libram_1.$item)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Coinspiracy"])))
}];

function lovebugsFactory(_type, _locationSkiplist, options) {
  if ((0, libram_1.get)("lovebugsUnlocked")) {
    return LovebugTargets.filter(t => (0, libram_1.realmAvailable)(t.element)).map(t => new lib_1.WandererTarget("Lovebugs ".concat(t.location), t.location, options.itemValue(t.currency) * 0.05));
  }

  return [];
}

exports.lovebugsFactory = lovebugsFactory;

/***/ }),

/***/ 607:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {



var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var named_references_1 = __webpack_require__(554);

var numeric_unicode_map_1 = __webpack_require__(255);

var surrogate_pairs_1 = __webpack_require__(608);

var allNamedReferences = __assign(__assign({}, named_references_1.namedReferences), {
  all: named_references_1.namedReferences.html5
});

function replaceUsingRegExp(macroText, macroRegExp, macroReplacer) {
  macroRegExp.lastIndex = 0;
  var replaceMatch = macroRegExp.exec(macroText);
  var replaceResult;

  if (replaceMatch) {
    replaceResult = "";
    var replaceLastIndex = 0;

    do {
      if (replaceLastIndex !== replaceMatch.index) {
        replaceResult += macroText.substring(replaceLastIndex, replaceMatch.index);
      }

      var replaceInput = replaceMatch[0];
      replaceResult += macroReplacer(replaceInput);
      replaceLastIndex = replaceMatch.index + replaceInput.length;
    } while (replaceMatch = macroRegExp.exec(macroText));

    if (replaceLastIndex !== macroText.length) {
      replaceResult += macroText.substring(replaceLastIndex);
    }
  } else {
    replaceResult = macroText;
  }

  return replaceResult;
}

var encodeRegExps = {
  specialChars: /[<>'"&]/g,
  nonAscii: /[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,
  nonAsciiPrintable: /[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,
  nonAsciiPrintableOnly: /[\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,
  extensive: /[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g
};
var defaultEncodeOptions = {
  mode: "specialChars",
  level: "all",
  numeric: "decimal"
};

function encode(text, _a) {
  var _b = _a === void 0 ? defaultEncodeOptions : _a,
      _c = _b.mode,
      mode = _c === void 0 ? "specialChars" : _c,
      _d = _b.numeric,
      numeric = _d === void 0 ? "decimal" : _d,
      _e = _b.level,
      level = _e === void 0 ? "all" : _e;

  if (!text) {
    return "";
  }

  var encodeRegExp = encodeRegExps[mode];
  var references = allNamedReferences[level].characters;
  var isHex = numeric === "hexadecimal";
  return replaceUsingRegExp(text, encodeRegExp, function (input) {
    var result = references[input];

    if (!result) {
      var code = input.length > 1 ? surrogate_pairs_1.getCodePoint(input, 0) : input.charCodeAt(0);
      result = (isHex ? "&#x" + code.toString(16) : "&#" + code) + ";";
    }

    return result;
  });
}

exports.encode = encode;
var defaultDecodeOptions = {
  scope: "body",
  level: "all"
};
var strict = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g;
var attribute = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;
var baseDecodeRegExps = {
  xml: {
    strict: strict,
    attribute: attribute,
    body: named_references_1.bodyRegExps.xml
  },
  html4: {
    strict: strict,
    attribute: attribute,
    body: named_references_1.bodyRegExps.html4
  },
  html5: {
    strict: strict,
    attribute: attribute,
    body: named_references_1.bodyRegExps.html5
  }
};

var decodeRegExps = __assign(__assign({}, baseDecodeRegExps), {
  all: baseDecodeRegExps.html5
});

var fromCharCode = String.fromCharCode;
var outOfBoundsChar = fromCharCode(65533);
var defaultDecodeEntityOptions = {
  level: "all"
};

function getDecodedEntity(entity, references, isAttribute, isStrict) {
  var decodeResult = entity;
  var decodeEntityLastChar = entity[entity.length - 1];

  if (isAttribute && decodeEntityLastChar === "=") {
    decodeResult = entity;
  } else if (isStrict && decodeEntityLastChar !== ";") {
    decodeResult = entity;
  } else {
    var decodeResultByReference = references[entity];

    if (decodeResultByReference) {
      decodeResult = decodeResultByReference;
    } else if (entity[0] === "&" && entity[1] === "#") {
      var decodeSecondChar = entity[2];
      var decodeCode = decodeSecondChar == "x" || decodeSecondChar == "X" ? parseInt(entity.substr(3), 16) : parseInt(entity.substr(2));
      decodeResult = decodeCode >= 1114111 ? outOfBoundsChar : decodeCode > 65535 ? surrogate_pairs_1.fromCodePoint(decodeCode) : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode] || decodeCode);
    }
  }

  return decodeResult;
}

function decodeEntity(entity, _a) {
  var _b = (_a === void 0 ? defaultDecodeEntityOptions : _a).level,
      level = _b === void 0 ? "all" : _b;

  if (!entity) {
    return "";
  }

  return getDecodedEntity(entity, allNamedReferences[level].entities, false, false);
}

exports.decodeEntity = decodeEntity;

function decode(text, _a) {
  var _b = _a === void 0 ? defaultDecodeOptions : _a,
      _c = _b.level,
      level = _c === void 0 ? "all" : _c,
      _d = _b.scope,
      scope = _d === void 0 ? level === "xml" ? "strict" : "body" : _d;

  if (!text) {
    return "";
  }

  var decodeRegExp = decodeRegExps[level][scope];
  var references = allNamedReferences[level].entities;
  var isAttribute = scope === "attribute";
  var isStrict = scope === "strict";
  return replaceUsingRegExp(text, decodeRegExp, function (entity) {
    return getDecodedEntity(entity, references, isAttribute, isStrict);
  });
}

exports.decode = decode;

/***/ }),

/***/ 554:
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bodyRegExps = {
  xml: /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,
  html4: /&notin;|&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,
  html5: /&centerdot;|&copysr;|&divideontimes;|&gtcc;|&gtcir;|&gtdot;|&gtlPar;|&gtquest;|&gtrapprox;|&gtrarr;|&gtrdot;|&gtreqless;|&gtreqqless;|&gtrless;|&gtrsim;|&ltcc;|&ltcir;|&ltdot;|&lthree;|&ltimes;|&ltlarr;|&ltquest;|&ltrPar;|&ltri;|&ltrie;|&ltrif;|&notin;|&notinE;|&notindot;|&notinva;|&notinvb;|&notinvc;|&notni;|&notniva;|&notnivb;|&notnivc;|&parallel;|&timesb;|&timesbar;|&timesd;|&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g
};
exports.namedReferences = {
  xml: {
    entities: {
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&apos;": "'",
      "&amp;": "&"
    },
    characters: {
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&apos;",
      "&": "&amp;"
    }
  },
  html4: {
    entities: {
      "&apos;": "'",
      "&nbsp": " ",
      "&nbsp;": " ",
      "&iexcl": "¡",
      "&iexcl;": "¡",
      "&cent": "¢",
      "&cent;": "¢",
      "&pound": "£",
      "&pound;": "£",
      "&curren": "¤",
      "&curren;": "¤",
      "&yen": "¥",
      "&yen;": "¥",
      "&brvbar": "¦",
      "&brvbar;": "¦",
      "&sect": "§",
      "&sect;": "§",
      "&uml": "¨",
      "&uml;": "¨",
      "&copy": "©",
      "&copy;": "©",
      "&ordf": "ª",
      "&ordf;": "ª",
      "&laquo": "«",
      "&laquo;": "«",
      "&not": "¬",
      "&not;": "¬",
      "&shy": "­",
      "&shy;": "­",
      "&reg": "®",
      "&reg;": "®",
      "&macr": "¯",
      "&macr;": "¯",
      "&deg": "°",
      "&deg;": "°",
      "&plusmn": "±",
      "&plusmn;": "±",
      "&sup2": "²",
      "&sup2;": "²",
      "&sup3": "³",
      "&sup3;": "³",
      "&acute": "´",
      "&acute;": "´",
      "&micro": "µ",
      "&micro;": "µ",
      "&para": "¶",
      "&para;": "¶",
      "&middot": "·",
      "&middot;": "·",
      "&cedil": "¸",
      "&cedil;": "¸",
      "&sup1": "¹",
      "&sup1;": "¹",
      "&ordm": "º",
      "&ordm;": "º",
      "&raquo": "»",
      "&raquo;": "»",
      "&frac14": "¼",
      "&frac14;": "¼",
      "&frac12": "½",
      "&frac12;": "½",
      "&frac34": "¾",
      "&frac34;": "¾",
      "&iquest": "¿",
      "&iquest;": "¿",
      "&Agrave": "À",
      "&Agrave;": "À",
      "&Aacute": "Á",
      "&Aacute;": "Á",
      "&Acirc": "Â",
      "&Acirc;": "Â",
      "&Atilde": "Ã",
      "&Atilde;": "Ã",
      "&Auml": "Ä",
      "&Auml;": "Ä",
      "&Aring": "Å",
      "&Aring;": "Å",
      "&AElig": "Æ",
      "&AElig;": "Æ",
      "&Ccedil": "Ç",
      "&Ccedil;": "Ç",
      "&Egrave": "È",
      "&Egrave;": "È",
      "&Eacute": "É",
      "&Eacute;": "É",
      "&Ecirc": "Ê",
      "&Ecirc;": "Ê",
      "&Euml": "Ë",
      "&Euml;": "Ë",
      "&Igrave": "Ì",
      "&Igrave;": "Ì",
      "&Iacute": "Í",
      "&Iacute;": "Í",
      "&Icirc": "Î",
      "&Icirc;": "Î",
      "&Iuml": "Ï",
      "&Iuml;": "Ï",
      "&ETH": "Ð",
      "&ETH;": "Ð",
      "&Ntilde": "Ñ",
      "&Ntilde;": "Ñ",
      "&Ograve": "Ò",
      "&Ograve;": "Ò",
      "&Oacute": "Ó",
      "&Oacute;": "Ó",
      "&Ocirc": "Ô",
      "&Ocirc;": "Ô",
      "&Otilde": "Õ",
      "&Otilde;": "Õ",
      "&Ouml": "Ö",
      "&Ouml;": "Ö",
      "&times": "×",
      "&times;": "×",
      "&Oslash": "Ø",
      "&Oslash;": "Ø",
      "&Ugrave": "Ù",
      "&Ugrave;": "Ù",
      "&Uacute": "Ú",
      "&Uacute;": "Ú",
      "&Ucirc": "Û",
      "&Ucirc;": "Û",
      "&Uuml": "Ü",
      "&Uuml;": "Ü",
      "&Yacute": "Ý",
      "&Yacute;": "Ý",
      "&THORN": "Þ",
      "&THORN;": "Þ",
      "&szlig": "ß",
      "&szlig;": "ß",
      "&agrave": "à",
      "&agrave;": "à",
      "&aacute": "á",
      "&aacute;": "á",
      "&acirc": "â",
      "&acirc;": "â",
      "&atilde": "ã",
      "&atilde;": "ã",
      "&auml": "ä",
      "&auml;": "ä",
      "&aring": "å",
      "&aring;": "å",
      "&aelig": "æ",
      "&aelig;": "æ",
      "&ccedil": "ç",
      "&ccedil;": "ç",
      "&egrave": "è",
      "&egrave;": "è",
      "&eacute": "é",
      "&eacute;": "é",
      "&ecirc": "ê",
      "&ecirc;": "ê",
      "&euml": "ë",
      "&euml;": "ë",
      "&igrave": "ì",
      "&igrave;": "ì",
      "&iacute": "í",
      "&iacute;": "í",
      "&icirc": "î",
      "&icirc;": "î",
      "&iuml": "ï",
      "&iuml;": "ï",
      "&eth": "ð",
      "&eth;": "ð",
      "&ntilde": "ñ",
      "&ntilde;": "ñ",
      "&ograve": "ò",
      "&ograve;": "ò",
      "&oacute": "ó",
      "&oacute;": "ó",
      "&ocirc": "ô",
      "&ocirc;": "ô",
      "&otilde": "õ",
      "&otilde;": "õ",
      "&ouml": "ö",
      "&ouml;": "ö",
      "&divide": "÷",
      "&divide;": "÷",
      "&oslash": "ø",
      "&oslash;": "ø",
      "&ugrave": "ù",
      "&ugrave;": "ù",
      "&uacute": "ú",
      "&uacute;": "ú",
      "&ucirc": "û",
      "&ucirc;": "û",
      "&uuml": "ü",
      "&uuml;": "ü",
      "&yacute": "ý",
      "&yacute;": "ý",
      "&thorn": "þ",
      "&thorn;": "þ",
      "&yuml": "ÿ",
      "&yuml;": "ÿ",
      "&quot": '"',
      "&quot;": '"',
      "&amp": "&",
      "&amp;": "&",
      "&lt": "<",
      "&lt;": "<",
      "&gt": ">",
      "&gt;": ">",
      "&OElig;": "Œ",
      "&oelig;": "œ",
      "&Scaron;": "Š",
      "&scaron;": "š",
      "&Yuml;": "Ÿ",
      "&circ;": "ˆ",
      "&tilde;": "˜",
      "&ensp;": " ",
      "&emsp;": " ",
      "&thinsp;": " ",
      "&zwnj;": "‌",
      "&zwj;": "‍",
      "&lrm;": "‎",
      "&rlm;": "‏",
      "&ndash;": "–",
      "&mdash;": "—",
      "&lsquo;": "‘",
      "&rsquo;": "’",
      "&sbquo;": "‚",
      "&ldquo;": "“",
      "&rdquo;": "”",
      "&bdquo;": "„",
      "&dagger;": "†",
      "&Dagger;": "‡",
      "&permil;": "‰",
      "&lsaquo;": "‹",
      "&rsaquo;": "›",
      "&euro;": "€",
      "&fnof;": "ƒ",
      "&Alpha;": "Α",
      "&Beta;": "Β",
      "&Gamma;": "Γ",
      "&Delta;": "Δ",
      "&Epsilon;": "Ε",
      "&Zeta;": "Ζ",
      "&Eta;": "Η",
      "&Theta;": "Θ",
      "&Iota;": "Ι",
      "&Kappa;": "Κ",
      "&Lambda;": "Λ",
      "&Mu;": "Μ",
      "&Nu;": "Ν",
      "&Xi;": "Ξ",
      "&Omicron;": "Ο",
      "&Pi;": "Π",
      "&Rho;": "Ρ",
      "&Sigma;": "Σ",
      "&Tau;": "Τ",
      "&Upsilon;": "Υ",
      "&Phi;": "Φ",
      "&Chi;": "Χ",
      "&Psi;": "Ψ",
      "&Omega;": "Ω",
      "&alpha;": "α",
      "&beta;": "β",
      "&gamma;": "γ",
      "&delta;": "δ",
      "&epsilon;": "ε",
      "&zeta;": "ζ",
      "&eta;": "η",
      "&theta;": "θ",
      "&iota;": "ι",
      "&kappa;": "κ",
      "&lambda;": "λ",
      "&mu;": "μ",
      "&nu;": "ν",
      "&xi;": "ξ",
      "&omicron;": "ο",
      "&pi;": "π",
      "&rho;": "ρ",
      "&sigmaf;": "ς",
      "&sigma;": "σ",
      "&tau;": "τ",
      "&upsilon;": "υ",
      "&phi;": "φ",
      "&chi;": "χ",
      "&psi;": "ψ",
      "&omega;": "ω",
      "&thetasym;": "ϑ",
      "&upsih;": "ϒ",
      "&piv;": "ϖ",
      "&bull;": "•",
      "&hellip;": "…",
      "&prime;": "′",
      "&Prime;": "″",
      "&oline;": "‾",
      "&frasl;": "⁄",
      "&weierp;": "℘",
      "&image;": "ℑ",
      "&real;": "ℜ",
      "&trade;": "™",
      "&alefsym;": "ℵ",
      "&larr;": "←",
      "&uarr;": "↑",
      "&rarr;": "→",
      "&darr;": "↓",
      "&harr;": "↔",
      "&crarr;": "↵",
      "&lArr;": "⇐",
      "&uArr;": "⇑",
      "&rArr;": "⇒",
      "&dArr;": "⇓",
      "&hArr;": "⇔",
      "&forall;": "∀",
      "&part;": "∂",
      "&exist;": "∃",
      "&empty;": "∅",
      "&nabla;": "∇",
      "&isin;": "∈",
      "&notin;": "∉",
      "&ni;": "∋",
      "&prod;": "∏",
      "&sum;": "∑",
      "&minus;": "−",
      "&lowast;": "∗",
      "&radic;": "√",
      "&prop;": "∝",
      "&infin;": "∞",
      "&ang;": "∠",
      "&and;": "∧",
      "&or;": "∨",
      "&cap;": "∩",
      "&cup;": "∪",
      "&int;": "∫",
      "&there4;": "∴",
      "&sim;": "∼",
      "&cong;": "≅",
      "&asymp;": "≈",
      "&ne;": "≠",
      "&equiv;": "≡",
      "&le;": "≤",
      "&ge;": "≥",
      "&sub;": "⊂",
      "&sup;": "⊃",
      "&nsub;": "⊄",
      "&sube;": "⊆",
      "&supe;": "⊇",
      "&oplus;": "⊕",
      "&otimes;": "⊗",
      "&perp;": "⊥",
      "&sdot;": "⋅",
      "&lceil;": "⌈",
      "&rceil;": "⌉",
      "&lfloor;": "⌊",
      "&rfloor;": "⌋",
      "&lang;": "〈",
      "&rang;": "〉",
      "&loz;": "◊",
      "&spades;": "♠",
      "&clubs;": "♣",
      "&hearts;": "♥",
      "&diams;": "♦"
    },
    characters: {
      "'": "&apos;",
      " ": "&nbsp;",
      "¡": "&iexcl;",
      "¢": "&cent;",
      "£": "&pound;",
      "¤": "&curren;",
      "¥": "&yen;",
      "¦": "&brvbar;",
      "§": "&sect;",
      "¨": "&uml;",
      "©": "&copy;",
      "ª": "&ordf;",
      "«": "&laquo;",
      "¬": "&not;",
      "­": "&shy;",
      "®": "&reg;",
      "¯": "&macr;",
      "°": "&deg;",
      "±": "&plusmn;",
      "²": "&sup2;",
      "³": "&sup3;",
      "´": "&acute;",
      "µ": "&micro;",
      "¶": "&para;",
      "·": "&middot;",
      "¸": "&cedil;",
      "¹": "&sup1;",
      "º": "&ordm;",
      "»": "&raquo;",
      "¼": "&frac14;",
      "½": "&frac12;",
      "¾": "&frac34;",
      "¿": "&iquest;",
      "À": "&Agrave;",
      "Á": "&Aacute;",
      "Â": "&Acirc;",
      "Ã": "&Atilde;",
      "Ä": "&Auml;",
      "Å": "&Aring;",
      "Æ": "&AElig;",
      "Ç": "&Ccedil;",
      "È": "&Egrave;",
      "É": "&Eacute;",
      "Ê": "&Ecirc;",
      "Ë": "&Euml;",
      "Ì": "&Igrave;",
      "Í": "&Iacute;",
      "Î": "&Icirc;",
      "Ï": "&Iuml;",
      "Ð": "&ETH;",
      "Ñ": "&Ntilde;",
      "Ò": "&Ograve;",
      "Ó": "&Oacute;",
      "Ô": "&Ocirc;",
      "Õ": "&Otilde;",
      "Ö": "&Ouml;",
      "×": "&times;",
      "Ø": "&Oslash;",
      "Ù": "&Ugrave;",
      "Ú": "&Uacute;",
      "Û": "&Ucirc;",
      "Ü": "&Uuml;",
      "Ý": "&Yacute;",
      "Þ": "&THORN;",
      "ß": "&szlig;",
      "à": "&agrave;",
      "á": "&aacute;",
      "â": "&acirc;",
      "ã": "&atilde;",
      "ä": "&auml;",
      "å": "&aring;",
      "æ": "&aelig;",
      "ç": "&ccedil;",
      "è": "&egrave;",
      "é": "&eacute;",
      "ê": "&ecirc;",
      "ë": "&euml;",
      "ì": "&igrave;",
      "í": "&iacute;",
      "î": "&icirc;",
      "ï": "&iuml;",
      "ð": "&eth;",
      "ñ": "&ntilde;",
      "ò": "&ograve;",
      "ó": "&oacute;",
      "ô": "&ocirc;",
      "õ": "&otilde;",
      "ö": "&ouml;",
      "÷": "&divide;",
      "ø": "&oslash;",
      "ù": "&ugrave;",
      "ú": "&uacute;",
      "û": "&ucirc;",
      "ü": "&uuml;",
      "ý": "&yacute;",
      "þ": "&thorn;",
      "ÿ": "&yuml;",
      '"': "&quot;",
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      "Œ": "&OElig;",
      "œ": "&oelig;",
      "Š": "&Scaron;",
      "š": "&scaron;",
      "Ÿ": "&Yuml;",
      "ˆ": "&circ;",
      "˜": "&tilde;",
      " ": "&ensp;",
      " ": "&emsp;",
      " ": "&thinsp;",
      "‌": "&zwnj;",
      "‍": "&zwj;",
      "‎": "&lrm;",
      "‏": "&rlm;",
      "–": "&ndash;",
      "—": "&mdash;",
      "‘": "&lsquo;",
      "’": "&rsquo;",
      "‚": "&sbquo;",
      "“": "&ldquo;",
      "”": "&rdquo;",
      "„": "&bdquo;",
      "†": "&dagger;",
      "‡": "&Dagger;",
      "‰": "&permil;",
      "‹": "&lsaquo;",
      "›": "&rsaquo;",
      "€": "&euro;",
      "ƒ": "&fnof;",
      "Α": "&Alpha;",
      "Β": "&Beta;",
      "Γ": "&Gamma;",
      "Δ": "&Delta;",
      "Ε": "&Epsilon;",
      "Ζ": "&Zeta;",
      "Η": "&Eta;",
      "Θ": "&Theta;",
      "Ι": "&Iota;",
      "Κ": "&Kappa;",
      "Λ": "&Lambda;",
      "Μ": "&Mu;",
      "Ν": "&Nu;",
      "Ξ": "&Xi;",
      "Ο": "&Omicron;",
      "Π": "&Pi;",
      "Ρ": "&Rho;",
      "Σ": "&Sigma;",
      "Τ": "&Tau;",
      "Υ": "&Upsilon;",
      "Φ": "&Phi;",
      "Χ": "&Chi;",
      "Ψ": "&Psi;",
      "Ω": "&Omega;",
      "α": "&alpha;",
      "β": "&beta;",
      "γ": "&gamma;",
      "δ": "&delta;",
      "ε": "&epsilon;",
      "ζ": "&zeta;",
      "η": "&eta;",
      "θ": "&theta;",
      "ι": "&iota;",
      "κ": "&kappa;",
      "λ": "&lambda;",
      "μ": "&mu;",
      "ν": "&nu;",
      "ξ": "&xi;",
      "ο": "&omicron;",
      "π": "&pi;",
      "ρ": "&rho;",
      "ς": "&sigmaf;",
      "σ": "&sigma;",
      "τ": "&tau;",
      "υ": "&upsilon;",
      "φ": "&phi;",
      "χ": "&chi;",
      "ψ": "&psi;",
      "ω": "&omega;",
      "ϑ": "&thetasym;",
      "ϒ": "&upsih;",
      "ϖ": "&piv;",
      "•": "&bull;",
      "…": "&hellip;",
      "′": "&prime;",
      "″": "&Prime;",
      "‾": "&oline;",
      "⁄": "&frasl;",
      "℘": "&weierp;",
      "ℑ": "&image;",
      "ℜ": "&real;",
      "™": "&trade;",
      "ℵ": "&alefsym;",
      "←": "&larr;",
      "↑": "&uarr;",
      "→": "&rarr;",
      "↓": "&darr;",
      "↔": "&harr;",
      "↵": "&crarr;",
      "⇐": "&lArr;",
      "⇑": "&uArr;",
      "⇒": "&rArr;",
      "⇓": "&dArr;",
      "⇔": "&hArr;",
      "∀": "&forall;",
      "∂": "&part;",
      "∃": "&exist;",
      "∅": "&empty;",
      "∇": "&nabla;",
      "∈": "&isin;",
      "∉": "&notin;",
      "∋": "&ni;",
      "∏": "&prod;",
      "∑": "&sum;",
      "−": "&minus;",
      "∗": "&lowast;",
      "√": "&radic;",
      "∝": "&prop;",
      "∞": "&infin;",
      "∠": "&ang;",
      "∧": "&and;",
      "∨": "&or;",
      "∩": "&cap;",
      "∪": "&cup;",
      "∫": "&int;",
      "∴": "&there4;",
      "∼": "&sim;",
      "≅": "&cong;",
      "≈": "&asymp;",
      "≠": "&ne;",
      "≡": "&equiv;",
      "≤": "&le;",
      "≥": "&ge;",
      "⊂": "&sub;",
      "⊃": "&sup;",
      "⊄": "&nsub;",
      "⊆": "&sube;",
      "⊇": "&supe;",
      "⊕": "&oplus;",
      "⊗": "&otimes;",
      "⊥": "&perp;",
      "⋅": "&sdot;",
      "⌈": "&lceil;",
      "⌉": "&rceil;",
      "⌊": "&lfloor;",
      "⌋": "&rfloor;",
      "〈": "&lang;",
      "〉": "&rang;",
      "◊": "&loz;",
      "♠": "&spades;",
      "♣": "&clubs;",
      "♥": "&hearts;",
      "♦": "&diams;"
    }
  },
  html5: {
    entities: {
      "&AElig": "Æ",
      "&AElig;": "Æ",
      "&AMP": "&",
      "&AMP;": "&",
      "&Aacute": "Á",
      "&Aacute;": "Á",
      "&Abreve;": "Ă",
      "&Acirc": "Â",
      "&Acirc;": "Â",
      "&Acy;": "А",
      "&Afr;": "𝔄",
      "&Agrave": "À",
      "&Agrave;": "À",
      "&Alpha;": "Α",
      "&Amacr;": "Ā",
      "&And;": "⩓",
      "&Aogon;": "Ą",
      "&Aopf;": "𝔸",
      "&ApplyFunction;": "⁡",
      "&Aring": "Å",
      "&Aring;": "Å",
      "&Ascr;": "𝒜",
      "&Assign;": "≔",
      "&Atilde": "Ã",
      "&Atilde;": "Ã",
      "&Auml": "Ä",
      "&Auml;": "Ä",
      "&Backslash;": "∖",
      "&Barv;": "⫧",
      "&Barwed;": "⌆",
      "&Bcy;": "Б",
      "&Because;": "∵",
      "&Bernoullis;": "ℬ",
      "&Beta;": "Β",
      "&Bfr;": "𝔅",
      "&Bopf;": "𝔹",
      "&Breve;": "˘",
      "&Bscr;": "ℬ",
      "&Bumpeq;": "≎",
      "&CHcy;": "Ч",
      "&COPY": "©",
      "&COPY;": "©",
      "&Cacute;": "Ć",
      "&Cap;": "⋒",
      "&CapitalDifferentialD;": "ⅅ",
      "&Cayleys;": "ℭ",
      "&Ccaron;": "Č",
      "&Ccedil": "Ç",
      "&Ccedil;": "Ç",
      "&Ccirc;": "Ĉ",
      "&Cconint;": "∰",
      "&Cdot;": "Ċ",
      "&Cedilla;": "¸",
      "&CenterDot;": "·",
      "&Cfr;": "ℭ",
      "&Chi;": "Χ",
      "&CircleDot;": "⊙",
      "&CircleMinus;": "⊖",
      "&CirclePlus;": "⊕",
      "&CircleTimes;": "⊗",
      "&ClockwiseContourIntegral;": "∲",
      "&CloseCurlyDoubleQuote;": "”",
      "&CloseCurlyQuote;": "’",
      "&Colon;": "∷",
      "&Colone;": "⩴",
      "&Congruent;": "≡",
      "&Conint;": "∯",
      "&ContourIntegral;": "∮",
      "&Copf;": "ℂ",
      "&Coproduct;": "∐",
      "&CounterClockwiseContourIntegral;": "∳",
      "&Cross;": "⨯",
      "&Cscr;": "𝒞",
      "&Cup;": "⋓",
      "&CupCap;": "≍",
      "&DD;": "ⅅ",
      "&DDotrahd;": "⤑",
      "&DJcy;": "Ђ",
      "&DScy;": "Ѕ",
      "&DZcy;": "Џ",
      "&Dagger;": "‡",
      "&Darr;": "↡",
      "&Dashv;": "⫤",
      "&Dcaron;": "Ď",
      "&Dcy;": "Д",
      "&Del;": "∇",
      "&Delta;": "Δ",
      "&Dfr;": "𝔇",
      "&DiacriticalAcute;": "´",
      "&DiacriticalDot;": "˙",
      "&DiacriticalDoubleAcute;": "˝",
      "&DiacriticalGrave;": "`",
      "&DiacriticalTilde;": "˜",
      "&Diamond;": "⋄",
      "&DifferentialD;": "ⅆ",
      "&Dopf;": "𝔻",
      "&Dot;": "¨",
      "&DotDot;": "⃜",
      "&DotEqual;": "≐",
      "&DoubleContourIntegral;": "∯",
      "&DoubleDot;": "¨",
      "&DoubleDownArrow;": "⇓",
      "&DoubleLeftArrow;": "⇐",
      "&DoubleLeftRightArrow;": "⇔",
      "&DoubleLeftTee;": "⫤",
      "&DoubleLongLeftArrow;": "⟸",
      "&DoubleLongLeftRightArrow;": "⟺",
      "&DoubleLongRightArrow;": "⟹",
      "&DoubleRightArrow;": "⇒",
      "&DoubleRightTee;": "⊨",
      "&DoubleUpArrow;": "⇑",
      "&DoubleUpDownArrow;": "⇕",
      "&DoubleVerticalBar;": "∥",
      "&DownArrow;": "↓",
      "&DownArrowBar;": "⤓",
      "&DownArrowUpArrow;": "⇵",
      "&DownBreve;": "̑",
      "&DownLeftRightVector;": "⥐",
      "&DownLeftTeeVector;": "⥞",
      "&DownLeftVector;": "↽",
      "&DownLeftVectorBar;": "⥖",
      "&DownRightTeeVector;": "⥟",
      "&DownRightVector;": "⇁",
      "&DownRightVectorBar;": "⥗",
      "&DownTee;": "⊤",
      "&DownTeeArrow;": "↧",
      "&Downarrow;": "⇓",
      "&Dscr;": "𝒟",
      "&Dstrok;": "Đ",
      "&ENG;": "Ŋ",
      "&ETH": "Ð",
      "&ETH;": "Ð",
      "&Eacute": "É",
      "&Eacute;": "É",
      "&Ecaron;": "Ě",
      "&Ecirc": "Ê",
      "&Ecirc;": "Ê",
      "&Ecy;": "Э",
      "&Edot;": "Ė",
      "&Efr;": "𝔈",
      "&Egrave": "È",
      "&Egrave;": "È",
      "&Element;": "∈",
      "&Emacr;": "Ē",
      "&EmptySmallSquare;": "◻",
      "&EmptyVerySmallSquare;": "▫",
      "&Eogon;": "Ę",
      "&Eopf;": "𝔼",
      "&Epsilon;": "Ε",
      "&Equal;": "⩵",
      "&EqualTilde;": "≂",
      "&Equilibrium;": "⇌",
      "&Escr;": "ℰ",
      "&Esim;": "⩳",
      "&Eta;": "Η",
      "&Euml": "Ë",
      "&Euml;": "Ë",
      "&Exists;": "∃",
      "&ExponentialE;": "ⅇ",
      "&Fcy;": "Ф",
      "&Ffr;": "𝔉",
      "&FilledSmallSquare;": "◼",
      "&FilledVerySmallSquare;": "▪",
      "&Fopf;": "𝔽",
      "&ForAll;": "∀",
      "&Fouriertrf;": "ℱ",
      "&Fscr;": "ℱ",
      "&GJcy;": "Ѓ",
      "&GT": ">",
      "&GT;": ">",
      "&Gamma;": "Γ",
      "&Gammad;": "Ϝ",
      "&Gbreve;": "Ğ",
      "&Gcedil;": "Ģ",
      "&Gcirc;": "Ĝ",
      "&Gcy;": "Г",
      "&Gdot;": "Ġ",
      "&Gfr;": "𝔊",
      "&Gg;": "⋙",
      "&Gopf;": "𝔾",
      "&GreaterEqual;": "≥",
      "&GreaterEqualLess;": "⋛",
      "&GreaterFullEqual;": "≧",
      "&GreaterGreater;": "⪢",
      "&GreaterLess;": "≷",
      "&GreaterSlantEqual;": "⩾",
      "&GreaterTilde;": "≳",
      "&Gscr;": "𝒢",
      "&Gt;": "≫",
      "&HARDcy;": "Ъ",
      "&Hacek;": "ˇ",
      "&Hat;": "^",
      "&Hcirc;": "Ĥ",
      "&Hfr;": "ℌ",
      "&HilbertSpace;": "ℋ",
      "&Hopf;": "ℍ",
      "&HorizontalLine;": "─",
      "&Hscr;": "ℋ",
      "&Hstrok;": "Ħ",
      "&HumpDownHump;": "≎",
      "&HumpEqual;": "≏",
      "&IEcy;": "Е",
      "&IJlig;": "Ĳ",
      "&IOcy;": "Ё",
      "&Iacute": "Í",
      "&Iacute;": "Í",
      "&Icirc": "Î",
      "&Icirc;": "Î",
      "&Icy;": "И",
      "&Idot;": "İ",
      "&Ifr;": "ℑ",
      "&Igrave": "Ì",
      "&Igrave;": "Ì",
      "&Im;": "ℑ",
      "&Imacr;": "Ī",
      "&ImaginaryI;": "ⅈ",
      "&Implies;": "⇒",
      "&Int;": "∬",
      "&Integral;": "∫",
      "&Intersection;": "⋂",
      "&InvisibleComma;": "⁣",
      "&InvisibleTimes;": "⁢",
      "&Iogon;": "Į",
      "&Iopf;": "𝕀",
      "&Iota;": "Ι",
      "&Iscr;": "ℐ",
      "&Itilde;": "Ĩ",
      "&Iukcy;": "І",
      "&Iuml": "Ï",
      "&Iuml;": "Ï",
      "&Jcirc;": "Ĵ",
      "&Jcy;": "Й",
      "&Jfr;": "𝔍",
      "&Jopf;": "𝕁",
      "&Jscr;": "𝒥",
      "&Jsercy;": "Ј",
      "&Jukcy;": "Є",
      "&KHcy;": "Х",
      "&KJcy;": "Ќ",
      "&Kappa;": "Κ",
      "&Kcedil;": "Ķ",
      "&Kcy;": "К",
      "&Kfr;": "𝔎",
      "&Kopf;": "𝕂",
      "&Kscr;": "𝒦",
      "&LJcy;": "Љ",
      "&LT": "<",
      "&LT;": "<",
      "&Lacute;": "Ĺ",
      "&Lambda;": "Λ",
      "&Lang;": "⟪",
      "&Laplacetrf;": "ℒ",
      "&Larr;": "↞",
      "&Lcaron;": "Ľ",
      "&Lcedil;": "Ļ",
      "&Lcy;": "Л",
      "&LeftAngleBracket;": "⟨",
      "&LeftArrow;": "←",
      "&LeftArrowBar;": "⇤",
      "&LeftArrowRightArrow;": "⇆",
      "&LeftCeiling;": "⌈",
      "&LeftDoubleBracket;": "⟦",
      "&LeftDownTeeVector;": "⥡",
      "&LeftDownVector;": "⇃",
      "&LeftDownVectorBar;": "⥙",
      "&LeftFloor;": "⌊",
      "&LeftRightArrow;": "↔",
      "&LeftRightVector;": "⥎",
      "&LeftTee;": "⊣",
      "&LeftTeeArrow;": "↤",
      "&LeftTeeVector;": "⥚",
      "&LeftTriangle;": "⊲",
      "&LeftTriangleBar;": "⧏",
      "&LeftTriangleEqual;": "⊴",
      "&LeftUpDownVector;": "⥑",
      "&LeftUpTeeVector;": "⥠",
      "&LeftUpVector;": "↿",
      "&LeftUpVectorBar;": "⥘",
      "&LeftVector;": "↼",
      "&LeftVectorBar;": "⥒",
      "&Leftarrow;": "⇐",
      "&Leftrightarrow;": "⇔",
      "&LessEqualGreater;": "⋚",
      "&LessFullEqual;": "≦",
      "&LessGreater;": "≶",
      "&LessLess;": "⪡",
      "&LessSlantEqual;": "⩽",
      "&LessTilde;": "≲",
      "&Lfr;": "𝔏",
      "&Ll;": "⋘",
      "&Lleftarrow;": "⇚",
      "&Lmidot;": "Ŀ",
      "&LongLeftArrow;": "⟵",
      "&LongLeftRightArrow;": "⟷",
      "&LongRightArrow;": "⟶",
      "&Longleftarrow;": "⟸",
      "&Longleftrightarrow;": "⟺",
      "&Longrightarrow;": "⟹",
      "&Lopf;": "𝕃",
      "&LowerLeftArrow;": "↙",
      "&LowerRightArrow;": "↘",
      "&Lscr;": "ℒ",
      "&Lsh;": "↰",
      "&Lstrok;": "Ł",
      "&Lt;": "≪",
      "&Map;": "⤅",
      "&Mcy;": "М",
      "&MediumSpace;": " ",
      "&Mellintrf;": "ℳ",
      "&Mfr;": "𝔐",
      "&MinusPlus;": "∓",
      "&Mopf;": "𝕄",
      "&Mscr;": "ℳ",
      "&Mu;": "Μ",
      "&NJcy;": "Њ",
      "&Nacute;": "Ń",
      "&Ncaron;": "Ň",
      "&Ncedil;": "Ņ",
      "&Ncy;": "Н",
      "&NegativeMediumSpace;": "​",
      "&NegativeThickSpace;": "​",
      "&NegativeThinSpace;": "​",
      "&NegativeVeryThinSpace;": "​",
      "&NestedGreaterGreater;": "≫",
      "&NestedLessLess;": "≪",
      "&NewLine;": "\n",
      "&Nfr;": "𝔑",
      "&NoBreak;": "⁠",
      "&NonBreakingSpace;": " ",
      "&Nopf;": "ℕ",
      "&Not;": "⫬",
      "&NotCongruent;": "≢",
      "&NotCupCap;": "≭",
      "&NotDoubleVerticalBar;": "∦",
      "&NotElement;": "∉",
      "&NotEqual;": "≠",
      "&NotEqualTilde;": "≂̸",
      "&NotExists;": "∄",
      "&NotGreater;": "≯",
      "&NotGreaterEqual;": "≱",
      "&NotGreaterFullEqual;": "≧̸",
      "&NotGreaterGreater;": "≫̸",
      "&NotGreaterLess;": "≹",
      "&NotGreaterSlantEqual;": "⩾̸",
      "&NotGreaterTilde;": "≵",
      "&NotHumpDownHump;": "≎̸",
      "&NotHumpEqual;": "≏̸",
      "&NotLeftTriangle;": "⋪",
      "&NotLeftTriangleBar;": "⧏̸",
      "&NotLeftTriangleEqual;": "⋬",
      "&NotLess;": "≮",
      "&NotLessEqual;": "≰",
      "&NotLessGreater;": "≸",
      "&NotLessLess;": "≪̸",
      "&NotLessSlantEqual;": "⩽̸",
      "&NotLessTilde;": "≴",
      "&NotNestedGreaterGreater;": "⪢̸",
      "&NotNestedLessLess;": "⪡̸",
      "&NotPrecedes;": "⊀",
      "&NotPrecedesEqual;": "⪯̸",
      "&NotPrecedesSlantEqual;": "⋠",
      "&NotReverseElement;": "∌",
      "&NotRightTriangle;": "⋫",
      "&NotRightTriangleBar;": "⧐̸",
      "&NotRightTriangleEqual;": "⋭",
      "&NotSquareSubset;": "⊏̸",
      "&NotSquareSubsetEqual;": "⋢",
      "&NotSquareSuperset;": "⊐̸",
      "&NotSquareSupersetEqual;": "⋣",
      "&NotSubset;": "⊂⃒",
      "&NotSubsetEqual;": "⊈",
      "&NotSucceeds;": "⊁",
      "&NotSucceedsEqual;": "⪰̸",
      "&NotSucceedsSlantEqual;": "⋡",
      "&NotSucceedsTilde;": "≿̸",
      "&NotSuperset;": "⊃⃒",
      "&NotSupersetEqual;": "⊉",
      "&NotTilde;": "≁",
      "&NotTildeEqual;": "≄",
      "&NotTildeFullEqual;": "≇",
      "&NotTildeTilde;": "≉",
      "&NotVerticalBar;": "∤",
      "&Nscr;": "𝒩",
      "&Ntilde": "Ñ",
      "&Ntilde;": "Ñ",
      "&Nu;": "Ν",
      "&OElig;": "Œ",
      "&Oacute": "Ó",
      "&Oacute;": "Ó",
      "&Ocirc": "Ô",
      "&Ocirc;": "Ô",
      "&Ocy;": "О",
      "&Odblac;": "Ő",
      "&Ofr;": "𝔒",
      "&Ograve": "Ò",
      "&Ograve;": "Ò",
      "&Omacr;": "Ō",
      "&Omega;": "Ω",
      "&Omicron;": "Ο",
      "&Oopf;": "𝕆",
      "&OpenCurlyDoubleQuote;": "“",
      "&OpenCurlyQuote;": "‘",
      "&Or;": "⩔",
      "&Oscr;": "𝒪",
      "&Oslash": "Ø",
      "&Oslash;": "Ø",
      "&Otilde": "Õ",
      "&Otilde;": "Õ",
      "&Otimes;": "⨷",
      "&Ouml": "Ö",
      "&Ouml;": "Ö",
      "&OverBar;": "‾",
      "&OverBrace;": "⏞",
      "&OverBracket;": "⎴",
      "&OverParenthesis;": "⏜",
      "&PartialD;": "∂",
      "&Pcy;": "П",
      "&Pfr;": "𝔓",
      "&Phi;": "Φ",
      "&Pi;": "Π",
      "&PlusMinus;": "±",
      "&Poincareplane;": "ℌ",
      "&Popf;": "ℙ",
      "&Pr;": "⪻",
      "&Precedes;": "≺",
      "&PrecedesEqual;": "⪯",
      "&PrecedesSlantEqual;": "≼",
      "&PrecedesTilde;": "≾",
      "&Prime;": "″",
      "&Product;": "∏",
      "&Proportion;": "∷",
      "&Proportional;": "∝",
      "&Pscr;": "𝒫",
      "&Psi;": "Ψ",
      "&QUOT": '"',
      "&QUOT;": '"',
      "&Qfr;": "𝔔",
      "&Qopf;": "ℚ",
      "&Qscr;": "𝒬",
      "&RBarr;": "⤐",
      "&REG": "®",
      "&REG;": "®",
      "&Racute;": "Ŕ",
      "&Rang;": "⟫",
      "&Rarr;": "↠",
      "&Rarrtl;": "⤖",
      "&Rcaron;": "Ř",
      "&Rcedil;": "Ŗ",
      "&Rcy;": "Р",
      "&Re;": "ℜ",
      "&ReverseElement;": "∋",
      "&ReverseEquilibrium;": "⇋",
      "&ReverseUpEquilibrium;": "⥯",
      "&Rfr;": "ℜ",
      "&Rho;": "Ρ",
      "&RightAngleBracket;": "⟩",
      "&RightArrow;": "→",
      "&RightArrowBar;": "⇥",
      "&RightArrowLeftArrow;": "⇄",
      "&RightCeiling;": "⌉",
      "&RightDoubleBracket;": "⟧",
      "&RightDownTeeVector;": "⥝",
      "&RightDownVector;": "⇂",
      "&RightDownVectorBar;": "⥕",
      "&RightFloor;": "⌋",
      "&RightTee;": "⊢",
      "&RightTeeArrow;": "↦",
      "&RightTeeVector;": "⥛",
      "&RightTriangle;": "⊳",
      "&RightTriangleBar;": "⧐",
      "&RightTriangleEqual;": "⊵",
      "&RightUpDownVector;": "⥏",
      "&RightUpTeeVector;": "⥜",
      "&RightUpVector;": "↾",
      "&RightUpVectorBar;": "⥔",
      "&RightVector;": "⇀",
      "&RightVectorBar;": "⥓",
      "&Rightarrow;": "⇒",
      "&Ropf;": "ℝ",
      "&RoundImplies;": "⥰",
      "&Rrightarrow;": "⇛",
      "&Rscr;": "ℛ",
      "&Rsh;": "↱",
      "&RuleDelayed;": "⧴",
      "&SHCHcy;": "Щ",
      "&SHcy;": "Ш",
      "&SOFTcy;": "Ь",
      "&Sacute;": "Ś",
      "&Sc;": "⪼",
      "&Scaron;": "Š",
      "&Scedil;": "Ş",
      "&Scirc;": "Ŝ",
      "&Scy;": "С",
      "&Sfr;": "𝔖",
      "&ShortDownArrow;": "↓",
      "&ShortLeftArrow;": "←",
      "&ShortRightArrow;": "→",
      "&ShortUpArrow;": "↑",
      "&Sigma;": "Σ",
      "&SmallCircle;": "∘",
      "&Sopf;": "𝕊",
      "&Sqrt;": "√",
      "&Square;": "□",
      "&SquareIntersection;": "⊓",
      "&SquareSubset;": "⊏",
      "&SquareSubsetEqual;": "⊑",
      "&SquareSuperset;": "⊐",
      "&SquareSupersetEqual;": "⊒",
      "&SquareUnion;": "⊔",
      "&Sscr;": "𝒮",
      "&Star;": "⋆",
      "&Sub;": "⋐",
      "&Subset;": "⋐",
      "&SubsetEqual;": "⊆",
      "&Succeeds;": "≻",
      "&SucceedsEqual;": "⪰",
      "&SucceedsSlantEqual;": "≽",
      "&SucceedsTilde;": "≿",
      "&SuchThat;": "∋",
      "&Sum;": "∑",
      "&Sup;": "⋑",
      "&Superset;": "⊃",
      "&SupersetEqual;": "⊇",
      "&Supset;": "⋑",
      "&THORN": "Þ",
      "&THORN;": "Þ",
      "&TRADE;": "™",
      "&TSHcy;": "Ћ",
      "&TScy;": "Ц",
      "&Tab;": "\t",
      "&Tau;": "Τ",
      "&Tcaron;": "Ť",
      "&Tcedil;": "Ţ",
      "&Tcy;": "Т",
      "&Tfr;": "𝔗",
      "&Therefore;": "∴",
      "&Theta;": "Θ",
      "&ThickSpace;": "  ",
      "&ThinSpace;": " ",
      "&Tilde;": "∼",
      "&TildeEqual;": "≃",
      "&TildeFullEqual;": "≅",
      "&TildeTilde;": "≈",
      "&Topf;": "𝕋",
      "&TripleDot;": "⃛",
      "&Tscr;": "𝒯",
      "&Tstrok;": "Ŧ",
      "&Uacute": "Ú",
      "&Uacute;": "Ú",
      "&Uarr;": "↟",
      "&Uarrocir;": "⥉",
      "&Ubrcy;": "Ў",
      "&Ubreve;": "Ŭ",
      "&Ucirc": "Û",
      "&Ucirc;": "Û",
      "&Ucy;": "У",
      "&Udblac;": "Ű",
      "&Ufr;": "𝔘",
      "&Ugrave": "Ù",
      "&Ugrave;": "Ù",
      "&Umacr;": "Ū",
      "&UnderBar;": "_",
      "&UnderBrace;": "⏟",
      "&UnderBracket;": "⎵",
      "&UnderParenthesis;": "⏝",
      "&Union;": "⋃",
      "&UnionPlus;": "⊎",
      "&Uogon;": "Ų",
      "&Uopf;": "𝕌",
      "&UpArrow;": "↑",
      "&UpArrowBar;": "⤒",
      "&UpArrowDownArrow;": "⇅",
      "&UpDownArrow;": "↕",
      "&UpEquilibrium;": "⥮",
      "&UpTee;": "⊥",
      "&UpTeeArrow;": "↥",
      "&Uparrow;": "⇑",
      "&Updownarrow;": "⇕",
      "&UpperLeftArrow;": "↖",
      "&UpperRightArrow;": "↗",
      "&Upsi;": "ϒ",
      "&Upsilon;": "Υ",
      "&Uring;": "Ů",
      "&Uscr;": "𝒰",
      "&Utilde;": "Ũ",
      "&Uuml": "Ü",
      "&Uuml;": "Ü",
      "&VDash;": "⊫",
      "&Vbar;": "⫫",
      "&Vcy;": "В",
      "&Vdash;": "⊩",
      "&Vdashl;": "⫦",
      "&Vee;": "⋁",
      "&Verbar;": "‖",
      "&Vert;": "‖",
      "&VerticalBar;": "∣",
      "&VerticalLine;": "|",
      "&VerticalSeparator;": "❘",
      "&VerticalTilde;": "≀",
      "&VeryThinSpace;": " ",
      "&Vfr;": "𝔙",
      "&Vopf;": "𝕍",
      "&Vscr;": "𝒱",
      "&Vvdash;": "⊪",
      "&Wcirc;": "Ŵ",
      "&Wedge;": "⋀",
      "&Wfr;": "𝔚",
      "&Wopf;": "𝕎",
      "&Wscr;": "𝒲",
      "&Xfr;": "𝔛",
      "&Xi;": "Ξ",
      "&Xopf;": "𝕏",
      "&Xscr;": "𝒳",
      "&YAcy;": "Я",
      "&YIcy;": "Ї",
      "&YUcy;": "Ю",
      "&Yacute": "Ý",
      "&Yacute;": "Ý",
      "&Ycirc;": "Ŷ",
      "&Ycy;": "Ы",
      "&Yfr;": "𝔜",
      "&Yopf;": "𝕐",
      "&Yscr;": "𝒴",
      "&Yuml;": "Ÿ",
      "&ZHcy;": "Ж",
      "&Zacute;": "Ź",
      "&Zcaron;": "Ž",
      "&Zcy;": "З",
      "&Zdot;": "Ż",
      "&ZeroWidthSpace;": "​",
      "&Zeta;": "Ζ",
      "&Zfr;": "ℨ",
      "&Zopf;": "ℤ",
      "&Zscr;": "𝒵",
      "&aacute": "á",
      "&aacute;": "á",
      "&abreve;": "ă",
      "&ac;": "∾",
      "&acE;": "∾̳",
      "&acd;": "∿",
      "&acirc": "â",
      "&acirc;": "â",
      "&acute": "´",
      "&acute;": "´",
      "&acy;": "а",
      "&aelig": "æ",
      "&aelig;": "æ",
      "&af;": "⁡",
      "&afr;": "𝔞",
      "&agrave": "à",
      "&agrave;": "à",
      "&alefsym;": "ℵ",
      "&aleph;": "ℵ",
      "&alpha;": "α",
      "&amacr;": "ā",
      "&amalg;": "⨿",
      "&amp": "&",
      "&amp;": "&",
      "&and;": "∧",
      "&andand;": "⩕",
      "&andd;": "⩜",
      "&andslope;": "⩘",
      "&andv;": "⩚",
      "&ang;": "∠",
      "&ange;": "⦤",
      "&angle;": "∠",
      "&angmsd;": "∡",
      "&angmsdaa;": "⦨",
      "&angmsdab;": "⦩",
      "&angmsdac;": "⦪",
      "&angmsdad;": "⦫",
      "&angmsdae;": "⦬",
      "&angmsdaf;": "⦭",
      "&angmsdag;": "⦮",
      "&angmsdah;": "⦯",
      "&angrt;": "∟",
      "&angrtvb;": "⊾",
      "&angrtvbd;": "⦝",
      "&angsph;": "∢",
      "&angst;": "Å",
      "&angzarr;": "⍼",
      "&aogon;": "ą",
      "&aopf;": "𝕒",
      "&ap;": "≈",
      "&apE;": "⩰",
      "&apacir;": "⩯",
      "&ape;": "≊",
      "&apid;": "≋",
      "&apos;": "'",
      "&approx;": "≈",
      "&approxeq;": "≊",
      "&aring": "å",
      "&aring;": "å",
      "&ascr;": "𝒶",
      "&ast;": "*",
      "&asymp;": "≈",
      "&asympeq;": "≍",
      "&atilde": "ã",
      "&atilde;": "ã",
      "&auml": "ä",
      "&auml;": "ä",
      "&awconint;": "∳",
      "&awint;": "⨑",
      "&bNot;": "⫭",
      "&backcong;": "≌",
      "&backepsilon;": "϶",
      "&backprime;": "‵",
      "&backsim;": "∽",
      "&backsimeq;": "⋍",
      "&barvee;": "⊽",
      "&barwed;": "⌅",
      "&barwedge;": "⌅",
      "&bbrk;": "⎵",
      "&bbrktbrk;": "⎶",
      "&bcong;": "≌",
      "&bcy;": "б",
      "&bdquo;": "„",
      "&becaus;": "∵",
      "&because;": "∵",
      "&bemptyv;": "⦰",
      "&bepsi;": "϶",
      "&bernou;": "ℬ",
      "&beta;": "β",
      "&beth;": "ℶ",
      "&between;": "≬",
      "&bfr;": "𝔟",
      "&bigcap;": "⋂",
      "&bigcirc;": "◯",
      "&bigcup;": "⋃",
      "&bigodot;": "⨀",
      "&bigoplus;": "⨁",
      "&bigotimes;": "⨂",
      "&bigsqcup;": "⨆",
      "&bigstar;": "★",
      "&bigtriangledown;": "▽",
      "&bigtriangleup;": "△",
      "&biguplus;": "⨄",
      "&bigvee;": "⋁",
      "&bigwedge;": "⋀",
      "&bkarow;": "⤍",
      "&blacklozenge;": "⧫",
      "&blacksquare;": "▪",
      "&blacktriangle;": "▴",
      "&blacktriangledown;": "▾",
      "&blacktriangleleft;": "◂",
      "&blacktriangleright;": "▸",
      "&blank;": "␣",
      "&blk12;": "▒",
      "&blk14;": "░",
      "&blk34;": "▓",
      "&block;": "█",
      "&bne;": "=⃥",
      "&bnequiv;": "≡⃥",
      "&bnot;": "⌐",
      "&bopf;": "𝕓",
      "&bot;": "⊥",
      "&bottom;": "⊥",
      "&bowtie;": "⋈",
      "&boxDL;": "╗",
      "&boxDR;": "╔",
      "&boxDl;": "╖",
      "&boxDr;": "╓",
      "&boxH;": "═",
      "&boxHD;": "╦",
      "&boxHU;": "╩",
      "&boxHd;": "╤",
      "&boxHu;": "╧",
      "&boxUL;": "╝",
      "&boxUR;": "╚",
      "&boxUl;": "╜",
      "&boxUr;": "╙",
      "&boxV;": "║",
      "&boxVH;": "╬",
      "&boxVL;": "╣",
      "&boxVR;": "╠",
      "&boxVh;": "╫",
      "&boxVl;": "╢",
      "&boxVr;": "╟",
      "&boxbox;": "⧉",
      "&boxdL;": "╕",
      "&boxdR;": "╒",
      "&boxdl;": "┐",
      "&boxdr;": "┌",
      "&boxh;": "─",
      "&boxhD;": "╥",
      "&boxhU;": "╨",
      "&boxhd;": "┬",
      "&boxhu;": "┴",
      "&boxminus;": "⊟",
      "&boxplus;": "⊞",
      "&boxtimes;": "⊠",
      "&boxuL;": "╛",
      "&boxuR;": "╘",
      "&boxul;": "┘",
      "&boxur;": "└",
      "&boxv;": "│",
      "&boxvH;": "╪",
      "&boxvL;": "╡",
      "&boxvR;": "╞",
      "&boxvh;": "┼",
      "&boxvl;": "┤",
      "&boxvr;": "├",
      "&bprime;": "‵",
      "&breve;": "˘",
      "&brvbar": "¦",
      "&brvbar;": "¦",
      "&bscr;": "𝒷",
      "&bsemi;": "⁏",
      "&bsim;": "∽",
      "&bsime;": "⋍",
      "&bsol;": "\\",
      "&bsolb;": "⧅",
      "&bsolhsub;": "⟈",
      "&bull;": "•",
      "&bullet;": "•",
      "&bump;": "≎",
      "&bumpE;": "⪮",
      "&bumpe;": "≏",
      "&bumpeq;": "≏",
      "&cacute;": "ć",
      "&cap;": "∩",
      "&capand;": "⩄",
      "&capbrcup;": "⩉",
      "&capcap;": "⩋",
      "&capcup;": "⩇",
      "&capdot;": "⩀",
      "&caps;": "∩︀",
      "&caret;": "⁁",
      "&caron;": "ˇ",
      "&ccaps;": "⩍",
      "&ccaron;": "č",
      "&ccedil": "ç",
      "&ccedil;": "ç",
      "&ccirc;": "ĉ",
      "&ccups;": "⩌",
      "&ccupssm;": "⩐",
      "&cdot;": "ċ",
      "&cedil": "¸",
      "&cedil;": "¸",
      "&cemptyv;": "⦲",
      "&cent": "¢",
      "&cent;": "¢",
      "&centerdot;": "·",
      "&cfr;": "𝔠",
      "&chcy;": "ч",
      "&check;": "✓",
      "&checkmark;": "✓",
      "&chi;": "χ",
      "&cir;": "○",
      "&cirE;": "⧃",
      "&circ;": "ˆ",
      "&circeq;": "≗",
      "&circlearrowleft;": "↺",
      "&circlearrowright;": "↻",
      "&circledR;": "®",
      "&circledS;": "Ⓢ",
      "&circledast;": "⊛",
      "&circledcirc;": "⊚",
      "&circleddash;": "⊝",
      "&cire;": "≗",
      "&cirfnint;": "⨐",
      "&cirmid;": "⫯",
      "&cirscir;": "⧂",
      "&clubs;": "♣",
      "&clubsuit;": "♣",
      "&colon;": ":",
      "&colone;": "≔",
      "&coloneq;": "≔",
      "&comma;": ",",
      "&commat;": "@",
      "&comp;": "∁",
      "&compfn;": "∘",
      "&complement;": "∁",
      "&complexes;": "ℂ",
      "&cong;": "≅",
      "&congdot;": "⩭",
      "&conint;": "∮",
      "&copf;": "𝕔",
      "&coprod;": "∐",
      "&copy": "©",
      "&copy;": "©",
      "&copysr;": "℗",
      "&crarr;": "↵",
      "&cross;": "✗",
      "&cscr;": "𝒸",
      "&csub;": "⫏",
      "&csube;": "⫑",
      "&csup;": "⫐",
      "&csupe;": "⫒",
      "&ctdot;": "⋯",
      "&cudarrl;": "⤸",
      "&cudarrr;": "⤵",
      "&cuepr;": "⋞",
      "&cuesc;": "⋟",
      "&cularr;": "↶",
      "&cularrp;": "⤽",
      "&cup;": "∪",
      "&cupbrcap;": "⩈",
      "&cupcap;": "⩆",
      "&cupcup;": "⩊",
      "&cupdot;": "⊍",
      "&cupor;": "⩅",
      "&cups;": "∪︀",
      "&curarr;": "↷",
      "&curarrm;": "⤼",
      "&curlyeqprec;": "⋞",
      "&curlyeqsucc;": "⋟",
      "&curlyvee;": "⋎",
      "&curlywedge;": "⋏",
      "&curren": "¤",
      "&curren;": "¤",
      "&curvearrowleft;": "↶",
      "&curvearrowright;": "↷",
      "&cuvee;": "⋎",
      "&cuwed;": "⋏",
      "&cwconint;": "∲",
      "&cwint;": "∱",
      "&cylcty;": "⌭",
      "&dArr;": "⇓",
      "&dHar;": "⥥",
      "&dagger;": "†",
      "&daleth;": "ℸ",
      "&darr;": "↓",
      "&dash;": "‐",
      "&dashv;": "⊣",
      "&dbkarow;": "⤏",
      "&dblac;": "˝",
      "&dcaron;": "ď",
      "&dcy;": "д",
      "&dd;": "ⅆ",
      "&ddagger;": "‡",
      "&ddarr;": "⇊",
      "&ddotseq;": "⩷",
      "&deg": "°",
      "&deg;": "°",
      "&delta;": "δ",
      "&demptyv;": "⦱",
      "&dfisht;": "⥿",
      "&dfr;": "𝔡",
      "&dharl;": "⇃",
      "&dharr;": "⇂",
      "&diam;": "⋄",
      "&diamond;": "⋄",
      "&diamondsuit;": "♦",
      "&diams;": "♦",
      "&die;": "¨",
      "&digamma;": "ϝ",
      "&disin;": "⋲",
      "&div;": "÷",
      "&divide": "÷",
      "&divide;": "÷",
      "&divideontimes;": "⋇",
      "&divonx;": "⋇",
      "&djcy;": "ђ",
      "&dlcorn;": "⌞",
      "&dlcrop;": "⌍",
      "&dollar;": "$",
      "&dopf;": "𝕕",
      "&dot;": "˙",
      "&doteq;": "≐",
      "&doteqdot;": "≑",
      "&dotminus;": "∸",
      "&dotplus;": "∔",
      "&dotsquare;": "⊡",
      "&doublebarwedge;": "⌆",
      "&downarrow;": "↓",
      "&downdownarrows;": "⇊",
      "&downharpoonleft;": "⇃",
      "&downharpoonright;": "⇂",
      "&drbkarow;": "⤐",
      "&drcorn;": "⌟",
      "&drcrop;": "⌌",
      "&dscr;": "𝒹",
      "&dscy;": "ѕ",
      "&dsol;": "⧶",
      "&dstrok;": "đ",
      "&dtdot;": "⋱",
      "&dtri;": "▿",
      "&dtrif;": "▾",
      "&duarr;": "⇵",
      "&duhar;": "⥯",
      "&dwangle;": "⦦",
      "&dzcy;": "џ",
      "&dzigrarr;": "⟿",
      "&eDDot;": "⩷",
      "&eDot;": "≑",
      "&eacute": "é",
      "&eacute;": "é",
      "&easter;": "⩮",
      "&ecaron;": "ě",
      "&ecir;": "≖",
      "&ecirc": "ê",
      "&ecirc;": "ê",
      "&ecolon;": "≕",
      "&ecy;": "э",
      "&edot;": "ė",
      "&ee;": "ⅇ",
      "&efDot;": "≒",
      "&efr;": "𝔢",
      "&eg;": "⪚",
      "&egrave": "è",
      "&egrave;": "è",
      "&egs;": "⪖",
      "&egsdot;": "⪘",
      "&el;": "⪙",
      "&elinters;": "⏧",
      "&ell;": "ℓ",
      "&els;": "⪕",
      "&elsdot;": "⪗",
      "&emacr;": "ē",
      "&empty;": "∅",
      "&emptyset;": "∅",
      "&emptyv;": "∅",
      "&emsp13;": " ",
      "&emsp14;": " ",
      "&emsp;": " ",
      "&eng;": "ŋ",
      "&ensp;": " ",
      "&eogon;": "ę",
      "&eopf;": "𝕖",
      "&epar;": "⋕",
      "&eparsl;": "⧣",
      "&eplus;": "⩱",
      "&epsi;": "ε",
      "&epsilon;": "ε",
      "&epsiv;": "ϵ",
      "&eqcirc;": "≖",
      "&eqcolon;": "≕",
      "&eqsim;": "≂",
      "&eqslantgtr;": "⪖",
      "&eqslantless;": "⪕",
      "&equals;": "=",
      "&equest;": "≟",
      "&equiv;": "≡",
      "&equivDD;": "⩸",
      "&eqvparsl;": "⧥",
      "&erDot;": "≓",
      "&erarr;": "⥱",
      "&escr;": "ℯ",
      "&esdot;": "≐",
      "&esim;": "≂",
      "&eta;": "η",
      "&eth": "ð",
      "&eth;": "ð",
      "&euml": "ë",
      "&euml;": "ë",
      "&euro;": "€",
      "&excl;": "!",
      "&exist;": "∃",
      "&expectation;": "ℰ",
      "&exponentiale;": "ⅇ",
      "&fallingdotseq;": "≒",
      "&fcy;": "ф",
      "&female;": "♀",
      "&ffilig;": "ﬃ",
      "&fflig;": "ﬀ",
      "&ffllig;": "ﬄ",
      "&ffr;": "𝔣",
      "&filig;": "ﬁ",
      "&fjlig;": "fj",
      "&flat;": "♭",
      "&fllig;": "ﬂ",
      "&fltns;": "▱",
      "&fnof;": "ƒ",
      "&fopf;": "𝕗",
      "&forall;": "∀",
      "&fork;": "⋔",
      "&forkv;": "⫙",
      "&fpartint;": "⨍",
      "&frac12": "½",
      "&frac12;": "½",
      "&frac13;": "⅓",
      "&frac14": "¼",
      "&frac14;": "¼",
      "&frac15;": "⅕",
      "&frac16;": "⅙",
      "&frac18;": "⅛",
      "&frac23;": "⅔",
      "&frac25;": "⅖",
      "&frac34": "¾",
      "&frac34;": "¾",
      "&frac35;": "⅗",
      "&frac38;": "⅜",
      "&frac45;": "⅘",
      "&frac56;": "⅚",
      "&frac58;": "⅝",
      "&frac78;": "⅞",
      "&frasl;": "⁄",
      "&frown;": "⌢",
      "&fscr;": "𝒻",
      "&gE;": "≧",
      "&gEl;": "⪌",
      "&gacute;": "ǵ",
      "&gamma;": "γ",
      "&gammad;": "ϝ",
      "&gap;": "⪆",
      "&gbreve;": "ğ",
      "&gcirc;": "ĝ",
      "&gcy;": "г",
      "&gdot;": "ġ",
      "&ge;": "≥",
      "&gel;": "⋛",
      "&geq;": "≥",
      "&geqq;": "≧",
      "&geqslant;": "⩾",
      "&ges;": "⩾",
      "&gescc;": "⪩",
      "&gesdot;": "⪀",
      "&gesdoto;": "⪂",
      "&gesdotol;": "⪄",
      "&gesl;": "⋛︀",
      "&gesles;": "⪔",
      "&gfr;": "𝔤",
      "&gg;": "≫",
      "&ggg;": "⋙",
      "&gimel;": "ℷ",
      "&gjcy;": "ѓ",
      "&gl;": "≷",
      "&glE;": "⪒",
      "&gla;": "⪥",
      "&glj;": "⪤",
      "&gnE;": "≩",
      "&gnap;": "⪊",
      "&gnapprox;": "⪊",
      "&gne;": "⪈",
      "&gneq;": "⪈",
      "&gneqq;": "≩",
      "&gnsim;": "⋧",
      "&gopf;": "𝕘",
      "&grave;": "`",
      "&gscr;": "ℊ",
      "&gsim;": "≳",
      "&gsime;": "⪎",
      "&gsiml;": "⪐",
      "&gt": ">",
      "&gt;": ">",
      "&gtcc;": "⪧",
      "&gtcir;": "⩺",
      "&gtdot;": "⋗",
      "&gtlPar;": "⦕",
      "&gtquest;": "⩼",
      "&gtrapprox;": "⪆",
      "&gtrarr;": "⥸",
      "&gtrdot;": "⋗",
      "&gtreqless;": "⋛",
      "&gtreqqless;": "⪌",
      "&gtrless;": "≷",
      "&gtrsim;": "≳",
      "&gvertneqq;": "≩︀",
      "&gvnE;": "≩︀",
      "&hArr;": "⇔",
      "&hairsp;": " ",
      "&half;": "½",
      "&hamilt;": "ℋ",
      "&hardcy;": "ъ",
      "&harr;": "↔",
      "&harrcir;": "⥈",
      "&harrw;": "↭",
      "&hbar;": "ℏ",
      "&hcirc;": "ĥ",
      "&hearts;": "♥",
      "&heartsuit;": "♥",
      "&hellip;": "…",
      "&hercon;": "⊹",
      "&hfr;": "𝔥",
      "&hksearow;": "⤥",
      "&hkswarow;": "⤦",
      "&hoarr;": "⇿",
      "&homtht;": "∻",
      "&hookleftarrow;": "↩",
      "&hookrightarrow;": "↪",
      "&hopf;": "𝕙",
      "&horbar;": "―",
      "&hscr;": "𝒽",
      "&hslash;": "ℏ",
      "&hstrok;": "ħ",
      "&hybull;": "⁃",
      "&hyphen;": "‐",
      "&iacute": "í",
      "&iacute;": "í",
      "&ic;": "⁣",
      "&icirc": "î",
      "&icirc;": "î",
      "&icy;": "и",
      "&iecy;": "е",
      "&iexcl": "¡",
      "&iexcl;": "¡",
      "&iff;": "⇔",
      "&ifr;": "𝔦",
      "&igrave": "ì",
      "&igrave;": "ì",
      "&ii;": "ⅈ",
      "&iiiint;": "⨌",
      "&iiint;": "∭",
      "&iinfin;": "⧜",
      "&iiota;": "℩",
      "&ijlig;": "ĳ",
      "&imacr;": "ī",
      "&image;": "ℑ",
      "&imagline;": "ℐ",
      "&imagpart;": "ℑ",
      "&imath;": "ı",
      "&imof;": "⊷",
      "&imped;": "Ƶ",
      "&in;": "∈",
      "&incare;": "℅",
      "&infin;": "∞",
      "&infintie;": "⧝",
      "&inodot;": "ı",
      "&int;": "∫",
      "&intcal;": "⊺",
      "&integers;": "ℤ",
      "&intercal;": "⊺",
      "&intlarhk;": "⨗",
      "&intprod;": "⨼",
      "&iocy;": "ё",
      "&iogon;": "į",
      "&iopf;": "𝕚",
      "&iota;": "ι",
      "&iprod;": "⨼",
      "&iquest": "¿",
      "&iquest;": "¿",
      "&iscr;": "𝒾",
      "&isin;": "∈",
      "&isinE;": "⋹",
      "&isindot;": "⋵",
      "&isins;": "⋴",
      "&isinsv;": "⋳",
      "&isinv;": "∈",
      "&it;": "⁢",
      "&itilde;": "ĩ",
      "&iukcy;": "і",
      "&iuml": "ï",
      "&iuml;": "ï",
      "&jcirc;": "ĵ",
      "&jcy;": "й",
      "&jfr;": "𝔧",
      "&jmath;": "ȷ",
      "&jopf;": "𝕛",
      "&jscr;": "𝒿",
      "&jsercy;": "ј",
      "&jukcy;": "є",
      "&kappa;": "κ",
      "&kappav;": "ϰ",
      "&kcedil;": "ķ",
      "&kcy;": "к",
      "&kfr;": "𝔨",
      "&kgreen;": "ĸ",
      "&khcy;": "х",
      "&kjcy;": "ќ",
      "&kopf;": "𝕜",
      "&kscr;": "𝓀",
      "&lAarr;": "⇚",
      "&lArr;": "⇐",
      "&lAtail;": "⤛",
      "&lBarr;": "⤎",
      "&lE;": "≦",
      "&lEg;": "⪋",
      "&lHar;": "⥢",
      "&lacute;": "ĺ",
      "&laemptyv;": "⦴",
      "&lagran;": "ℒ",
      "&lambda;": "λ",
      "&lang;": "⟨",
      "&langd;": "⦑",
      "&langle;": "⟨",
      "&lap;": "⪅",
      "&laquo": "«",
      "&laquo;": "«",
      "&larr;": "←",
      "&larrb;": "⇤",
      "&larrbfs;": "⤟",
      "&larrfs;": "⤝",
      "&larrhk;": "↩",
      "&larrlp;": "↫",
      "&larrpl;": "⤹",
      "&larrsim;": "⥳",
      "&larrtl;": "↢",
      "&lat;": "⪫",
      "&latail;": "⤙",
      "&late;": "⪭",
      "&lates;": "⪭︀",
      "&lbarr;": "⤌",
      "&lbbrk;": "❲",
      "&lbrace;": "{",
      "&lbrack;": "[",
      "&lbrke;": "⦋",
      "&lbrksld;": "⦏",
      "&lbrkslu;": "⦍",
      "&lcaron;": "ľ",
      "&lcedil;": "ļ",
      "&lceil;": "⌈",
      "&lcub;": "{",
      "&lcy;": "л",
      "&ldca;": "⤶",
      "&ldquo;": "“",
      "&ldquor;": "„",
      "&ldrdhar;": "⥧",
      "&ldrushar;": "⥋",
      "&ldsh;": "↲",
      "&le;": "≤",
      "&leftarrow;": "←",
      "&leftarrowtail;": "↢",
      "&leftharpoondown;": "↽",
      "&leftharpoonup;": "↼",
      "&leftleftarrows;": "⇇",
      "&leftrightarrow;": "↔",
      "&leftrightarrows;": "⇆",
      "&leftrightharpoons;": "⇋",
      "&leftrightsquigarrow;": "↭",
      "&leftthreetimes;": "⋋",
      "&leg;": "⋚",
      "&leq;": "≤",
      "&leqq;": "≦",
      "&leqslant;": "⩽",
      "&les;": "⩽",
      "&lescc;": "⪨",
      "&lesdot;": "⩿",
      "&lesdoto;": "⪁",
      "&lesdotor;": "⪃",
      "&lesg;": "⋚︀",
      "&lesges;": "⪓",
      "&lessapprox;": "⪅",
      "&lessdot;": "⋖",
      "&lesseqgtr;": "⋚",
      "&lesseqqgtr;": "⪋",
      "&lessgtr;": "≶",
      "&lesssim;": "≲",
      "&lfisht;": "⥼",
      "&lfloor;": "⌊",
      "&lfr;": "𝔩",
      "&lg;": "≶",
      "&lgE;": "⪑",
      "&lhard;": "↽",
      "&lharu;": "↼",
      "&lharul;": "⥪",
      "&lhblk;": "▄",
      "&ljcy;": "љ",
      "&ll;": "≪",
      "&llarr;": "⇇",
      "&llcorner;": "⌞",
      "&llhard;": "⥫",
      "&lltri;": "◺",
      "&lmidot;": "ŀ",
      "&lmoust;": "⎰",
      "&lmoustache;": "⎰",
      "&lnE;": "≨",
      "&lnap;": "⪉",
      "&lnapprox;": "⪉",
      "&lne;": "⪇",
      "&lneq;": "⪇",
      "&lneqq;": "≨",
      "&lnsim;": "⋦",
      "&loang;": "⟬",
      "&loarr;": "⇽",
      "&lobrk;": "⟦",
      "&longleftarrow;": "⟵",
      "&longleftrightarrow;": "⟷",
      "&longmapsto;": "⟼",
      "&longrightarrow;": "⟶",
      "&looparrowleft;": "↫",
      "&looparrowright;": "↬",
      "&lopar;": "⦅",
      "&lopf;": "𝕝",
      "&loplus;": "⨭",
      "&lotimes;": "⨴",
      "&lowast;": "∗",
      "&lowbar;": "_",
      "&loz;": "◊",
      "&lozenge;": "◊",
      "&lozf;": "⧫",
      "&lpar;": "(",
      "&lparlt;": "⦓",
      "&lrarr;": "⇆",
      "&lrcorner;": "⌟",
      "&lrhar;": "⇋",
      "&lrhard;": "⥭",
      "&lrm;": "‎",
      "&lrtri;": "⊿",
      "&lsaquo;": "‹",
      "&lscr;": "𝓁",
      "&lsh;": "↰",
      "&lsim;": "≲",
      "&lsime;": "⪍",
      "&lsimg;": "⪏",
      "&lsqb;": "[",
      "&lsquo;": "‘",
      "&lsquor;": "‚",
      "&lstrok;": "ł",
      "&lt": "<",
      "&lt;": "<",
      "&ltcc;": "⪦",
      "&ltcir;": "⩹",
      "&ltdot;": "⋖",
      "&lthree;": "⋋",
      "&ltimes;": "⋉",
      "&ltlarr;": "⥶",
      "&ltquest;": "⩻",
      "&ltrPar;": "⦖",
      "&ltri;": "◃",
      "&ltrie;": "⊴",
      "&ltrif;": "◂",
      "&lurdshar;": "⥊",
      "&luruhar;": "⥦",
      "&lvertneqq;": "≨︀",
      "&lvnE;": "≨︀",
      "&mDDot;": "∺",
      "&macr": "¯",
      "&macr;": "¯",
      "&male;": "♂",
      "&malt;": "✠",
      "&maltese;": "✠",
      "&map;": "↦",
      "&mapsto;": "↦",
      "&mapstodown;": "↧",
      "&mapstoleft;": "↤",
      "&mapstoup;": "↥",
      "&marker;": "▮",
      "&mcomma;": "⨩",
      "&mcy;": "м",
      "&mdash;": "—",
      "&measuredangle;": "∡",
      "&mfr;": "𝔪",
      "&mho;": "℧",
      "&micro": "µ",
      "&micro;": "µ",
      "&mid;": "∣",
      "&midast;": "*",
      "&midcir;": "⫰",
      "&middot": "·",
      "&middot;": "·",
      "&minus;": "−",
      "&minusb;": "⊟",
      "&minusd;": "∸",
      "&minusdu;": "⨪",
      "&mlcp;": "⫛",
      "&mldr;": "…",
      "&mnplus;": "∓",
      "&models;": "⊧",
      "&mopf;": "𝕞",
      "&mp;": "∓",
      "&mscr;": "𝓂",
      "&mstpos;": "∾",
      "&mu;": "μ",
      "&multimap;": "⊸",
      "&mumap;": "⊸",
      "&nGg;": "⋙̸",
      "&nGt;": "≫⃒",
      "&nGtv;": "≫̸",
      "&nLeftarrow;": "⇍",
      "&nLeftrightarrow;": "⇎",
      "&nLl;": "⋘̸",
      "&nLt;": "≪⃒",
      "&nLtv;": "≪̸",
      "&nRightarrow;": "⇏",
      "&nVDash;": "⊯",
      "&nVdash;": "⊮",
      "&nabla;": "∇",
      "&nacute;": "ń",
      "&nang;": "∠⃒",
      "&nap;": "≉",
      "&napE;": "⩰̸",
      "&napid;": "≋̸",
      "&napos;": "ŉ",
      "&napprox;": "≉",
      "&natur;": "♮",
      "&natural;": "♮",
      "&naturals;": "ℕ",
      "&nbsp": " ",
      "&nbsp;": " ",
      "&nbump;": "≎̸",
      "&nbumpe;": "≏̸",
      "&ncap;": "⩃",
      "&ncaron;": "ň",
      "&ncedil;": "ņ",
      "&ncong;": "≇",
      "&ncongdot;": "⩭̸",
      "&ncup;": "⩂",
      "&ncy;": "н",
      "&ndash;": "–",
      "&ne;": "≠",
      "&neArr;": "⇗",
      "&nearhk;": "⤤",
      "&nearr;": "↗",
      "&nearrow;": "↗",
      "&nedot;": "≐̸",
      "&nequiv;": "≢",
      "&nesear;": "⤨",
      "&nesim;": "≂̸",
      "&nexist;": "∄",
      "&nexists;": "∄",
      "&nfr;": "𝔫",
      "&ngE;": "≧̸",
      "&nge;": "≱",
      "&ngeq;": "≱",
      "&ngeqq;": "≧̸",
      "&ngeqslant;": "⩾̸",
      "&nges;": "⩾̸",
      "&ngsim;": "≵",
      "&ngt;": "≯",
      "&ngtr;": "≯",
      "&nhArr;": "⇎",
      "&nharr;": "↮",
      "&nhpar;": "⫲",
      "&ni;": "∋",
      "&nis;": "⋼",
      "&nisd;": "⋺",
      "&niv;": "∋",
      "&njcy;": "њ",
      "&nlArr;": "⇍",
      "&nlE;": "≦̸",
      "&nlarr;": "↚",
      "&nldr;": "‥",
      "&nle;": "≰",
      "&nleftarrow;": "↚",
      "&nleftrightarrow;": "↮",
      "&nleq;": "≰",
      "&nleqq;": "≦̸",
      "&nleqslant;": "⩽̸",
      "&nles;": "⩽̸",
      "&nless;": "≮",
      "&nlsim;": "≴",
      "&nlt;": "≮",
      "&nltri;": "⋪",
      "&nltrie;": "⋬",
      "&nmid;": "∤",
      "&nopf;": "𝕟",
      "&not": "¬",
      "&not;": "¬",
      "&notin;": "∉",
      "&notinE;": "⋹̸",
      "&notindot;": "⋵̸",
      "&notinva;": "∉",
      "&notinvb;": "⋷",
      "&notinvc;": "⋶",
      "&notni;": "∌",
      "&notniva;": "∌",
      "&notnivb;": "⋾",
      "&notnivc;": "⋽",
      "&npar;": "∦",
      "&nparallel;": "∦",
      "&nparsl;": "⫽⃥",
      "&npart;": "∂̸",
      "&npolint;": "⨔",
      "&npr;": "⊀",
      "&nprcue;": "⋠",
      "&npre;": "⪯̸",
      "&nprec;": "⊀",
      "&npreceq;": "⪯̸",
      "&nrArr;": "⇏",
      "&nrarr;": "↛",
      "&nrarrc;": "⤳̸",
      "&nrarrw;": "↝̸",
      "&nrightarrow;": "↛",
      "&nrtri;": "⋫",
      "&nrtrie;": "⋭",
      "&nsc;": "⊁",
      "&nsccue;": "⋡",
      "&nsce;": "⪰̸",
      "&nscr;": "𝓃",
      "&nshortmid;": "∤",
      "&nshortparallel;": "∦",
      "&nsim;": "≁",
      "&nsime;": "≄",
      "&nsimeq;": "≄",
      "&nsmid;": "∤",
      "&nspar;": "∦",
      "&nsqsube;": "⋢",
      "&nsqsupe;": "⋣",
      "&nsub;": "⊄",
      "&nsubE;": "⫅̸",
      "&nsube;": "⊈",
      "&nsubset;": "⊂⃒",
      "&nsubseteq;": "⊈",
      "&nsubseteqq;": "⫅̸",
      "&nsucc;": "⊁",
      "&nsucceq;": "⪰̸",
      "&nsup;": "⊅",
      "&nsupE;": "⫆̸",
      "&nsupe;": "⊉",
      "&nsupset;": "⊃⃒",
      "&nsupseteq;": "⊉",
      "&nsupseteqq;": "⫆̸",
      "&ntgl;": "≹",
      "&ntilde": "ñ",
      "&ntilde;": "ñ",
      "&ntlg;": "≸",
      "&ntriangleleft;": "⋪",
      "&ntrianglelefteq;": "⋬",
      "&ntriangleright;": "⋫",
      "&ntrianglerighteq;": "⋭",
      "&nu;": "ν",
      "&num;": "#",
      "&numero;": "№",
      "&numsp;": " ",
      "&nvDash;": "⊭",
      "&nvHarr;": "⤄",
      "&nvap;": "≍⃒",
      "&nvdash;": "⊬",
      "&nvge;": "≥⃒",
      "&nvgt;": ">⃒",
      "&nvinfin;": "⧞",
      "&nvlArr;": "⤂",
      "&nvle;": "≤⃒",
      "&nvlt;": "<⃒",
      "&nvltrie;": "⊴⃒",
      "&nvrArr;": "⤃",
      "&nvrtrie;": "⊵⃒",
      "&nvsim;": "∼⃒",
      "&nwArr;": "⇖",
      "&nwarhk;": "⤣",
      "&nwarr;": "↖",
      "&nwarrow;": "↖",
      "&nwnear;": "⤧",
      "&oS;": "Ⓢ",
      "&oacute": "ó",
      "&oacute;": "ó",
      "&oast;": "⊛",
      "&ocir;": "⊚",
      "&ocirc": "ô",
      "&ocirc;": "ô",
      "&ocy;": "о",
      "&odash;": "⊝",
      "&odblac;": "ő",
      "&odiv;": "⨸",
      "&odot;": "⊙",
      "&odsold;": "⦼",
      "&oelig;": "œ",
      "&ofcir;": "⦿",
      "&ofr;": "𝔬",
      "&ogon;": "˛",
      "&ograve": "ò",
      "&ograve;": "ò",
      "&ogt;": "⧁",
      "&ohbar;": "⦵",
      "&ohm;": "Ω",
      "&oint;": "∮",
      "&olarr;": "↺",
      "&olcir;": "⦾",
      "&olcross;": "⦻",
      "&oline;": "‾",
      "&olt;": "⧀",
      "&omacr;": "ō",
      "&omega;": "ω",
      "&omicron;": "ο",
      "&omid;": "⦶",
      "&ominus;": "⊖",
      "&oopf;": "𝕠",
      "&opar;": "⦷",
      "&operp;": "⦹",
      "&oplus;": "⊕",
      "&or;": "∨",
      "&orarr;": "↻",
      "&ord;": "⩝",
      "&order;": "ℴ",
      "&orderof;": "ℴ",
      "&ordf": "ª",
      "&ordf;": "ª",
      "&ordm": "º",
      "&ordm;": "º",
      "&origof;": "⊶",
      "&oror;": "⩖",
      "&orslope;": "⩗",
      "&orv;": "⩛",
      "&oscr;": "ℴ",
      "&oslash": "ø",
      "&oslash;": "ø",
      "&osol;": "⊘",
      "&otilde": "õ",
      "&otilde;": "õ",
      "&otimes;": "⊗",
      "&otimesas;": "⨶",
      "&ouml": "ö",
      "&ouml;": "ö",
      "&ovbar;": "⌽",
      "&par;": "∥",
      "&para": "¶",
      "&para;": "¶",
      "&parallel;": "∥",
      "&parsim;": "⫳",
      "&parsl;": "⫽",
      "&part;": "∂",
      "&pcy;": "п",
      "&percnt;": "%",
      "&period;": ".",
      "&permil;": "‰",
      "&perp;": "⊥",
      "&pertenk;": "‱",
      "&pfr;": "𝔭",
      "&phi;": "φ",
      "&phiv;": "ϕ",
      "&phmmat;": "ℳ",
      "&phone;": "☎",
      "&pi;": "π",
      "&pitchfork;": "⋔",
      "&piv;": "ϖ",
      "&planck;": "ℏ",
      "&planckh;": "ℎ",
      "&plankv;": "ℏ",
      "&plus;": "+",
      "&plusacir;": "⨣",
      "&plusb;": "⊞",
      "&pluscir;": "⨢",
      "&plusdo;": "∔",
      "&plusdu;": "⨥",
      "&pluse;": "⩲",
      "&plusmn": "±",
      "&plusmn;": "±",
      "&plussim;": "⨦",
      "&plustwo;": "⨧",
      "&pm;": "±",
      "&pointint;": "⨕",
      "&popf;": "𝕡",
      "&pound": "£",
      "&pound;": "£",
      "&pr;": "≺",
      "&prE;": "⪳",
      "&prap;": "⪷",
      "&prcue;": "≼",
      "&pre;": "⪯",
      "&prec;": "≺",
      "&precapprox;": "⪷",
      "&preccurlyeq;": "≼",
      "&preceq;": "⪯",
      "&precnapprox;": "⪹",
      "&precneqq;": "⪵",
      "&precnsim;": "⋨",
      "&precsim;": "≾",
      "&prime;": "′",
      "&primes;": "ℙ",
      "&prnE;": "⪵",
      "&prnap;": "⪹",
      "&prnsim;": "⋨",
      "&prod;": "∏",
      "&profalar;": "⌮",
      "&profline;": "⌒",
      "&profsurf;": "⌓",
      "&prop;": "∝",
      "&propto;": "∝",
      "&prsim;": "≾",
      "&prurel;": "⊰",
      "&pscr;": "𝓅",
      "&psi;": "ψ",
      "&puncsp;": " ",
      "&qfr;": "𝔮",
      "&qint;": "⨌",
      "&qopf;": "𝕢",
      "&qprime;": "⁗",
      "&qscr;": "𝓆",
      "&quaternions;": "ℍ",
      "&quatint;": "⨖",
      "&quest;": "?",
      "&questeq;": "≟",
      "&quot": '"',
      "&quot;": '"',
      "&rAarr;": "⇛",
      "&rArr;": "⇒",
      "&rAtail;": "⤜",
      "&rBarr;": "⤏",
      "&rHar;": "⥤",
      "&race;": "∽̱",
      "&racute;": "ŕ",
      "&radic;": "√",
      "&raemptyv;": "⦳",
      "&rang;": "⟩",
      "&rangd;": "⦒",
      "&range;": "⦥",
      "&rangle;": "⟩",
      "&raquo": "»",
      "&raquo;": "»",
      "&rarr;": "→",
      "&rarrap;": "⥵",
      "&rarrb;": "⇥",
      "&rarrbfs;": "⤠",
      "&rarrc;": "⤳",
      "&rarrfs;": "⤞",
      "&rarrhk;": "↪",
      "&rarrlp;": "↬",
      "&rarrpl;": "⥅",
      "&rarrsim;": "⥴",
      "&rarrtl;": "↣",
      "&rarrw;": "↝",
      "&ratail;": "⤚",
      "&ratio;": "∶",
      "&rationals;": "ℚ",
      "&rbarr;": "⤍",
      "&rbbrk;": "❳",
      "&rbrace;": "}",
      "&rbrack;": "]",
      "&rbrke;": "⦌",
      "&rbrksld;": "⦎",
      "&rbrkslu;": "⦐",
      "&rcaron;": "ř",
      "&rcedil;": "ŗ",
      "&rceil;": "⌉",
      "&rcub;": "}",
      "&rcy;": "р",
      "&rdca;": "⤷",
      "&rdldhar;": "⥩",
      "&rdquo;": "”",
      "&rdquor;": "”",
      "&rdsh;": "↳",
      "&real;": "ℜ",
      "&realine;": "ℛ",
      "&realpart;": "ℜ",
      "&reals;": "ℝ",
      "&rect;": "▭",
      "&reg": "®",
      "&reg;": "®",
      "&rfisht;": "⥽",
      "&rfloor;": "⌋",
      "&rfr;": "𝔯",
      "&rhard;": "⇁",
      "&rharu;": "⇀",
      "&rharul;": "⥬",
      "&rho;": "ρ",
      "&rhov;": "ϱ",
      "&rightarrow;": "→",
      "&rightarrowtail;": "↣",
      "&rightharpoondown;": "⇁",
      "&rightharpoonup;": "⇀",
      "&rightleftarrows;": "⇄",
      "&rightleftharpoons;": "⇌",
      "&rightrightarrows;": "⇉",
      "&rightsquigarrow;": "↝",
      "&rightthreetimes;": "⋌",
      "&ring;": "˚",
      "&risingdotseq;": "≓",
      "&rlarr;": "⇄",
      "&rlhar;": "⇌",
      "&rlm;": "‏",
      "&rmoust;": "⎱",
      "&rmoustache;": "⎱",
      "&rnmid;": "⫮",
      "&roang;": "⟭",
      "&roarr;": "⇾",
      "&robrk;": "⟧",
      "&ropar;": "⦆",
      "&ropf;": "𝕣",
      "&roplus;": "⨮",
      "&rotimes;": "⨵",
      "&rpar;": ")",
      "&rpargt;": "⦔",
      "&rppolint;": "⨒",
      "&rrarr;": "⇉",
      "&rsaquo;": "›",
      "&rscr;": "𝓇",
      "&rsh;": "↱",
      "&rsqb;": "]",
      "&rsquo;": "’",
      "&rsquor;": "’",
      "&rthree;": "⋌",
      "&rtimes;": "⋊",
      "&rtri;": "▹",
      "&rtrie;": "⊵",
      "&rtrif;": "▸",
      "&rtriltri;": "⧎",
      "&ruluhar;": "⥨",
      "&rx;": "℞",
      "&sacute;": "ś",
      "&sbquo;": "‚",
      "&sc;": "≻",
      "&scE;": "⪴",
      "&scap;": "⪸",
      "&scaron;": "š",
      "&sccue;": "≽",
      "&sce;": "⪰",
      "&scedil;": "ş",
      "&scirc;": "ŝ",
      "&scnE;": "⪶",
      "&scnap;": "⪺",
      "&scnsim;": "⋩",
      "&scpolint;": "⨓",
      "&scsim;": "≿",
      "&scy;": "с",
      "&sdot;": "⋅",
      "&sdotb;": "⊡",
      "&sdote;": "⩦",
      "&seArr;": "⇘",
      "&searhk;": "⤥",
      "&searr;": "↘",
      "&searrow;": "↘",
      "&sect": "§",
      "&sect;": "§",
      "&semi;": ";",
      "&seswar;": "⤩",
      "&setminus;": "∖",
      "&setmn;": "∖",
      "&sext;": "✶",
      "&sfr;": "𝔰",
      "&sfrown;": "⌢",
      "&sharp;": "♯",
      "&shchcy;": "щ",
      "&shcy;": "ш",
      "&shortmid;": "∣",
      "&shortparallel;": "∥",
      "&shy": "­",
      "&shy;": "­",
      "&sigma;": "σ",
      "&sigmaf;": "ς",
      "&sigmav;": "ς",
      "&sim;": "∼",
      "&simdot;": "⩪",
      "&sime;": "≃",
      "&simeq;": "≃",
      "&simg;": "⪞",
      "&simgE;": "⪠",
      "&siml;": "⪝",
      "&simlE;": "⪟",
      "&simne;": "≆",
      "&simplus;": "⨤",
      "&simrarr;": "⥲",
      "&slarr;": "←",
      "&smallsetminus;": "∖",
      "&smashp;": "⨳",
      "&smeparsl;": "⧤",
      "&smid;": "∣",
      "&smile;": "⌣",
      "&smt;": "⪪",
      "&smte;": "⪬",
      "&smtes;": "⪬︀",
      "&softcy;": "ь",
      "&sol;": "/",
      "&solb;": "⧄",
      "&solbar;": "⌿",
      "&sopf;": "𝕤",
      "&spades;": "♠",
      "&spadesuit;": "♠",
      "&spar;": "∥",
      "&sqcap;": "⊓",
      "&sqcaps;": "⊓︀",
      "&sqcup;": "⊔",
      "&sqcups;": "⊔︀",
      "&sqsub;": "⊏",
      "&sqsube;": "⊑",
      "&sqsubset;": "⊏",
      "&sqsubseteq;": "⊑",
      "&sqsup;": "⊐",
      "&sqsupe;": "⊒",
      "&sqsupset;": "⊐",
      "&sqsupseteq;": "⊒",
      "&squ;": "□",
      "&square;": "□",
      "&squarf;": "▪",
      "&squf;": "▪",
      "&srarr;": "→",
      "&sscr;": "𝓈",
      "&ssetmn;": "∖",
      "&ssmile;": "⌣",
      "&sstarf;": "⋆",
      "&star;": "☆",
      "&starf;": "★",
      "&straightepsilon;": "ϵ",
      "&straightphi;": "ϕ",
      "&strns;": "¯",
      "&sub;": "⊂",
      "&subE;": "⫅",
      "&subdot;": "⪽",
      "&sube;": "⊆",
      "&subedot;": "⫃",
      "&submult;": "⫁",
      "&subnE;": "⫋",
      "&subne;": "⊊",
      "&subplus;": "⪿",
      "&subrarr;": "⥹",
      "&subset;": "⊂",
      "&subseteq;": "⊆",
      "&subseteqq;": "⫅",
      "&subsetneq;": "⊊",
      "&subsetneqq;": "⫋",
      "&subsim;": "⫇",
      "&subsub;": "⫕",
      "&subsup;": "⫓",
      "&succ;": "≻",
      "&succapprox;": "⪸",
      "&succcurlyeq;": "≽",
      "&succeq;": "⪰",
      "&succnapprox;": "⪺",
      "&succneqq;": "⪶",
      "&succnsim;": "⋩",
      "&succsim;": "≿",
      "&sum;": "∑",
      "&sung;": "♪",
      "&sup1": "¹",
      "&sup1;": "¹",
      "&sup2": "²",
      "&sup2;": "²",
      "&sup3": "³",
      "&sup3;": "³",
      "&sup;": "⊃",
      "&supE;": "⫆",
      "&supdot;": "⪾",
      "&supdsub;": "⫘",
      "&supe;": "⊇",
      "&supedot;": "⫄",
      "&suphsol;": "⟉",
      "&suphsub;": "⫗",
      "&suplarr;": "⥻",
      "&supmult;": "⫂",
      "&supnE;": "⫌",
      "&supne;": "⊋",
      "&supplus;": "⫀",
      "&supset;": "⊃",
      "&supseteq;": "⊇",
      "&supseteqq;": "⫆",
      "&supsetneq;": "⊋",
      "&supsetneqq;": "⫌",
      "&supsim;": "⫈",
      "&supsub;": "⫔",
      "&supsup;": "⫖",
      "&swArr;": "⇙",
      "&swarhk;": "⤦",
      "&swarr;": "↙",
      "&swarrow;": "↙",
      "&swnwar;": "⤪",
      "&szlig": "ß",
      "&szlig;": "ß",
      "&target;": "⌖",
      "&tau;": "τ",
      "&tbrk;": "⎴",
      "&tcaron;": "ť",
      "&tcedil;": "ţ",
      "&tcy;": "т",
      "&tdot;": "⃛",
      "&telrec;": "⌕",
      "&tfr;": "𝔱",
      "&there4;": "∴",
      "&therefore;": "∴",
      "&theta;": "θ",
      "&thetasym;": "ϑ",
      "&thetav;": "ϑ",
      "&thickapprox;": "≈",
      "&thicksim;": "∼",
      "&thinsp;": " ",
      "&thkap;": "≈",
      "&thksim;": "∼",
      "&thorn": "þ",
      "&thorn;": "þ",
      "&tilde;": "˜",
      "&times": "×",
      "&times;": "×",
      "&timesb;": "⊠",
      "&timesbar;": "⨱",
      "&timesd;": "⨰",
      "&tint;": "∭",
      "&toea;": "⤨",
      "&top;": "⊤",
      "&topbot;": "⌶",
      "&topcir;": "⫱",
      "&topf;": "𝕥",
      "&topfork;": "⫚",
      "&tosa;": "⤩",
      "&tprime;": "‴",
      "&trade;": "™",
      "&triangle;": "▵",
      "&triangledown;": "▿",
      "&triangleleft;": "◃",
      "&trianglelefteq;": "⊴",
      "&triangleq;": "≜",
      "&triangleright;": "▹",
      "&trianglerighteq;": "⊵",
      "&tridot;": "◬",
      "&trie;": "≜",
      "&triminus;": "⨺",
      "&triplus;": "⨹",
      "&trisb;": "⧍",
      "&tritime;": "⨻",
      "&trpezium;": "⏢",
      "&tscr;": "𝓉",
      "&tscy;": "ц",
      "&tshcy;": "ћ",
      "&tstrok;": "ŧ",
      "&twixt;": "≬",
      "&twoheadleftarrow;": "↞",
      "&twoheadrightarrow;": "↠",
      "&uArr;": "⇑",
      "&uHar;": "⥣",
      "&uacute": "ú",
      "&uacute;": "ú",
      "&uarr;": "↑",
      "&ubrcy;": "ў",
      "&ubreve;": "ŭ",
      "&ucirc": "û",
      "&ucirc;": "û",
      "&ucy;": "у",
      "&udarr;": "⇅",
      "&udblac;": "ű",
      "&udhar;": "⥮",
      "&ufisht;": "⥾",
      "&ufr;": "𝔲",
      "&ugrave": "ù",
      "&ugrave;": "ù",
      "&uharl;": "↿",
      "&uharr;": "↾",
      "&uhblk;": "▀",
      "&ulcorn;": "⌜",
      "&ulcorner;": "⌜",
      "&ulcrop;": "⌏",
      "&ultri;": "◸",
      "&umacr;": "ū",
      "&uml": "¨",
      "&uml;": "¨",
      "&uogon;": "ų",
      "&uopf;": "𝕦",
      "&uparrow;": "↑",
      "&updownarrow;": "↕",
      "&upharpoonleft;": "↿",
      "&upharpoonright;": "↾",
      "&uplus;": "⊎",
      "&upsi;": "υ",
      "&upsih;": "ϒ",
      "&upsilon;": "υ",
      "&upuparrows;": "⇈",
      "&urcorn;": "⌝",
      "&urcorner;": "⌝",
      "&urcrop;": "⌎",
      "&uring;": "ů",
      "&urtri;": "◹",
      "&uscr;": "𝓊",
      "&utdot;": "⋰",
      "&utilde;": "ũ",
      "&utri;": "▵",
      "&utrif;": "▴",
      "&uuarr;": "⇈",
      "&uuml": "ü",
      "&uuml;": "ü",
      "&uwangle;": "⦧",
      "&vArr;": "⇕",
      "&vBar;": "⫨",
      "&vBarv;": "⫩",
      "&vDash;": "⊨",
      "&vangrt;": "⦜",
      "&varepsilon;": "ϵ",
      "&varkappa;": "ϰ",
      "&varnothing;": "∅",
      "&varphi;": "ϕ",
      "&varpi;": "ϖ",
      "&varpropto;": "∝",
      "&varr;": "↕",
      "&varrho;": "ϱ",
      "&varsigma;": "ς",
      "&varsubsetneq;": "⊊︀",
      "&varsubsetneqq;": "⫋︀",
      "&varsupsetneq;": "⊋︀",
      "&varsupsetneqq;": "⫌︀",
      "&vartheta;": "ϑ",
      "&vartriangleleft;": "⊲",
      "&vartriangleright;": "⊳",
      "&vcy;": "в",
      "&vdash;": "⊢",
      "&vee;": "∨",
      "&veebar;": "⊻",
      "&veeeq;": "≚",
      "&vellip;": "⋮",
      "&verbar;": "|",
      "&vert;": "|",
      "&vfr;": "𝔳",
      "&vltri;": "⊲",
      "&vnsub;": "⊂⃒",
      "&vnsup;": "⊃⃒",
      "&vopf;": "𝕧",
      "&vprop;": "∝",
      "&vrtri;": "⊳",
      "&vscr;": "𝓋",
      "&vsubnE;": "⫋︀",
      "&vsubne;": "⊊︀",
      "&vsupnE;": "⫌︀",
      "&vsupne;": "⊋︀",
      "&vzigzag;": "⦚",
      "&wcirc;": "ŵ",
      "&wedbar;": "⩟",
      "&wedge;": "∧",
      "&wedgeq;": "≙",
      "&weierp;": "℘",
      "&wfr;": "𝔴",
      "&wopf;": "𝕨",
      "&wp;": "℘",
      "&wr;": "≀",
      "&wreath;": "≀",
      "&wscr;": "𝓌",
      "&xcap;": "⋂",
      "&xcirc;": "◯",
      "&xcup;": "⋃",
      "&xdtri;": "▽",
      "&xfr;": "𝔵",
      "&xhArr;": "⟺",
      "&xharr;": "⟷",
      "&xi;": "ξ",
      "&xlArr;": "⟸",
      "&xlarr;": "⟵",
      "&xmap;": "⟼",
      "&xnis;": "⋻",
      "&xodot;": "⨀",
      "&xopf;": "𝕩",
      "&xoplus;": "⨁",
      "&xotime;": "⨂",
      "&xrArr;": "⟹",
      "&xrarr;": "⟶",
      "&xscr;": "𝓍",
      "&xsqcup;": "⨆",
      "&xuplus;": "⨄",
      "&xutri;": "△",
      "&xvee;": "⋁",
      "&xwedge;": "⋀",
      "&yacute": "ý",
      "&yacute;": "ý",
      "&yacy;": "я",
      "&ycirc;": "ŷ",
      "&ycy;": "ы",
      "&yen": "¥",
      "&yen;": "¥",
      "&yfr;": "𝔶",
      "&yicy;": "ї",
      "&yopf;": "𝕪",
      "&yscr;": "𝓎",
      "&yucy;": "ю",
      "&yuml": "ÿ",
      "&yuml;": "ÿ",
      "&zacute;": "ź",
      "&zcaron;": "ž",
      "&zcy;": "з",
      "&zdot;": "ż",
      "&zeetrf;": "ℨ",
      "&zeta;": "ζ",
      "&zfr;": "𝔷",
      "&zhcy;": "ж",
      "&zigrarr;": "⇝",
      "&zopf;": "𝕫",
      "&zscr;": "𝓏",
      "&zwj;": "‍",
      "&zwnj;": "‌"
    },
    characters: {
      "Æ": "&AElig;",
      "&": "&amp;",
      "Á": "&Aacute;",
      "Ă": "&Abreve;",
      "Â": "&Acirc;",
      "А": "&Acy;",
      "𝔄": "&Afr;",
      "À": "&Agrave;",
      "Α": "&Alpha;",
      "Ā": "&Amacr;",
      "⩓": "&And;",
      "Ą": "&Aogon;",
      "𝔸": "&Aopf;",
      "⁡": "&af;",
      "Å": "&angst;",
      "𝒜": "&Ascr;",
      "≔": "&coloneq;",
      "Ã": "&Atilde;",
      "Ä": "&Auml;",
      "∖": "&ssetmn;",
      "⫧": "&Barv;",
      "⌆": "&doublebarwedge;",
      "Б": "&Bcy;",
      "∵": "&because;",
      "ℬ": "&bernou;",
      "Β": "&Beta;",
      "𝔅": "&Bfr;",
      "𝔹": "&Bopf;",
      "˘": "&breve;",
      "≎": "&bump;",
      "Ч": "&CHcy;",
      "©": "&copy;",
      "Ć": "&Cacute;",
      "⋒": "&Cap;",
      "ⅅ": "&DD;",
      "ℭ": "&Cfr;",
      "Č": "&Ccaron;",
      "Ç": "&Ccedil;",
      "Ĉ": "&Ccirc;",
      "∰": "&Cconint;",
      "Ċ": "&Cdot;",
      "¸": "&cedil;",
      "·": "&middot;",
      "Χ": "&Chi;",
      "⊙": "&odot;",
      "⊖": "&ominus;",
      "⊕": "&oplus;",
      "⊗": "&otimes;",
      "∲": "&cwconint;",
      "”": "&rdquor;",
      "’": "&rsquor;",
      "∷": "&Proportion;",
      "⩴": "&Colone;",
      "≡": "&equiv;",
      "∯": "&DoubleContourIntegral;",
      "∮": "&oint;",
      "ℂ": "&complexes;",
      "∐": "&coprod;",
      "∳": "&awconint;",
      "⨯": "&Cross;",
      "𝒞": "&Cscr;",
      "⋓": "&Cup;",
      "≍": "&asympeq;",
      "⤑": "&DDotrahd;",
      "Ђ": "&DJcy;",
      "Ѕ": "&DScy;",
      "Џ": "&DZcy;",
      "‡": "&ddagger;",
      "↡": "&Darr;",
      "⫤": "&DoubleLeftTee;",
      "Ď": "&Dcaron;",
      "Д": "&Dcy;",
      "∇": "&nabla;",
      "Δ": "&Delta;",
      "𝔇": "&Dfr;",
      "´": "&acute;",
      "˙": "&dot;",
      "˝": "&dblac;",
      "`": "&grave;",
      "˜": "&tilde;",
      "⋄": "&diamond;",
      "ⅆ": "&dd;",
      "𝔻": "&Dopf;",
      "¨": "&uml;",
      "⃜": "&DotDot;",
      "≐": "&esdot;",
      "⇓": "&dArr;",
      "⇐": "&lArr;",
      "⇔": "&iff;",
      "⟸": "&xlArr;",
      "⟺": "&xhArr;",
      "⟹": "&xrArr;",
      "⇒": "&rArr;",
      "⊨": "&vDash;",
      "⇑": "&uArr;",
      "⇕": "&vArr;",
      "∥": "&spar;",
      "↓": "&downarrow;",
      "⤓": "&DownArrowBar;",
      "⇵": "&duarr;",
      "̑": "&DownBreve;",
      "⥐": "&DownLeftRightVector;",
      "⥞": "&DownLeftTeeVector;",
      "↽": "&lhard;",
      "⥖": "&DownLeftVectorBar;",
      "⥟": "&DownRightTeeVector;",
      "⇁": "&rightharpoondown;",
      "⥗": "&DownRightVectorBar;",
      "⊤": "&top;",
      "↧": "&mapstodown;",
      "𝒟": "&Dscr;",
      "Đ": "&Dstrok;",
      "Ŋ": "&ENG;",
      "Ð": "&ETH;",
      "É": "&Eacute;",
      "Ě": "&Ecaron;",
      "Ê": "&Ecirc;",
      "Э": "&Ecy;",
      "Ė": "&Edot;",
      "𝔈": "&Efr;",
      "È": "&Egrave;",
      "∈": "&isinv;",
      "Ē": "&Emacr;",
      "◻": "&EmptySmallSquare;",
      "▫": "&EmptyVerySmallSquare;",
      "Ę": "&Eogon;",
      "𝔼": "&Eopf;",
      "Ε": "&Epsilon;",
      "⩵": "&Equal;",
      "≂": "&esim;",
      "⇌": "&rlhar;",
      "ℰ": "&expectation;",
      "⩳": "&Esim;",
      "Η": "&Eta;",
      "Ë": "&Euml;",
      "∃": "&exist;",
      "ⅇ": "&exponentiale;",
      "Ф": "&Fcy;",
      "𝔉": "&Ffr;",
      "◼": "&FilledSmallSquare;",
      "▪": "&squf;",
      "𝔽": "&Fopf;",
      "∀": "&forall;",
      "ℱ": "&Fscr;",
      "Ѓ": "&GJcy;",
      ">": "&gt;",
      "Γ": "&Gamma;",
      "Ϝ": "&Gammad;",
      "Ğ": "&Gbreve;",
      "Ģ": "&Gcedil;",
      "Ĝ": "&Gcirc;",
      "Г": "&Gcy;",
      "Ġ": "&Gdot;",
      "𝔊": "&Gfr;",
      "⋙": "&ggg;",
      "𝔾": "&Gopf;",
      "≥": "&geq;",
      "⋛": "&gtreqless;",
      "≧": "&geqq;",
      "⪢": "&GreaterGreater;",
      "≷": "&gtrless;",
      "⩾": "&ges;",
      "≳": "&gtrsim;",
      "𝒢": "&Gscr;",
      "≫": "&gg;",
      "Ъ": "&HARDcy;",
      "ˇ": "&caron;",
      "^": "&Hat;",
      "Ĥ": "&Hcirc;",
      "ℌ": "&Poincareplane;",
      "ℋ": "&hamilt;",
      "ℍ": "&quaternions;",
      "─": "&boxh;",
      "Ħ": "&Hstrok;",
      "≏": "&bumpeq;",
      "Е": "&IEcy;",
      "Ĳ": "&IJlig;",
      "Ё": "&IOcy;",
      "Í": "&Iacute;",
      "Î": "&Icirc;",
      "И": "&Icy;",
      "İ": "&Idot;",
      "ℑ": "&imagpart;",
      "Ì": "&Igrave;",
      "Ī": "&Imacr;",
      "ⅈ": "&ii;",
      "∬": "&Int;",
      "∫": "&int;",
      "⋂": "&xcap;",
      "⁣": "&ic;",
      "⁢": "&it;",
      "Į": "&Iogon;",
      "𝕀": "&Iopf;",
      "Ι": "&Iota;",
      "ℐ": "&imagline;",
      "Ĩ": "&Itilde;",
      "І": "&Iukcy;",
      "Ï": "&Iuml;",
      "Ĵ": "&Jcirc;",
      "Й": "&Jcy;",
      "𝔍": "&Jfr;",
      "𝕁": "&Jopf;",
      "𝒥": "&Jscr;",
      "Ј": "&Jsercy;",
      "Є": "&Jukcy;",
      "Х": "&KHcy;",
      "Ќ": "&KJcy;",
      "Κ": "&Kappa;",
      "Ķ": "&Kcedil;",
      "К": "&Kcy;",
      "𝔎": "&Kfr;",
      "𝕂": "&Kopf;",
      "𝒦": "&Kscr;",
      "Љ": "&LJcy;",
      "<": "&lt;",
      "Ĺ": "&Lacute;",
      "Λ": "&Lambda;",
      "⟪": "&Lang;",
      "ℒ": "&lagran;",
      "↞": "&twoheadleftarrow;",
      "Ľ": "&Lcaron;",
      "Ļ": "&Lcedil;",
      "Л": "&Lcy;",
      "⟨": "&langle;",
      "←": "&slarr;",
      "⇤": "&larrb;",
      "⇆": "&lrarr;",
      "⌈": "&lceil;",
      "⟦": "&lobrk;",
      "⥡": "&LeftDownTeeVector;",
      "⇃": "&downharpoonleft;",
      "⥙": "&LeftDownVectorBar;",
      "⌊": "&lfloor;",
      "↔": "&leftrightarrow;",
      "⥎": "&LeftRightVector;",
      "⊣": "&dashv;",
      "↤": "&mapstoleft;",
      "⥚": "&LeftTeeVector;",
      "⊲": "&vltri;",
      "⧏": "&LeftTriangleBar;",
      "⊴": "&trianglelefteq;",
      "⥑": "&LeftUpDownVector;",
      "⥠": "&LeftUpTeeVector;",
      "↿": "&upharpoonleft;",
      "⥘": "&LeftUpVectorBar;",
      "↼": "&lharu;",
      "⥒": "&LeftVectorBar;",
      "⋚": "&lesseqgtr;",
      "≦": "&leqq;",
      "≶": "&lg;",
      "⪡": "&LessLess;",
      "⩽": "&les;",
      "≲": "&lsim;",
      "𝔏": "&Lfr;",
      "⋘": "&Ll;",
      "⇚": "&lAarr;",
      "Ŀ": "&Lmidot;",
      "⟵": "&xlarr;",
      "⟷": "&xharr;",
      "⟶": "&xrarr;",
      "𝕃": "&Lopf;",
      "↙": "&swarrow;",
      "↘": "&searrow;",
      "↰": "&lsh;",
      "Ł": "&Lstrok;",
      "≪": "&ll;",
      "⤅": "&Map;",
      "М": "&Mcy;",
      " ": "&MediumSpace;",
      "ℳ": "&phmmat;",
      "𝔐": "&Mfr;",
      "∓": "&mp;",
      "𝕄": "&Mopf;",
      "Μ": "&Mu;",
      "Њ": "&NJcy;",
      "Ń": "&Nacute;",
      "Ň": "&Ncaron;",
      "Ņ": "&Ncedil;",
      "Н": "&Ncy;",
      "​": "&ZeroWidthSpace;",
      "\n": "&NewLine;",
      "𝔑": "&Nfr;",
      "⁠": "&NoBreak;",
      " ": "&nbsp;",
      "ℕ": "&naturals;",
      "⫬": "&Not;",
      "≢": "&nequiv;",
      "≭": "&NotCupCap;",
      "∦": "&nspar;",
      "∉": "&notinva;",
      "≠": "&ne;",
      "≂̸": "&nesim;",
      "∄": "&nexists;",
      "≯": "&ngtr;",
      "≱": "&ngeq;",
      "≧̸": "&ngeqq;",
      "≫̸": "&nGtv;",
      "≹": "&ntgl;",
      "⩾̸": "&nges;",
      "≵": "&ngsim;",
      "≎̸": "&nbump;",
      "≏̸": "&nbumpe;",
      "⋪": "&ntriangleleft;",
      "⧏̸": "&NotLeftTriangleBar;",
      "⋬": "&ntrianglelefteq;",
      "≮": "&nlt;",
      "≰": "&nleq;",
      "≸": "&ntlg;",
      "≪̸": "&nLtv;",
      "⩽̸": "&nles;",
      "≴": "&nlsim;",
      "⪢̸": "&NotNestedGreaterGreater;",
      "⪡̸": "&NotNestedLessLess;",
      "⊀": "&nprec;",
      "⪯̸": "&npreceq;",
      "⋠": "&nprcue;",
      "∌": "&notniva;",
      "⋫": "&ntriangleright;",
      "⧐̸": "&NotRightTriangleBar;",
      "⋭": "&ntrianglerighteq;",
      "⊏̸": "&NotSquareSubset;",
      "⋢": "&nsqsube;",
      "⊐̸": "&NotSquareSuperset;",
      "⋣": "&nsqsupe;",
      "⊂⃒": "&vnsub;",
      "⊈": "&nsubseteq;",
      "⊁": "&nsucc;",
      "⪰̸": "&nsucceq;",
      "⋡": "&nsccue;",
      "≿̸": "&NotSucceedsTilde;",
      "⊃⃒": "&vnsup;",
      "⊉": "&nsupseteq;",
      "≁": "&nsim;",
      "≄": "&nsimeq;",
      "≇": "&ncong;",
      "≉": "&napprox;",
      "∤": "&nsmid;",
      "𝒩": "&Nscr;",
      "Ñ": "&Ntilde;",
      "Ν": "&Nu;",
      "Œ": "&OElig;",
      "Ó": "&Oacute;",
      "Ô": "&Ocirc;",
      "О": "&Ocy;",
      "Ő": "&Odblac;",
      "𝔒": "&Ofr;",
      "Ò": "&Ograve;",
      "Ō": "&Omacr;",
      "Ω": "&ohm;",
      "Ο": "&Omicron;",
      "𝕆": "&Oopf;",
      "“": "&ldquo;",
      "‘": "&lsquo;",
      "⩔": "&Or;",
      "𝒪": "&Oscr;",
      "Ø": "&Oslash;",
      "Õ": "&Otilde;",
      "⨷": "&Otimes;",
      "Ö": "&Ouml;",
      "‾": "&oline;",
      "⏞": "&OverBrace;",
      "⎴": "&tbrk;",
      "⏜": "&OverParenthesis;",
      "∂": "&part;",
      "П": "&Pcy;",
      "𝔓": "&Pfr;",
      "Φ": "&Phi;",
      "Π": "&Pi;",
      "±": "&pm;",
      "ℙ": "&primes;",
      "⪻": "&Pr;",
      "≺": "&prec;",
      "⪯": "&preceq;",
      "≼": "&preccurlyeq;",
      "≾": "&prsim;",
      "″": "&Prime;",
      "∏": "&prod;",
      "∝": "&vprop;",
      "𝒫": "&Pscr;",
      "Ψ": "&Psi;",
      '"': "&quot;",
      "𝔔": "&Qfr;",
      "ℚ": "&rationals;",
      "𝒬": "&Qscr;",
      "⤐": "&drbkarow;",
      "®": "&reg;",
      "Ŕ": "&Racute;",
      "⟫": "&Rang;",
      "↠": "&twoheadrightarrow;",
      "⤖": "&Rarrtl;",
      "Ř": "&Rcaron;",
      "Ŗ": "&Rcedil;",
      "Р": "&Rcy;",
      "ℜ": "&realpart;",
      "∋": "&niv;",
      "⇋": "&lrhar;",
      "⥯": "&duhar;",
      "Ρ": "&Rho;",
      "⟩": "&rangle;",
      "→": "&srarr;",
      "⇥": "&rarrb;",
      "⇄": "&rlarr;",
      "⌉": "&rceil;",
      "⟧": "&robrk;",
      "⥝": "&RightDownTeeVector;",
      "⇂": "&downharpoonright;",
      "⥕": "&RightDownVectorBar;",
      "⌋": "&rfloor;",
      "⊢": "&vdash;",
      "↦": "&mapsto;",
      "⥛": "&RightTeeVector;",
      "⊳": "&vrtri;",
      "⧐": "&RightTriangleBar;",
      "⊵": "&trianglerighteq;",
      "⥏": "&RightUpDownVector;",
      "⥜": "&RightUpTeeVector;",
      "↾": "&upharpoonright;",
      "⥔": "&RightUpVectorBar;",
      "⇀": "&rightharpoonup;",
      "⥓": "&RightVectorBar;",
      "ℝ": "&reals;",
      "⥰": "&RoundImplies;",
      "⇛": "&rAarr;",
      "ℛ": "&realine;",
      "↱": "&rsh;",
      "⧴": "&RuleDelayed;",
      "Щ": "&SHCHcy;",
      "Ш": "&SHcy;",
      "Ь": "&SOFTcy;",
      "Ś": "&Sacute;",
      "⪼": "&Sc;",
      "Š": "&Scaron;",
      "Ş": "&Scedil;",
      "Ŝ": "&Scirc;",
      "С": "&Scy;",
      "𝔖": "&Sfr;",
      "↑": "&uparrow;",
      "Σ": "&Sigma;",
      "∘": "&compfn;",
      "𝕊": "&Sopf;",
      "√": "&radic;",
      "□": "&square;",
      "⊓": "&sqcap;",
      "⊏": "&sqsubset;",
      "⊑": "&sqsubseteq;",
      "⊐": "&sqsupset;",
      "⊒": "&sqsupseteq;",
      "⊔": "&sqcup;",
      "𝒮": "&Sscr;",
      "⋆": "&sstarf;",
      "⋐": "&Subset;",
      "⊆": "&subseteq;",
      "≻": "&succ;",
      "⪰": "&succeq;",
      "≽": "&succcurlyeq;",
      "≿": "&succsim;",
      "∑": "&sum;",
      "⋑": "&Supset;",
      "⊃": "&supset;",
      "⊇": "&supseteq;",
      "Þ": "&THORN;",
      "™": "&trade;",
      "Ћ": "&TSHcy;",
      "Ц": "&TScy;",
      "\t": "&Tab;",
      "Τ": "&Tau;",
      "Ť": "&Tcaron;",
      "Ţ": "&Tcedil;",
      "Т": "&Tcy;",
      "𝔗": "&Tfr;",
      "∴": "&therefore;",
      "Θ": "&Theta;",
      "  ": "&ThickSpace;",
      " ": "&thinsp;",
      "∼": "&thksim;",
      "≃": "&simeq;",
      "≅": "&cong;",
      "≈": "&thkap;",
      "𝕋": "&Topf;",
      "⃛": "&tdot;",
      "𝒯": "&Tscr;",
      "Ŧ": "&Tstrok;",
      "Ú": "&Uacute;",
      "↟": "&Uarr;",
      "⥉": "&Uarrocir;",
      "Ў": "&Ubrcy;",
      "Ŭ": "&Ubreve;",
      "Û": "&Ucirc;",
      "У": "&Ucy;",
      "Ű": "&Udblac;",
      "𝔘": "&Ufr;",
      "Ù": "&Ugrave;",
      "Ū": "&Umacr;",
      _: "&lowbar;",
      "⏟": "&UnderBrace;",
      "⎵": "&bbrk;",
      "⏝": "&UnderParenthesis;",
      "⋃": "&xcup;",
      "⊎": "&uplus;",
      "Ų": "&Uogon;",
      "𝕌": "&Uopf;",
      "⤒": "&UpArrowBar;",
      "⇅": "&udarr;",
      "↕": "&varr;",
      "⥮": "&udhar;",
      "⊥": "&perp;",
      "↥": "&mapstoup;",
      "↖": "&nwarrow;",
      "↗": "&nearrow;",
      "ϒ": "&upsih;",
      "Υ": "&Upsilon;",
      "Ů": "&Uring;",
      "𝒰": "&Uscr;",
      "Ũ": "&Utilde;",
      "Ü": "&Uuml;",
      "⊫": "&VDash;",
      "⫫": "&Vbar;",
      "В": "&Vcy;",
      "⊩": "&Vdash;",
      "⫦": "&Vdashl;",
      "⋁": "&xvee;",
      "‖": "&Vert;",
      "∣": "&smid;",
      "|": "&vert;",
      "❘": "&VerticalSeparator;",
      "≀": "&wreath;",
      " ": "&hairsp;",
      "𝔙": "&Vfr;",
      "𝕍": "&Vopf;",
      "𝒱": "&Vscr;",
      "⊪": "&Vvdash;",
      "Ŵ": "&Wcirc;",
      "⋀": "&xwedge;",
      "𝔚": "&Wfr;",
      "𝕎": "&Wopf;",
      "𝒲": "&Wscr;",
      "𝔛": "&Xfr;",
      "Ξ": "&Xi;",
      "𝕏": "&Xopf;",
      "𝒳": "&Xscr;",
      "Я": "&YAcy;",
      "Ї": "&YIcy;",
      "Ю": "&YUcy;",
      "Ý": "&Yacute;",
      "Ŷ": "&Ycirc;",
      "Ы": "&Ycy;",
      "𝔜": "&Yfr;",
      "𝕐": "&Yopf;",
      "𝒴": "&Yscr;",
      "Ÿ": "&Yuml;",
      "Ж": "&ZHcy;",
      "Ź": "&Zacute;",
      "Ž": "&Zcaron;",
      "З": "&Zcy;",
      "Ż": "&Zdot;",
      "Ζ": "&Zeta;",
      "ℨ": "&zeetrf;",
      "ℤ": "&integers;",
      "𝒵": "&Zscr;",
      "á": "&aacute;",
      "ă": "&abreve;",
      "∾": "&mstpos;",
      "∾̳": "&acE;",
      "∿": "&acd;",
      "â": "&acirc;",
      "а": "&acy;",
      "æ": "&aelig;",
      "𝔞": "&afr;",
      "à": "&agrave;",
      "ℵ": "&aleph;",
      "α": "&alpha;",
      "ā": "&amacr;",
      "⨿": "&amalg;",
      "∧": "&wedge;",
      "⩕": "&andand;",
      "⩜": "&andd;",
      "⩘": "&andslope;",
      "⩚": "&andv;",
      "∠": "&angle;",
      "⦤": "&ange;",
      "∡": "&measuredangle;",
      "⦨": "&angmsdaa;",
      "⦩": "&angmsdab;",
      "⦪": "&angmsdac;",
      "⦫": "&angmsdad;",
      "⦬": "&angmsdae;",
      "⦭": "&angmsdaf;",
      "⦮": "&angmsdag;",
      "⦯": "&angmsdah;",
      "∟": "&angrt;",
      "⊾": "&angrtvb;",
      "⦝": "&angrtvbd;",
      "∢": "&angsph;",
      "⍼": "&angzarr;",
      "ą": "&aogon;",
      "𝕒": "&aopf;",
      "⩰": "&apE;",
      "⩯": "&apacir;",
      "≊": "&approxeq;",
      "≋": "&apid;",
      "'": "&apos;",
      "å": "&aring;",
      "𝒶": "&ascr;",
      "*": "&midast;",
      "ã": "&atilde;",
      "ä": "&auml;",
      "⨑": "&awint;",
      "⫭": "&bNot;",
      "≌": "&bcong;",
      "϶": "&bepsi;",
      "‵": "&bprime;",
      "∽": "&bsim;",
      "⋍": "&bsime;",
      "⊽": "&barvee;",
      "⌅": "&barwedge;",
      "⎶": "&bbrktbrk;",
      "б": "&bcy;",
      "„": "&ldquor;",
      "⦰": "&bemptyv;",
      "β": "&beta;",
      "ℶ": "&beth;",
      "≬": "&twixt;",
      "𝔟": "&bfr;",
      "◯": "&xcirc;",
      "⨀": "&xodot;",
      "⨁": "&xoplus;",
      "⨂": "&xotime;",
      "⨆": "&xsqcup;",
      "★": "&starf;",
      "▽": "&xdtri;",
      "△": "&xutri;",
      "⨄": "&xuplus;",
      "⤍": "&rbarr;",
      "⧫": "&lozf;",
      "▴": "&utrif;",
      "▾": "&dtrif;",
      "◂": "&ltrif;",
      "▸": "&rtrif;",
      "␣": "&blank;",
      "▒": "&blk12;",
      "░": "&blk14;",
      "▓": "&blk34;",
      "█": "&block;",
      "=⃥": "&bne;",
      "≡⃥": "&bnequiv;",
      "⌐": "&bnot;",
      "𝕓": "&bopf;",
      "⋈": "&bowtie;",
      "╗": "&boxDL;",
      "╔": "&boxDR;",
      "╖": "&boxDl;",
      "╓": "&boxDr;",
      "═": "&boxH;",
      "╦": "&boxHD;",
      "╩": "&boxHU;",
      "╤": "&boxHd;",
      "╧": "&boxHu;",
      "╝": "&boxUL;",
      "╚": "&boxUR;",
      "╜": "&boxUl;",
      "╙": "&boxUr;",
      "║": "&boxV;",
      "╬": "&boxVH;",
      "╣": "&boxVL;",
      "╠": "&boxVR;",
      "╫": "&boxVh;",
      "╢": "&boxVl;",
      "╟": "&boxVr;",
      "⧉": "&boxbox;",
      "╕": "&boxdL;",
      "╒": "&boxdR;",
      "┐": "&boxdl;",
      "┌": "&boxdr;",
      "╥": "&boxhD;",
      "╨": "&boxhU;",
      "┬": "&boxhd;",
      "┴": "&boxhu;",
      "⊟": "&minusb;",
      "⊞": "&plusb;",
      "⊠": "&timesb;",
      "╛": "&boxuL;",
      "╘": "&boxuR;",
      "┘": "&boxul;",
      "└": "&boxur;",
      "│": "&boxv;",
      "╪": "&boxvH;",
      "╡": "&boxvL;",
      "╞": "&boxvR;",
      "┼": "&boxvh;",
      "┤": "&boxvl;",
      "├": "&boxvr;",
      "¦": "&brvbar;",
      "𝒷": "&bscr;",
      "⁏": "&bsemi;",
      "\\": "&bsol;",
      "⧅": "&bsolb;",
      "⟈": "&bsolhsub;",
      "•": "&bullet;",
      "⪮": "&bumpE;",
      "ć": "&cacute;",
      "∩": "&cap;",
      "⩄": "&capand;",
      "⩉": "&capbrcup;",
      "⩋": "&capcap;",
      "⩇": "&capcup;",
      "⩀": "&capdot;",
      "∩︀": "&caps;",
      "⁁": "&caret;",
      "⩍": "&ccaps;",
      "č": "&ccaron;",
      "ç": "&ccedil;",
      "ĉ": "&ccirc;",
      "⩌": "&ccups;",
      "⩐": "&ccupssm;",
      "ċ": "&cdot;",
      "⦲": "&cemptyv;",
      "¢": "&cent;",
      "𝔠": "&cfr;",
      "ч": "&chcy;",
      "✓": "&checkmark;",
      "χ": "&chi;",
      "○": "&cir;",
      "⧃": "&cirE;",
      "ˆ": "&circ;",
      "≗": "&cire;",
      "↺": "&olarr;",
      "↻": "&orarr;",
      "Ⓢ": "&oS;",
      "⊛": "&oast;",
      "⊚": "&ocir;",
      "⊝": "&odash;",
      "⨐": "&cirfnint;",
      "⫯": "&cirmid;",
      "⧂": "&cirscir;",
      "♣": "&clubsuit;",
      ":": "&colon;",
      ",": "&comma;",
      "@": "&commat;",
      "∁": "&complement;",
      "⩭": "&congdot;",
      "𝕔": "&copf;",
      "℗": "&copysr;",
      "↵": "&crarr;",
      "✗": "&cross;",
      "𝒸": "&cscr;",
      "⫏": "&csub;",
      "⫑": "&csube;",
      "⫐": "&csup;",
      "⫒": "&csupe;",
      "⋯": "&ctdot;",
      "⤸": "&cudarrl;",
      "⤵": "&cudarrr;",
      "⋞": "&curlyeqprec;",
      "⋟": "&curlyeqsucc;",
      "↶": "&curvearrowleft;",
      "⤽": "&cularrp;",
      "∪": "&cup;",
      "⩈": "&cupbrcap;",
      "⩆": "&cupcap;",
      "⩊": "&cupcup;",
      "⊍": "&cupdot;",
      "⩅": "&cupor;",
      "∪︀": "&cups;",
      "↷": "&curvearrowright;",
      "⤼": "&curarrm;",
      "⋎": "&cuvee;",
      "⋏": "&cuwed;",
      "¤": "&curren;",
      "∱": "&cwint;",
      "⌭": "&cylcty;",
      "⥥": "&dHar;",
      "†": "&dagger;",
      "ℸ": "&daleth;",
      "‐": "&hyphen;",
      "⤏": "&rBarr;",
      "ď": "&dcaron;",
      "д": "&dcy;",
      "⇊": "&downdownarrows;",
      "⩷": "&eDDot;",
      "°": "&deg;",
      "δ": "&delta;",
      "⦱": "&demptyv;",
      "⥿": "&dfisht;",
      "𝔡": "&dfr;",
      "♦": "&diams;",
      "ϝ": "&gammad;",
      "⋲": "&disin;",
      "÷": "&divide;",
      "⋇": "&divonx;",
      "ђ": "&djcy;",
      "⌞": "&llcorner;",
      "⌍": "&dlcrop;",
      $: "&dollar;",
      "𝕕": "&dopf;",
      "≑": "&eDot;",
      "∸": "&minusd;",
      "∔": "&plusdo;",
      "⊡": "&sdotb;",
      "⌟": "&lrcorner;",
      "⌌": "&drcrop;",
      "𝒹": "&dscr;",
      "ѕ": "&dscy;",
      "⧶": "&dsol;",
      "đ": "&dstrok;",
      "⋱": "&dtdot;",
      "▿": "&triangledown;",
      "⦦": "&dwangle;",
      "џ": "&dzcy;",
      "⟿": "&dzigrarr;",
      "é": "&eacute;",
      "⩮": "&easter;",
      "ě": "&ecaron;",
      "≖": "&eqcirc;",
      "ê": "&ecirc;",
      "≕": "&eqcolon;",
      "э": "&ecy;",
      "ė": "&edot;",
      "≒": "&fallingdotseq;",
      "𝔢": "&efr;",
      "⪚": "&eg;",
      "è": "&egrave;",
      "⪖": "&eqslantgtr;",
      "⪘": "&egsdot;",
      "⪙": "&el;",
      "⏧": "&elinters;",
      "ℓ": "&ell;",
      "⪕": "&eqslantless;",
      "⪗": "&elsdot;",
      "ē": "&emacr;",
      "∅": "&varnothing;",
      " ": "&emsp13;",
      " ": "&emsp14;",
      " ": "&emsp;",
      "ŋ": "&eng;",
      " ": "&ensp;",
      "ę": "&eogon;",
      "𝕖": "&eopf;",
      "⋕": "&epar;",
      "⧣": "&eparsl;",
      "⩱": "&eplus;",
      "ε": "&epsilon;",
      "ϵ": "&varepsilon;",
      "=": "&equals;",
      "≟": "&questeq;",
      "⩸": "&equivDD;",
      "⧥": "&eqvparsl;",
      "≓": "&risingdotseq;",
      "⥱": "&erarr;",
      "ℯ": "&escr;",
      "η": "&eta;",
      "ð": "&eth;",
      "ë": "&euml;",
      "€": "&euro;",
      "!": "&excl;",
      "ф": "&fcy;",
      "♀": "&female;",
      "ﬃ": "&ffilig;",
      "ﬀ": "&fflig;",
      "ﬄ": "&ffllig;",
      "𝔣": "&ffr;",
      "ﬁ": "&filig;",
      fj: "&fjlig;",
      "♭": "&flat;",
      "ﬂ": "&fllig;",
      "▱": "&fltns;",
      "ƒ": "&fnof;",
      "𝕗": "&fopf;",
      "⋔": "&pitchfork;",
      "⫙": "&forkv;",
      "⨍": "&fpartint;",
      "½": "&half;",
      "⅓": "&frac13;",
      "¼": "&frac14;",
      "⅕": "&frac15;",
      "⅙": "&frac16;",
      "⅛": "&frac18;",
      "⅔": "&frac23;",
      "⅖": "&frac25;",
      "¾": "&frac34;",
      "⅗": "&frac35;",
      "⅜": "&frac38;",
      "⅘": "&frac45;",
      "⅚": "&frac56;",
      "⅝": "&frac58;",
      "⅞": "&frac78;",
      "⁄": "&frasl;",
      "⌢": "&sfrown;",
      "𝒻": "&fscr;",
      "⪌": "&gtreqqless;",
      "ǵ": "&gacute;",
      "γ": "&gamma;",
      "⪆": "&gtrapprox;",
      "ğ": "&gbreve;",
      "ĝ": "&gcirc;",
      "г": "&gcy;",
      "ġ": "&gdot;",
      "⪩": "&gescc;",
      "⪀": "&gesdot;",
      "⪂": "&gesdoto;",
      "⪄": "&gesdotol;",
      "⋛︀": "&gesl;",
      "⪔": "&gesles;",
      "𝔤": "&gfr;",
      "ℷ": "&gimel;",
      "ѓ": "&gjcy;",
      "⪒": "&glE;",
      "⪥": "&gla;",
      "⪤": "&glj;",
      "≩": "&gneqq;",
      "⪊": "&gnapprox;",
      "⪈": "&gneq;",
      "⋧": "&gnsim;",
      "𝕘": "&gopf;",
      "ℊ": "&gscr;",
      "⪎": "&gsime;",
      "⪐": "&gsiml;",
      "⪧": "&gtcc;",
      "⩺": "&gtcir;",
      "⋗": "&gtrdot;",
      "⦕": "&gtlPar;",
      "⩼": "&gtquest;",
      "⥸": "&gtrarr;",
      "≩︀": "&gvnE;",
      "ъ": "&hardcy;",
      "⥈": "&harrcir;",
      "↭": "&leftrightsquigarrow;",
      "ℏ": "&plankv;",
      "ĥ": "&hcirc;",
      "♥": "&heartsuit;",
      "…": "&mldr;",
      "⊹": "&hercon;",
      "𝔥": "&hfr;",
      "⤥": "&searhk;",
      "⤦": "&swarhk;",
      "⇿": "&hoarr;",
      "∻": "&homtht;",
      "↩": "&larrhk;",
      "↪": "&rarrhk;",
      "𝕙": "&hopf;",
      "―": "&horbar;",
      "𝒽": "&hscr;",
      "ħ": "&hstrok;",
      "⁃": "&hybull;",
      "í": "&iacute;",
      "î": "&icirc;",
      "и": "&icy;",
      "е": "&iecy;",
      "¡": "&iexcl;",
      "𝔦": "&ifr;",
      "ì": "&igrave;",
      "⨌": "&qint;",
      "∭": "&tint;",
      "⧜": "&iinfin;",
      "℩": "&iiota;",
      "ĳ": "&ijlig;",
      "ī": "&imacr;",
      "ı": "&inodot;",
      "⊷": "&imof;",
      "Ƶ": "&imped;",
      "℅": "&incare;",
      "∞": "&infin;",
      "⧝": "&infintie;",
      "⊺": "&intercal;",
      "⨗": "&intlarhk;",
      "⨼": "&iprod;",
      "ё": "&iocy;",
      "į": "&iogon;",
      "𝕚": "&iopf;",
      "ι": "&iota;",
      "¿": "&iquest;",
      "𝒾": "&iscr;",
      "⋹": "&isinE;",
      "⋵": "&isindot;",
      "⋴": "&isins;",
      "⋳": "&isinsv;",
      "ĩ": "&itilde;",
      "і": "&iukcy;",
      "ï": "&iuml;",
      "ĵ": "&jcirc;",
      "й": "&jcy;",
      "𝔧": "&jfr;",
      "ȷ": "&jmath;",
      "𝕛": "&jopf;",
      "𝒿": "&jscr;",
      "ј": "&jsercy;",
      "є": "&jukcy;",
      "κ": "&kappa;",
      "ϰ": "&varkappa;",
      "ķ": "&kcedil;",
      "к": "&kcy;",
      "𝔨": "&kfr;",
      "ĸ": "&kgreen;",
      "х": "&khcy;",
      "ќ": "&kjcy;",
      "𝕜": "&kopf;",
      "𝓀": "&kscr;",
      "⤛": "&lAtail;",
      "⤎": "&lBarr;",
      "⪋": "&lesseqqgtr;",
      "⥢": "&lHar;",
      "ĺ": "&lacute;",
      "⦴": "&laemptyv;",
      "λ": "&lambda;",
      "⦑": "&langd;",
      "⪅": "&lessapprox;",
      "«": "&laquo;",
      "⤟": "&larrbfs;",
      "⤝": "&larrfs;",
      "↫": "&looparrowleft;",
      "⤹": "&larrpl;",
      "⥳": "&larrsim;",
      "↢": "&leftarrowtail;",
      "⪫": "&lat;",
      "⤙": "&latail;",
      "⪭": "&late;",
      "⪭︀": "&lates;",
      "⤌": "&lbarr;",
      "❲": "&lbbrk;",
      "{": "&lcub;",
      "[": "&lsqb;",
      "⦋": "&lbrke;",
      "⦏": "&lbrksld;",
      "⦍": "&lbrkslu;",
      "ľ": "&lcaron;",
      "ļ": "&lcedil;",
      "л": "&lcy;",
      "⤶": "&ldca;",
      "⥧": "&ldrdhar;",
      "⥋": "&ldrushar;",
      "↲": "&ldsh;",
      "≤": "&leq;",
      "⇇": "&llarr;",
      "⋋": "&lthree;",
      "⪨": "&lescc;",
      "⩿": "&lesdot;",
      "⪁": "&lesdoto;",
      "⪃": "&lesdotor;",
      "⋚︀": "&lesg;",
      "⪓": "&lesges;",
      "⋖": "&ltdot;",
      "⥼": "&lfisht;",
      "𝔩": "&lfr;",
      "⪑": "&lgE;",
      "⥪": "&lharul;",
      "▄": "&lhblk;",
      "љ": "&ljcy;",
      "⥫": "&llhard;",
      "◺": "&lltri;",
      "ŀ": "&lmidot;",
      "⎰": "&lmoustache;",
      "≨": "&lneqq;",
      "⪉": "&lnapprox;",
      "⪇": "&lneq;",
      "⋦": "&lnsim;",
      "⟬": "&loang;",
      "⇽": "&loarr;",
      "⟼": "&xmap;",
      "↬": "&rarrlp;",
      "⦅": "&lopar;",
      "𝕝": "&lopf;",
      "⨭": "&loplus;",
      "⨴": "&lotimes;",
      "∗": "&lowast;",
      "◊": "&lozenge;",
      "(": "&lpar;",
      "⦓": "&lparlt;",
      "⥭": "&lrhard;",
      "‎": "&lrm;",
      "⊿": "&lrtri;",
      "‹": "&lsaquo;",
      "𝓁": "&lscr;",
      "⪍": "&lsime;",
      "⪏": "&lsimg;",
      "‚": "&sbquo;",
      "ł": "&lstrok;",
      "⪦": "&ltcc;",
      "⩹": "&ltcir;",
      "⋉": "&ltimes;",
      "⥶": "&ltlarr;",
      "⩻": "&ltquest;",
      "⦖": "&ltrPar;",
      "◃": "&triangleleft;",
      "⥊": "&lurdshar;",
      "⥦": "&luruhar;",
      "≨︀": "&lvnE;",
      "∺": "&mDDot;",
      "¯": "&strns;",
      "♂": "&male;",
      "✠": "&maltese;",
      "▮": "&marker;",
      "⨩": "&mcomma;",
      "м": "&mcy;",
      "—": "&mdash;",
      "𝔪": "&mfr;",
      "℧": "&mho;",
      "µ": "&micro;",
      "⫰": "&midcir;",
      "−": "&minus;",
      "⨪": "&minusdu;",
      "⫛": "&mlcp;",
      "⊧": "&models;",
      "𝕞": "&mopf;",
      "𝓂": "&mscr;",
      "μ": "&mu;",
      "⊸": "&mumap;",
      "⋙̸": "&nGg;",
      "≫⃒": "&nGt;",
      "⇍": "&nlArr;",
      "⇎": "&nhArr;",
      "⋘̸": "&nLl;",
      "≪⃒": "&nLt;",
      "⇏": "&nrArr;",
      "⊯": "&nVDash;",
      "⊮": "&nVdash;",
      "ń": "&nacute;",
      "∠⃒": "&nang;",
      "⩰̸": "&napE;",
      "≋̸": "&napid;",
      "ŉ": "&napos;",
      "♮": "&natural;",
      "⩃": "&ncap;",
      "ň": "&ncaron;",
      "ņ": "&ncedil;",
      "⩭̸": "&ncongdot;",
      "⩂": "&ncup;",
      "н": "&ncy;",
      "–": "&ndash;",
      "⇗": "&neArr;",
      "⤤": "&nearhk;",
      "≐̸": "&nedot;",
      "⤨": "&toea;",
      "𝔫": "&nfr;",
      "↮": "&nleftrightarrow;",
      "⫲": "&nhpar;",
      "⋼": "&nis;",
      "⋺": "&nisd;",
      "њ": "&njcy;",
      "≦̸": "&nleqq;",
      "↚": "&nleftarrow;",
      "‥": "&nldr;",
      "𝕟": "&nopf;",
      "¬": "&not;",
      "⋹̸": "&notinE;",
      "⋵̸": "&notindot;",
      "⋷": "&notinvb;",
      "⋶": "&notinvc;",
      "⋾": "&notnivb;",
      "⋽": "&notnivc;",
      "⫽⃥": "&nparsl;",
      "∂̸": "&npart;",
      "⨔": "&npolint;",
      "↛": "&nrightarrow;",
      "⤳̸": "&nrarrc;",
      "↝̸": "&nrarrw;",
      "𝓃": "&nscr;",
      "⊄": "&nsub;",
      "⫅̸": "&nsubseteqq;",
      "⊅": "&nsup;",
      "⫆̸": "&nsupseteqq;",
      "ñ": "&ntilde;",
      "ν": "&nu;",
      "#": "&num;",
      "№": "&numero;",
      " ": "&numsp;",
      "⊭": "&nvDash;",
      "⤄": "&nvHarr;",
      "≍⃒": "&nvap;",
      "⊬": "&nvdash;",
      "≥⃒": "&nvge;",
      ">⃒": "&nvgt;",
      "⧞": "&nvinfin;",
      "⤂": "&nvlArr;",
      "≤⃒": "&nvle;",
      "<⃒": "&nvlt;",
      "⊴⃒": "&nvltrie;",
      "⤃": "&nvrArr;",
      "⊵⃒": "&nvrtrie;",
      "∼⃒": "&nvsim;",
      "⇖": "&nwArr;",
      "⤣": "&nwarhk;",
      "⤧": "&nwnear;",
      "ó": "&oacute;",
      "ô": "&ocirc;",
      "о": "&ocy;",
      "ő": "&odblac;",
      "⨸": "&odiv;",
      "⦼": "&odsold;",
      "œ": "&oelig;",
      "⦿": "&ofcir;",
      "𝔬": "&ofr;",
      "˛": "&ogon;",
      "ò": "&ograve;",
      "⧁": "&ogt;",
      "⦵": "&ohbar;",
      "⦾": "&olcir;",
      "⦻": "&olcross;",
      "⧀": "&olt;",
      "ō": "&omacr;",
      "ω": "&omega;",
      "ο": "&omicron;",
      "⦶": "&omid;",
      "𝕠": "&oopf;",
      "⦷": "&opar;",
      "⦹": "&operp;",
      "∨": "&vee;",
      "⩝": "&ord;",
      "ℴ": "&oscr;",
      "ª": "&ordf;",
      "º": "&ordm;",
      "⊶": "&origof;",
      "⩖": "&oror;",
      "⩗": "&orslope;",
      "⩛": "&orv;",
      "ø": "&oslash;",
      "⊘": "&osol;",
      "õ": "&otilde;",
      "⨶": "&otimesas;",
      "ö": "&ouml;",
      "⌽": "&ovbar;",
      "¶": "&para;",
      "⫳": "&parsim;",
      "⫽": "&parsl;",
      "п": "&pcy;",
      "%": "&percnt;",
      ".": "&period;",
      "‰": "&permil;",
      "‱": "&pertenk;",
      "𝔭": "&pfr;",
      "φ": "&phi;",
      "ϕ": "&varphi;",
      "☎": "&phone;",
      "π": "&pi;",
      "ϖ": "&varpi;",
      "ℎ": "&planckh;",
      "+": "&plus;",
      "⨣": "&plusacir;",
      "⨢": "&pluscir;",
      "⨥": "&plusdu;",
      "⩲": "&pluse;",
      "⨦": "&plussim;",
      "⨧": "&plustwo;",
      "⨕": "&pointint;",
      "𝕡": "&popf;",
      "£": "&pound;",
      "⪳": "&prE;",
      "⪷": "&precapprox;",
      "⪹": "&prnap;",
      "⪵": "&prnE;",
      "⋨": "&prnsim;",
      "′": "&prime;",
      "⌮": "&profalar;",
      "⌒": "&profline;",
      "⌓": "&profsurf;",
      "⊰": "&prurel;",
      "𝓅": "&pscr;",
      "ψ": "&psi;",
      " ": "&puncsp;",
      "𝔮": "&qfr;",
      "𝕢": "&qopf;",
      "⁗": "&qprime;",
      "𝓆": "&qscr;",
      "⨖": "&quatint;",
      "?": "&quest;",
      "⤜": "&rAtail;",
      "⥤": "&rHar;",
      "∽̱": "&race;",
      "ŕ": "&racute;",
      "⦳": "&raemptyv;",
      "⦒": "&rangd;",
      "⦥": "&range;",
      "»": "&raquo;",
      "⥵": "&rarrap;",
      "⤠": "&rarrbfs;",
      "⤳": "&rarrc;",
      "⤞": "&rarrfs;",
      "⥅": "&rarrpl;",
      "⥴": "&rarrsim;",
      "↣": "&rightarrowtail;",
      "↝": "&rightsquigarrow;",
      "⤚": "&ratail;",
      "∶": "&ratio;",
      "❳": "&rbbrk;",
      "}": "&rcub;",
      "]": "&rsqb;",
      "⦌": "&rbrke;",
      "⦎": "&rbrksld;",
      "⦐": "&rbrkslu;",
      "ř": "&rcaron;",
      "ŗ": "&rcedil;",
      "р": "&rcy;",
      "⤷": "&rdca;",
      "⥩": "&rdldhar;",
      "↳": "&rdsh;",
      "▭": "&rect;",
      "⥽": "&rfisht;",
      "𝔯": "&rfr;",
      "⥬": "&rharul;",
      "ρ": "&rho;",
      "ϱ": "&varrho;",
      "⇉": "&rrarr;",
      "⋌": "&rthree;",
      "˚": "&ring;",
      "‏": "&rlm;",
      "⎱": "&rmoustache;",
      "⫮": "&rnmid;",
      "⟭": "&roang;",
      "⇾": "&roarr;",
      "⦆": "&ropar;",
      "𝕣": "&ropf;",
      "⨮": "&roplus;",
      "⨵": "&rotimes;",
      ")": "&rpar;",
      "⦔": "&rpargt;",
      "⨒": "&rppolint;",
      "›": "&rsaquo;",
      "𝓇": "&rscr;",
      "⋊": "&rtimes;",
      "▹": "&triangleright;",
      "⧎": "&rtriltri;",
      "⥨": "&ruluhar;",
      "℞": "&rx;",
      "ś": "&sacute;",
      "⪴": "&scE;",
      "⪸": "&succapprox;",
      "š": "&scaron;",
      "ş": "&scedil;",
      "ŝ": "&scirc;",
      "⪶": "&succneqq;",
      "⪺": "&succnapprox;",
      "⋩": "&succnsim;",
      "⨓": "&scpolint;",
      "с": "&scy;",
      "⋅": "&sdot;",
      "⩦": "&sdote;",
      "⇘": "&seArr;",
      "§": "&sect;",
      ";": "&semi;",
      "⤩": "&tosa;",
      "✶": "&sext;",
      "𝔰": "&sfr;",
      "♯": "&sharp;",
      "щ": "&shchcy;",
      "ш": "&shcy;",
      "­": "&shy;",
      "σ": "&sigma;",
      "ς": "&varsigma;",
      "⩪": "&simdot;",
      "⪞": "&simg;",
      "⪠": "&simgE;",
      "⪝": "&siml;",
      "⪟": "&simlE;",
      "≆": "&simne;",
      "⨤": "&simplus;",
      "⥲": "&simrarr;",
      "⨳": "&smashp;",
      "⧤": "&smeparsl;",
      "⌣": "&ssmile;",
      "⪪": "&smt;",
      "⪬": "&smte;",
      "⪬︀": "&smtes;",
      "ь": "&softcy;",
      "/": "&sol;",
      "⧄": "&solb;",
      "⌿": "&solbar;",
      "𝕤": "&sopf;",
      "♠": "&spadesuit;",
      "⊓︀": "&sqcaps;",
      "⊔︀": "&sqcups;",
      "𝓈": "&sscr;",
      "☆": "&star;",
      "⊂": "&subset;",
      "⫅": "&subseteqq;",
      "⪽": "&subdot;",
      "⫃": "&subedot;",
      "⫁": "&submult;",
      "⫋": "&subsetneqq;",
      "⊊": "&subsetneq;",
      "⪿": "&subplus;",
      "⥹": "&subrarr;",
      "⫇": "&subsim;",
      "⫕": "&subsub;",
      "⫓": "&subsup;",
      "♪": "&sung;",
      "¹": "&sup1;",
      "²": "&sup2;",
      "³": "&sup3;",
      "⫆": "&supseteqq;",
      "⪾": "&supdot;",
      "⫘": "&supdsub;",
      "⫄": "&supedot;",
      "⟉": "&suphsol;",
      "⫗": "&suphsub;",
      "⥻": "&suplarr;",
      "⫂": "&supmult;",
      "⫌": "&supsetneqq;",
      "⊋": "&supsetneq;",
      "⫀": "&supplus;",
      "⫈": "&supsim;",
      "⫔": "&supsub;",
      "⫖": "&supsup;",
      "⇙": "&swArr;",
      "⤪": "&swnwar;",
      "ß": "&szlig;",
      "⌖": "&target;",
      "τ": "&tau;",
      "ť": "&tcaron;",
      "ţ": "&tcedil;",
      "т": "&tcy;",
      "⌕": "&telrec;",
      "𝔱": "&tfr;",
      "θ": "&theta;",
      "ϑ": "&vartheta;",
      "þ": "&thorn;",
      "×": "&times;",
      "⨱": "&timesbar;",
      "⨰": "&timesd;",
      "⌶": "&topbot;",
      "⫱": "&topcir;",
      "𝕥": "&topf;",
      "⫚": "&topfork;",
      "‴": "&tprime;",
      "▵": "&utri;",
      "≜": "&trie;",
      "◬": "&tridot;",
      "⨺": "&triminus;",
      "⨹": "&triplus;",
      "⧍": "&trisb;",
      "⨻": "&tritime;",
      "⏢": "&trpezium;",
      "𝓉": "&tscr;",
      "ц": "&tscy;",
      "ћ": "&tshcy;",
      "ŧ": "&tstrok;",
      "⥣": "&uHar;",
      "ú": "&uacute;",
      "ў": "&ubrcy;",
      "ŭ": "&ubreve;",
      "û": "&ucirc;",
      "у": "&ucy;",
      "ű": "&udblac;",
      "⥾": "&ufisht;",
      "𝔲": "&ufr;",
      "ù": "&ugrave;",
      "▀": "&uhblk;",
      "⌜": "&ulcorner;",
      "⌏": "&ulcrop;",
      "◸": "&ultri;",
      "ū": "&umacr;",
      "ų": "&uogon;",
      "𝕦": "&uopf;",
      "υ": "&upsilon;",
      "⇈": "&uuarr;",
      "⌝": "&urcorner;",
      "⌎": "&urcrop;",
      "ů": "&uring;",
      "◹": "&urtri;",
      "𝓊": "&uscr;",
      "⋰": "&utdot;",
      "ũ": "&utilde;",
      "ü": "&uuml;",
      "⦧": "&uwangle;",
      "⫨": "&vBar;",
      "⫩": "&vBarv;",
      "⦜": "&vangrt;",
      "⊊︀": "&vsubne;",
      "⫋︀": "&vsubnE;",
      "⊋︀": "&vsupne;",
      "⫌︀": "&vsupnE;",
      "в": "&vcy;",
      "⊻": "&veebar;",
      "≚": "&veeeq;",
      "⋮": "&vellip;",
      "𝔳": "&vfr;",
      "𝕧": "&vopf;",
      "𝓋": "&vscr;",
      "⦚": "&vzigzag;",
      "ŵ": "&wcirc;",
      "⩟": "&wedbar;",
      "≙": "&wedgeq;",
      "℘": "&wp;",
      "𝔴": "&wfr;",
      "𝕨": "&wopf;",
      "𝓌": "&wscr;",
      "𝔵": "&xfr;",
      "ξ": "&xi;",
      "⋻": "&xnis;",
      "𝕩": "&xopf;",
      "𝓍": "&xscr;",
      "ý": "&yacute;",
      "я": "&yacy;",
      "ŷ": "&ycirc;",
      "ы": "&ycy;",
      "¥": "&yen;",
      "𝔶": "&yfr;",
      "ї": "&yicy;",
      "𝕪": "&yopf;",
      "𝓎": "&yscr;",
      "ю": "&yucy;",
      "ÿ": "&yuml;",
      "ź": "&zacute;",
      "ž": "&zcaron;",
      "з": "&zcy;",
      "ż": "&zdot;",
      "ζ": "&zeta;",
      "𝔷": "&zfr;",
      "ж": "&zhcy;",
      "⇝": "&zigrarr;",
      "𝕫": "&zopf;",
      "𝓏": "&zscr;",
      "‍": "&zwj;",
      "‌": "&zwnj;"
    }
  }
};

/***/ }),

/***/ 255:
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.numericUnicodeMap = {
  0: 65533,
  128: 8364,
  130: 8218,
  131: 402,
  132: 8222,
  133: 8230,
  134: 8224,
  135: 8225,
  136: 710,
  137: 8240,
  138: 352,
  139: 8249,
  140: 338,
  142: 381,
  145: 8216,
  146: 8217,
  147: 8220,
  148: 8221,
  149: 8226,
  150: 8211,
  151: 8212,
  152: 732,
  153: 8482,
  154: 353,
  155: 8250,
  156: 339,
  158: 382,
  159: 376
};

/***/ }),

/***/ 608:
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));

exports.fromCodePoint = String.fromCodePoint || function (astralCodePoint) {
  return String.fromCharCode(Math.floor((astralCodePoint - 65536) / 1024) + 55296, (astralCodePoint - 65536) % 1024 + 56320);
};

exports.getCodePoint = String.prototype.codePointAt ? function (input, position) {
  return input.codePointAt(position);
} : function (input, position) {
  return (input.charCodeAt(position) - 55296) * 1024 + input.charCodeAt(position + 1) - 56320 + 65536;
};
exports.highSurrogateFrom = 55296;
exports.highSurrogateTo = 56319;

/***/ }),

/***/ 530:
/***/ ((module) => {

module.exports = require("kolmafia");

/***/ }),

/***/ 169:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_": () => (/* binding */ Clan)
/* harmony export */ });
/* harmony import */ var html_entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(607);
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(71);
/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(167);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(130);
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _wrapRegExp() { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, void 0, groups); }; var _super = RegExp.prototype, _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = new RegExp(re, flags); return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype); } function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { return groups[name] = result[g[name]], groups; }, Object.create(null)); } return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); return result && (result.groups = buildGroups(result, this)), result; }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if ("string" == typeof substitution) { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) { return "$" + groups[name]; })); } if ("function" == typeof substitution) { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = arguments; return "object" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args); }); } return _super[Symbol.replace].call(this, str, substitution); }, _wrapRegExp.apply(this, arguments); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }






var clanIdCache = {};

var toPlayerId = player => typeof player === "string" ? (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getPlayerId)(player) : player;

var LOG_FAX_PATTERN = /*#__PURE__*/_wrapRegExp(/(\d{2}\/\d{2}\/\d{2}, \d{2}:\d{2}(?:AM|PM): )<a [^>]+>([^<]+)<\/a>(?: faxed in a (.*?))<br>/, {
  monster: 3
});

var WHITELIST_DEGREE_PATTERN = /*#__PURE__*/_wrapRegExp(/(.*?) \(\xB0(\d+)\)/, {
  name: 1,
  degree: 2
});

var Clan = /*#__PURE__*/function () {
  function Clan(id, name) {
    _classCallCheck(this, Clan);

    _defineProperty(this, "id", void 0);

    _defineProperty(this, "name", void 0);

    this.id = id;
    this.name = name;
  }

  _createClass(Clan, [{
    key: "_check",
    value: function _check() {
      if (this.id !== (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanId)()) {
        throw new Error("You are no longer a member of this clan");
      }
    }
    /**
     * Join clan
     *
     * @returns Joined clan
     */

  }, {
    key: "join",
    value: function join() {
      return Clan.join(this.id);
    }
    /**
     * Check that this clan is the player's current clan
     *
     * @returns Whether this is the current clan
     */

  }, {
    key: "check",
    value: function check() {
      return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("clan_hall.php").includes("<b>".concat(this.name, "</b>"));
    }
    /**
     * Determine the monster that is currently in the current clan's fax machine if any
     *
     * @returns The current fax monster
     */

  }, {
    key: "getCurrentFax",
    value: function getCurrentFax() {
      this._check();

      var logs = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("clan_log.php");
      var lastFax = logs.match(LOG_FAX_PATTERN);
      if (!lastFax) return null;

      var _lastFax = _slicedToArray(lastFax, 4),
          monsterName = _lastFax[3];

      if (!monsterName) return null;
      return kolmafia__WEBPACK_IMPORTED_MODULE_0__.Monster.get(monsterName);
    }
    /**
     * List available ranks (name, degree and id) from the current clan
     *
     * @returns List of ranks
     */

  }, {
    key: "getRanks",
    value: function getRanks() {
      this._check();

      var page = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("clan_whitelist.php");
      return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.xpath)(page, '//select[@name="level"]//option').map(option => {
        var validHtml = "<select>".concat(option, "</select>");
        var match = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.xpath)(validHtml, "//text()")[0].match(WHITELIST_DEGREE_PATTERN);
        var id = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.xpath)(validHtml, "//@value")[0];
        if (!match || !id) return null;

        var _match = _slicedToArray(match, 3),
            encodedName = _match[1],
            degree = _match[2];

        return {
          name: (0,html_entities__WEBPACK_IMPORTED_MODULE_1__.decode)(encodedName),
          degree: Number.parseInt(degree),
          id: Number.parseInt(id)
        };
      }).filter(_utils_js__WEBPACK_IMPORTED_MODULE_2__/* .notNull */ .Nf);
    }
    /**
     * Add a player to the current clan's whitelist.
     * If the player is already in the whitelist this will change their rank or title.
     *
     * @param player Player id or name
     * @param rankName Rank to give the player. If not provided they will be given the lowest rank
     * @param title Title to give the player. If not provided, will be blank
     * @returns Success
     */

  }, {
    key: "addPlayerToWhitelist",
    value: function addPlayerToWhitelist(player, rankName) {
      var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

      this._check();

      var playerId = toPlayerId(player);
      var ranks = this.getRanks();
      var rank = rankName ? ranks.find(r => r.name === rankName) : ranks.sort((a, b) => a.degree - b.degree)[0];
      if (!rank) return false;
      var result = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("clan_whitelist.php?action=add&pwd&addwho=".concat(playerId, "&level=").concat(rank.id, "&title=").concat(title));
      return result.includes("added to whitelist.") || result.includes("That player is already on the whitelist");
    }
    /**
     * Remove a player from the current clan's whitelist
     *
     * @param player Player id or name
     * @returns Success
     */

  }, {
    key: "removePlayerFromWhitelist",
    value: function removePlayerFromWhitelist(player) {
      this._check();

      var playerId = toPlayerId(player);
      var result = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("clan_whitelist.php?action=updatewl&pwd&who=".concat(playerId, "&remove=Remove"));
      return result.includes("Whitelist updated.");
    }
    /**
     * Return the amount of meat in the current clan's coffer
     *
     * @returns Amount of meat
     */

  }, {
    key: "getMeatInCoffer",
    value: function getMeatInCoffer() {
      this._check();

      var page = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("clan_stash.php");

      var _ref = page.match(/Your <b>Clan Coffer<\/b> contains ([\d,]+) Meat./) || ["0", "0"],
          _ref2 = _slicedToArray(_ref, 2),
          meat = _ref2[1];

      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__/* .parseNumber */ .p3)(meat);
    }
    /**
     * Add the given amount of meat to the current clan's coffer.
     *
     * @param amount Amount of meat to put in coffer
     * @returns Success
     */

  }, {
    key: "putMeatInCoffer",
    value: function putMeatInCoffer(amount) {
      this._check();

      var result = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("clan_stash.php?pwd&action=contribute&howmuch=".concat(amount));
      return result.includes("You contributed");
    }
  }, {
    key: "take",
    value: function take(items) {
      this._check();

      var map = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__/* .arrayToCountedMap */ .tv)(items);
      map.forEach((quantity, item) => {
        var needed = Math.max(0, quantity - (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(item));

        if (needed === 0) {
          return map.set(item, 0);
        }

        var foldGroup = (0,_lib_js__WEBPACK_IMPORTED_MODULE_3__/* .getFoldGroup */ ._D)(item);

        var _iterator = _createForOfIteratorHelper(foldGroup),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var foldable = _step.value;
            var quantityToFold = Math.min(needed, (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(foldable));

            for (var _i3 = 0; _i3 < quantityToFold; _i3++) {
              (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("fold ".concat(item.name));
              needed--;
            }

            return map.set(item, needed);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.refreshStash)();

        for (var _i2 = 0, _arr2 = [item].concat(_toConsumableArray(foldGroup)); _i2 < _arr2.length; _i2++) {
          var matchingItem = _arr2[_i2];
          var quantityToTake = Math.min(needed, (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.stashAmount)(matchingItem));
          if (quantityToTake === 0) continue; // If we can't take from the stash, there's no sense in iterating through the whole fold group

          if (!(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.takeStash)(quantityToTake, matchingItem)) return;

          if (matchingItem === item) {
            needed -= quantityToTake;
          } else {
            for (var i = 0; i < quantityToTake; i++) {
              (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("fold ".concat(matchingItem.name));
              needed--;
            }
          }
        }
      });
      return Array.isArray(items) ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__/* .countedMapToArray */ .Y8)(map) : map;
    }
  }, {
    key: "put",
    value: function put(items) {
      this._check();

      var map = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__/* .arrayToCountedMap */ .tv)(items);
      if (!this.check()) throw new Error("Wanted to return ".concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__/* .countedMapToString */ .N3)(map), " to ").concat(this.name, " but KoLmafia's clan data is out of sync"));
      map.forEach((quantity, item) => {
        (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.retrieveItem)(quantity, item);
        var returned = Math.min(quantity, (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(item));
        (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.putStash)(returned, item);
        map.set(item, quantity - returned);
      });
      return Array.isArray(items) ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__/* .countedMapToArray */ .Y8)(map) : map;
    }
  }, {
    key: "withStash",
    value: function withStash(items, callback) {
      this._check();

      var map = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__/* .arrayToCountedMap */ .tv)(items);
      return Clan._withStash(() => this.take(map), borrowed => this.put(borrowed), callback);
    }
  }], [{
    key: "_join",
    value: function _join(id) {
      var result = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("showclan.php?recruiter=1&whichclan=".concat(id, "&pwd&whichclan=").concat(id, "&action=joinclan&apply=Apply+to+this+Clan&confirm=on"));

      if (!result.includes("clanhalltop.gif")) {
        throw new Error("Could not join clan");
      }

      return Clan.get();
    }
  }, {
    key: "_withStash",
    value: function _withStash(borrowFn, // eslint-disable-next-line @typescript-eslint/no-explicit-any
    returnFn, // eslint-disable-next-line @typescript-eslint/no-explicit-any
    callback) {
      var borrowed = borrowFn();
      var map = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__/* .arrayToCountedMap */ .tv)(borrowed);

      try {
        return callback(borrowed);
      } finally {
        if (map.size > 0) {
          var returned = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__/* .arrayToCountedMap */ .tv)(returnFn(borrowed));
          map.forEach((quantity, item) => {
            var remaining = quantity - (returned.get(item) || 0);

            if (remaining > 0) {
              map.set(item, remaining);
            } else {
              map.delete(item);
            }
          });

          if (map.size > 0) {
            _logger_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].error */ .Z.error("Failed to return <b>".concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__/* .countedMapToString */ .N3)(map), "</b> to <b>").concat(this.name, "</b> stash"));
          }
        }
      }
    }
    /**
     * Join a clan
     *
     * @param clanIdOrName Clan id or name
     * @returns Instance of joined clan
     */

  }, {
    key: "join",
    value: function join(clanIdOrName) {
      var clanId;

      if (typeof clanIdOrName === "string") {
        var clanName = clanIdOrName.toLowerCase();

        if (clanName === (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanName)().toLowerCase()) {
          return Clan.get();
        }

        if (!(clanName in clanIdCache)) {
          var clan = Clan.getWhitelisted().find(c => c.name.toLowerCase() === clanName);

          if (!clan) {
            throw new Error("Player is not whitelisted to clan");
          }

          clanIdCache[clanName] = clan.id;
        }

        clanId = clanIdCache[clanName];
      } else {
        clanId = clanIdOrName;

        if (clanId === (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanId)()) {
          return Clan.get();
        }
      }

      return Clan._join(clanId);
    }
    /**
     * Execute callback as a member of a clan and then restore prior membership
     *
     * @param clanIdOrName Clan id or name
     * @param callback Actions to carry out while member of specified can
     * @returns Return value from callback
     */

  }, {
    key: "with",
    value: function _with(clanIdOrName, callback) {
      var startingClan = Clan.get();
      var clan = Clan.join(clanIdOrName);

      try {
        return callback(clan);
      } finally {
        startingClan.join();
      }
    }
  }, {
    key: "withStash",
    value: function withStash(clanIdOrName, items, // eslint-disable-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    callback) {
      return Clan._withStash(() => Clan.with(clanIdOrName, clan => clan.take(items)), borrowed => Clan.with(clanIdOrName, clan => clan.put(borrowed)), callback);
    }
    /**
     * Get the player's current clan
     *
     * @returns Player's clan
     */

  }, {
    key: "get",
    value: function get() {
      return new Clan((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanId)(), (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanName)());
    }
    /**
     * Get list of clans to which the player is whitelisted
     *
     * @returns List of clans
     */

  }, {
    key: "getWhitelisted",
    value: function getWhitelisted() {
      var page = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("clan_signup.php");
      return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.xpath)(page, '//select[@name="whichclan"]//option').map(option => {
        var validHtml = "<select>".concat(option, "</select>");
        var id = Number.parseInt((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.xpath)(validHtml, "//@value")[0]);
        var name = (0,html_entities__WEBPACK_IMPORTED_MODULE_1__.decode)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.xpath)(validHtml, "//text()")[0]);
        return new Clan(id, name);
      });
    }
  }]);

  return Clan;
}();

/***/ }),

/***/ 479:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => (/* binding */ Kmail)
});

// EXTERNAL MODULE: ./node_modules/libram/node_modules/html-entities/lib/index.js
var lib = __webpack_require__(607);
// EXTERNAL MODULE: external "kolmafia"
var external_kolmafia_ = __webpack_require__(530);
// EXTERNAL MODULE: ./node_modules/libram/dist/lib.js
var dist_lib = __webpack_require__(71);
;// CONCATENATED MODULE: ./node_modules/libram/dist/url.js
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


var EMPTY_VALUE = Symbol("empty");
/**
 * Fetches a URL and returns the response
 * @param path Path to resource, e.g. "clan_basement.php"
 * @param query Query parameters,
 *  either as an object, e.g. { action: "cleansewer" },
 *  or as a list of [key, value] pairs, e.g. [["action", "cleansewer"]]
 * @param options Additional options
 * @param options.method HTTP method to use, either "GET" or "POST", defaults to "POST"
 * @returns the response from visiting the URL
 */

function fetchUrl(path) {
  var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var _options$method = options.method,
      method = _options$method === void 0 ? "POST" : _options$method;
  var url = buildUrl(path, query);
  return (0,external_kolmafia_.visitUrl)(url, method === "POST", true);
}
/**
 * Builds a URL from a path and query
 * @param path Path to resource, e.g. "clan_basement.php"
 * @param query Query parameters,
 *  either as an object, e.g. { action: "cleansewer" },
 *  or as a list of [key, value] pairs, e.g. [["action", "cleansewer"]]
 * @returns the constructed URL, e.g. "clan_basement.php?action=cleansewer"
 */

function buildUrl(path) {
  var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var urlParams = Array.isArray(query) ? query : Object.entries(query);

  if (urlParams.length === 0) {
    return path;
  }

  var chunks = [path];
  var sep = path.includes("?") ? "&" : "?";

  var _iterator = _createForOfIteratorHelper(urlParams),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var param = _step.value;

      if (param.length !== 2) {
        throw new Error("Query parameter array may only contain pair elements");
      }

      var _param = _slicedToArray(param, 2),
          key = _param[0],
          value = _param[1];

      chunks.push(sep);
      sep = "&";
      chunks.push(encodeURIComponent(key));

      if (value !== EMPTY_VALUE) {
        chunks.push("=");
        chunks.push(encodeURIComponent(value));
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return chunks.join("");
}
/**
 * Combines a list of queries into a single query
 * @param queries a list of query objects and/or arrays, can be mixed
 * @returns a single query
 */

function combineQuery() {
  for (var _len = arguments.length, queries = new Array(_len), _key = 0; _key < _len; _key++) {
    queries[_key] = arguments[_key];
  }

  if (queries.length === 1) {
    return queries[0];
  }

  var result = [];

  for (var _i2 = 0, _queries = queries; _i2 < _queries.length; _i2++) {
    var query = _queries[_i2];

    if (Array.isArray(query)) {
      result.push.apply(result, _toConsumableArray(query));
    } else {
      result.push.apply(result, _toConsumableArray(Object.entries(query)));
    }
  }

  return result;
}
// EXTERNAL MODULE: ./node_modules/libram/dist/utils.js
var utils = __webpack_require__(130);
;// CONCATENATED MODULE: ./node_modules/libram/dist/Kmail.js
function Kmail_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = Kmail_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function Kmail_toConsumableArray(arr) { return Kmail_arrayWithoutHoles(arr) || Kmail_iterableToArray(arr) || Kmail_unsupportedIterableToArray(arr) || Kmail_nonIterableSpread(); }

function Kmail_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function Kmail_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function Kmail_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Kmail_arrayLikeToArray(arr); }

function Kmail_slicedToArray(arr, i) { return Kmail_arrayWithHoles(arr) || Kmail_iterableToArrayLimit(arr, i) || Kmail_unsupportedIterableToArray(arr, i) || Kmail_nonIterableRest(); }

function Kmail_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function Kmail_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Kmail_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Kmail_arrayLikeToArray(o, minLen); }

function Kmail_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function Kmail_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function Kmail_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







var Kmail = /*#__PURE__*/function () {
  function Kmail(rawKmail) {
    _classCallCheck(this, Kmail);

    _defineProperty(this, "id", void 0);

    _defineProperty(this, "date", void 0);

    _defineProperty(this, "type", void 0);

    _defineProperty(this, "senderId", void 0);

    _defineProperty(this, "senderName", void 0);

    _defineProperty(this, "rawMessage", void 0);

    _defineProperty(this, "_parsedMessageParts", void 0);

    this.id = Number(rawKmail.id);
    this.date = new Date(Number(rawKmail.azunixtime) * 1000);
    this.type = rawKmail.type;
    this.senderId = Number(rawKmail.fromid);
    this.senderName = rawKmail.fromname;
    this.rawMessage = rawKmail.message;
  }
  /**
   * Delete the kmail
   *
   * @returns Whether the kmail was deleted
   */


  _createClass(Kmail, [{
    key: "delete",
    value: function _delete() {
      return Kmail.delete([this]) === 1;
    }
  }, {
    key: "_messageParts",
    get: function get() {
      var _this$_parsedMessageP;

      return (_this$_parsedMessageP = this._parsedMessageParts) !== null && _this$_parsedMessageP !== void 0 ? _this$_parsedMessageP : this._parsedMessageParts = this._parseMessageParts();
    }
  }, {
    key: "_parseMessageParts",
    value: function _parseMessageParts() {
      var text = this.rawMessage;
      var insideText;

      if (this.type === "normal") {
        // strip potential valentine
        if (text.startsWith("<center>")) {
          var endIdx = text.indexOf("</center>");
          text = text.slice(endIdx + 9);
        }
      } else if (this.type === "giftshop") {
        var _text$split = text.split("<p>Inside Note:<p>");

        var _text$split2 = Kmail_slicedToArray(_text$split, 2);

        text = _text$split2[0];
        insideText = _text$split2[1];
      }

      var split = s => {
        var idx = s.indexOf("<");
        if (idx === -1) return [s];
        return [s.slice(0, idx), s.slice(idx)];
      };

      var _split = split(text),
          _split2 = Kmail_slicedToArray(_split, 2),
          outsideNote = _split2[0],
          _split2$ = _split2[1],
          outsideAttachments = _split2$ === void 0 ? null : _split2$;

      var _ref = insideText !== undefined ? split(insideText) : [],
          _ref2 = Kmail_slicedToArray(_ref, 2),
          _ref2$ = _ref2[0],
          insideNote = _ref2$ === void 0 ? null : _ref2$,
          _ref2$2 = _ref2[1],
          insideAttachments = _ref2$2 === void 0 ? null : _ref2$2;

      return {
        outsideNote: (0,lib.decode)(outsideNote),
        outsideAttachments: outsideAttachments,
        insideNote: insideNote && (0,lib.decode)(insideNote),
        insideAttachments: insideAttachments
      };
    }
    /**
     * Get message contents without any HTML from items or meat
     *
     * @returns Cleaned message contents
     */

  }, {
    key: "message",
    get: function get() {
      var _this$_messageParts = this._messageParts,
          outsideNote = _this$_messageParts.outsideNote,
          insideNote = _this$_messageParts.insideNote;

      if (insideNote !== null) {
        return "".concat(outsideNote, "\n\nInside Note:\n").concat(insideNote);
      }

      return outsideNote;
    }
    /**
     * Get the note on the outside of the gift. If the kmail is not a gift,
     * this will be the entire message.
     *
     * @returns Note on the outside of the gift, or the entire message for non-gifts
     */

  }, {
    key: "outsideNote",
    get: function get() {
      return this._messageParts.outsideNote;
    }
    /**
     * Get the note on the inside of the gift
     *
     * @returns Note on the inside of the gift
     */

  }, {
    key: "insideNote",
    get: function get() {
      return this._messageParts.insideNote;
    }
    /**
     * Get items attached to the kmail
     *
     * @returns Map of items attached to the kmail and their quantities
     */

  }, {
    key: "items",
    value: function items() {
      var _this$_messageParts2 = this._messageParts,
          outsideAttachments = _this$_messageParts2.outsideAttachments,
          insideAttachments = _this$_messageParts2.insideAttachments;
      return (0,dist_lib/* extractItems */.Fx)("".concat(outsideAttachments).concat(insideAttachments));
    }
    /**
     * Get items attached to the outside of the gift, which should be
     * just the gift wrapper for giftshop items, and all items for normal kmails
     *
     * @returns Map of items attached to the kmail and their quantities
     */

  }, {
    key: "outsideItems",
    value: function outsideItems() {
      var outsideAttachments = this._messageParts.outsideAttachments;
      if (!outsideAttachments) return new Map();
      return (0,dist_lib/* extractItems */.Fx)(outsideAttachments);
    }
    /**
     * Get items attached to the inside of the gift
     *
     * @returns Map of items attached to the kmail and their quantities
     */

  }, {
    key: "insideItems",
    value: function insideItems() {
      var insideAttachments = this._messageParts.insideAttachments;
      if (!insideAttachments) return new Map();
      return (0,dist_lib/* extractItems */.Fx)(insideAttachments);
    }
    /**
     * Get meat attached to the kmail
     *
     * @returns Meat attached to the kmail
     */

  }, {
    key: "meat",
    value: function meat() {
      var _this$_messageParts3 = this._messageParts,
          outsideAttachments = _this$_messageParts3.outsideAttachments,
          insideAttachments = _this$_messageParts3.insideAttachments;
      if (!outsideAttachments && !insideAttachments) return 0;
      return (0,external_kolmafia_.extractMeat)("".concat(outsideAttachments).concat(insideAttachments));
    }
    /**
     * Reply to kmail
     *
     * @param message Message with which to reply
     * @param items Items to send
     * @param meat Meat to send
     * @see Kmail.send
     * @returns True if the kmail was successfully sent
     */

  }, {
    key: "reply",
    value: function reply() {
      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var meat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      return Kmail.send(this.senderId, message, items, meat);
    }
  }], [{
    key: "parse",
    value:
    /**
     * Parses a kmail from KoL's native format
     *
     * @param rawKmail Kmail in the format supplies by api.php
     * @returns Parsed kmail
     */
    function parse(rawKmail) {
      return new Kmail(rawKmail);
    }
    /**
     * Returns all of the player's kmails
     *
     * @param count Number of kmails to fetch
     * @returns Parsed kmails
     */

  }, {
    key: "inbox",
    value: function inbox() {
      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
      return JSON.parse((0,external_kolmafia_.visitUrl)("api.php?what=kmail&for=libram&count=".concat(count))).map(Kmail.parse);
    }
    /**
     * Bulk delete kmails
     *
     * @param kmails Kmails to delete
     * @returns Number of kmails deleted
     */

  }, {
    key: "delete",
    value: function _delete(kmails) {
      var _results$match$, _results$match;

      var results = fetchUrl("messages.php", [["the_action", "delete"], ["box", "Inbox"], ["pwd", EMPTY_VALUE]].concat(Kmail_toConsumableArray(kmails.map(k => ["sel".concat(k.id), "on"]))));
      return Number((_results$match$ = (_results$match = results.match(/<td>(\d) messages? deleted.<\/td>/)) === null || _results$match === void 0 ? void 0 : _results$match[1]) !== null && _results$match$ !== void 0 ? _results$match$ : 0);
    }
  }, {
    key: "_genericSend",
    value: function _genericSend(to, message, items, meat, chunkSize, constructUrl, successString) {
      var m = meat;

      var sendableItems = Kmail_toConsumableArray((0,utils/* arrayToCountedMap */.tv)(items).entries()).filter(_ref3 => {
        var _ref4 = Kmail_slicedToArray(_ref3, 1),
            item = _ref4[0];

        return (0,external_kolmafia_.isGiftable)(item);
      });

      var result = true;
      var chunks = (0,utils/* chunk */.yo)(sendableItems, chunkSize); // Split the items to be sent into chunks of max 11 item types

      var _iterator = Kmail_createForOfIteratorHelper(chunks.length > 0 ? chunks : [null]),
          _step;

      try {
        var _loop = function _loop() {
          var _c$length;

          var c = _step.value;
          var itemsQuery = {};

          if (c !== null) {
            c.forEach((_ref5, i) => {
              var _ref6 = Kmail_slicedToArray(_ref5, 2),
                  item = _ref6[0],
                  quantity = _ref6[1];

              itemsQuery["whichitem".concat(i + 1)] = item.id;
              itemsQuery["howmany".concat(i + 1)] = quantity;
            });
          }

          var _constructUrl = constructUrl({
            meat: m,
            chunkSize: (_c$length = c === null || c === void 0 ? void 0 : c.length) !== null && _c$length !== void 0 ? _c$length : 0
          }),
              path = _constructUrl.path,
              query = _constructUrl.query;

          var r = fetchUrl(path, combineQuery(query, itemsQuery));

          if (r.includes("That player cannot receive Meat or items")) {
            return {
              v: Kmail.gift(to, message, items, meat)
            };
          } // Make sure we don't send the same batch of meat with every chunk


          m = 0;
          result && (result = r.includes(successString));
        };

        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _ret = _loop();

          if (typeof _ret === "object") return _ret.v;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return result;
    }
    /**
     * Sends a kmail to a player
     *
     * Sends multiple kmails if more than 11 unique item types are attached.
     * Ignores any ungiftable items.
     * Sends a gift package to players in run
     *
     * @param to The player name or id to receive the kmail
     * @param message The text contents of the message
     * @param items The items to be attached
     * @param meat The quantity of meat to be attached
     * @returns True if the kmail was successfully sent
     */

  }, {
    key: "send",
    value: function send(to) {
      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var items = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var meat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      return Kmail._genericSend(to, message, items, meat, 11, _ref7 => {
        var meat = _ref7.meat;
        return {
          path: "sendmessage.php",
          query: {
            action: "send",
            pwd: EMPTY_VALUE,
            towho: to,
            message: message,
            sendmeat: meat
          }
        };
      }, ">Message sent.</");
    }
    /**
     * Sends a gift to a player
     *
     * Sends multiple kmails if more than 3 unique item types are attached.
     * Ignores any ungiftable items.
     *
     * @param to The player name or id to receive the gift
     * @param message Message to send
     * @param items The items to be attached
     * @param meat The quantity of meat to be attached
     * @param insideNote The note on the inside of the gift
     * @returns True if the gift was successfully sent
     */

  }, {
    key: "gift",
    value: function gift(to) {
      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var items = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var meat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var insideNote = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
      return Kmail._genericSend(to, message, items, meat, 3, _ref8 => {
        var meat = _ref8.meat,
            chunkSize = _ref8.chunkSize;
        return {
          path: "town_sendgift.php",
          query: {
            action: "Yep.",
            pwd: EMPTY_VALUE,
            fromwhere: 0,
            note: message,
            insidenote: insideNote,
            towho: to,
            whichpackage: chunkSize,
            sendmeat: meat
          }
        };
      }, ">Package sent.</");
    }
  }]);

  return Kmail;
}();



/***/ }),

/***/ 832:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "QE": () => (/* binding */ KolGender),
/* harmony export */   "Qp": () => (/* binding */ permedSkills),
/* harmony export */   "VO": () => (/* binding */ Lifestyle),
/* harmony export */   "cr": () => (/* binding */ AscensionPrepError),
/* harmony export */   "lO": () => (/* binding */ prepareAscension),
/* harmony export */   "o$": () => (/* binding */ AscendError),
/* harmony export */   "zU": () => (/* binding */ ascend)
/* harmony export */ });
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var _moonSign_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(186);
/* harmony import */ var _property_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(785);
/* harmony import */ var _resources_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(543);
/* harmony import */ var _template_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(328);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(130);
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }







var Lifestyle;

(function (Lifestyle) {
  Lifestyle[Lifestyle["casual"] = 1] = "casual";
  Lifestyle[Lifestyle["softcore"] = 2] = "softcore"; // eslint-disable-next-line @typescript-eslint/no-duplicate-enum-values

  Lifestyle[Lifestyle["normal"] = 2] = "normal";
  Lifestyle[Lifestyle["hardcore"] = 3] = "hardcore";
})(Lifestyle || (Lifestyle = {}));

var KolGender;

(function (KolGender) {
  KolGender[KolGender["male"] = 1] = "male";
  KolGender[KolGender["female"] = 2] = "female";
})(KolGender || (KolGender = {}));
/**
 * Get a mapping of permed skills to the extent to which they're permed.
 *
 * If a skill is not permed at all, it will not appear in the mapping.
 *
 * @returns Permed skills mapping
 */


function permedSkills() {
  return new Map(Array.from(Object.entries((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getPermedSkills)())).map(_ref => {
    var _ref2 = _slicedToArray(_ref, 2),
        skillName = _ref2[0],
        isHardcore = _ref2[1];

    return [(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toSkill)(skillName), isHardcore ? Lifestyle.hardcore : Lifestyle.softcore];
  }));
}
var AscendError = /*#__PURE__*/function (_Error) {
  _inherits(AscendError, _Error);

  var _super = _createSuper(AscendError);

  function AscendError() {
    _classCallCheck(this, AscendError);

    return _super.apply(this, arguments);
  }

  return _createClass(AscendError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
var gardens = ["packet of pumpkin seeds", "Peppermint Pip Packet", "packet of dragon's teeth", "packet of beer seeds", "packet of winter seeds", "packet of thanksgarden seeds", "packet of tall grass seeds", "packet of mushroom spores", "packet of rock seeds"];
var eudorae = ["My Own Pen Pal kit", "GameInformPowerDailyPro subscription card", "Xi Receiver Unit", "New-You Club Membership Form", "Our Daily Candles™ order form"];

var isGarden = x => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .arrayContains */ .IA)(x, gardens);

var isEudora = x => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .arrayContains */ .IA)(x, eudorae);

var isDesk = x => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .arrayContains */ .IA)(x, _resources_index_js__WEBPACK_IMPORTED_MODULE_2__.desks);

var isNightstand = x => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .arrayContains */ .IA)(x, _resources_index_js__WEBPACK_IMPORTED_MODULE_2__.nightstands);

var isCeiling = x => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .arrayContains */ .IA)(x, _resources_index_js__WEBPACK_IMPORTED_MODULE_2__.ceilings);

var AscensionPrepError = /*#__PURE__*/function (_Error2) {
  _inherits(AscensionPrepError, _Error2);

  var _super2 = _createSuper(AscensionPrepError);

  function AscensionPrepError(cause, original) {
    var _this;

    _classCallCheck(this, AscensionPrepError);

    if (isGarden(cause)) {
      _this = _super2.call(this, "Unable to swap garden to ".concat(cause, "; garden is currently ").concat(original, "."));

      _defineProperty(_assertThisInitialized(_this), "cause", void 0);
    } else if (isEudora(cause)) {
      _this = _super2.call(this, "Unable to swap eudora to ".concat(cause, "; eudora is currently ").concat(original, "."));

      _defineProperty(_assertThisInitialized(_this), "cause", void 0);
    } else if (isDesk(cause)) {
      _this = _super2.call(this, "Unable to swap chateau desk to ".concat(cause, "; desk is currently ").concat(original, "."));

      _defineProperty(_assertThisInitialized(_this), "cause", void 0);
    } else if (isNightstand(cause)) {
      _this = _super2.call(this, "Unable to swap chateau nightstand to ".concat(cause, "; nightstand is currently ").concat(original, "."));

      _defineProperty(_assertThisInitialized(_this), "cause", void 0);
    } else if (isCeiling(cause)) {
      _this = _super2.call(this, "Unable to swap chateau ceiling to ".concat(cause, "; ceiling is currently ").concat(original, "."));

      _defineProperty(_assertThisInitialized(_this), "cause", void 0);
    } else {
      _this = _super2.call(this, cause);

      _defineProperty(_assertThisInitialized(_this), "cause", void 0);
    }

    _this.cause = cause;
    return _possibleConstructorReturn(_this);
  }

  return _createClass(AscensionPrepError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Determine the id of the appropriate moon sign.
 *
 * @param moon Either a moon sign or the desired unlocked zone name
 * @param playerClass Class, required for working out a moon sign based on the desired zone
 * @returns Moon sign id
 */

function inputToMoonId(moon, playerClass) {
  if (typeof moon === "number") return moon;

  var offset = () => {
    switch (playerClass.primestat) {
      case (0,_template_string_js__WEBPACK_IMPORTED_MODULE_3__/* .$stat */ .Ri)(_templateObject || (_templateObject = _taggedTemplateLiteral(["Muscle"]))):
        return 0;

      case (0,_template_string_js__WEBPACK_IMPORTED_MODULE_3__/* .$stat */ .Ri)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Mysticality"]))):
        return 1;

      case (0,_template_string_js__WEBPACK_IMPORTED_MODULE_3__/* .$stat */ .Ri)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Moxie"]))):
        return 2;

      default:
        throw new AscendError("unknown prime stat for ".concat(playerClass));
    }
  };

  var fromNormalInput = (0,_moonSign_js__WEBPACK_IMPORTED_MODULE_4__/* .signNameToId */ .u)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.tc)(moon));
  if (fromNormalInput > 0) return fromNormalInput;

  switch (moon.toLowerCase()) {
    case "degrassi":
    case "degrassi knoll":
    case "friendly degrassi knoll":
    case "knoll":
      return 1 + offset();

    case "canada":
    case "canadia":
    case "little canadia":
      return 4 + offset();

    case "gnomads":
    case "gnomish":
    case "gnomish gnomads camp":
      return 7 + offset();

    default:
      throw new AscendError("Invalid moon sign!");
  }
}
/**
 * Determine if player is currently in Valhalla
 *
 * @returns Whether player is in Valhalla
 */


function isInValhalla() {
  var charPaneText = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("charpane.php"); // Match the infinity images (inf_small.gif, inf_large.gif)
  // At time of writing, the full img tag used is:
  // <img src="https://d2uyhvukfffg5a.cloudfront.net/otherimages/inf_small.gif">

  var matches = charPaneText.match(/<img src="[^"]*\/otherimages\/inf_\w+\.gif">/);
  return matches !== null;
}
/**
 * Hops the gash, perming no skills by default
 *
 * @param options Configuration for the ascension
 * @param options.path Your path of choice for this ascension
 * @param options.playerClass Your class of choice for this ascension
 * @param options.lifestyle 1 for casual, 2 for softcore, 3 for hardcore. Alternately, use the Lifestyle enum
 * @param options.kolGender An entry from the KolGender enum: 1 for male, 2 for female (sorry that it's limited to those). Defaults to 2 or the corresponding value for defaultGenderOverride pref (which should be 'male' or 'female')
 * @param options.moon Your moon sign as a string, or the zone you're looking for as a string
 * @param options.consumable From the astral deli. Pick the container item, not the product. Defaults to astral six-pack, provide $item`none` for nothing.
 * @param options.pet From the astral pet store.
 * @param options.permOptions Options for perming during a player's stay in Valhalla
 * @param options.permOptions.permSkills A Map<Skill, Lifestyle> of skills you'd like to perm, ordered by priority.
 * @param options.permOptions.neverAbort Whether the ascension should abort on failure
 */


function ascend(options) {
  var _permOptions$permSkil, _permOptions$permSkil2;

  var DEFAULT_OPTIONS = {
    kolGender: (0,_property_js__WEBPACK_IMPORTED_MODULE_5__.get)("defaultGenderOverride", "female") === "male" ? KolGender.male : KolGender.female,
    consumable: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_3__/* .$item */ .xr)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["astral six-pack"]))),
    pet: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_3__/* .$item */ .xr)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["none"])))
  };
  var prunedOptions = Object.fromEntries(Object.entries(options).filter(_ref3 => {
    var _ref4 = _slicedToArray(_ref3, 2),
        value = _ref4[1];

    return value;
  }));

  var _DEFAULT_OPTIONS$prun = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), prunedOptions),
      path = _DEFAULT_OPTIONS$prun.path,
      playerClass = _DEFAULT_OPTIONS$prun.playerClass,
      lifestyle = _DEFAULT_OPTIONS$prun.lifestyle,
      kolGender = _DEFAULT_OPTIONS$prun.kolGender,
      moon = _DEFAULT_OPTIONS$prun.moon,
      consumable = _DEFAULT_OPTIONS$prun.consumable,
      pet = _DEFAULT_OPTIONS$prun.pet,
      permOptions = _DEFAULT_OPTIONS$prun.permOptions;

  if (playerClass.path !== (path.avatar ? path : kolmafia__WEBPACK_IMPORTED_MODULE_0__.Path.none)) {
    throw new AscendError("Invalid class ".concat(playerClass, " for this path!"));
  }

  if (path.id < 0) throw new AscendError("Invalid path: ".concat(path, "!"));
  var moonId = inputToMoonId(moon, playerClass);
  if (moonId < 1 || moonId > 9) throw new Error("Invalid moon ".concat(moon));

  if (!(0,_template_string_js__WEBPACK_IMPORTED_MODULE_3__/* .$items */ .vS)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["none, astral six-pack, astral hot dog dinner, [10882]carton of astral energy drinks"]))).includes(consumable)) {
    throw new AscendError("Invalid astral consumable: ".concat(consumable));
  }

  if (!(0,_template_string_js__WEBPACK_IMPORTED_MODULE_3__/* .$items */ .vS)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["none, astral bludgeon, astral shield, astral chapeau, astral bracer, astral longbow, astral shorts, astral mace, astral trousers, astral ring, astral statuette, astral pistol, astral mask, astral pet sweater, astral shirt, astral belt"]))).includes(pet)) {
    throw new AscendError("Invalid astral pet: ".concat(pet));
  }

  var unownedSkills = _toConsumableArray((_permOptions$permSkil = permOptions === null || permOptions === void 0 ? void 0 : permOptions.permSkills.keys()) !== null && _permOptions$permSkil !== void 0 ? _permOptions$permSkil : []).filter(skill => !(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveSkill)(skill));

  if (unownedSkills.length) {
    throw new AscendError("You're trying to perm the following skills, but don't actually have them: ".concat(unownedSkills.join(", ")));
  }

  var unpermableSkills = _toConsumableArray((_permOptions$permSkil2 = permOptions === null || permOptions === void 0 ? void 0 : permOptions.permSkills.keys()) !== null && _permOptions$permSkil2 !== void 0 ? _permOptions$permSkil2 : []).filter(skill => !skill.permable);

  if (unpermableSkills.length) {
    throw new AscendError("You're trying to perm the following skills, but they're unpermable: ".concat(unownedSkills.join(", ")));
  }

  if (!isInValhalla()) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("ascend.php?action=ascend&confirm=on&confirm2=on");
  }

  if (!isInValhalla()) {
    throw new AscendError("Failed to ascend--do you have a pending trade offer?");
  }

  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("afterlife.php?action=pearlygates");

  if (consumable !== (0,_template_string_js__WEBPACK_IMPORTED_MODULE_3__/* .$item */ .xr)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["none"])))) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("afterlife.php?action=buydeli&whichitem=".concat(consumable.id));
  }

  if (pet !== (0,_template_string_js__WEBPACK_IMPORTED_MODULE_3__/* .$item */ .xr)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["none"])))) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("afterlife.php?action=buyarmory&whichitem=".concat(pet.id));
  }

  if (permOptions) {
    var currentPerms = permedSkills();
    var karma = (0,_property_js__WEBPACK_IMPORTED_MODULE_5__.get)("bankedKarma");

    var _iterator = _createForOfIteratorHelper(permOptions.permSkills.entries()),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _currentPerms$get;

        var _step$value = _slicedToArray(_step.value, 2),
            skill = _step$value[0],
            prospectivePermLevel = _step$value[1];

        var currentPermLevel = (_currentPerms$get = currentPerms.get(skill)) !== null && _currentPerms$get !== void 0 ? _currentPerms$get : Lifestyle.casual;

        if (prospectivePermLevel > currentPermLevel) {
          var expectedKarma = 100 * (prospectivePermLevel - currentPermLevel);

          if (karma < expectedKarma) {
            if (!permOptions.neverAbort) throw new AscendError("Skill ".concat(skill, " is too karmaically expensive!"));
            continue;
          }

          karma -= expectedKarma;
          var permText = prospectivePermLevel === Lifestyle.hardcore ? "hcperm" : "scperm";
          (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("afterlife.php?action=".concat(permText, "&whichskill=").concat(skill.id));
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("afterlife.php?action=ascend&confirmascend=1&whichsign=".concat(moonId, "&gender=").concat(kolGender, "&whichclass=").concat(playerClass.id, "&whichpath=").concat(path.id, "&asctype=").concat(lifestyle, "&nopetok=1&noskillsok=1&lamepathok=1&lamesignok=1&pwd"), true);
}
/**
 * Sets up various iotms you may want to use in the coming ascension
 *
 * @param ascensionPrep Configuration for various ascension prep settings. Any ommitted key will be kept as-is
 * @param ascensionPrep.garden Garden to which to switch
 * @param ascensionPrep.eudora Eudora to which to switch
 * @param ascensionPrep.chateau Chateau configuration
 * @param ascensionPrep.chateau.desk Chateau desk configuration
 * @param ascensionPrep.chateau.ceiling Chateau ceiling configuration
 * @param ascensionPrep.chateau.nightstand Chateau nightstand configuration
 * @param ascensionPrep.throwOnFail If true, this will throw an error when it fails to switch something
 */

function prepareAscension() {
  var _throwOnFail;

  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      garden = _ref5.garden,
      eudora = _ref5.eudora,
      chateau = _ref5.chateau,
      throwOnFail = _ref5.throwOnFail;

  throwOnFail = (_throwOnFail = throwOnFail) !== null && _throwOnFail !== void 0 ? _throwOnFail : true;

  if (garden && !Object.getOwnPropertyNames((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getCampground)()).includes(garden)) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.use)(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get(garden));
    var gardenName = Object.getOwnPropertyNames((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getCampground)()).find(isGarden);

    if (gardenName !== garden && throwOnFail) {
      throw new AscensionPrepError(garden, gardenName);
    }
  }

  if (eudora && (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.eudoraItem)().name !== eudora) {
    var eudoraNumber = 1 + eudorae.indexOf(eudora);

    if (!(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.xpath)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("account.php?tab=correspondence"), "//select[@name=\"whichpenpal\"]/option/@value").includes(eudoraNumber.toString()) && throwOnFail) {
      throw new AscensionPrepError("Unable to swap eudora to ".concat(eudora, " because you are not subscribed to it."));
    } else {
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("account.php?actions[]=whichpenpal&whichpenpal=".concat(eudoraNumber, "&action=Update"), true);
    }

    if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.eudoraItem)() !== kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get(eudora) && throwOnFail) {
      throw new AscensionPrepError(eudora, (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.eudoraItem)());
    }
  }

  if (chateau && _resources_index_js__WEBPACK_IMPORTED_MODULE_2__.have()) {
    var desk = chateau.desk,
        ceiling = chateau.ceiling,
        nightstand = chateau.nightstand;

    if (ceiling && _resources_index_js__WEBPACK_IMPORTED_MODULE_2__.getCeiling() !== ceiling) {
      if (!_resources_index_js__WEBPACK_IMPORTED_MODULE_2__.changeCeiling(ceiling) && throwOnFail) {
        var _ChateauMantegna$getC;

        throw new AscensionPrepError(ceiling, (_ChateauMantegna$getC = _resources_index_js__WEBPACK_IMPORTED_MODULE_2__.getCeiling()) !== null && _ChateauMantegna$getC !== void 0 ? _ChateauMantegna$getC : "unknown");
      }
    }

    if (desk && _resources_index_js__WEBPACK_IMPORTED_MODULE_2__.getDesk() !== desk) {
      if (!_resources_index_js__WEBPACK_IMPORTED_MODULE_2__.changeDesk(desk) && throwOnFail) {
        var _ChateauMantegna$getD;

        throw new AscensionPrepError(desk, (_ChateauMantegna$getD = _resources_index_js__WEBPACK_IMPORTED_MODULE_2__.getDesk()) !== null && _ChateauMantegna$getD !== void 0 ? _ChateauMantegna$getD : "unknown");
      }
    }

    if (nightstand && _resources_index_js__WEBPACK_IMPORTED_MODULE_2__.getNightstand() !== nightstand) {
      if (!_resources_index_js__WEBPACK_IMPORTED_MODULE_2__.changeNightstand(nightstand) && throwOnFail) {
        var _ChateauMantegna$getN;

        throw new AscensionPrepError(nightstand, (_ChateauMantegna$getN = _resources_index_js__WEBPACK_IMPORTED_MODULE_2__.getNightstand()) !== null && _ChateauMantegna$getN !== void 0 ? _ChateauMantegna$getN : "unknown");
      }
    }
  }
}

/***/ }),

/***/ 284:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Xg": () => (/* binding */ InvalidMacroError),
  "LE": () => (/* binding */ Macro),
  "t$": () => (/* binding */ StrictMacro),
  "Qk": () => (/* binding */ adventureMacro),
  "Ao": () => (/* binding */ adventureMacroAuto),
  "or": () => (/* binding */ getMacroId)
});

// EXTERNAL MODULE: external "kolmafia"
var external_kolmafia_ = __webpack_require__(530);
// EXTERNAL MODULE: ./node_modules/libram/dist/lib.js
var lib = __webpack_require__(71);
;// CONCATENATED MODULE: ./node_modules/libram/dist/overlappingNames.js
/** THIS FILE IS AUTOMATICALLY GENERATED. See tools/parseItemSkillNames.ts for more information */
var overlappingItemNames = ["spider web", "really sticky spider web", "dictionary", "NG", "Cloaca-Cola", "yo-yo", "top", "ball", "kite", "yo", "red potion", "blue potion", "bowling ball", "adder", "red button", "pile of sand", "mushroom", "deluxe mushroom"];
var overlappingSkillNames = ["Shoot", "Thrust-Smack", "Headbutt", "Toss", "Knife in the Dark", "Sing", "Disarm", "LIGHT", "BURN", "Extract", "Meteor Shower", "Snipe", "Bite", "Kick", "Howl", "Cleave", "Boil", "Slice", "Rainbow"];
// EXTERNAL MODULE: ./node_modules/libram/dist/property.js
var property = __webpack_require__(785);
;// CONCATENATED MODULE: ./node_modules/libram/dist/combat.js
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }





var MACRO_NAME = "Script Autoattack Macro";
/**
 * Get the KoL native ID of the macro with name name.
 *
 * @param name Name of the macro
 * @category Combat
 * @returns {number} The macro ID.
 */

function getMacroId() {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MACRO_NAME;
  var query = "//select[@name=\"macroid\"]/option[text()=\"".concat(name, "\"]/@value");
  var macroText = (0,external_kolmafia_.visitUrl)("account_combatmacros.php");
  var macroMatches = (0,external_kolmafia_.xpath)(macroText, query);

  if (macroMatches.length === 0) {
    (0,external_kolmafia_.visitUrl)("account_combatmacros.php?action=new");
    var newMacroText = (0,external_kolmafia_.visitUrl)("account_combatmacros.php?macroid=0&name=".concat(name, "&macrotext=abort&action=save"));
    macroMatches = (0,external_kolmafia_.xpath)(newMacroText, query);
  }

  if (macroMatches.length === 0) {
    // We may have hit the macro cap
    if ((0,external_kolmafia_.xpath)(macroText, '//select[@name="macroid"]/option').length >= 100) {
      throw new InvalidMacroError("Please delete at least one existing macro to make some space for Libram");
    } // Otherwise who knows why it failed


    throw new InvalidMacroError("Could not find or create macro ".concat(name));
  }

  return parseInt(macroMatches[0], 10);
}
/**
 * Converts an item name to a Item, or passes through an existing instance of Item
 *
 * @param itemOrName Item name or Item instance
 * @returns KoLmafia Item instance
 */

function itemOrNameToItem(itemOrName) {
  return typeof itemOrName === "string" ? external_kolmafia_.Item.get(itemOrName) : itemOrName;
}
/**
 * Create a string of the item or items provided that is compatible with BALLS syntax and is non-ambiguous
 *
 * @param itemOrItems Item name, item instance, or 2-tuple of item name or item instance
 * @returns BALLS macro-compatible value for item or items provided
 */


function itemOrItemsBallsMacroName(itemOrItems) {
  if (Array.isArray(itemOrItems)) {
    return itemOrItems.map(itemOrItemsBallsMacroName).join(", ");
  } else {
    var item = itemOrNameToItem(itemOrItems);
    return !overlappingItemNames.includes(item.name) ? item.name : item.id.toFixed(0);
  }
}
/**
 * Generate a BALLS macro condition to check wither the player has either a single or a 2-tuple of combat items
 *
 * @param itemOrItems Single or 2-tuple of combat items
 * @returns BALLS macro condition
 */


function itemOrItemsBallsMacroPredicate(itemOrItems) {
  if (Array.isArray(itemOrItems)) {
    return itemOrItems.map(itemOrItemsBallsMacroPredicate).join(" && ");
  } else {
    return "hascombatitem ".concat(itemOrItems);
  }
}
/**
 * Converts a skill name to a Skill, or passes through an existing instance of Skill
 *
 * @param skillOrName Skill name or Skill instance
 * @returns KoLmafia Skill instance
 */


function skillOrNameToSkill(skillOrName) {
  if (typeof skillOrName === "string") {
    return external_kolmafia_.Skill.get(skillOrName);
  } else {
    return skillOrName;
  }
}
/**
 * Get a skill name in a form that is appropriate for BALLS macros
 *
 * @param skillOrName Skill name or Skill instance
 * @returns BALLS macro-suitable skill name
 */


function skillBallsMacroName(skillOrName) {
  var skill = skillOrNameToSkill(skillOrName);
  return skill.name.match(/^[A-Za-z ]+$/) && !overlappingSkillNames.includes(skill.name) ? skill.name : skill.id;
}

var InvalidMacroError = /*#__PURE__*/function (_Error) {
  _inherits(InvalidMacroError, _Error);

  var _super = _createSuper(InvalidMacroError);

  function InvalidMacroError() {
    _classCallCheck(this, InvalidMacroError);

    return _super.apply(this, arguments);
  }

  return _createClass(InvalidMacroError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * BALLS macro builder for direct submission to KoL.
 * Create a new macro with `new Macro()` and add steps using the instance methods.
 * Uses a fluent interface, so each step returns the object for easy chaining of steps.
 * Each method is also defined as a static method that creates a new Macro with only that step.
 * For example, you can do `Macro.skill('Saucestorm').attack()`.
 */

var Macro = /*#__PURE__*/function () {
  function Macro() {
    _classCallCheck(this, Macro);

    _defineProperty(this, "components", []);

    _defineProperty(this, "name", MACRO_NAME);
  }

  _createClass(Macro, [{
    key: "toString",
    value:
    /**
     * Convert macro to string.
     *
     * @returns BALLS macro
     */
    function toString() {
      return (this.components.join(";") + ";").replace(/;;+/g, ";");
    }
    /**
     * Gives your macro a new name to be used when saving an autoattack.
     *
     * @param name The name to be used when saving as an autoattack.
     * @returns The macro in question
     */

  }, {
    key: "rename",
    value: function rename(name) {
      this.name = name;
      return this;
    }
    /**
     * Creates a new Macro with a name other than the default name.
     *
     * @param name The name to assign this macro.
     * @returns A new Macro with the assigned name.
     */

  }, {
    key: "save",
    value:
    /**
     * Save a macro to a Mafia property for use in a consult script.
     */
    function save() {
      (0,property.set)(Macro.SAVED_MACRO_PROPERTY, this.toString());
    }
    /**
     * Load a saved macro from the Mafia property.
     *
     * @returns Loaded macro text
     */

  }, {
    key: "step",
    value:
    /**
     * Statefully add one or several steps to a macro.
     *
     * @param nextSteps The steps to add to the macro.
     * @returns {Macro} This object itself.
     */
    function step() {
      var _ref, _this$components;

      for (var _len = arguments.length, nextSteps = new Array(_len), _key = 0; _key < _len; _key++) {
        nextSteps[_key] = arguments[_key];
      }

      var nextStepsStrings = (_ref = []).concat.apply(_ref, _toConsumableArray(nextSteps.map(x => x instanceof Macro ? x.components : [x])));

      (_this$components = this.components).push.apply(_this$components, _toConsumableArray(nextStepsStrings.filter(Boolean)));

      return this;
    }
    /**
     * Statefully add one or several steps to a macro.
     *
     * @param nextSteps The steps to add to the macro.
     * @returns {Macro} This object itself.
     */

  }, {
    key: "submit",
    value:
    /**
     * Submit the built macro to KoL. Only works inside combat.
     *
     * @returns Contents of the fight page after macro submission
     */
    function submit() {
      var final = this.toString();
      return (0,external_kolmafia_.visitUrl)("fight.php?action=macro&macrotext=".concat((0,external_kolmafia_.urlEncode)(final)), true, true);
    }
    /**
     * Set this macro as a KoL native autoattack.
     */

  }, {
    key: "setAutoAttack",
    value: function setAutoAttack() {
      var id = Macro.cachedMacroIds.get(this.name);

      if (id === undefined) {
        id = getMacroId(this.name);
        Macro.cachedMacroIds.set(this.name, id);
      }

      if ((0,external_kolmafia_.getAutoAttack)() === 99000000 + id && this.toString() === Macro.cachedAutoAttacks.get(this.name)) {
        // This macro is already set. Don"t make the server request.
        return;
      }

      (0,external_kolmafia_.visitUrl)("account_combatmacros.php?macroid=".concat(id, "&name=").concat((0,external_kolmafia_.urlEncode)(this.name), "&macrotext=").concat((0,external_kolmafia_.urlEncode)(this.toString()), "&action=save"), true, true);
      (0,external_kolmafia_.visitUrl)("account.php?am=1&action=autoattack&value=".concat(99000000 + id, "&ajax=1"));
      Macro.cachedAutoAttacks.set(this.name, this.toString());
    }
    /**
     * Renames the macro, then sets it as an autoattack.
     *
     * @param name The name to save the macro under as an autoattack.
     */

  }, {
    key: "setAutoAttackAs",
    value: function setAutoAttackAs(name) {
      this.name = name;
      this.setAutoAttack();
    }
    /**
     * Clear all cached autoattacks, and delete all stored macros server-side.
     */

  }, {
    key: "abort",
    value:
    /**
     * Add an "abort" step to this macro.
     *
     * @returns {Macro} This object itself.
     */
    function abort() {
      return this.step("abort");
    }
    /**
     * Create a new macro with an "abort" step.
     *
     * @returns {Macro} This object itself.
     */

  }, {
    key: "abortWithWarning",
    value:
    /**
     * Adds an "abort" step to this macro, with a warning message to print
     *
     * @param warning The warning message to print
     * @returns  {Macro} This object itself.
     */
    function abortWithWarning(warning) {
      return this.step("abort \"".concat(warning, "\""));
    }
    /**
     * Create a new macro with an "abort" step to this macro, with a warning message to print
     *
     * @param warning The warning message to print
     * @returns {Macro} This object itself.
     */

  }, {
    key: "runaway",
    value:
    /**
     * Add a "runaway" step to this macro.
     *
     * @returns {Macro} This object itself.
     */
    function runaway() {
      return this.step("runaway");
    }
    /**
     * Create a new macro with an "runaway" step.
     *
     * @returns {Macro} This object itself.
     */

  }, {
    key: "if_",
    value:
    /**
     * Add an "if" statement to this macro.
     *
     * @param condition The BALLS condition for the if statement.
     * @param ifTrue Continuation if the condition is true.
     * @returns {Macro} This object itself.
     */
    function if_(condition, ifTrue) {
      return this.step("if ".concat(Macro.makeBALLSPredicate(condition))).step(ifTrue).step("endif");
    }
    /**
     * Create a new macro with an "if" statement.
     *
     * @param condition The BALLS condition for the if statement.
     * @param ifTrue Continuation if the condition is true.
     * @returns {Macro} This object itself.
     */

  }, {
    key: "ifNot",
    value:
    /**
     * Add an "if" statement to this macro, inverting the condition.
     *
     * @param condition The BALLS condition for the if statement.
     * @param ifTrue Continuation if the condition is true.
     * @returns {Macro} This object itself.
     */
    function ifNot(condition, ifTrue) {
      return this.step("if !(".concat(Macro.makeBALLSPredicate(condition), ")")).step(ifTrue).step("endif");
    }
    /**
     * Create a new macro with an "if" statement, inverting the condition.
     *
     * @param condition The BALLS condition for the if statement.
     * @param ifTrue Continuation if the condition is true.
     * @returns {Macro} This object itself.
     */

  }, {
    key: "while_",
    value:
    /**
     * Add a "while" statement to this macro.
     *
     * @param condition The BALLS condition for the while statement.
     * @param contents Loop to repeat while the condition is true.
     * @returns {Macro} This object itself.
     */
    function while_(condition, contents) {
      return this.step("while ".concat(Macro.makeBALLSPredicate(condition))).step(contents).step("endwhile");
    }
    /**
     * Create a new macro with a "while" statement.
     *
     * @param condition The BALLS condition for the while statement.
     * @param contents Loop to repeat while the condition is true.
     * @returns {Macro} This object itself.
     */

  }, {
    key: "externalIf",
    value:
    /**
     * Conditionally add a step to a macro based on a condition evaluated at the time of building the macro.
     *
     * @param condition The JS condition.
     * @param ifTrue Continuation to add if the condition is true.
     * @param ifFalse Optional input to turn this into an if...else statement.
     * @returns {Macro} This object itself.
     */
    function externalIf(condition, ifTrue, ifFalse) {
      if (condition) return this.step(ifTrue);else if (ifFalse) return this.step(ifFalse);else return this;
    }
    /**
     * Create a new macro with a condition evaluated at the time of building the macro.
     *
     * @param condition The JS condition.
     * @param ifTrue Continuation to add if the condition is true.
     * @param ifFalse Optional input to turn this into an if...else statement.
     * @returns {Macro} This object itself.
     */

  }, {
    key: "repeat",
    value:
    /**
     * Add a repeat step to the macro.
     *
     * @param condition The BALLS condition for the repeat statement, optional.
     * @returns {Macro} This object itself.
     */
    function repeat(condition) {
      return condition === undefined ? this.step("repeat") : this.step("repeat ".concat(Macro.makeBALLSPredicate(condition)));
    }
    /**
     * Add one or more skill cast steps to the macro.
     *
     * @param skills Skills to cast.
     * @returns {Macro} This object itself.
     */

  }, {
    key: "skill",
    value: function skill() {
      for (var _len2 = arguments.length, skills = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        skills[_key2] = arguments[_key2];
      }

      return this.step.apply(this, _toConsumableArray(skills.map(skill => {
        return "skill ".concat(skillBallsMacroName(skill));
      })));
    }
    /**
     * Create a new macro with one or more skill cast steps.
     *
     * @param skills Skills to cast.
     * @returns {Macro} This object itself.
     */

  }, {
    key: "trySkill",
    value:
    /**
     * Add one or more skill cast steps to the macro, where each step checks if you have the skill first.
     *
     * @param skills Skills to try casting.
     * @returns {Macro} This object itself.
     */
    function trySkill() {
      for (var _len3 = arguments.length, skills = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        skills[_key3] = arguments[_key3];
      }

      return this.step.apply(this, _toConsumableArray(skills.map(skillOrName => skillOrNameToSkill(skillOrName)).map(skill => {
        return Macro.if_(Macro.makeBALLSPredicate(skill), Macro.skill(skill));
      })));
    }
    /**
     * Create a new macro with one or more skill cast steps, where each step checks if you have the skill first.
     *
     * @param skills Skills to try casting.
     * @returns {Macro} This object itself.
     */

  }, {
    key: "trySkillRepeat",
    value:
    /**
     * Add one or more skill-cast-and-repeat steps to the macro, where each step checks if you have the skill first.
     *
     * @param skills Skills to try repeatedly casting.
     * @returns {Macro} This object itself.
     */
    function trySkillRepeat() {
      for (var _len4 = arguments.length, skills = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        skills[_key4] = arguments[_key4];
      }

      return this.step.apply(this, _toConsumableArray(skills.map(skillOrName => skillOrNameToSkill(skillOrName)).map(skill => {
        return Macro.if_(Macro.makeBALLSPredicate(skill), Macro.skill(skill).repeat(skill));
      })));
    }
    /**
     * Create a new macro with one or more skill-cast-and-repeat steps, where each step checks if you have the skill first.
     *
     * @param skills Skills to try repeatedly casting.
     * @returns {Macro} This object itself.
     */

  }, {
    key: "item",
    value:
    /**
     * Add one or more item steps to the macro.
     *
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */
    function item() {
      for (var _len5 = arguments.length, items = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        items[_key5] = arguments[_key5];
      }

      return this.step.apply(this, _toConsumableArray(items.map(itemOrItems => {
        return "use ".concat(itemOrItemsBallsMacroName(itemOrItems));
      })));
    }
    /**
     * Create a new macro with one or more item steps.
     *
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */

  }, {
    key: "tryItem",
    value:
    /**
     * Add one or more item steps to the macro, where each step checks to see if you have the item first.
     *
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */
    function tryItem() {
      for (var _len6 = arguments.length, items = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        items[_key6] = arguments[_key6];
      }

      return this.step.apply(this, _toConsumableArray(items.map(item => {
        return Macro.if_(itemOrItemsBallsMacroPredicate(item), Macro.item(item));
      })));
    }
    /**
     * Create a new macro with one or more item steps, where each step checks to see if you have the item first.
     *
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */

  }, {
    key: "attack",
    value:
    /**
     * Add an attack step to the macro.
     *
     * @returns {Macro} This object itself.
     */
    function attack() {
      return this.step("attack");
    }
    /**
     * Create a new macro with an attack step.
     *
     * @returns {Macro} This object itself.
     */

  }, {
    key: "ifHolidayWanderer",
    value:
    /**
     * Create an if_ statement based on what holiday of loathing it currently is. On non-holidays, returns the original macro, unmutated.
     *
     * @param macro The macro to place in the if_ statement
     * @returns This macro with supplied macro wapped in if statement matching holiday wanderers
     */
    function ifHolidayWanderer(macro) {
      var todaysWanderers = (0,lib/* getTodaysHolidayWanderers */.UL)();
      if (todaysWanderers.length === 0) return this;
      return this.if_(todaysWanderers.map(monster => "monsterid ".concat(monster.id)).join(" || "), macro);
    }
    /**
     * Create a new macro starting with an ifHolidayWanderer step.
     *
     * @param macro The macro to place inside the if_ statement
     * @returns New macro with supplied macro wrapped in if statement matching holiday wanderers
     */

  }, {
    key: "ifNotHolidayWanderer",
    value:
    /**
     * Create an if_ statement based on what holiday of loathing it currently is. On non-holidays, returns the original macro, with the input macro appended.
     *
     * @param macro The macro to place in the if_ statement.
     * @returns This macro with supplied macro wrapped in if statement matching monsters that are not holiday wanderers
     */
    function ifNotHolidayWanderer(macro) {
      var todaysWanderers = (0,lib/* getTodaysHolidayWanderers */.UL)();
      if (todaysWanderers.length === 0) return this.step(macro);
      return this.if_(todaysWanderers.map(monster => "!monsterid ".concat(monster.id)).join(" && "), macro);
    }
    /**
     * Create a new macro starting with an ifNotHolidayWanderer step.
     *
     * @param macro The macro to place inside the if_ statement
     * @returns New macro with supplied macro wrapped in if statement matching monsters that are not holiday wanderers
     */

  }], [{
    key: "rename",
    value: function rename(name) {
      return new this().rename(name);
    }
  }, {
    key: "load",
    value: function load() {
      var _this;

      return (_this = new this()).step.apply(_this, _toConsumableArray((0,property.get)(Macro.SAVED_MACRO_PROPERTY).split(";")));
    }
    /**
     * Clear the saved macro in the Mafia property.
     */

  }, {
    key: "clearSaved",
    value: function clearSaved() {
      (0,external_kolmafia_.removeProperty)(Macro.SAVED_MACRO_PROPERTY);
    }
  }, {
    key: "step",
    value: function step() {
      var _this2;

      return (_this2 = new this()).step.apply(_this2, arguments);
    }
  }, {
    key: "clearAutoAttackMacros",
    value: function clearAutoAttackMacros() {
      var _iterator = _createForOfIteratorHelper(Macro.cachedAutoAttacks.keys()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _Macro$cachedMacroIds;

          var name = _step.value;
          var id = (_Macro$cachedMacroIds = Macro.cachedMacroIds.get(name)) !== null && _Macro$cachedMacroIds !== void 0 ? _Macro$cachedMacroIds : getMacroId(name);
          (0,external_kolmafia_.visitUrl)("account_combatmacros.php?macroid=".concat(id, "&action=edit&what=Delete&confirm=1"));
          Macro.cachedAutoAttacks.delete(name);
          Macro.cachedMacroIds.delete(name);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "abort",
    value: function abort() {
      return new this().abort();
    }
  }, {
    key: "abortWithWarning",
    value: function abortWithWarning(warning) {
      return new this().abortWithWarning(warning);
    }
  }, {
    key: "runaway",
    value: function runaway() {
      return new this().runaway();
    }
    /**
     *
     * @param condition The BALLS condition or a type to make a condition for (Monster, Item, Skill, etc.)
     * @returns {string} The BALLS condition string
     */

  }, {
    key: "makeBALLSPredicate",
    value: function makeBALLSPredicate(condition) {
      if (condition instanceof external_kolmafia_.Monster) {
        return "monsterid ".concat(condition.id);
      } else if (condition instanceof Array) {
        return "(".concat(condition.map(entry => Macro.makeBALLSPredicate(entry)).join(" || "), ")");
      } else if (condition instanceof external_kolmafia_.Effect) {
        return "haseffect ".concat(condition.id);
      } else if (condition instanceof external_kolmafia_.Skill) {
        return "hasskill ".concat(skillBallsMacroName(condition));
      } else if (condition instanceof external_kolmafia_.Item) {
        if (!condition.combat) {
          throw new InvalidMacroError("Item ".concat(condition, " cannot be made a valid BALLS predicate (it is not combat-usable)"));
        }

        return "hascombatitem ".concat(itemOrItemsBallsMacroName(condition));
      } else if (condition instanceof external_kolmafia_.Location) {
        var snarfblat = condition.id;

        if (snarfblat < 1) {
          throw new InvalidMacroError("Location ".concat(condition, " cannot be made a valid BALLS predicate (it has no location id)"));
        }

        return "snarfblat ".concat(snarfblat);
      } else if (condition instanceof external_kolmafia_.Class) {
        if (condition.id > 6) {
          throw new InvalidMacroError("Class ".concat(condition, " cannot be made a valid BALLS predicate (it is not a standard class)"));
        }

        return condition.toString().replaceAll(" ", "").toLowerCase();
      } else if (condition instanceof external_kolmafia_.Stat) {
        return "".concat(condition.toString().toLowerCase(), "class");
      }

      return condition;
    }
  }, {
    key: "if_",
    value: function if_(condition, ifTrue) {
      return new this().if_(condition, ifTrue);
    }
  }, {
    key: "ifNot",
    value: function ifNot(condition, ifTrue) {
      return new this().ifNot(condition, ifTrue);
    }
  }, {
    key: "while_",
    value: function while_(condition, contents) {
      return new this().while_(condition, contents);
    }
  }, {
    key: "externalIf",
    value: function externalIf(condition, ifTrue, ifFalse) {
      return new this().externalIf(condition, ifTrue, ifFalse);
    }
  }, {
    key: "skill",
    value: function skill() {
      var _this3;

      return (_this3 = new this()).skill.apply(_this3, arguments);
    }
  }, {
    key: "trySkill",
    value: function trySkill() {
      var _this4;

      return (_this4 = new this()).trySkill.apply(_this4, arguments);
    }
  }, {
    key: "trySkillRepeat",
    value: function trySkillRepeat() {
      var _this5;

      return (_this5 = new this()).trySkillRepeat.apply(_this5, arguments);
    }
  }, {
    key: "item",
    value: function item() {
      var _this6;

      return (_this6 = new this()).item.apply(_this6, arguments);
    }
  }, {
    key: "tryItem",
    value: function tryItem() {
      var _this7;

      return (_this7 = new this()).tryItem.apply(_this7, arguments);
    }
  }, {
    key: "attack",
    value: function attack() {
      return new this().attack();
    }
  }, {
    key: "ifHolidayWanderer",
    value: function ifHolidayWanderer(macro) {
      return new this().ifHolidayWanderer(macro);
    }
  }, {
    key: "ifNotHolidayWanderer",
    value: function ifNotHolidayWanderer(macro) {
      return new this().ifNotHolidayWanderer(macro);
    }
  }]);

  return Macro;
}();
/**
 * Adventure in a location and handle all combats with a given macro.
 * To use this function you will need to create a consult script that runs Macro.load().submit() and a CCS that calls that consult script.
 * See examples/consult.ts for an example.
 *
 * @category Combat
 * @param loc Location to adventure in.
 * @param macro Macro to execute.
 */

_defineProperty(Macro, "SAVED_MACRO_PROPERTY", "libram_savedMacro");

_defineProperty(Macro, "cachedMacroIds", new Map());

_defineProperty(Macro, "cachedAutoAttacks", new Map());

function adventureMacro(loc, macro) {
  macro.save();
  (0,external_kolmafia_.setAutoAttack)(0);

  try {
    (0,external_kolmafia_.adv1)(loc, 0, "");

    while ((0,external_kolmafia_.inMultiFight)()) {
      (0,external_kolmafia_.runCombat)();
    }

    if ((0,external_kolmafia_.choiceFollowsFight)()) (0,external_kolmafia_.visitUrl)("choice.php");
  } finally {
    Macro.clearSaved();
  }
}
/**
 * Adventure in a location and handle all combats with a given autoattack and manual macro.
 * To use the nextMacro parameter you will need to create a consult script that runs Macro.load().submit() and a CCS that calls that consult script.
 * See examples/consult.ts for an example.
 *
 * @category Combat
 * @param loc Location to adventure in.
 * @param autoMacro Macro to execute via KoL autoattack.
 * @param nextMacro Macro to execute manually after autoattack completes.
 */

function adventureMacroAuto(loc, autoMacro) {
  var _nextMacro;

  var nextMacro = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  nextMacro = (_nextMacro = nextMacro) !== null && _nextMacro !== void 0 ? _nextMacro : Macro.abort();
  autoMacro.setAutoAttack();
  nextMacro.save();

  try {
    (0,external_kolmafia_.adv1)(loc, 0, "");

    while ((0,external_kolmafia_.inMultiFight)()) {
      (0,external_kolmafia_.runCombat)();
    }

    if ((0,external_kolmafia_.choiceFollowsFight)()) (0,external_kolmafia_.visitUrl)("choice.php");
  } finally {
    Macro.clearSaved();
  }
}
var StrictMacro = /*#__PURE__*/function (_Macro) {
  _inherits(StrictMacro, _Macro);

  var _super2 = _createSuper(StrictMacro);

  function StrictMacro() {
    _classCallCheck(this, StrictMacro);

    return _super2.apply(this, arguments);
  }

  _createClass(StrictMacro, [{
    key: "skill",
    value:
    /**
     * Add one or more skill cast steps to the macro.
     *
     * @param skills Skills to cast.
     * @returns {StrictMacro} This object itself.
     */
    function skill() {
      var _get2;

      for (var _len7 = arguments.length, skills = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        skills[_key7] = arguments[_key7];
      }

      return (_get2 = _get(_getPrototypeOf(StrictMacro.prototype), "skill", this)).call.apply(_get2, [this].concat(skills));
    }
    /**
     * Create a new macro with one or more skill cast steps.
     *
     * @param skills Skills to cast.
     * @returns {StrictMacro} This object itself.
     */

  }, {
    key: "item",
    value:
    /**
     * Add one or more item steps to the macro.
     *
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */
    function item() {
      var _get3;

      for (var _len8 = arguments.length, items = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        items[_key8] = arguments[_key8];
      }

      return (_get3 = _get(_getPrototypeOf(StrictMacro.prototype), "item", this)).call.apply(_get3, [this].concat(items));
    }
    /**
     * Create a new macro with one or more item steps.
     *
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */

  }, {
    key: "trySkill",
    value:
    /**
     * Add one or more skill cast steps to the macro, where each step checks if you have the skill first.
     *
     * @param skills Skills to try casting.
     * @returns {StrictMacro} This object itself.
     */
    function trySkill() {
      var _get4;

      for (var _len9 = arguments.length, skills = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        skills[_key9] = arguments[_key9];
      }

      return (_get4 = _get(_getPrototypeOf(StrictMacro.prototype), "trySkill", this)).call.apply(_get4, [this].concat(skills));
    }
    /**
     * Create a new macro with one or more skill cast steps, where each step checks if you have the skill first.
     *
     * @param skills Skills to try casting.
     * @returns {StrictMacro} This object itself.
     */

  }, {
    key: "tryItem",
    value:
    /**
     * Add one or more item steps to the macro, where each step checks to see if you have the item first.
     *
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */
    function tryItem() {
      var _get5;

      for (var _len10 = arguments.length, items = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        items[_key10] = arguments[_key10];
      }

      return (_get5 = _get(_getPrototypeOf(StrictMacro.prototype), "tryItem", this)).call.apply(_get5, [this].concat(items));
    }
    /**
     * Create a new macro with one or more item steps, where each step checks to see if you have the item first.
     *
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */

  }, {
    key: "trySkillRepeat",
    value:
    /**
     * Add one or more skill-cast-and-repeat steps to the macro, where each step checks if you have the skill first.
     *
     * @param skills Skills to try repeatedly casting.
     * @returns {StrictMacro} This object itself.
     */
    function trySkillRepeat() {
      var _get6;

      for (var _len11 = arguments.length, skills = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        skills[_key11] = arguments[_key11];
      }

      return (_get6 = _get(_getPrototypeOf(StrictMacro.prototype), "trySkillRepeat", this)).call.apply(_get6, [this].concat(skills));
    }
    /**
     * Create a new macro with one or more skill-cast-and-repeat steps, where each step checks if you have the skill first.
     *
     * @param skills Skills to try repeatedly casting.
     * @returns {StrictMacro} This object itself.
     */

  }], [{
    key: "skill",
    value: function skill() {
      var _this8;

      return (_this8 = new this()).skill.apply(_this8, arguments);
    }
  }, {
    key: "item",
    value: function item() {
      var _this9;

      return (_this9 = new this()).item.apply(_this9, arguments);
    }
  }, {
    key: "trySkill",
    value: function trySkill() {
      var _this10;

      return (_this10 = new this()).trySkill.apply(_this10, arguments);
    }
  }, {
    key: "tryItem",
    value: function tryItem() {
      var _this11;

      return (_this11 = new this()).tryItem.apply(_this11, arguments);
    }
  }, {
    key: "trySkillRepeat",
    value: function trySkillRepeat() {
      var _this12;

      return (_this12 = new this()).trySkillRepeat.apply(_this12, arguments);
    }
  }]);

  return StrictMacro;
}(Macro);

/***/ }),

/***/ 542:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "$bounties": () => (/* reexport */ template_string/* $bounties */.IG),
  "$bounty": () => (/* reexport */ template_string/* $bounty */.uO),
  "$class": () => (/* reexport */ template_string/* $class */._$),
  "$classes": () => (/* reexport */ template_string/* $classes */.JT),
  "$coinmaster": () => (/* reexport */ template_string/* $coinmaster */.$L),
  "$coinmasters": () => (/* reexport */ template_string/* $coinmasters */.yF),
  "$effect": () => (/* reexport */ template_string/* $effect */._G),
  "$effects": () => (/* reexport */ template_string/* $effects */.lh),
  "$element": () => (/* reexport */ template_string/* $element */.SS),
  "$elements": () => (/* reexport */ template_string/* $elements */.Ys),
  "$familiar": () => (/* reexport */ template_string/* $familiar */.HP),
  "$familiars": () => (/* reexport */ template_string/* $familiars */.LG),
  "$item": () => (/* reexport */ template_string/* $item */.xr),
  "$items": () => (/* reexport */ template_string/* $items */.vS),
  "$location": () => (/* reexport */ template_string/* $location */.PG),
  "$locations": () => (/* reexport */ template_string/* $locations */.xw),
  "$modifier": () => (/* reexport */ template_string/* $modifier */.f9),
  "$modifiers": () => (/* reexport */ template_string/* $modifiers */.j),
  "$monster": () => (/* reexport */ template_string/* $monster */.O4),
  "$monsters": () => (/* reexport */ template_string/* $monsters */.fr),
  "$path": () => (/* reexport */ template_string/* $path */.l$),
  "$paths": () => (/* reexport */ template_string/* $paths */.n7),
  "$phyla": () => (/* reexport */ template_string/* $phyla */.bi),
  "$phylum": () => (/* reexport */ template_string/* $phylum */.tq),
  "$servant": () => (/* reexport */ template_string/* $servant */.o6),
  "$servants": () => (/* reexport */ template_string/* $servants */.qi),
  "$skill": () => (/* reexport */ template_string/* $skill */.tm),
  "$skills": () => (/* reexport */ template_string/* $skills */.nx),
  "$slot": () => (/* reexport */ template_string/* $slot */.Jh),
  "$slots": () => (/* reexport */ template_string/* $slots */.ei),
  "$stat": () => (/* reexport */ template_string/* $stat */.Ri),
  "$stats": () => (/* reexport */ template_string/* $stats */.gw),
  "$thrall": () => (/* reexport */ template_string/* $thrall */.ev),
  "$thralls": () => (/* reexport */ template_string/* $thralls */._0),
  "ActionSource": () => (/* reexport */ ActionSource),
  "AprilingBandHelmet": () => (/* reexport */ AprilingBandHelmet_namespaceObject),
  "AscendError": () => (/* reexport */ ascend/* AscendError */.o$),
  "AscensionPrepError": () => (/* reexport */ ascend/* AscensionPrepError */.cr),
  "AsdonMartin": () => (/* reexport */ AsdonMartin),
  "AugustScepter": () => (/* reexport */ AugustScepter_namespaceObject),
  "AutumnAton": () => (/* reexport */ AutumnAton_namespaceObject),
  "Bandersnatch": () => (/* reexport */ Bandersnatch_namespaceObject),
  "BarrelShrine": () => (/* reexport */ BarrelShrine_namespaceObject),
  "BeachComb": () => (/* reexport */ BeachComb_namespaceObject),
  "BurningLeaves": () => (/* reexport */ BurningLeaves_namespaceObject),
  "CampAway": () => (/* reexport */ CampAway_namespaceObject),
  "Cartography": () => (/* reexport */ Cartography_namespaceObject),
  "ChateauMantegna": () => (/* reexport */ ChateauMantegna),
  "ChestMimic": () => (/* reexport */ ChestMimic_namespaceObject),
  "CinchoDeMayo": () => (/* reexport */ CinchoDeMayo_namespaceObject),
  "Clan": () => (/* reexport */ Clan/* Clan */._),
  "ClosedCircuitPayphone": () => (/* reexport */ ClosedCircuitPayphone_namespaceObject),
  "CombatLoversLocket": () => (/* reexport */ CombatLoversLocket_namespaceObject),
  "CommunityService": () => (/* reexport */ CommunityService),
  "Counter": () => (/* reexport */ counter_namespaceObject),
  "CrimboShrub": () => (/* reexport */ CrimboShrub_namespaceObject),
  "CrownOfThrones": () => (/* reexport */ CrownOfThrones_namespaceObject),
  "CrystalBall": () => (/* reexport */ CrystalBall_namespaceObject),
  "CursedMonkeyPaw": () => (/* reexport */ CursedMonkeyPaw_namespaceObject),
  "DNALab": () => (/* reexport */ DNALab_namespaceObject),
  "DaylightShavings": () => (/* reexport */ DaylightShavings_namespaceObject),
  "DeckOfEveryCard": () => (/* reexport */ DeckOfEveryCard_namespaceObject),
  "Diet": () => (/* reexport */ Diet),
  "Dinseylandfill": () => (/* reexport */ Dinseylandfill_namespaceObject),
  "Dreadsylvania": () => (/* reexport */ Dreadsylvania),
  "Dungeon": () => (/* reexport */ Dungeon),
  "EnsureError": () => (/* reexport */ lib/* EnsureError */.Qr),
  "Environment": () => (/* reexport */ lib/* Environment */.qA),
  "FloristFriar": () => (/* reexport */ Florist_namespaceObject),
  "GingerBread": () => (/* reexport */ GingerBread_namespaceObject),
  "GreyGoose": () => (/* reexport */ GreyGoose_namespaceObject),
  "Guzzlr": () => (/* reexport */ Guzzlr_namespaceObject),
  "HeavyRains": () => (/* reexport */ HeavyRains_namespaceObject),
  "Hobopolis": () => (/* reexport */ Hobopolis),
  "Horsery": () => (/* reexport */ Horsery_namespaceObject),
  "InvalidMacroError": () => (/* reexport */ combat/* InvalidMacroError */.Xg),
  "JuneCleaver": () => (/* reexport */ JuneCleaver_namespaceObject),
  "JungMan": () => (/* reexport */ JungMan_namespaceObject),
  "Kmail": () => (/* reexport */ Kmail/* default */.Z),
  "KolGender": () => (/* reexport */ ascend/* KolGender */.QE),
  "KolmafiaVersionError": () => (/* reexport */ KolmafiaVersionError),
  "Latte": () => (/* reexport */ LatteLoversMembersMug_namespaceObject),
  "Lifestyle": () => (/* reexport */ ascend/* Lifestyle */.VO),
  "LookingGlass": () => (/* reexport */ LookingGlass_namespaceObject),
  "Macro": () => (/* reexport */ combat/* Macro */.LE),
  "MagicalSausages": () => (/* reexport */ MagicalSausages),
  "MayamCalendar": () => (/* reexport */ MayamCalendar_namespaceObject),
  "MayoClinic": () => (/* reexport */ MayoClinic_namespaceObject),
  "MenuItem": () => (/* reexport */ MenuItem),
  "Mood": () => (/* reexport */ Mood),
  "MpSource": () => (/* reexport */ MpSource),
  "MummingTrunk": () => (/* reexport */ MummingTrunk_namespaceObject),
  "NuclearAutumn": () => (/* reexport */ NuclearAutumn_namespaceObject),
  "ObtuseAngel": () => (/* reexport */ ObtuseAngel_namespaceObject),
  "OscusSoda": () => (/* reexport */ OscusSoda),
  "Pantogram": () => (/* reexport */ Pantogram_namespaceObject),
  "PropertiesManager": () => (/* reexport */ property.PropertiesManager),
  "RainDoh": () => (/* reexport */ RainDoh_namespaceObject),
  "RainDohBlackBox": () => (/* reexport */ RainDohBlackBox),
  "ReagnimatedGnome": () => (/* reexport */ ReagnimatedGnome_namespaceObject),
  "Requirement": () => (/* reexport */ maximize/* Requirement */.nb),
  "RetroCape": () => (/* reexport */ RetroCape_namespaceObject),
  "Robortender": () => (/* reexport */ Robortender_namespaceObject),
  "Session": () => (/* reexport */ session/* Session */.z),
  "SlimeTube": () => (/* reexport */ SlimeTube),
  "Snapper": () => (/* reexport */ Snapper_namespaceObject),
  "SongBoom": () => (/* reexport */ SongBoom_namespaceObject),
  "SourceTerminal": () => (/* reexport */ SourceTerminal_namespaceObject),
  "Spacegate": () => (/* reexport */ Spacegate_namespaceObject),
  "SpookyPutty": () => (/* reexport */ SpookyPutty_namespaceObject),
  "SpookyPuttySheet": () => (/* reexport */ SpookyPuttySheet),
  "Stickers": () => (/* reexport */ Stickers_namespaceObject),
  "StompingBoots": () => (/* reexport */ StompingBoots_namespaceObject),
  "StrictMacro": () => (/* reexport */ combat/* StrictMacro */.t$),
  "TrainSet": () => (/* reexport */ TrainSet_namespaceObject),
  "TunnelOfLove": () => (/* reexport */ TunnelOfLove_namespaceObject),
  "Wanderer": () => (/* reexport */ lib/* Wanderer */.Ie),
  "WinterGarden": () => (/* reexport */ WinterGarden_namespaceObject),
  "Witchess": () => (/* reexport */ Witchess_namespaceObject),
  "actionSourcesAvailable": () => (/* reexport */ actionSourcesAvailable),
  "adventureMacro": () => (/* reexport */ combat/* adventureMacro */.Qk),
  "adventureMacroAuto": () => (/* reexport */ combat/* adventureMacroAuto */.Ao),
  "applyModes": () => (/* reexport */ maximize/* applyModes */.ls),
  "arrayContains": () => (/* reexport */ utils/* arrayContains */.IA),
  "arrayEquals": () => (/* reexport */ utils/* arrayEquals */._g),
  "arrayToCountedMap": () => (/* reexport */ utils/* arrayToCountedMap */.tv),
  "ascend": () => (/* reexport */ ascend/* ascend */.zU),
  "bestLibramToCast": () => (/* reexport */ bestLibramToCast),
  "booleanModifiers": () => (/* reexport */ booleanModifiers),
  "byClass": () => (/* reexport */ lib/* byClass */.Eg),
  "byStat": () => (/* reexport */ lib/* byStat */.sN),
  "canRememberSong": () => (/* reexport */ lib/* canRememberSong */.Pr),
  "canUse": () => (/* reexport */ lib/* canUse */.EO),
  "canVisitUrl": () => (/* reexport */ lib/* canVisitUrl */.Ao),
  "chunk": () => (/* reexport */ utils/* chunk */.yo),
  "clamp": () => (/* reexport */ utils/* clamp */.uZ),
  "clearMaximizerCache": () => (/* reexport */ maximize/* clearMaximizerCache */.kx),
  "console": () => (/* reexport */ console_namespaceObject),
  "couldUseRainDohBlackBox": () => (/* reexport */ couldUseRainDohBlackBox),
  "couldUseSpookyPuttySheet": () => (/* reexport */ couldUseSpookyPuttySheet),
  "countedMapToArray": () => (/* reexport */ utils/* countedMapToArray */.Y8),
  "countedMapToString": () => (/* reexport */ utils/* countedMapToString */.N3),
  "damageTakenByElement": () => (/* reexport */ lib/* damageTakenByElement */.mQ),
  "directlyUse": () => (/* reexport */ lib/* directlyUse */.tg),
  "ensureBanish": () => (/* reexport */ ensureBanish),
  "ensureEffect": () => (/* reexport */ lib/* ensureEffect */.pq),
  "ensureFreeKill": () => (/* reexport */ ensureFreeKill),
  "ensureFreeRun": () => (/* reexport */ ensureFreeRun),
  "examine": () => (/* reexport */ lib/* examine */.OH),
  "expectedLibramSummon": () => (/* reexport */ expectedLibramSummon),
  "extractItems": () => (/* reexport */ lib/* extractItems */.Fx),
  "findActionSource": () => (/* reexport */ findActionSource),
  "findFairyMultiplier": () => (/* reexport */ lib/* findFairyMultiplier */.gK),
  "findLeprechaunMultiplier": () => (/* reexport */ lib/* findLeprechaunMultiplier */.q$),
  "flat": () => (/* reexport */ utils/* flat */.$H),
  "freeCrafts": () => (/* reexport */ lib/* freeCrafts */.uo),
  "gameDay": () => (/* reexport */ lib/* gameDay */.kv),
  "get": () => (/* reexport */ property.get),
  "getActiveEffects": () => (/* reexport */ lib/* getActiveEffects */.jC),
  "getActiveSongs": () => (/* reexport */ lib/* getActiveSongs */.b_),
  "getAverage": () => (/* reexport */ lib/* getAverage */.A5),
  "getAverageAdventures": () => (/* reexport */ lib/* getAverageAdventures */.N),
  "getBanishedMonsters": () => (/* reexport */ lib/* getBanishedMonsters */.$c),
  "getCombatFlags": () => (/* reexport */ lib/* getCombatFlags */.ye),
  "getCurrentModes": () => (/* reexport */ maximize/* getCurrentModes */.Gh),
  "getFamiliarWandererChance": () => (/* reexport */ lib/* getFamiliarWandererChance */.r1),
  "getFoldGroup": () => (/* reexport */ lib/* getFoldGroup */._D),
  "getKramcoWandererChance": () => (/* reexport */ lib/* getKramcoWandererChance */.ve),
  "getMacroId": () => (/* reexport */ combat/* getMacroId */.or),
  "getModifier": () => (/* reexport */ modifier_get),
  "getMonsterLocations": () => (/* reexport */ lib/* getMonsterLocations */.qT),
  "getPlayerFromIdOrName": () => (/* reexport */ lib/* getPlayerFromIdOrName */.Qq),
  "getPlayerIdFromName": () => (/* reexport */ lib/* getPlayerIdFromName */.v$),
  "getPlayerNameFromId": () => (/* reexport */ lib/* getPlayerNameFromId */.I),
  "getRemainingLiver": () => (/* reexport */ lib/* getRemainingLiver */.bf),
  "getRemainingSpleen": () => (/* reexport */ lib/* getRemainingSpleen */.aJ),
  "getRemainingStomach": () => (/* reexport */ lib/* getRemainingStomach */.ex),
  "getSaleValue": () => (/* reexport */ lib/* getSaleValue */.xI),
  "getSongCount": () => (/* reexport */ lib/* getSongCount */.uG),
  "getSongLimit": () => (/* reexport */ lib/* getSongLimit */.KN),
  "getTodaysHolidayWanderers": () => (/* reexport */ lib/* getTodaysHolidayWanderers */.UL),
  "getTotalModifier": () => (/* reexport */ getTotalModifier),
  "getTotalPuttyLikeCopiesMade": () => (/* reexport */ getTotalPuttyLikeCopiesMade),
  "getWandererChance": () => (/* reexport */ lib/* getWandererChance */.RD),
  "getZapGroup": () => (/* reexport */ lib/* getZapGroup */.ZJ),
  "have": () => (/* reexport */ lib/* have */.lf),
  "haveCounter": () => (/* reexport */ lib/* haveCounter */.Z2),
  "haveInCampground": () => (/* reexport */ lib/* haveInCampground */.sy),
  "haveIntrinsic": () => (/* reexport */ lib/* haveIntrinsic */.TR),
  "haveWandererCounter": () => (/* reexport */ lib/* haveWandererCounter */.aY),
  "holidayWanderers": () => (/* reexport */ lib/* holidayWanderers */.Nw),
  "invertMap": () => (/* reexport */ utils/* invertMap */.Mp),
  "isBooleanProperty": () => (/* reexport */ propertyTyping/* isBooleanProperty */.j1),
  "isCurrentFamiliar": () => (/* reexport */ lib/* isCurrentFamiliar */.ic),
  "isFamiliarProperty": () => (/* reexport */ propertyTyping/* isFamiliarProperty */.mP),
  "isLocationProperty": () => (/* reexport */ propertyTyping/* isLocationProperty */.Ph),
  "isMonsterProperty": () => (/* reexport */ propertyTyping/* isMonsterProperty */.M1),
  "isNumericOrStringProperty": () => (/* reexport */ propertyTyping/* isNumericOrStringProperty */.jc),
  "isNumericProperty": () => (/* reexport */ propertyTyping/* isNumericProperty */.OY),
  "isPhylumProperty": () => (/* reexport */ propertyTyping/* isPhylumProperty */.eI),
  "isSong": () => (/* reexport */ lib/* isSong */.rU),
  "isStatProperty": () => (/* reexport */ propertyTyping/* isStatProperty */.AM),
  "isStringProperty": () => (/* reexport */ propertyTyping/* isStringProperty */.Oz),
  "isVoteWandererNow": () => (/* reexport */ lib/* isVoteWandererNow */.UR),
  "isWandererNow": () => (/* reexport */ lib/* isWandererNow */.Ul),
  "lgrCurrencies": () => (/* reexport */ lib/* lgrCurrencies */.Dx),
  "logger": () => (/* reexport */ logger/* default */.Z),
  "makeByXFunction": () => (/* reexport */ utils/* makeByXFunction */.Qg),
  "maxBy": () => (/* reexport */ utils/* maxBy */.UT),
  "maximizeCached": () => (/* reexport */ maximize/* maximizeCached */.kB),
  "mergeMaximizeOptions": () => (/* reexport */ maximize/* mergeMaximizeOptions */.zj),
  "modeableItems": () => (/* reexport */ maximize/* modeableItems */.mD),
  "modeableState": () => (/* reexport */ maximize/* modeableState */.Rv),
  "noneToNull": () => (/* reexport */ lib/* noneToNull */.J1),
  "notNull": () => (/* reexport */ utils/* notNull */.Nf),
  "notNullish": () => (/* reexport */ utils/* notNullish */.nf),
  "numericModifiers": () => (/* reexport */ numericModifiers),
  "parseNumber": () => (/* reexport */ utils/* parseNumber */.p3),
  "permedSkills": () => (/* reexport */ ascend/* permedSkills */.Qp),
  "possibleLibramSummons": () => (/* reexport */ possibleLibramSummons),
  "prepareAscension": () => (/* reexport */ ascend/* prepareAscension */.lO),
  "property": () => (/* reexport */ property),
  "propertyTypes": () => (/* reexport */ propertyTypes),
  "questStep": () => (/* reexport */ lib/* questStep */.cL),
  "random": () => (/* reexport */ utils/* random */.MX),
  "realmAvailable": () => (/* reexport */ lib/* realmAvailable */.e6),
  "realmCurrency": () => (/* reexport */ lib/* realmCurrency */.Tx),
  "realmTypes": () => (/* reexport */ lib/* realmTypes */.wi),
  "set": () => (/* reexport */ property.set),
  "setCombatFlags": () => (/* reexport */ lib/* setCombatFlags */.Ib),
  "setDefaultMaximizeOptions": () => (/* reexport */ maximize/* setDefaultMaximizeOptions */._C),
  "setEqual": () => (/* reexport */ utils/* setEqual */.$x),
  "setProperties": () => (/* reexport */ property.setProperties),
  "signIdToName": () => (/* reexport */ moonSign/* signIdToName */.r),
  "signNameToId": () => (/* reexport */ moonSign/* signNameToId */.u),
  "sinceKolmafiaRevision": () => (/* reexport */ sinceKolmafiaRevision),
  "sinceKolmafiaVersion": () => (/* reexport */ sinceKolmafiaVersion),
  "splitByCommasWithEscapes": () => (/* reexport */ utils/* splitByCommasWithEscapes */.ZQ),
  "stringModifiers": () => (/* reexport */ stringModifiers),
  "sum": () => (/* reexport */ utils/* sum */.Sm),
  "sumNumbers": () => (/* reexport */ utils/* sumNumbers */.JD),
  "tc": () => (/* reexport */ utils.tc),
  "telescope": () => (/* reexport */ lib/* telescope */.__),
  "tryFindBanish": () => (/* reexport */ tryFindBanish),
  "tryFindFreeKill": () => (/* reexport */ tryFindFreeKill),
  "tryFindFreeRun": () => (/* reexport */ tryFindFreeRun),
  "undelay": () => (/* reexport */ utils/* undelay */.aF),
  "uneffect": () => (/* reexport */ lib/* uneffect */.Lo),
  "unequip": () => (/* reexport */ lib/* unequip */.Ft),
  "withChoice": () => (/* reexport */ property.withChoice),
  "withChoices": () => (/* reexport */ property.withChoices),
  "withCombatFlags": () => (/* reexport */ lib/* withCombatFlags */.lp),
  "withProperties": () => (/* reexport */ property.withProperties),
  "withProperty": () => (/* reexport */ property.withProperty)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2009/Bandersnatch.js
var Bandersnatch_namespaceObject = {};
__webpack_require__.r(Bandersnatch_namespaceObject);
__webpack_require__.d(Bandersnatch_namespaceObject, {
  "canRunaway": () => (canRunaway),
  "couldRunaway": () => (couldRunaway),
  "getMaxRunaways": () => (getMaxRunaways),
  "getRemainingRunaways": () => (getRemainingRunaways),
  "getRunaways": () => (getRunaways),
  "have": () => (Bandersnatch_have),
  "prepareRunaway": () => (prepareRunaway)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2011/StompingBoots.js
var StompingBoots_namespaceObject = {};
__webpack_require__.r(StompingBoots_namespaceObject);
__webpack_require__.d(StompingBoots_namespaceObject, {
  "canRunaway": () => (StompingBoots_canRunaway),
  "couldRunaway": () => (StompingBoots_couldRunaway),
  "getMaxRunaways": () => (StompingBoots_getMaxRunaways),
  "getRemainingRunaways": () => (StompingBoots_getRemainingRunaways),
  "getRunaways": () => (StompingBoots_getRunaways),
  "have": () => (StompingBoots_have),
  "prepareRunaway": () => (StompingBoots_prepareRunaway)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/challengePaths/2014/HeavyRains.js
var HeavyRains_namespaceObject = {};
__webpack_require__.r(HeavyRains_namespaceObject);
__webpack_require__.d(HeavyRains_namespaceObject, {
  "RAIN_MONSTER_WINDOW_BEGIN": () => (RAIN_MONSTER_WINDOW_BEGIN),
  "RAIN_MONSTER_WINDOW_END": () => (RAIN_MONSTER_WINDOW_END),
  "canRainMan": () => (canRainMan),
  "expectedWanderer": () => (expectedWanderer),
  "path": () => (path),
  "rainMan": () => (rainMan),
  "wanderers": () => (wanderers)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2017/MummingTrunk.js
var MummingTrunk_namespaceObject = {};
__webpack_require__.r(MummingTrunk_namespaceObject);
__webpack_require__.d(MummingTrunk_namespaceObject, {
  "currentCostumes": () => (currentCostumes)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/challengePaths/2016/NuclearAutumn.js
var NuclearAutumn_namespaceObject = {};
__webpack_require__.r(NuclearAutumn_namespaceObject);
__webpack_require__.d(NuclearAutumn_namespaceObject, {
  "chronoLab": () => (chronoLab),
  "coolingTank": () => (coolingTank),
  "path": () => (NuclearAutumn_path),
  "spa": () => (spa)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/counter.js
var counter_namespaceObject = {};
__webpack_require__.r(counter_namespaceObject);
__webpack_require__.d(counter_namespaceObject, {
  "exists": () => (exists),
  "get": () => (get),
  "set": () => (set)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2015/MayoClinic.js
var MayoClinic_namespaceObject = {};
__webpack_require__.r(MayoClinic_namespaceObject);
__webpack_require__.d(MayoClinic_namespaceObject, {
  "Mayo": () => (Mayo),
  "have": () => (MayoClinic_have),
  "installed": () => (installed),
  "setMayoMinder": () => (setMayoMinder)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2008/Stickers.js
var Stickers_namespaceObject = {};
__webpack_require__.r(Stickers_namespaceObject);
__webpack_require__.d(Stickers_namespaceObject, {
  "currentStickers": () => (currentStickers),
  "foldWeapon": () => (foldWeapon),
  "have": () => (Stickers_have),
  "makeSword": () => (makeSword),
  "setStickers": () => (setStickers),
  "stickers": () => (stickers),
  "weapon": () => (weapon)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2009/SpookyPutty.js
var SpookyPutty_namespaceObject = {};
__webpack_require__.r(SpookyPutty_namespaceObject);
__webpack_require__.d(SpookyPutty_namespaceObject, {
  "getSpookyPuttySheetCopiesMade": () => (getSpookyPuttySheetCopiesMade),
  "getSpookyPuttySheetMonster": () => (getSpookyPuttySheetMonster),
  "have": () => (SpookyPutty_have),
  "prepareSpookyPuttySheet": () => (prepareSpookyPuttySheet),
  "useSpookyPuttySheet": () => (useSpookyPuttySheet)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2010/CrownOfThrones.js
var CrownOfThrones_namespaceObject = {};
__webpack_require__.r(CrownOfThrones_namespaceObject);
__webpack_require__.d(CrownOfThrones_namespaceObject, {
  "createModifierValueFunction": () => (createModifierValueFunction),
  "createRiderMode": () => (createRiderMode),
  "getModifier": () => (getModifier),
  "hasRiderMode": () => (hasRiderMode),
  "pickRider": () => (pickRider),
  "ridingFamiliars": () => (ridingFamiliars),
  "valueRider": () => (valueRider)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2010/LookingGlass.js
var LookingGlass_namespaceObject = {};
__webpack_require__.r(LookingGlass_namespaceObject);
__webpack_require__.d(LookingGlass_namespaceObject, {
  "findTeaPartyHatLength": () => (findTeaPartyHatLength),
  "findTeaPartyHats": () => (findTeaPartyHats),
  "haveTeaPartyHat": () => (haveTeaPartyHat),
  "tryTeaPartyBuff": () => (tryTeaPartyBuff)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2011/ObtuseAngel.js
var ObtuseAngel_namespaceObject = {};
__webpack_require__.r(ObtuseAngel_namespaceObject);
__webpack_require__.d(ObtuseAngel_namespaceObject, {
  "BadlyRomanticArrow": () => (BadlyRomanticArrow),
  "canUseBadlyRomanticArrow": () => (canUseBadlyRomanticArrow),
  "couldUseBadlyRomanticArrow": () => (couldUseBadlyRomanticArrow),
  "getBadlyRomanticArrowMonster": () => (getBadlyRomanticArrowMonster),
  "getBadlyRomanticArrowUses": () => (getBadlyRomanticArrowUses),
  "have": () => (ObtuseAngel_have),
  "haveBadlyRomanticArrowUsesRemaining": () => (haveBadlyRomanticArrowUsesRemaining),
  "prepareBadlyRomanticArrow": () => (prepareBadlyRomanticArrow)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2012/RainDoh.js
var RainDoh_namespaceObject = {};
__webpack_require__.r(RainDoh_namespaceObject);
__webpack_require__.d(RainDoh_namespaceObject, {
  "getRainDohBlackBoxCopiesMade": () => (getRainDohBlackBoxCopiesMade),
  "getRainDohBlackBoxMonster": () => (getRainDohBlackBoxMonster),
  "have": () => (RainDoh_have),
  "useRainDohBlackBox": () => (useRainDohBlackBox)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2012/ReagnimatedGnome.js
var ReagnimatedGnome_namespaceObject = {};
__webpack_require__.r(ReagnimatedGnome_namespaceObject);
__webpack_require__.d(ReagnimatedGnome_namespaceObject, {
  "bodyParts": () => (bodyParts),
  "choosePart": () => (choosePart),
  "chosenParts": () => (chosenParts),
  "expectedAdvsPerCombat": () => (expectedAdvsPerCombat),
  "have": () => (ReagnimatedGnome_have)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2013/Florist.js
var Florist_namespaceObject = {};
__webpack_require__.r(Florist_namespaceObject);
__webpack_require__.d(Florist_namespaceObject, {
  "AloeGuvnor": () => (AloeGuvnor),
  "ArcticMoss": () => (ArcticMoss),
  "Artichoker": () => (Artichoker),
  "BamBoo": () => (BamBoo),
  "BlusteryPuffball": () => (BlusteryPuffball),
  "CannedSpinach": () => (CannedSpinach),
  "CeleryStalker": () => (CeleryStalker),
  "Chillterelle": () => (Chillterelle),
  "Crookweed": () => (Crookweed),
  "DeadlyCinnamon": () => (DeadlyCinnamon),
  "DisLichen": () => (DisLichen),
  "Duckweed": () => (Duckweed),
  "ElectricEelgrass": () => (ElectricEelgrass),
  "FoulToadstool": () => (FoulToadstool),
  "HornOfPlenty": () => (HornOfPlenty),
  "Impatiens": () => (Impatiens),
  "Kelptomaniac": () => (Kelptomaniac),
  "LettuceSpray": () => (LettuceSpray),
  "LooseMorels": () => (LooseMorels),
  "MaxHeadshroom": () => (MaxHeadshroom),
  "OrcaOrchid": () => (OrcaOrchid),
  "PitcherPlant": () => (PitcherPlant),
  "Portlybella": () => (Portlybella),
  "RabidDogwood": () => (RabidDogwood),
  "RadishRadish": () => (RadishRadish),
  "RedFern": () => (RedFern),
  "Rutabeggar": () => (Rutabeggar),
  "Sargassum": () => (Sargassum),
  "SeltzerWatercress": () => (SeltzerWatercress),
  "ShuffleTruffle": () => (ShuffleTruffle),
  "SkunkCabbage": () => (SkunkCabbage),
  "SmokeRa": () => (SmokeRa),
  "Snori": () => (Snori),
  "Spankton": () => (Spankton),
  "SpiderPlant": () => (SpiderPlant),
  "StealingMagnolia": () => (StealingMagnolia),
  "SubSeaRose": () => (SubSeaRose),
  "UpSeaDaisy": () => (UpSeaDaisy),
  "WarLily": () => (WarLily),
  "WizardsWig": () => (WizardsWig),
  "all": () => (Florist_all),
  "flowersAvailableFor": () => (flowersAvailableFor),
  "flowersIn": () => (flowersIn),
  "have": () => (Florist_have),
  "isFull": () => (isFull)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2013/JungMan.js
var JungMan_namespaceObject = {};
__webpack_require__.r(JungMan_namespaceObject);
__webpack_require__.d(JungMan_namespaceObject, {
  "JAR_ITEMS": () => (JAR_ITEMS),
  "Jar": () => (Jar),
  "canJickJar": () => (canJickJar),
  "have": () => (JungMan_have),
  "makeJar": () => (makeJar)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2014/CrimboShrub.js
var CrimboShrub_namespaceObject = {};
__webpack_require__.r(CrimboShrub_namespaceObject);
__webpack_require__.d(CrimboShrub_namespaceObject, {
  "decorate": () => (decorate),
  "have": () => (CrimboShrub_have)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2014/DNALab.js
var DNALab_namespaceObject = {};
__webpack_require__.r(DNALab_namespaceObject);
__webpack_require__.d(DNALab_namespaceObject, {
  "getEffect": () => (getEffect),
  "getTonic": () => (getTonic),
  "have": () => (DNALab_have),
  "hybridize": () => (hybridize),
  "installed": () => (DNALab_installed),
  "isHybridized": () => (isHybridized),
  "makeTonic": () => (makeTonic),
  "phylumFor": () => (phylumFor),
  "tonicsLeft": () => (tonicsLeft)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2014/WinterGarden.js
var WinterGarden_namespaceObject = {};
__webpack_require__.r(WinterGarden_namespaceObject);
__webpack_require__.d(WinterGarden_namespaceObject, {
  "UnfinishedIceSculpture": () => (UnfinishedIceSculpture),
  "couldUseUnfinishedIceSculpture": () => (couldUseUnfinishedIceSculpture),
  "getUnfinishedIceSculptureMonster": () => (getUnfinishedIceSculptureMonster),
  "have": () => (WinterGarden_have),
  "haveUnfinishedIceSculpture": () => (haveUnfinishedIceSculpture),
  "isUnfinishedIceSculptureUsed": () => (isUnfinishedIceSculptureUsed)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2015/BarrelShrine.js
var BarrelShrine_namespaceObject = {};
__webpack_require__.r(BarrelShrine_namespaceObject);
__webpack_require__.d(BarrelShrine_namespaceObject, {
  "have": () => (BarrelShrine_have),
  "smashParty": () => (smashParty)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2015/DeckOfEveryCard.js
var DeckOfEveryCard_namespaceObject = {};
__webpack_require__.r(DeckOfEveryCard_namespaceObject);
__webpack_require__.d(DeckOfEveryCard_namespaceObject, {
  "cards": () => (cards),
  "cheatCard": () => (cheatCard),
  "getCardsDrawn": () => (getCardsDrawn),
  "getCardsSeen": () => (getCardsSeen),
  "getRemainingCheats": () => (getRemainingCheats),
  "getRemainingDraws": () => (getRemainingDraws),
  "have": () => (DeckOfEveryCard_have)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2015/Dinseylandfill.js
var Dinseylandfill_namespaceObject = {};
__webpack_require__.r(Dinseylandfill_namespaceObject);
__webpack_require__.d(Dinseylandfill_namespaceObject, {
  "acceptQuest": () => (acceptQuest),
  "activeQuest": () => (activeQuest),
  "available": () => (available),
  "canFightWartDinsey": () => (canFightWartDinsey),
  "coasterNextTurn": () => (coasterNextTurn),
  "disposeGarbage": () => (disposeGarbage),
  "foughtWartDinseyThisLife": () => (foughtWartDinseyThisLife),
  "hasActiveQuest": () => (hasActiveQuest),
  "hasDisposedGarbage": () => (hasDisposedGarbage),
  "hasQuest": () => (hasQuest),
  "have": () => (Dinseylandfill_have),
  "keyCardsLocations": () => (keyCardsLocations),
  "questComplete": () => (questComplete),
  "quests": () => (quests),
  "turnInQuest": () => (turnInQuest)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2016/GingerBread.js
var GingerBread_namespaceObject = {};
__webpack_require__.r(GingerBread_namespaceObject);
__webpack_require__.d(GingerBread_namespaceObject, {
  "LOCATIONS": () => (LOCATIONS),
  "available": () => (GingerBread_available),
  "availableLocations": () => (availableLocations),
  "canJudgeFudge": () => (canJudgeFudge),
  "getMidnightChoiceId": () => (getMidnightChoiceId),
  "getNoonChoiceId": () => (getNoonChoiceId),
  "minutesToMidnight": () => (minutesToMidnight),
  "minutesToNoon": () => (minutesToNoon)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2016/SourceTerminal.js
var SourceTerminal_namespaceObject = {};
__webpack_require__.r(SourceTerminal_namespaceObject);
__webpack_require__.d(SourceTerminal_namespaceObject, {
  "Buffs": () => (Buffs),
  "Digitize": () => (Digitize),
  "Items": () => (Items),
  "RolloverBuffs": () => (RolloverBuffs),
  "Skills": () => (Skills),
  "canDigitize": () => (canDigitize),
  "couldDigitize": () => (couldDigitize),
  "duplicateUsesRemaining": () => (duplicateUsesRemaining),
  "educate": () => (educate),
  "enhance": () => (enhance),
  "enhanceBuffDuration": () => (enhanceBuffDuration),
  "enhanceUsesRemaining": () => (enhanceUsesRemaining),
  "enquiry": () => (enquiry),
  "enquiryBuffDuration": () => (enquiryBuffDuration),
  "extrude": () => (extrude),
  "getChips": () => (getChips),
  "getDigitizeMonster": () => (getDigitizeMonster),
  "getDigitizeMonsterCount": () => (getDigitizeMonsterCount),
  "getDigitizeUses": () => (getDigitizeUses),
  "getDigitizeUsesRemaining": () => (getDigitizeUsesRemaining),
  "getDuplicateUses": () => (getDuplicateUses),
  "getEnhanceUses": () => (getEnhanceUses),
  "getMaximumDigitizeUses": () => (getMaximumDigitizeUses),
  "getPortscanUses": () => (getPortscanUses),
  "getSkills": () => (getSkills),
  "have": () => (SourceTerminal_have),
  "isCurrentSkill": () => (isCurrentSkill),
  "maximumDuplicateUses": () => (maximumDuplicateUses),
  "maximumEnhanceUses": () => (maximumEnhanceUses),
  "prepareDigitize": () => (prepareDigitize)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2016/Witchess.js
var Witchess_namespaceObject = {};
__webpack_require__.r(Witchess_namespaceObject);
__webpack_require__.d(Witchess_namespaceObject, {
  "fightPiece": () => (fightPiece),
  "fightsDone": () => (fightsDone),
  "have": () => (Witchess_have),
  "pieces": () => (pieces)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2017/Horsery.js
var Horsery_namespaceObject = {};
__webpack_require__.r(Horsery_namespaceObject);
__webpack_require__.d(Horsery_namespaceObject, {
  "changeHorse": () => (changeHorse),
  "crazyHorseStats": () => (crazyHorseStats),
  "current": () => (current),
  "have": () => (Horsery_have)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2017/Pantogram.js
var Pantogram_namespaceObject = {};
__webpack_require__.r(Pantogram_namespaceObject);
__webpack_require__.d(Pantogram_namespaceObject, {
  "findRequirements": () => (findRequirements),
  "have": () => (Pantogram_have),
  "havePants": () => (havePants),
  "makePants": () => (makePants),
  "makePantsFromObject": () => (makePantsFromObject)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2017/Robortender.js
var Robortender_namespaceObject = {};
__webpack_require__.r(Robortender_namespaceObject);
__webpack_require__.d(Robortender_namespaceObject, {
  "currentDrinks": () => (currentDrinks),
  "drinks": () => (drinks),
  "dropChance": () => (dropChance),
  "dropFrom": () => (dropFrom),
  "feed": () => (feed),
  "have": () => (Robortender_have),
  "majorDrinks": () => (majorDrinks),
  "minorDrinks": () => (minorDrinks)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2017/Spacegate.js
var Spacegate_namespaceObject = {};
__webpack_require__.r(Spacegate_namespaceObject);
__webpack_require__.d(Spacegate_namespaceObject, {
  "animalLife": () => (animalLife),
  "dial": () => (dial),
  "dialRandom": () => (dialRandom),
  "dialled": () => (dialled),
  "getHazardEquipment": () => (getHazardEquipment),
  "getVaccine": () => (getVaccine),
  "have": () => (Spacegate_have),
  "hazardEquipment": () => (hazardEquipment),
  "hazards": () => (hazards),
  "hostileLife": () => (hostileLife),
  "intelligentLife": () => (intelligentLife),
  "murderBots": () => (murderBots),
  "planetCoords": () => (planetCoords),
  "planetName": () => (planetName),
  "plantLife": () => (plantLife),
  "ruins": () => (ruins),
  "spants": () => (spants),
  "updateStatus": () => (updateStatus)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2017/TunnelOfLove.js
var TunnelOfLove_namespaceObject = {};
__webpack_require__.r(TunnelOfLove_namespaceObject);
__webpack_require__.d(TunnelOfLove_namespaceObject, {
  "LovEnamorang": () => (LovEnamorang),
  "couldUseLoveEnamorang": () => (couldUseLoveEnamorang),
  "fightAll": () => (fightAll),
  "getLovEnamorangMonster": () => (getLovEnamorangMonster),
  "getLovEnamorangUses": () => (getLovEnamorangUses),
  "have": () => (TunnelOfLove_have),
  "haveLovEnamorang": () => (haveLovEnamorang),
  "isUsed": () => (isUsed)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2018/LatteLoversMembersMug.js
var LatteLoversMembersMug_namespaceObject = {};
__webpack_require__.r(LatteLoversMembersMug_namespaceObject);
__webpack_require__.d(LatteLoversMembersMug_namespaceObject, {
  "currentIngredients": () => (currentIngredients),
  "fill": () => (fill),
  "have": () => (LatteLoversMembersMug_have),
  "ingredientsUnlocked": () => (ingredientsUnlocked),
  "locationOf": () => (locationOf),
  "modifierOf": () => (modifierOf),
  "refillsRemaining": () => (refillsRemaining),
  "sniffedMonster": () => (sniffedMonster)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2018/SongBoom.js
var SongBoom_namespaceObject = {};
__webpack_require__.r(SongBoom_namespaceObject);
__webpack_require__.d(SongBoom_namespaceObject, {
  "dropProgress": () => (dropProgress),
  "have": () => (SongBoom_have),
  "setSong": () => (setSong),
  "song": () => (song),
  "songBoomSongs": () => (songBoomSongs),
  "songChangesLeft": () => (songChangesLeft)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2019/BeachComb.js
var BeachComb_namespaceObject = {};
__webpack_require__.r(BeachComb_namespaceObject);
__webpack_require__.d(BeachComb_namespaceObject, {
  "available": () => (BeachComb_available),
  "canComb": () => (canComb),
  "comb": () => (comb),
  "freeCombs": () => (freeCombs),
  "have": () => (BeachComb_have),
  "head": () => (head),
  "headAvailable": () => (headAvailable),
  "headBuffs": () => (headBuffs),
  "tideLevel": () => (tideLevel),
  "tryHead": () => (tryHead)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2019/CampAway.js
var CampAway_namespaceObject = {};
__webpack_require__.r(CampAway_namespaceObject);
__webpack_require__.d(CampAway_namespaceObject, {
  "blowSmoke": () => (blowSmoke),
  "canGaze": () => (canGaze),
  "gaze": () => (gaze),
  "getBuffsToday": () => (getBuffsToday),
  "getCloudBuffsToday": () => (getCloudBuffsToday),
  "getGazeBuff": () => (getGazeBuff),
  "getSmileBuffsToday": () => (getSmileBuffsToday),
  "have": () => (CampAway_have)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2019/Snapper.js
var Snapper_namespaceObject = {};
__webpack_require__.r(Snapper_namespaceObject);
__webpack_require__.d(Snapper_namespaceObject, {
  "getProgress": () => (getProgress),
  "getTrackedPhylum": () => (getTrackedPhylum),
  "have": () => (Snapper_have),
  "itemPhylum": () => (itemPhylum),
  "phylumItem": () => (phylumItem),
  "trackPhylum": () => (trackPhylum)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2020/Cartography.js
var Cartography_namespaceObject = {};
__webpack_require__.r(Cartography_namespaceObject);
__webpack_require__.d(Cartography_namespaceObject, {
  "have": () => (Cartography_have),
  "mapMonster": () => (mapMonster)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2020/Guzzlr.js
var Guzzlr_namespaceObject = {};
__webpack_require__.r(Guzzlr_namespaceObject);
__webpack_require__.d(Guzzlr_namespaceObject, {
  "Cocktails": () => (Cocktails),
  "abandon": () => (abandon),
  "acceptBronze": () => (acceptBronze),
  "acceptGold": () => (acceptGold),
  "acceptPlatinum": () => (acceptPlatinum),
  "canAbandon": () => (canAbandon),
  "canGold": () => (canGold),
  "canPlatinum": () => (canPlatinum),
  "expectedReward": () => (expectedReward),
  "getBooze": () => (getBooze),
  "getBronze": () => (getBronze),
  "getCheapestPlatinumCocktail": () => (getCheapestPlatinumCocktail),
  "getGold": () => (getGold),
  "getGoldToday": () => (getGoldToday),
  "getLocation": () => (getLocation),
  "getPlatinum": () => (getPlatinum),
  "getPlatinumToday": () => (getPlatinumToday),
  "getTier": () => (getTier),
  "have": () => (Guzzlr_have),
  "haveBooze": () => (haveBooze),
  "haveFullBronzeBonus": () => (haveFullBronzeBonus),
  "haveFullGoldBonus": () => (haveFullGoldBonus),
  "haveFullPlatinumBonus": () => (haveFullPlatinumBonus),
  "havePlatinumBooze": () => (havePlatinumBooze),
  "ingredientToPlatinumCocktail": () => (ingredientToPlatinumCocktail),
  "isQuestActive": () => (isQuestActive),
  "platinumCocktailToIngredient": () => (platinumCocktailToIngredient),
  "turnsLeftOnQuest": () => (turnsLeftOnQuest)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2020/RetroCape.js
var RetroCape_namespaceObject = {};
__webpack_require__.r(RetroCape_namespaceObject);
__webpack_require__.d(RetroCape_namespaceObject, {
  "currentHero": () => (currentHero),
  "currentMode": () => (currentMode),
  "getModifier": () => (RetroCape_getModifier),
  "have": () => (RetroCape_have),
  "set": () => (RetroCape_set),
  "tuneToSkill": () => (tuneToSkill)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2021/CrystalBall.js
var CrystalBall_namespaceObject = {};
__webpack_require__.r(CrystalBall_namespaceObject);
__webpack_require__.d(CrystalBall_namespaceObject, {
  "have": () => (CrystalBall_have),
  "orb": () => (orb),
  "ponder": () => (ponder)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2021/DaylightShavings.js
var DaylightShavings_namespaceObject = {};
__webpack_require__.r(DaylightShavings_namespaceObject);
__webpack_require__.d(DaylightShavings_namespaceObject, {
  "buffAvailable": () => (buffAvailable),
  "buffCycle": () => (buffCycle),
  "buffs": () => (buffs),
  "buffsUntil": () => (buffsUntil),
  "hasBuff": () => (hasBuff),
  "have": () => (DaylightShavings_have),
  "nextBuff": () => (nextBuff)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2022/AutumnAton.js
var AutumnAton_namespaceObject = {};
__webpack_require__.r(AutumnAton_namespaceObject);
__webpack_require__.d(AutumnAton_namespaceObject, {
  "available": () => (AutumnAton_available),
  "availableLocations": () => (AutumnAton_availableLocations),
  "currentUpgrades": () => (currentUpgrades),
  "currentlyIn": () => (currentlyIn),
  "getUniques": () => (getUniques),
  "have": () => (AutumnAton_have),
  "legs": () => (legs),
  "possibleUpgrades": () => (possibleUpgrades),
  "seasonalItems": () => (seasonalItems),
  "sendTo": () => (sendTo),
  "turnsForQuest": () => (turnsForQuest),
  "turnsLeft": () => (turnsLeft),
  "upgrade": () => (upgrade),
  "visualAcuity": () => (visualAcuity),
  "zoneItems": () => (zoneItems)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2022/CombatLoversLocket.js
var CombatLoversLocket_namespaceObject = {};
__webpack_require__.r(CombatLoversLocket_namespaceObject);
__webpack_require__.d(CombatLoversLocket_namespaceObject, {
  "availableLocketMonsters": () => (availableLocketMonsters),
  "findMonster": () => (findMonster),
  "have": () => (CombatLoversLocket_have),
  "monstersReminisced": () => (monstersReminisced),
  "reminisce": () => (reminisce),
  "reminiscesLeft": () => (reminiscesLeft),
  "unlockedLocketMonsters": () => (unlockedLocketMonsters)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2022/GreyGoose.js
var GreyGoose_namespaceObject = {};
__webpack_require__.r(GreyGoose_namespaceObject);
__webpack_require__.d(GreyGoose_namespaceObject, {
  "currentDrones": () => (currentDrones),
  "currentExperience": () => (currentExperience),
  "currentWeight": () => (currentWeight),
  "expectedDrones": () => (expectedDrones),
  "expectedExperience": () => (expectedExperience),
  "expectedMeat": () => (expectedMeat),
  "fightsUntil": () => (fightsUntil),
  "hasMeatified": () => (hasMeatified),
  "have": () => (GreyGoose_have)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2022/JuneCleaver.js
var JuneCleaver_namespaceObject = {};
__webpack_require__.r(JuneCleaver_namespaceObject);
__webpack_require__.d(JuneCleaver_namespaceObject, {
  "choices": () => (choices),
  "choicesAvailable": () => (choicesAvailable),
  "cleaver": () => (cleaver),
  "damage": () => (damage),
  "getInterval": () => (getInterval),
  "getSkippedInterval": () => (getSkippedInterval),
  "have": () => (JuneCleaver_have),
  "queue": () => (queue),
  "skipsRemaining": () => (skipsRemaining)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2022/TrainSet.js
var TrainSet_namespaceObject = {};
__webpack_require__.r(TrainSet_namespaceObject);
__webpack_require__.d(TrainSet_namespaceObject, {
  "Station": () => (Station),
  "canConfigure": () => (canConfigure),
  "cycle": () => (cycle),
  "doubledEffect": () => (doubledEffect),
  "effect": () => (effect),
  "have": () => (TrainSet_have),
  "installed": () => (TrainSet_installed),
  "next": () => (next),
  "nextConfigurable": () => (nextConfigurable),
  "setConfiguration": () => (setConfiguration)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2023/AugustScepter.js
var AugustScepter_namespaceObject = {};
__webpack_require__.r(AugustScepter_namespaceObject);
__webpack_require__.d(AugustScepter_namespaceObject, {
  "SKILLS": () => (SKILLS),
  "canCast": () => (canCast),
  "getAugustCast": () => (getAugustCast),
  "getTodayCast": () => (getTodayCast),
  "have": () => (AugustScepter_have),
  "todaysSkill": () => (todaysSkill)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2023/BurningLeaves.js
var BurningLeaves_namespaceObject = {};
__webpack_require__.r(BurningLeaves_namespaceObject);
__webpack_require__.d(BurningLeaves_namespaceObject, {
  "burnFor": () => (burnFor),
  "burnLeaves": () => (burnLeaves),
  "burnSpecialLeaves": () => (burnSpecialLeaves),
  "have": () => (BurningLeaves_have),
  "jumpInFire": () => (jumpInFire),
  "numberOfLeaves": () => (numberOfLeaves)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2023/CinchoDeMayo.js
var CinchoDeMayo_namespaceObject = {};
__webpack_require__.r(CinchoDeMayo_namespaceObject);
__webpack_require__.d(CinchoDeMayo_namespaceObject, {
  "cinchRestoredBy": () => (cinchRestoredBy),
  "currentCinch": () => (currentCinch),
  "have": () => (CinchoDeMayo_have),
  "skills": () => (CinchoDeMayo_skills),
  "totalAvailableCinch": () => (totalAvailableCinch)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2023/ClosedCircuitPayphone.js
var ClosedCircuitPayphone_namespaceObject = {};
__webpack_require__.r(ClosedCircuitPayphone_namespaceObject);
__webpack_require__.d(ClosedCircuitPayphone_namespaceObject, {
  "byIngress": () => (byIngress),
  "chooseQuest": () => (chooseQuest),
  "chooseRift": () => (chooseRift),
  "currentIngress": () => (currentIngress),
  "currentRift": () => (currentRift),
  "have": () => (ClosedCircuitPayphone_have),
  "rifts": () => (rifts),
  "rufusTarget": () => (rufusTarget),
  "submitQuest": () => (submitQuest)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2023/CursedMonkeyPaw.js
var CursedMonkeyPaw_namespaceObject = {};
__webpack_require__.r(CursedMonkeyPaw_namespaceObject);
__webpack_require__.d(CursedMonkeyPaw_namespaceObject, {
  "getUnwishableEffects": () => (getUnwishableEffects),
  "have": () => (CursedMonkeyPaw_have),
  "isWishable": () => (isWishable),
  "wishFor": () => (wishFor),
  "wishableItems": () => (wishableItems),
  "wishes": () => (wishes)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2024/AprilingBandHelmet.js
var AprilingBandHelmet_namespaceObject = {};
__webpack_require__.r(AprilingBandHelmet_namespaceObject);
__webpack_require__.d(AprilingBandHelmet_namespaceObject, {
  "INSTRUMENTS": () => (INSTRUMENTS),
  "INSTRUMENT_ITEMS": () => (INSTRUMENT_ITEMS),
  "MARCHING_SONGS": () => (MARCHING_SONGS),
  "MARCHING_SONG_EFFECTS": () => (MARCHING_SONG_EFFECTS),
  "canChangeSong": () => (canChangeSong),
  "canJoinSection": () => (canJoinSection),
  "canPlay": () => (canPlay),
  "changeSong": () => (changeSong),
  "conduct": () => (conduct),
  "have": () => (AprilingBandHelmet_have),
  "joinSection": () => (joinSection),
  "play": () => (play)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2024/ChestMimic.js
var ChestMimic_namespaceObject = {};
__webpack_require__.r(ChestMimic_namespaceObject);
__webpack_require__.d(ChestMimic_namespaceObject, {
  "differentiableQuantity": () => (differentiableQuantity),
  "differentiate": () => (differentiate),
  "donate": () => (donate),
  "getDonableMonsters": () => (getDonableMonsters),
  "getReceivableMonsters": () => (getReceivableMonsters),
  "have": () => (ChestMimic_have),
  "receive": () => (receive)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/resources/2024/MayamCalendar.js
var MayamCalendar_namespaceObject = {};
__webpack_require__.r(MayamCalendar_namespaceObject);
__webpack_require__.d(MayamCalendar_namespaceObject, {
  "RESONANCES": () => (RESONANCES),
  "RESONANCE_KEYS": () => (RESONANCE_KEYS),
  "RINGS": () => (RINGS),
  "available": () => (MayamCalendar_available),
  "getResonanceResult": () => (getResonanceResult),
  "have": () => (MayamCalendar_have),
  "remainingUses": () => (remainingUses),
  "resonanceAvailable": () => (resonanceAvailable),
  "resonanceFor": () => (resonanceFor),
  "submit": () => (MayamCalendar_submit),
  "symbolsUsed": () => (symbolsUsed),
  "toCombination": () => (toCombination),
  "toCombinationString": () => (toCombinationString)
});

// NAMESPACE OBJECT: ./node_modules/libram/dist/console.js
var console_namespaceObject = {};
__webpack_require__.r(console_namespaceObject);
__webpack_require__.d(console_namespaceObject, {
  "error": () => (error),
  "info": () => (info),
  "log": () => (log),
  "warn": () => (warn)
});

// EXTERNAL MODULE: external "kolmafia"
var external_kolmafia_ = __webpack_require__(530);
// EXTERNAL MODULE: ./node_modules/libram/dist/combat.js + 1 modules
var combat = __webpack_require__(284);
// EXTERNAL MODULE: ./node_modules/libram/dist/maximize.js
var maximize = __webpack_require__(627);
// EXTERNAL MODULE: ./node_modules/libram/dist/utils.js
var utils = __webpack_require__(130);
;// CONCATENATED MODULE: ./node_modules/libram/dist/actions/ActionSource.js
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





/**
 * Merge a set of constraints into one
 *
 * @param allConstraints Constraints to mege
 * @returns Merged constraints
 */

function mergeConstraints() {
  for (var _len = arguments.length, allConstraints = new Array(_len), _key = 0; _key < _len; _key++) {
    allConstraints[_key] = arguments[_key];
  }

  var familiars = allConstraints.map(constraints => constraints.familiar).filter(Boolean);

  if (familiars.length > 1) {
    // Inconsistent requirements.
    return null;
  }

  var familiar = familiars.find(familiar => familiar);
  return _objectSpread(_objectSpread({
    equipmentRequirements: () => maximize/* Requirement.merge */.nb.merge(_toConsumableArray(allConstraints.map(constraints => {
      var _constraints$equipmen, _constraints$equipmen2;

      return (_constraints$equipmen = (_constraints$equipmen2 = constraints.equipmentRequirements) === null || _constraints$equipmen2 === void 0 ? void 0 : _constraints$equipmen2.call(constraints)) !== null && _constraints$equipmen !== void 0 ? _constraints$equipmen : new maximize/* Requirement */.nb([], {});
    }))),
    preparation: () => {
      var success = true;

      var _iterator = _createForOfIteratorHelper(allConstraints),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var constraints = _step.value;
          success = success && (!constraints.preparation || constraints.preparation());
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return success;
    }
  }, familiar ? {
    familiar: familiar
  } : {}), {}, {
    cost: () => (0,utils/* sum */.Sm)(allConstraints, constraints => {
      var _constraints$cost, _constraints$cost2;

      return (_constraints$cost = (_constraints$cost2 = constraints.cost) === null || _constraints$cost2 === void 0 ? void 0 : _constraints$cost2.call(constraints)) !== null && _constraints$cost !== void 0 ? _constraints$cost : 0;
    })
  });
}
/**
 * A combat-based action resource in the game (e.g. a free run or free kill).
 */


var ActionSource = /*#__PURE__*/function () {
  // Infinity: unlimited

  /**
   * @param source Source(s) of the action (e.g. item, skill, or familiar needed).
   * @param potential Function returning how many times this action can be used.
   * @param macro Macro to execute this action in combat.
   * @param constraints Constraints required for this action to be available.
   */
  function ActionSource(source, potential, macro) {
    var constraints = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    _classCallCheck(this, ActionSource);

    _defineProperty(this, "source", void 0);

    _defineProperty(this, "potential", void 0);

    _defineProperty(this, "macro", void 0);

    _defineProperty(this, "constraints", void 0);

    this.source = source;
    this.potential = potential;
    this.macro = macro;
    this.constraints = constraints;
  }
  /**
   * @returns Name of the action source.
   */


  _createClass(ActionSource, [{
    key: "name",
    value: function name() {
      return this.source.toString();
    }
    /**
     * @returns Whether the action is available.
     */

  }, {
    key: "available",
    value: function available() {
      return this.potential() > 0;
    }
    /**
     * @returns Cost in meat per usage of the action.
     */

  }, {
    key: "cost",
    value: function cost() {
      return this.constraints.cost ? this.constraints.cost() : 0;
    }
    /**
     * @returns Whether the action costs 0 meat to use.
     */

  }, {
    key: "isFree",
    value: function isFree() {
      return !this.cost || this.cost() === 0;
    }
    /**
     * @returns Whether unlimited uses of the action are available.
     */

  }, {
    key: "isUnlimited",
    value: function isUnlimited() {
      return this.potential() === Infinity;
    }
    /**
     * Create a compound action source with merged constraints.
     *
     * @param others Other actions to have available.
     * @returns Merged constraints, or null if they are inconsistent.
     */

  }, {
    key: "merge",
    value: function merge() {
      for (var _len2 = arguments.length, others = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        others[_key2] = arguments[_key2];
      }

      var actions = [this].concat(others);
      var constraints = mergeConstraints.apply(void 0, _toConsumableArray(actions.map(action => action.constraints)));

      if (constraints === null) {
        // Inconsistent constraints - no path forward here.
        return null;
      }

      return new ActionSource(_toConsumableArray((0,utils/* flat */.$H)(actions.map(action => action.source))), () => (0,utils/* sum */.Sm)(actions, action => action.potential()), combat/* Macro.step.apply */.LE.step.apply(combat/* Macro */.LE, _toConsumableArray(actions.map(action => action.macro))), constraints);
    }
    /**
     * Perform all preparation necessary to make this action available.
     *
     * @param otherRequirements Any other equipment requirements.
     * @returns Whether preparation succeeded.
     */

  }, {
    key: "prepare",
    value: function prepare(otherRequirements) {
      var _this$constraints$fam, _this$constraints;

      if ((_this$constraints$fam = (_this$constraints = this.constraints).familiar) !== null && _this$constraints$fam !== void 0 && _this$constraints$fam.call(_this$constraints)) {
        if (!(0,external_kolmafia_.useFamiliar)(this.constraints.familiar())) return false;
      }

      if (this.constraints.equipmentRequirements) {
        var requirement = otherRequirements ? otherRequirements.merge(this.constraints.equipmentRequirements()) : this.constraints.equipmentRequirements();
        if (!requirement.maximize()) return false;
      }

      if (this.constraints.preparation) return this.constraints.preparation();
      return true;
    }
    /**
     * Perform all preparation necessary to make this action available.
     * Throws an error if preparation fails.
     *
     * @param otherRequirements Any other equipment requirements.
     */

  }, {
    key: "ensure",
    value: function ensure(otherRequirements) {
      if (!this.prepare(otherRequirements)) {
        throw new Error("Failed to prepare action ".concat(this.name(), "."));
      }
    }
  }]);

  return ActionSource;
}();
/**
 * See if a supplied action meets a set of constraints
 *
 * @param action Action to test
 * @param constraints Constraints to apply
 * @returns Whether action meets constraints
 */

_defineProperty(ActionSource, "defaultPriceFunction", item => (0,external_kolmafia_.mallPrice)(item) > 0 ? (0,external_kolmafia_.mallPrice)(item) : Infinity);

function filterAction(action, constraints) {
  var _constraints$requireF, _constraints$requireU, _constraints$noFamili, _constraints$noRequir, _constraints$noPrepar, _constraints$maximumC, _constraints$maximumC2;

  return action.available() && (constraints.allowedAction === undefined || constraints.allowedAction(action)) && !((_constraints$requireF = constraints.requireFamiliar) !== null && _constraints$requireF !== void 0 && _constraints$requireF.call(constraints) && !action.constraints.familiar) && !((_constraints$requireU = constraints.requireUnlimited) !== null && _constraints$requireU !== void 0 && _constraints$requireU.call(constraints) && !action.isUnlimited()) && !((_constraints$noFamili = constraints.noFamiliar) !== null && _constraints$noFamili !== void 0 && _constraints$noFamili.call(constraints) && action.constraints.familiar) && !((_constraints$noRequir = constraints.noRequirements) !== null && _constraints$noRequir !== void 0 && _constraints$noRequir.call(constraints) && action.constraints.equipmentRequirements) && !((_constraints$noPrepar = constraints.noPreparation) !== null && _constraints$noPrepar !== void 0 && _constraints$noPrepar.call(constraints) && action.constraints.preparation) && action.cost() <= ((_constraints$maximumC = (_constraints$maximumC2 = constraints.maximumCost) === null || _constraints$maximumC2 === void 0 ? void 0 : _constraints$maximumC2.call(constraints)) !== null && _constraints$maximumC !== void 0 ? _constraints$maximumC : 0);
}
/**
 * Find an available action source subject to constraints.
 *
 * @param actions Action source list.
 * @param constraints Preexisting constraints that restrict possible sources.
 * @returns Available action source satisfying constraints, or null.
 */


function findActionSource(actions) {
  var constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var validActions = actions.filter(actions => filterAction(actions, constraints));
  if (validActions.length < 1) return null;
  return validActions.reduce((a, b) => a.cost() <= b.cost() ? a : b);
}
/**
 * Count available action sources subject to constraints. Note that, if
 * constraints.maximumCost is high enough, this will return Infinity.
 *
 * @param actions Action source list.
 * @param constraints Preexisting constraints that restrict possible sources.
 * @returns Count of available action sources.
 */

function actionSourcesAvailable(actions) {
  var constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  // TODO: This will overcount if any Actions share a counter
  return (0,utils/* sum */.Sm)(actions.filter(action => filterAction(action, constraints !== null && constraints !== void 0 ? constraints : {})), action => action.potential());
}
// EXTERNAL MODULE: ./node_modules/libram/dist/lib.js
var lib = __webpack_require__(71);
// EXTERNAL MODULE: ./node_modules/libram/dist/property.js
var property = __webpack_require__(785);
// EXTERNAL MODULE: ./node_modules/libram/dist/resources/2017/AsdonMartin.js
var AsdonMartin = __webpack_require__(550);
// EXTERNAL MODULE: ./node_modules/libram/dist/template-string.js
var template_string = __webpack_require__(328);
;// CONCATENATED MODULE: ./node_modules/libram/dist/actions/Banish.js
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38, _templateObject39, _templateObject40, _templateObject41, _templateObject42, _templateObject43, _templateObject44;

function Banish_toConsumableArray(arr) { return Banish_arrayWithoutHoles(arr) || Banish_iterableToArray(arr) || Banish_unsupportedIterableToArray(arr) || Banish_nonIterableSpread(); }

function Banish_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function Banish_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Banish_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Banish_arrayLikeToArray(o, minLen); }

function Banish_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function Banish_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Banish_arrayLikeToArray(arr); }

function Banish_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }








 // Value of _lastCombatStarted the last time we updated scrapbook charges.

var scrapbookChargesLastUpdated = (0,property.get)("_lastCombatStarted"); // Free unlimited source every 30 turns.
// Does not work on special monsters so needs a backup, see tryFindFreeRun.
// banishedMonsters isn't updated if the banish succeeds on an unbanishable monster

var asdonMartinSource = new ActionSource((0,template_string/* $skill */.tm)(_templateObject || (_templateObject = _taggedTemplateLiteral(["Asdon Martin: Spring-Loaded Front Bumper"]))), () => {
  if (!AsdonMartin.installed()) return 0;
  var banishes = (0,property.get)("banishedMonsters").split(":");
  var bumperIndex = banishes.map(string => string.toLowerCase()).indexOf("spring-loaded front bumper");
  if (bumperIndex === -1) return 1;
  return (0,external_kolmafia_.myTurncount)() - parseInt(banishes[bumperIndex + 1]) > 30 ? 1 : 0;
}, combat/* Macro.trySkill */.LE.trySkill((0,template_string/* $skill */.tm)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Asdon Martin: Spring-Loaded Front Bumper"])))), {
  preparation: () => AsdonMartin.fillTo(50)
});
var banishSources = [// Free limited sources
new ActionSource((0,template_string/* $skill */.tm)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Snokebomb"]))), () => (0,lib/* have */.lf)((0,template_string/* $skill */.tm)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Snokebomb"])))) ? 3 - (0,property.get)("_snokebombUsed") : 0, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Snokebomb"])))), {
  preparation: () => (0,external_kolmafia_.restoreMp)(50)
}), new ActionSource((0,template_string/* $skill */.tm)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Emotionally Chipped"]))), () => (0,lib/* have */.lf)((0,template_string/* $skill */.tm)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Emotionally Chipped"])))) ? 3 - (0,property.get)("_feelHatredUsed") : 0, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Feel Hatred"]))))), new ActionSource((0,template_string/* $item */.xr)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Kremlin's Greatest Briefcase"]))), () => (0,lib/* have */.lf)((0,template_string/* $item */.xr)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["Kremlin's Greatest Briefcase"])))) ? 3 - (0,property.get)("_kgbTranquilizerDartUses") : 0, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["KGB tranquilizer dart"])))), {
  equipmentRequirements: () => new maximize/* Requirement */.nb([], {
    forceEquip: (0,template_string/* $items */.vS)(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["Kremlin's Greatest Briefcase"])))
  })
}), new ActionSource((0,template_string/* $item */.xr)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["latte lovers member's mug"]))), () => (0,lib/* have */.lf)((0,template_string/* $item */.xr)(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["latte lovers member's mug"])))) && !(0,property.get)("_latteBanishUsed") ? 1 : 0, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["Throw Latte on Opponent"])))), {
  equipmentRequirements: () => new maximize/* Requirement */.nb([], {
    forceEquip: (0,template_string/* $items */.vS)(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["latte lovers member's mug"])))
  })
}), new ActionSource((0,template_string/* $item */.xr)(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["Lil' Doctor\u2122 bag"]))), () => (0,lib/* have */.lf)((0,template_string/* $item */.xr)(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["Lil' Doctor\u2122 bag"])))) ? 3 - (0,property.get)("_reflexHammerUsed") : 0, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["Reflex Hammer"])))), {
  equipmentRequirements: () => new maximize/* Requirement */.nb([], {
    forceEquip: (0,template_string/* $items */.vS)(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["Lil' Doctor\u2122 bag"])))
  })
}), new ActionSource((0,template_string/* $item */.xr)(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["mafia middle finger ring"]))), () => (0,lib/* have */.lf)((0,template_string/* $item */.xr)(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["mafia middle finger ring"])))) && (0,external_kolmafia_.canEquip)((0,template_string/* $item */.xr)(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["mafia middle finger ring"])))) && !(0,property.get)("_mafiaMiddleFingerRingUsed") ? 1 : 0, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["Show them your ring"])))), {
  equipmentRequirements: () => new maximize/* Requirement */.nb([], {
    forceEquip: (0,template_string/* $items */.vS)(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["mafia middle finger ring"])))
  })
}), new ActionSource((0,template_string/* $item */.xr)(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["V for Vivala mask"]))), () => (0,lib/* have */.lf)((0,template_string/* $item */.xr)(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["V for Vivala mask"])))) && !(0,property.get)("_vmaskBanisherUsed") ? 1 : 0, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["Creepy Grin"])))), {
  equipmentRequirements: () => new maximize/* Requirement */.nb([], {
    forceEquip: (0,template_string/* $items */.vS)(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["V for Vivala mask"])))
  }),
  preparation: () => (0,external_kolmafia_.restoreMp)(30)
}), new ActionSource((0,template_string/* $item */.xr)(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["stinky cheese eye"]))), () => (0,lib/* getFoldGroup */._D)((0,template_string/* $item */.xr)(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["stinky cheese eye"])))).some(item => (0,lib/* have */.lf)(item)) && !(0,property.get)("_stinkyCheeseBanisherUsed") ? 1 : 0, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["Give Your Opponent the Stinkeye"])))), {
  equipmentRequirements: () => new maximize/* Requirement */.nb([], {
    forceEquip: (0,template_string/* $items */.vS)(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["stinky cheese eye"])))
  }),
  preparation: () => {
    if (!(0,lib/* have */.lf)((0,template_string/* $item */.xr)(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["stinky cheese eye"]))))) {
      (0,external_kolmafia_.cliExecute)("fold stinky cheese eye");
    }

    return (0,lib/* have */.lf)((0,template_string/* $item */.xr)(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral(["stinky cheese eye"]))));
  }
}), new ActionSource((0,template_string/* $skill */.tm)(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral(["Show your boring familiar pictures"]))), () => {
  if ((0,lib/* have */.lf)((0,template_string/* $item */.xr)(_templateObject37 || (_templateObject37 = _taggedTemplateLiteral(["familiar scrapbook"]))))) {
    if (scrapbookChargesLastUpdated !== (0,property.get)("_lastCombatStarted")) {
      (0,external_kolmafia_.visitUrl)("desc_item.php?whichitem=463063785");
      scrapbookChargesLastUpdated = (0,property.get)("_lastCombatStarted");
    }

    return Math.floor((0,property.get)("scrapbookCharges") / 100);
  }

  return 0;
}, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(_templateObject38 || (_templateObject38 = _taggedTemplateLiteral(["Show your boring familiar pictures"])))), {
  equipmentRequirements: () => new maximize/* Requirement */.nb([], {
    forceEquip: (0,template_string/* $items */.vS)(_templateObject39 || (_templateObject39 = _taggedTemplateLiteral(["familiar scrapbook"])))
  })
}), new ActionSource((0,template_string/* $item */.xr)(_templateObject40 || (_templateObject40 = _taggedTemplateLiteral(["human musk"]))), () => Math.max(0, 3 - (0,property.get)("_humanMuskUses")), combat/* Macro.item */.LE.item((0,template_string/* $item */.xr)(_templateObject41 || (_templateObject41 = _taggedTemplateLiteral(["human musk"])))), {
  preparation: () => (0,external_kolmafia_.retrieveItem)((0,template_string/* $item */.xr)(_templateObject42 || (_templateObject42 = _taggedTemplateLiteral(["human musk"])))),
  cost: () => ActionSource.defaultPriceFunction((0,template_string/* $item */.xr)(_templateObject43 || (_templateObject43 = _taggedTemplateLiteral(["human musk"]))))
})].concat(Banish_toConsumableArray((0,template_string/* $items */.vS)(_templateObject44 || (_templateObject44 = _taggedTemplateLiteral(["Louder Than Bomb, divine champagne popper, tennis ball"]))).map(item => new ActionSource(item, () => Infinity, combat/* Macro.item */.LE.item(item), {
  preparation: () => (0,external_kolmafia_.retrieveItem)(item),
  cost: () => ActionSource.defaultPriceFunction(item)
}))));
/**
 * Find an available banish source subject to constraints.
 *
 * @param constraints Preexisting constraints that restrict possible sources.
 * @returns Banish source satisfying constraints, or null.
 */

function tryFindBanish(constraints) {
  var source = findActionSource(banishSources, constraints); // Always try to use Asdon Martin: Spring-Loaded Front Bumper first,
  // but only if another source has been found.

  if (source && asdonMartinSource.available()) {
    source = asdonMartinSource.merge(source);
  }

  return source;
}
/**
 * Ensure an available banish source subject to constraints.
 * Throws an error if no source can be found.
 *
 * @param constraints Preexisting constraints that restrict possible sources.
 * @returns Banish source satisfying constraints.
 */

function ensureBanish(constraints) {
  var source = tryFindBanish(constraints);

  if (!source) {
    throw new Error("Failed to ensure Banish source");
  }

  return source;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/actions/FreeKill.js
var FreeKill_templateObject, FreeKill_templateObject2, FreeKill_templateObject3, FreeKill_templateObject4, FreeKill_templateObject5, FreeKill_templateObject6, FreeKill_templateObject7, FreeKill_templateObject8, FreeKill_templateObject9, FreeKill_templateObject10, FreeKill_templateObject11, FreeKill_templateObject12, FreeKill_templateObject13, FreeKill_templateObject14, FreeKill_templateObject15, FreeKill_templateObject16, FreeKill_templateObject17, FreeKill_templateObject18, FreeKill_templateObject19, FreeKill_templateObject20, FreeKill_templateObject21, FreeKill_templateObject22, FreeKill_templateObject23, FreeKill_templateObject24, FreeKill_templateObject25, FreeKill_templateObject26, FreeKill_templateObject27, FreeKill_templateObject28, FreeKill_templateObject29, FreeKill_templateObject30, FreeKill_templateObject31, FreeKill_templateObject32, FreeKill_templateObject33, FreeKill_templateObject34, FreeKill_templateObject35, FreeKill_templateObject36, FreeKill_templateObject37, FreeKill_templateObject38, FreeKill_templateObject39, FreeKill_templateObject40, FreeKill_templateObject41, FreeKill_templateObject42, FreeKill_templateObject43, FreeKill_templateObject44, _templateObject45;

function FreeKill_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function FreeKill_toConsumableArray(arr) { return FreeKill_arrayWithoutHoles(arr) || FreeKill_iterableToArray(arr) || FreeKill_unsupportedIterableToArray(arr) || FreeKill_nonIterableSpread(); }

function FreeKill_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function FreeKill_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return FreeKill_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return FreeKill_arrayLikeToArray(o, minLen); }

function FreeKill_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function FreeKill_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return FreeKill_arrayLikeToArray(arr); }

function FreeKill_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }









var freeKillSources = [// Free limited sources
new ActionSource((0,template_string/* $skill */.tm)(FreeKill_templateObject || (FreeKill_templateObject = FreeKill_taggedTemplateLiteral(["Gingerbread Mob Hit"]))), () => !(0,property.get)("_gingerbreadMobHitUsed") && (0,lib/* have */.lf)((0,template_string/* $skill */.tm)(FreeKill_templateObject2 || (FreeKill_templateObject2 = FreeKill_taggedTemplateLiteral(["Gingerbread Mob Hit"])))) ? 1 : 0, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(FreeKill_templateObject3 || (FreeKill_templateObject3 = FreeKill_taggedTemplateLiteral(["Gingerbread Mob Hit"])))), {
  preparation: () => (0,external_kolmafia_.restoreMp)(30)
}), new ActionSource((0,template_string/* $skill */.tm)(FreeKill_templateObject4 || (FreeKill_templateObject4 = FreeKill_taggedTemplateLiteral(["Shattering Punch"]))), () => (0,lib/* have */.lf)((0,template_string/* $skill */.tm)(FreeKill_templateObject5 || (FreeKill_templateObject5 = FreeKill_taggedTemplateLiteral(["Shattering Punch"])))) ? 3 - (0,property.get)("_shatteringPunchUsed") : 0, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(FreeKill_templateObject6 || (FreeKill_templateObject6 = FreeKill_taggedTemplateLiteral(["Shattering Punch"])))), {
  preparation: () => (0,external_kolmafia_.restoreMp)(30)
}), new ActionSource((0,template_string/* $item */.xr)(FreeKill_templateObject7 || (FreeKill_templateObject7 = FreeKill_taggedTemplateLiteral(["replica bat-oomerang"]))), () => (0,lib/* have */.lf)((0,template_string/* $item */.xr)(FreeKill_templateObject8 || (FreeKill_templateObject8 = FreeKill_taggedTemplateLiteral(["replica bat-oomerang"])))) ? 3 - (0,property.get)("_usedReplicaBatoomerang") : 0, combat/* Macro.item */.LE.item((0,template_string/* $item */.xr)(FreeKill_templateObject9 || (FreeKill_templateObject9 = FreeKill_taggedTemplateLiteral(["replica bat-oomerang"]))))), new ActionSource((0,template_string/* $item */.xr)(FreeKill_templateObject10 || (FreeKill_templateObject10 = FreeKill_taggedTemplateLiteral(["The Jokester's gun"]))), () => !(0,property.get)("_firedJokestersGun") && (0,lib/* have */.lf)((0,template_string/* $item */.xr)(FreeKill_templateObject11 || (FreeKill_templateObject11 = FreeKill_taggedTemplateLiteral(["The Jokester's gun"])))) && (0,external_kolmafia_.canEquip)((0,template_string/* $item */.xr)(FreeKill_templateObject12 || (FreeKill_templateObject12 = FreeKill_taggedTemplateLiteral(["The Jokester's gun"])))) ? 1 : 0, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(FreeKill_templateObject13 || (FreeKill_templateObject13 = FreeKill_taggedTemplateLiteral(["Fire the Jokester's Gun"])))), {
  equipmentRequirements: () => new maximize/* Requirement */.nb([], {
    forceEquip: (0,template_string/* $items */.vS)(FreeKill_templateObject14 || (FreeKill_templateObject14 = FreeKill_taggedTemplateLiteral(["The Jokester's gun"])))
  })
}), new ActionSource((0,template_string/* $item */.xr)(FreeKill_templateObject15 || (FreeKill_templateObject15 = FreeKill_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"]))), () => (0,lib/* have */.lf)((0,template_string/* $item */.xr)(FreeKill_templateObject16 || (FreeKill_templateObject16 = FreeKill_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"])))) ? 3 - (0,property.get)("_chestXRayUsed") : 0, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(FreeKill_templateObject17 || (FreeKill_templateObject17 = FreeKill_taggedTemplateLiteral(["Chest X-Ray"])))), {
  equipmentRequirements: () => new maximize/* Requirement */.nb([], {
    forceEquip: (0,template_string/* $items */.vS)(FreeKill_templateObject18 || (FreeKill_templateObject18 = FreeKill_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"])))
  })
}), new ActionSource((0,template_string/* $skill */.tm)(FreeKill_templateObject19 || (FreeKill_templateObject19 = FreeKill_taggedTemplateLiteral(["Asdon Martin: Missile Launcher"]))), () => !(0,property.get)("_missileLauncherUsed") && AsdonMartin.installed() ? 1 : 0, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(FreeKill_templateObject20 || (FreeKill_templateObject20 = FreeKill_taggedTemplateLiteral(["Asdon Martin: Missile Launcher"])))), {
  preparation: () => AsdonMartin.fillTo(100)
}), // Heavy Rains
new ActionSource((0,template_string/* $skill */.tm)(FreeKill_templateObject21 || (FreeKill_templateObject21 = FreeKill_taggedTemplateLiteral(["Lightning Strike"]))), () => (0,lib/* have */.lf)((0,template_string/* $skill */.tm)(FreeKill_templateObject22 || (FreeKill_templateObject22 = FreeKill_taggedTemplateLiteral(["Lightning Strike"])))) ? Math.floor((0,external_kolmafia_.myLightning)() / 20) : 0, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(FreeKill_templateObject23 || (FreeKill_templateObject23 = FreeKill_taggedTemplateLiteral(["Lightning Strike"]))))), // Expensive limited sources
new ActionSource((0,template_string/* $item */.xr)(FreeKill_templateObject24 || (FreeKill_templateObject24 = FreeKill_taggedTemplateLiteral(["powdered madness"]))), () => 5 - (0,property.get)("_powderedMadnessUses"), combat/* Macro.item */.LE.item((0,template_string/* $item */.xr)(FreeKill_templateObject25 || (FreeKill_templateObject25 = FreeKill_taggedTemplateLiteral(["powdered madness"])))), {
  preparation: () => (0,external_kolmafia_.retrieveItem)((0,template_string/* $item */.xr)(FreeKill_templateObject26 || (FreeKill_templateObject26 = FreeKill_taggedTemplateLiteral(["powdered madness"])))),
  cost: () => ActionSource.defaultPriceFunction((0,template_string/* $item */.xr)(FreeKill_templateObject27 || (FreeKill_templateObject27 = FreeKill_taggedTemplateLiteral(["powdered madness"]))))
}), new ActionSource((0,template_string/* $familiar */.HP)(FreeKill_templateObject28 || (FreeKill_templateObject28 = FreeKill_taggedTemplateLiteral(["Puck Man"]))), () => (0,lib/* have */.lf)((0,template_string/* $familiar */.HP)(FreeKill_templateObject29 || (FreeKill_templateObject29 = FreeKill_taggedTemplateLiteral(["Puck Man"])))) ? 20 - (0,property.get)("_powerPillUses") : 0, combat/* Macro.item */.LE.item((0,template_string/* $item */.xr)(FreeKill_templateObject30 || (FreeKill_templateObject30 = FreeKill_taggedTemplateLiteral(["power pill"])))), {
  familiar: () => (0,template_string/* $familiar */.HP)(FreeKill_templateObject31 || (FreeKill_templateObject31 = FreeKill_taggedTemplateLiteral(["Puck Man"]))),
  preparation: () => (0,external_kolmafia_.retrieveItem)((0,template_string/* $item */.xr)(FreeKill_templateObject32 || (FreeKill_templateObject32 = FreeKill_taggedTemplateLiteral(["power pill"])))),
  cost: () => ActionSource.defaultPriceFunction((0,template_string/* $item */.xr)(FreeKill_templateObject33 || (FreeKill_templateObject33 = FreeKill_taggedTemplateLiteral(["power pill"]))))
}), new ActionSource((0,template_string/* $familiar */.HP)(FreeKill_templateObject34 || (FreeKill_templateObject34 = FreeKill_taggedTemplateLiteral(["Ms. Puck Man"]))), () => (0,lib/* have */.lf)((0,template_string/* $familiar */.HP)(FreeKill_templateObject35 || (FreeKill_templateObject35 = FreeKill_taggedTemplateLiteral(["Ms. Puck Man"])))) ? 20 - (0,property.get)("_powerPillUses") : 0, combat/* Macro.item */.LE.item((0,template_string/* $item */.xr)(FreeKill_templateObject36 || (FreeKill_templateObject36 = FreeKill_taggedTemplateLiteral(["power pill"])))), {
  familiar: () => (0,template_string/* $familiar */.HP)(FreeKill_templateObject37 || (FreeKill_templateObject37 = FreeKill_taggedTemplateLiteral(["Ms. Puck Man"]))),
  preparation: () => (0,external_kolmafia_.retrieveItem)((0,template_string/* $item */.xr)(FreeKill_templateObject38 || (FreeKill_templateObject38 = FreeKill_taggedTemplateLiteral(["power pill"])))),
  cost: () => ActionSource.defaultPriceFunction((0,template_string/* $item */.xr)(FreeKill_templateObject39 || (FreeKill_templateObject39 = FreeKill_taggedTemplateLiteral(["power pill"]))))
}), // Expensive unlimited sources
new ActionSource((0,template_string/* $skill */.tm)(FreeKill_templateObject40 || (FreeKill_templateObject40 = FreeKill_taggedTemplateLiteral(["Shocking Lick"]))), () => Infinity, combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(FreeKill_templateObject41 || (FreeKill_templateObject41 = FreeKill_taggedTemplateLiteral(["Shocking Lick"])))), {
  preparation: () => {
    if ((0,property.get)("shockingLickCharges") === 0 && (0,external_kolmafia_.retrieveItem)((0,template_string/* $item */.xr)(FreeKill_templateObject42 || (FreeKill_templateObject42 = FreeKill_taggedTemplateLiteral(["battery (9-Volt)"]))))) {
      (0,external_kolmafia_.use)((0,template_string/* $item */.xr)(FreeKill_templateObject43 || (FreeKill_templateObject43 = FreeKill_taggedTemplateLiteral(["battery (9-Volt)"]))));
    }

    return (0,property.get)("shockingLickCharges") > 0;
  },
  cost: () => ActionSource.defaultPriceFunction((0,template_string/* $item */.xr)(FreeKill_templateObject44 || (FreeKill_templateObject44 = FreeKill_taggedTemplateLiteral(["battery (AAA)"])))) * 4
})].concat(FreeKill_toConsumableArray((0,template_string/* $items */.vS)(_templateObject45 || (_templateObject45 = FreeKill_taggedTemplateLiteral(["Daily Affirmation: Think Win-Lose, superduperheated metal"]))).map(item => new ActionSource(item, () => Infinity, combat/* Macro.item */.LE.item(item), {
  preparation: () => (0,external_kolmafia_.retrieveItem)(item),
  cost: () => ActionSource.defaultPriceFunction(item)
}))));
/**
 * Find an available free kill source subject to constraints.
 *
 * @param constraints Preexisting constraints that restrict possible sources.
 * @returns Free kill source satisfying constraints, or null.
 */

function tryFindFreeKill(constraints) {
  return findActionSource(freeKillSources, constraints);
}
/**
 * Ensure an available free kill source subject to constraints.
 * Throws an error if no source can be found.
 *
 * @param constraints Preexisting constraints that restrict possible sources.
 * @returns Free kill source satisfying constraints.
 */

function ensureFreeKill(constraints) {
  var source = tryFindFreeKill(constraints);

  if (!source) {
    throw new Error("Failed to ensure Free Kill source");
  }

  return source;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2009/Bandersnatch.js
var Bandersnatch_templateObject, Bandersnatch_templateObject2, Bandersnatch_templateObject3;

function Bandersnatch_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = Bandersnatch_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function Bandersnatch_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Bandersnatch_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Bandersnatch_arrayLikeToArray(o, minLen); }

function Bandersnatch_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function Bandersnatch_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var familiar = (0,template_string/* $familiar */.HP)(Bandersnatch_templateObject || (Bandersnatch_templateObject = Bandersnatch_taggedTemplateLiteral(["Frumious Bandersnatch"])));
/**
 * Determines whether the player has the Frumious Bandersnatch in their
 * terrarium
 *
 * @returns Whether the player has a Frumious Bandersnatch
 */

function Bandersnatch_have() {
  return (0,lib/* have */.lf)(familiar);
}
/**
 * Get the number of free runaways that have already been used
 *
 * @see StompingBoots with which the Bandersnatch shares a counter
 * @returns Number of free runaways used today
 */

function getRunaways() {
  return (0,property.get)("_banderRunaways");
}
/**
 * Determine the total number of free runaways that the player can
 * get from their Bandersnatch
 *
 * @param considerWeightAdjustment Include familiar weight modifiers
 * @returns Current maximum runaways
 */

function getMaxRunaways() {
  var considerWeightAdjustment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var weightBuffs = considerWeightAdjustment ? (0,external_kolmafia_.weightAdjustment)() : 0;
  return Math.floor(((0,external_kolmafia_.familiarWeight)(familiar) + weightBuffs) / 5);
}
/**
 * Determine the number of remaining free runaways the player can
 * get from their Bandersnatch
 *
 * @param considerWeightAdjustment Include familiar weight modifiers
 * @returns Current maximum runaways reamining
 */

function getRemainingRunaways() {
  var considerWeightAdjustment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return Math.max(0, getMaxRunaways(considerWeightAdjustment) - getRunaways());
}
/**
 * Determine whether the player could use their Bandersnatch to
 * get a free run in theory
 *
 * @param considerWeightAdjustment Include familiar weight modifiers
 * @returns Whether a free run is theoretically possible right now
 */

function couldRunaway() {
  var considerWeightAdjustment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return Bandersnatch_have() && getRemainingRunaways(considerWeightAdjustment) > 0;
}
var odeSkill = (0,template_string/* $skill */.tm)(Bandersnatch_templateObject2 || (Bandersnatch_templateObject2 = Bandersnatch_taggedTemplateLiteral(["The Ode to Booze"])));
var odeEffect = (0,template_string/* $effect */._G)(Bandersnatch_templateObject3 || (Bandersnatch_templateObject3 = Bandersnatch_taggedTemplateLiteral(["Ode to Booze"])));
/**
 * Determine whether the player can use their Bandersnatch to get a
 * free run right now
 *
 * @returns Whether a free run is actually possible right now
 */

function canRunaway() {
  return (0,lib/* isCurrentFamiliar */.ic)(familiar) && couldRunaway() && (0,lib/* have */.lf)(odeEffect);
}
/**
 * Prepare a Bandersnatch runaway.
 *
 * This will cast Ode to Booze and take your Bandersnatch with you.
 * If any of those steps fail, it will return false.
 *
 * @param songsToRemove Ordered list of songs that could be shrugged to make room for Ode to Booze
 * @returns Success
 */

function prepareRunaway(songsToRemove) {
  if (!(0,lib/* have */.lf)(odeEffect)) {
    if (!(0,lib/* have */.lf)(odeSkill)) {
      return false;
    }

    if (!(0,lib/* canRememberSong */.Pr)()) {
      var activeSongs = (0,lib/* getActiveSongs */.b_)();

      var _iterator = Bandersnatch_createForOfIteratorHelper(songsToRemove),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var song = _step.value;

          if (activeSongs.includes(song) && (0,lib/* uneffect */.Lo)(song)) {
            break;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    if (!(0,external_kolmafia_.useSkill)(odeSkill)) {
      return false;
    }
  }

  return (0,external_kolmafia_.useFamiliar)(familiar);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2011/StompingBoots.js
var StompingBoots_templateObject;

function StompingBoots_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var StompingBoots_familiar = (0,template_string/* $familiar */.HP)(StompingBoots_templateObject || (StompingBoots_templateObject = StompingBoots_taggedTemplateLiteral(["Pair of Stomping Boots"])));
/**
 * @returns whether the player has the Pair of Stomping Boots in their terrarium
 */

function StompingBoots_have() {
  return (0,lib/* have */.lf)(StompingBoots_familiar);
}
/**
 * @returns number of free runaways that have already been used today
 * @see Bandersnatch with which the Stomping Boots shares a counter
 */

function StompingBoots_getRunaways() {
  return (0,property.get)("_banderRunaways");
}
/**
 * @param considerWeightAdjustment Include familiar weight modifiers
 * @returns total number of free runaways that the player can get from their Stomping Boots
 */

function StompingBoots_getMaxRunaways() {
  var considerWeightAdjustment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var weightBuffs = considerWeightAdjustment ? (0,external_kolmafia_.weightAdjustment)() : 0;
  return Math.floor(((0,external_kolmafia_.familiarWeight)(StompingBoots_familiar) + weightBuffs) / 5);
}
/**
 * @param considerWeightAdjustment Whether to consider weight adjustment in free run calculation
 * @returns the number of remaining free runaways the player can get from their Stomping Boots
 */

function StompingBoots_getRemainingRunaways() {
  var considerWeightAdjustment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return Math.max(0, StompingBoots_getMaxRunaways(considerWeightAdjustment) - StompingBoots_getRunaways());
}
/**
 * @param considerWeightAdjustment Include familiar weight modifiers
 * @returns whether the player could use their Stomping Boots to get a free run in theory
 */

function StompingBoots_couldRunaway() {
  var considerWeightAdjustment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return StompingBoots_have() && StompingBoots_getRemainingRunaways(considerWeightAdjustment) > 0;
}
/**
 * @returns whether the player can use their Stomping Boots to get a free run right now
 */

function StompingBoots_canRunaway() {
  return (0,lib/* isCurrentFamiliar */.ic)(StompingBoots_familiar) && StompingBoots_couldRunaway();
}
/**
 * Prepare a Stomping Boots runaway.
 *
 * This will take your Stomping Boots with you.
 * If any of those steps fail, it will return false.
 *
 * @returns Success
 */

function StompingBoots_prepareRunaway() {
  return (0,external_kolmafia_.useFamiliar)(StompingBoots_familiar);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/actions/FreeRun.js
var FreeRun_templateObject, FreeRun_templateObject2, FreeRun_templateObject3, FreeRun_templateObject4, FreeRun_templateObject5, FreeRun_templateObject6, FreeRun_templateObject7, FreeRun_templateObject8, FreeRun_templateObject9, FreeRun_templateObject10, FreeRun_templateObject11, FreeRun_templateObject12, FreeRun_templateObject13, FreeRun_templateObject14, FreeRun_templateObject15, FreeRun_templateObject16, FreeRun_templateObject17, FreeRun_templateObject18, FreeRun_templateObject19, FreeRun_templateObject20, FreeRun_templateObject21, FreeRun_templateObject22, FreeRun_templateObject23, FreeRun_templateObject24, FreeRun_templateObject25;

function FreeRun_toConsumableArray(arr) { return FreeRun_arrayWithoutHoles(arr) || FreeRun_iterableToArray(arr) || FreeRun_unsupportedIterableToArray(arr) || FreeRun_nonIterableSpread(); }

function FreeRun_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function FreeRun_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return FreeRun_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return FreeRun_arrayLikeToArray(o, minLen); }

function FreeRun_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function FreeRun_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return FreeRun_arrayLikeToArray(arr); }

function FreeRun_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function FreeRun_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }











var everythingLooksGreen = function everythingLooksGreen() {
  var otherClause = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => true;
  return () => otherClause() && !(0,lib/* have */.lf)((0,template_string/* $effect */._G)(FreeRun_templateObject || (FreeRun_templateObject = FreeRun_taggedTemplateLiteral(["Everything Looks Green"])))) ? 1 : 0;
};

var freeRunSources = [// Free unlimited source
new ActionSource((0,template_string/* $item */.xr)(FreeRun_templateObject2 || (FreeRun_templateObject2 = FreeRun_taggedTemplateLiteral(["spring shoes"]))), everythingLooksGreen(() => (0,lib/* have */.lf)((0,template_string/* $item */.xr)(FreeRun_templateObject3 || (FreeRun_templateObject3 = FreeRun_taggedTemplateLiteral(["spring shoes"]))))), combat/* Macro.skill */.LE.skill((0,template_string/* $skill */.tm)(FreeRun_templateObject4 || (FreeRun_templateObject4 = FreeRun_taggedTemplateLiteral(["Spring Away"])))), {
  equipmentRequirements: () => new maximize/* Requirement */.nb([], {
    forceEquip: (0,template_string/* $items */.vS)(FreeRun_templateObject5 || (FreeRun_templateObject5 = FreeRun_taggedTemplateLiteral(["spring shoes"])))
  })
}), // Free limited sources
new ActionSource((0,template_string/* $familiar */.HP)(FreeRun_templateObject6 || (FreeRun_templateObject6 = FreeRun_taggedTemplateLiteral(["Frumious Bandersnatch"]))), () => ((0,lib/* have */.lf)((0,template_string/* $effect */._G)(FreeRun_templateObject7 || (FreeRun_templateObject7 = FreeRun_taggedTemplateLiteral(["Ode to Booze"])))) || (0,lib/* getSongCount */.uG)() < (0,lib/* getSongLimit */.KN)()) && couldRunaway() ? getRemainingRunaways() : 0, combat/* Macro.step */.LE.step("runaway"), {
  equipmentRequirements: () => new maximize/* Requirement */.nb(["Familiar Weight"], {}),
  preparation: () => {
    (0,lib/* ensureEffect */.pq)((0,template_string/* $effect */._G)(FreeRun_templateObject8 || (FreeRun_templateObject8 = FreeRun_taggedTemplateLiteral(["Ode to Booze"]))));
    return (0,lib/* have */.lf)((0,template_string/* $effect */._G)(FreeRun_templateObject9 || (FreeRun_templateObject9 = FreeRun_taggedTemplateLiteral(["Ode to Booze"]))));
  },
  familiar: () => (0,template_string/* $familiar */.HP)(FreeRun_templateObject10 || (FreeRun_templateObject10 = FreeRun_taggedTemplateLiteral(["Frumious Bandersnatch"])))
}), new ActionSource((0,template_string/* $familiar */.HP)(FreeRun_templateObject11 || (FreeRun_templateObject11 = FreeRun_taggedTemplateLiteral(["Pair of Stomping Boots"]))), () => StompingBoots_couldRunaway() ? StompingBoots_getRemainingRunaways() : 0, combat/* Macro.step */.LE.step("runaway"), {
  equipmentRequirements: () => new maximize/* Requirement */.nb(["Familiar Weight"], {}),
  familiar: () => (0,template_string/* $familiar */.HP)(FreeRun_templateObject12 || (FreeRun_templateObject12 = FreeRun_taggedTemplateLiteral(["Pair of Stomping Boots"])))
}), new ActionSource((0,template_string/* $item */.xr)(FreeRun_templateObject13 || (FreeRun_templateObject13 = FreeRun_taggedTemplateLiteral(["navel ring of navel gazing"]))), () => (0,lib/* have */.lf)((0,template_string/* $item */.xr)(FreeRun_templateObject14 || (FreeRun_templateObject14 = FreeRun_taggedTemplateLiteral(["navel ring of navel gazing"])))) ? Math.max(0, 3 - (0,property.get)("_navelRunaways")) : 0, combat/* Macro.step */.LE.step("runaway"), {
  equipmentRequirements: () => new maximize/* Requirement */.nb([], {
    forceEquip: (0,template_string/* $items */.vS)(FreeRun_templateObject15 || (FreeRun_templateObject15 = FreeRun_taggedTemplateLiteral(["navel ring of navel gazing"])))
  })
}), new ActionSource((0,template_string/* $item */.xr)(FreeRun_templateObject16 || (FreeRun_templateObject16 = FreeRun_taggedTemplateLiteral(["Greatest American Pants"]))), () => (0,lib/* have */.lf)((0,template_string/* $item */.xr)(FreeRun_templateObject17 || (FreeRun_templateObject17 = FreeRun_taggedTemplateLiteral(["Greatest American Pants"])))) ? Math.max(0, 3 - (0,property.get)("_navelRunaways")) : 0, combat/* Macro.step */.LE.step("runaway"), {
  equipmentRequirements: () => new maximize/* Requirement */.nb([], {
    forceEquip: (0,template_string/* $items */.vS)(FreeRun_templateObject18 || (FreeRun_templateObject18 = FreeRun_taggedTemplateLiteral(["Greatest American Pants"])))
  })
}), new ActionSource((0,template_string/* $item */.xr)(FreeRun_templateObject19 || (FreeRun_templateObject19 = FreeRun_taggedTemplateLiteral(["peppermint parasol"]))), () => Math.max(0, 3 - (0,property.get)("_navelRunaways")), combat/* Macro.item */.LE.item((0,template_string/* $item */.xr)(FreeRun_templateObject20 || (FreeRun_templateObject20 = FreeRun_taggedTemplateLiteral(["peppermint parasol"])))), {
  preparation: () => (0,external_kolmafia_.retrieveItem)((0,template_string/* $item */.xr)(FreeRun_templateObject21 || (FreeRun_templateObject21 = FreeRun_taggedTemplateLiteral(["peppermint parasol"])))),
  cost: () => Math.min(ActionSource.defaultPriceFunction((0,template_string/* $item */.xr)(FreeRun_templateObject22 || (FreeRun_templateObject22 = FreeRun_taggedTemplateLiteral(["peppermint sprout"])))) * 5, ActionSource.defaultPriceFunction((0,template_string/* $item */.xr)(FreeRun_templateObject23 || (FreeRun_templateObject23 = FreeRun_taggedTemplateLiteral(["peppermint parasol"]))))) / 10 // Breaks after 10 successful runaways.

})].concat(FreeRun_toConsumableArray((0,template_string/* $items */.vS)(FreeRun_templateObject24 || (FreeRun_templateObject24 = FreeRun_taggedTemplateLiteral(["green smoke bomb, tattered scrap of paper, GOTO, T.U.R.D.S. Key"]))).map(item => new ActionSource(item, everythingLooksGreen(), combat/* Macro.item */.LE.item(item), {
  preparation: () => (0,external_kolmafia_.retrieveItem)(item),
  cost: () => ActionSource.defaultPriceFunction(item)
}))), FreeRun_toConsumableArray((0,template_string/* $items */.vS)(FreeRun_templateObject25 || (FreeRun_templateObject25 = FreeRun_taggedTemplateLiteral(["fish-oil smoke bomb, giant eraser"]))).map(item => new ActionSource(item, () => !(0,lib/* have */.lf)(item) ? 0 : 1, combat/* Macro.item */.LE.item(item), {
  preparation: () => (0,lib/* have */.lf)(item),
  cost: () => 0
}))));
/**
 * Find an available free run source subject to constraints.
 *
 * @param constraints Preexisting constraints that restrict possible sources.
 * @returns Free run source satisfying constraints, or null.
 */

function tryFindFreeRun(constraints) {
  var source = findActionSource(freeRunSources, constraints);
  return source;
}
/**
 * Ensure an available free run source subject to constraints.
 * Throws an error if no source can be found.
 *
 * @param constraints Preexisting constraints that restrict possible sources.
 * @returns Free run source satisfying constraints.
 */

function ensureFreeRun(constraints) {
  var source = tryFindFreeRun(constraints);

  if (!source) {
    throw new Error("Failed to ensure Free Run source");
  }

  return source;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/actions/index.js




// EXTERNAL MODULE: ./node_modules/libram/dist/ascend.js
var ascend = __webpack_require__(832);
// EXTERNAL MODULE: ./node_modules/libram/dist/Clan.js
var Clan = __webpack_require__(169);
;// CONCATENATED MODULE: ./node_modules/libram/dist/challengePaths/2014/HeavyRains.js
var HeavyRains_templateObject, HeavyRains_templateObject2, HeavyRains_templateObject3, HeavyRains_templateObject4, HeavyRains_templateObject5, HeavyRains_templateObject6, HeavyRains_templateObject7, HeavyRains_templateObject8;

function HeavyRains_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





/**
 * Cast Rain Man and fight the target monster
 * @param target the monster to fight
 */

function rainMan(target) {
  if (canRainMan(target)) {
    (0,property.withChoice)(970, "1&whichmonster=".concat(target.id), () => (0,external_kolmafia_.useSkill)((0,template_string/* $skill */.tm)(HeavyRains_templateObject || (HeavyRains_templateObject = HeavyRains_taggedTemplateLiteral(["Rain Man"])))));
  }
}
/**
 * Check if you can summon this monster using Rain Man
 * @param target the monster to attempt to summon
 * @returns true if you can summon the target monster, false otherwise
 */

function canRainMan(target) {
  if (!(0,lib/* have */.lf)((0,template_string/* $skill */.tm)(HeavyRains_templateObject2 || (HeavyRains_templateObject2 = HeavyRains_taggedTemplateLiteral(["Rain Man"])))) || // having the skill implies you are in heavy rains path
  (0,external_kolmafia_.myRain)() < 50 || !target.copyable || target.id < 0) {
    return false;
  }

  if ((0,external_kolmafia_.monsterFactoidsAvailable)(target, false) > 0) {
    return true;
  }

  var page = (0,property.withChoice)(970, 2, () => (0,external_kolmafia_.visitUrl)("runskillz.php?pwd&action=Skillz&whichskill=".concat((0,template_string/* $skill */.tm)(HeavyRains_templateObject3 || (HeavyRains_templateObject3 = HeavyRains_taggedTemplateLiteral(["Rain Man"]))).id, "&quantity=1")));
  return page.indexOf("<option value=".concat(target.id, ">")) > 0;
}
var RAIN_MONSTER_WINDOW_BEGIN = "Rain Monster window begin";
var RAIN_MONSTER_WINDOW_END = "Rain Monster window end";
var wanderers = Object.freeze(external_kolmafia_.Monster.get(["giant isopod", "gourmet gourami", "freshwater bonefish", "alley catfish", "piranhadon", "giant tardigrade", "aquaconda", "storm cow"]));
/**
 * Calculate the expected wandering monster based on current water level
 * @param location the location to check for wanderers
 * @returns The monster for this location given the current waterlevel
 */

function expectedWanderer(location) {
  var difficultyWaterLevel = location.difficultyLevel === "low" ? 1 : 2;
  var environmentWaterLevel = location.environment === "underground" ? 4 : location.environment === "indoor" ? 2 : 1; // location.environment === "unknown" || "outdoors"

  var waterLevel = (0,external_kolmafia_.numericModifier)(external_kolmafia_.Modifier.get("Water Level")) + difficultyWaterLevel + environmentWaterLevel;

  if (waterLevel > 1 && waterLevel < 6) {
    return wanderers[waterLevel - 1];
  } else if (waterLevel === 6 && location.environment === "underground") {
    return (0,template_string/* $monster */.O4)(HeavyRains_templateObject4 || (HeavyRains_templateObject4 = HeavyRains_taggedTemplateLiteral(["giant tardigrade"])));
  } else if (waterLevel === 6 && location.environment === "indoor") {
    return (0,template_string/* $monster */.O4)(HeavyRains_templateObject5 || (HeavyRains_templateObject5 = HeavyRains_taggedTemplateLiteral(["aquaconda"])));
  } else if (waterLevel === 6 && location.environment === "outdoor") {
    return (0,template_string/* $monster */.O4)(HeavyRains_templateObject6 || (HeavyRains_templateObject6 = HeavyRains_taggedTemplateLiteral(["storm cow"])));
  } else {
    return (0,template_string/* $monster */.O4)(HeavyRains_templateObject7 || (HeavyRains_templateObject7 = HeavyRains_taggedTemplateLiteral(["giant isopod"])));
  }
}
var path = (0,template_string/* $path */.l$)(HeavyRains_templateObject8 || (HeavyRains_templateObject8 = HeavyRains_taggedTemplateLiteral(["Heavy Rains"])));
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2017/MummingTrunk.js
function MummingTrunk_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = MummingTrunk_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function MummingTrunk_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return MummingTrunk_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return MummingTrunk_arrayLikeToArray(o, minLen); }

function MummingTrunk_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



/**
 * Internal function used to parse mods
 *
 * @param input The modstring used in your mummery pref
 * @returns a NumericModifier matching that string
 */

function toModifier(input) {
  var regExp = new RegExp(/Experience \((.*?)\)/);
  var matcher = input.match(regExp);
  return matcher ? "".concat(matcher[2], " Experience") : input;
}
/**
 * Parses the _mummeryMods preference into a Map for easier use.
 *
 * @returns A map, mapping Familiars to a Tuple consisting of the NumericModifier attached to the familiar, and the value thereof.
 */


function currentCostumes() {
  var entries = (0,property.get)("_mummeryMods").split(",");
  var returnValue = new Map();
  var regExp = new RegExp(/([^:]+): \[(\d+)\*fam\(([^)]+)\)\]/);

  var _iterator = MummingTrunk_createForOfIteratorHelper(entries),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var entry = _step.value;
      var matcher = entry.match(regExp);

      if (matcher) {
        returnValue.set((0,external_kolmafia_.toFamiliar)(matcher[3]), [toModifier(matcher[1]), parseInt(matcher[2])]);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return returnValue;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/challengePaths/2015/CommunityService.js
var CommunityService_templateObject, CommunityService_templateObject2, CommunityService_templateObject3, CommunityService_templateObject4, CommunityService_templateObject5, CommunityService_templateObject6, CommunityService_templateObject7, CommunityService_templateObject8, CommunityService_templateObject9, CommunityService_templateObject10, CommunityService_templateObject11, CommunityService_templateObject12, CommunityService_templateObject13, CommunityService_templateObject14, CommunityService_templateObject15, CommunityService_templateObject16, CommunityService_templateObject17, CommunityService_templateObject18, CommunityService_templateObject19, CommunityService_templateObject20, CommunityService_templateObject21, CommunityService_templateObject22, CommunityService_templateObject23, CommunityService_templateObject24, CommunityService_templateObject25, CommunityService_templateObject26, CommunityService_templateObject27, CommunityService_templateObject28, CommunityService_templateObject29, CommunityService_templateObject30, CommunityService_templateObject31, CommunityService_templateObject32;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || CommunityService_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function CommunityService_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return CommunityService_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return CommunityService_arrayLikeToArray(o, minLen); }

function CommunityService_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function CommunityService_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function CommunityService_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function CommunityService_createClass(Constructor, protoProps, staticProps) { if (protoProps) CommunityService_defineProperties(Constructor.prototype, protoProps); if (staticProps) CommunityService_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function CommunityService_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function CommunityService_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }








var thralls = new Map([[(0,template_string/* $stat */.Ri)(CommunityService_templateObject || (CommunityService_templateObject = CommunityService_taggedTemplateLiteral(["muscle"]))), (0,template_string/* $thrall */.ev)(CommunityService_templateObject2 || (CommunityService_templateObject2 = CommunityService_taggedTemplateLiteral(["Elbow Macaroni"])))], [(0,template_string/* $stat */.Ri)(CommunityService_templateObject3 || (CommunityService_templateObject3 = CommunityService_taggedTemplateLiteral(["moxie"]))), (0,template_string/* $thrall */.ev)(CommunityService_templateObject4 || (CommunityService_templateObject4 = CommunityService_taggedTemplateLiteral(["Penne Dreadful"])))]]);

var statCommunityServicePredictor = stat => {
  return () => 60 - Math.floor(1 / 30 * ((0,external_kolmafia_.myBuffedstat)(stat) - (0,external_kolmafia_.myBasestat)(thralls.get(stat) === (0,external_kolmafia_.myThrall)() && !(0,lib/* have */.lf)((0,template_string/* $effect */._G)(CommunityService_templateObject5 || (CommunityService_templateObject5 = CommunityService_taggedTemplateLiteral(["Expert Oiliness"])))) ? (0,template_string/* $stat */.Ri)(CommunityService_templateObject6 || (CommunityService_templateObject6 = CommunityService_taggedTemplateLiteral(["mysticality"]))) : stat)));
};

var visitCouncil = () => (0,external_kolmafia_.visitUrl)("council.php");

var baseWeight = () => (0,lib/* have */.lf)((0,template_string/* $effect */._G)(CommunityService_templateObject7 || (CommunityService_templateObject7 = CommunityService_taggedTemplateLiteral(["Fidoxene"])))) ? 20 : (0,external_kolmafia_.familiarWeight)((0,external_kolmafia_.myFamiliar)());

function hypotheticalModifier(modifier) {
  for (var _len = arguments.length, effects = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    effects[_key - 1] = arguments[_key];
  }

  var newEffects = effects.filter(e => !(0,lib/* have */.lf)(e));
  return (0,external_kolmafia_.numericModifier)(modifier) + (0,utils/* sum */.Sm)(newEffects, effect => (0,external_kolmafia_.numericModifier)(effect, modifier));
}

var CommunityService = /*#__PURE__*/function () {
  /**
   * Class to store properties of various CS tests.
   *
   * @param id The id the game HTML uses to identify the test; this is used primarily in runChoice.
   * @param stat The principle stat the test measures, often used as more easily memorable shorthand for the specific tests
   * @param property The name of the test as a string, often used as part of the string property "csServicesPerformed".
   * @param predictor A function that returns an estimate for the number of turns that the test will take given your character's current state.
   * @param maximizeRequirements A Requirement object, if applicable, that aligns with the things needed to maximize for this particular test.
   */
  function CommunityService(id, stat, property, predictor, maximizeRequirements) {
    CommunityService_classCallCheck(this, CommunityService);

    CommunityService_defineProperty(this, "choice", void 0);

    CommunityService_defineProperty(this, "stat", void 0);

    CommunityService_defineProperty(this, "property", void 0);

    CommunityService_defineProperty(this, "predictor", void 0);

    CommunityService_defineProperty(this, "maximizeRequirements", void 0);

    CommunityService_defineProperty(this, "timer", null);

    this.choice = id;
    this.stat = stat;
    this.property = property;
    this.predictor = predictor;
    this.maximizeRequirements = maximizeRequirements;
  }
  /**
   * @returns The id number of the test, used primarily in runChoice.
   */


  CommunityService_createClass(CommunityService, [{
    key: "id",
    get: function get() {
      return this.choice;
    }
    /**
     * @returns The primary stat the test measures, used primarily as memorable shorthand in place of test names.
     */

  }, {
    key: "statName",
    get: function get() {
      return this.stat;
    }
    /**
     * @returns The name of the test, used primarily as part of the string property "csServicesPerformed"
     */

  }, {
    key: "name",
    get: function get() {
      return this.property;
    }
    /**
     *  @returns The predicted number of turns this test will take given your character's current state.
     */

  }, {
    key: "prediction",
    get: function get() {
      return this.predictor();
    }
    /**
     * @returns A Requirement object, if applicable, that aligns with the things needed to maximize for this particular test.
     */

  }, {
    key: "requirement",
    get: function get() {
      return this.maximizeRequirements;
    }
    /**
     * Start the time & turn counter for the Test in question.
     */

  }, {
    key: "startTimer",
    value: function startTimer() {
      var _this$timer;

      (_this$timer = this.timer) !== null && _this$timer !== void 0 ? _this$timer : this.timer = {
        time: Date.now(),
        turns: (0,external_kolmafia_.myTurncount)()
      };
    }
  }, {
    key: "isDone",
    value:
    /**
     * Checks the "csServicesPerformed" property to see whether mafia currently believes this test is complete.
     *
     * @returns Whether mafia currently believes this test is complete.
     */
    function isDone() {
      return (0,property.get)("csServicesPerformed").includes(this.property);
    }
    /**
     * Maximizes based on the Requirement associated with this particular test.
     */

  }, {
    key: "maximize",
    value: function maximize() {
      if (this.maximizeRequirements) this.maximizeRequirements.maximize();
    }
    /**
     * Attempts to turn in the test to the Council of Loathing.
     *
     * @returns Whether mafia believes the test is complete at the end of this function.
     */

  }, {
    key: "do",
    value: function _do() {
      if ((0,property.get)("csServicesPerformed").trim().length === 0) visitCouncil();
      visitCouncil();
      var councilText = (0,external_kolmafia_.runChoice)(this.choice);
      return this._verifyIsDone(councilText);
    }
    /**
     * Wrapper function that prepares for a test and then completes it, adding time and turn details to the log.
     *
     * @param prepare A function that does all necessary preparations for this CS test, including choosing your outfit. Optionally returns the number of turns you expect to spend preparing for the test.
     * @param maxTurns We will run the test iff the predicted/actual turns is less than or equal to this parameter.
     * @returns "completed", "failed", or "already completed".
     */

  }, {
    key: "run",
    value: function run(prepare) {
      var _this$timer2;

      var maxTurns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
      if (this.isDone()) return "already completed";

      var _ref = (_this$timer2 = this.timer) !== null && _this$timer2 !== void 0 ? _this$timer2 : {
        time: Date.now(),
        turns: (0,external_kolmafia_.myTurncount)()
      },
          time = _ref.time,
          turns = _ref.turns;

      var additionalTurns;

      try {
        var result = prepare();
        additionalTurns = typeof result === "number" ? result : 0;
      } catch (e) {
        (0,external_kolmafia_.print)("".concat(e), "red");
        return "failed";
      }

      var prediction = this.predictor();
      var council = visitCouncil();

      var turnCost = this._actualCost(council);

      if (!turnCost) return "already completed";

      if (turnCost > Math.min(maxTurns, (0,external_kolmafia_.myAdventures)())) {
        return "failed";
      }

      if (!this.do()) return "failed";
      CommunityService.log[this.property] = {
        predictedTurns: prediction + additionalTurns,
        turnCost: (0,external_kolmafia_.myTurncount)() - turns,
        seconds: (Date.now() - time) / 1000,
        type: "test"
      };
      return "completed";
    }
  }, {
    key: "_verifyIsDone",
    value: function _verifyIsDone(councilText) {
      return !councilText.includes("<input type=hidden name=option value=".concat(this.choice, ">"));
    }
    /**
     * Checks council.php to verify that a test is complete; more reliable than isDone, but requires an additional pagehit.
     *
     * @returns Whether council.php suggests that the test is complete.
     */

  }, {
    key: "verifyIsDone",
    value: function verifyIsDone() {
      return this._verifyIsDone(visitCouncil());
    }
  }, {
    key: "_actualCost",
    value: function _actualCost(councilText) {
      var match = councilText.match("<input type=hidden name=option value=".concat(this.id, ">.*?Perform Service \\((\\d+) Adventures\\)"));
      return match ? parseInt(match[1]) : 0;
    }
    /**
     * Checks council.php for the number of turns this test will take; more reliable than prediction, but requires an additional pagehit.
     *
     * @returns The number of turns to complete this test according to council.php.
     */

  }, {
    key: "actualCost",
    value: function actualCost() {
      return this._actualCost(visitCouncil());
    }
    /**
     * @param effects A spread array of Effects to consider
     * @returns The number of turns we expect to save if we start using those effects
     */

  }, {
    key: "turnsSavedBy",
    value: function turnsSavedBy() {
      var currentTurns = (0,utils/* clamp */.uZ)(this.prediction, 1, 60);
      var newTurns = (0,utils/* clamp */.uZ)(this.predictor.apply(this, arguments), 1, 60);
      return currentTurns - newTurns;
    }
    /**
     * A log of the predicted turns, actual turns, and duration of each CS test performed.
     */

  }], [{
    key: "startTimer",
    value:
    /**
     * Start the time & turn counter for the given task
     *
     * @param name The name of the task to start the counter of
     */
    function startTimer(name) {
      if (!this.taskTimers.has(name)) {
        this.taskTimers.set(name, {
          time: Date.now(),
          turns: (0,external_kolmafia_.myTurncount)()
        });
      }
    }
  }, {
    key: "logTask",
    value: function logTask(name, action) {
      var _this$taskTimers$get, _action;

      var _ref2 = (_this$taskTimers$get = this.taskTimers.get(name)) !== null && _this$taskTimers$get !== void 0 ? _this$taskTimers$get : {
        time: Date.now(),
        turns: (0,external_kolmafia_.myTurncount)()
      },
          time = _ref2.time,
          turns = _ref2.turns;

      var estimatedTurns = (_action = action()) !== null && _action !== void 0 ? _action : 0;
      CommunityService.log[name] = {
        type: "task",
        turnCost: (0,external_kolmafia_.myTurncount)() - turns,
        predictedTurns: estimatedTurns,
        seconds: (Date.now() - time) / 1000
      };
    }
  }, {
    key: "printLog",
    value:
    /**
     * Prints turncount and time details of the test in question.
     *
     * @param colour The colour (or color) you'd like the log to be printed in.
     */
    function printLog() {
      var colour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "blue";
      var logEntries = Object.entries(CommunityService.log);

      for (var _i = 0, _logEntries = logEntries; _i < _logEntries.length; _i++) {
        var _logEntries$_i = _slicedToArray(_logEntries[_i], 2),
            testName = _logEntries$_i[0],
            testEntry = _logEntries$_i[1];

        var type = testEntry.type,
            predictedTurns = testEntry.predictedTurns,
            turnCost = testEntry.turnCost,
            seconds = testEntry.seconds;

        if (type === "test") {
          (0,external_kolmafia_.print)("We predicted the ".concat(testName, " test would take ").concat(predictedTurns, " turns, ").concat(predictedTurns === turnCost ? "and" : "but", " it took ").concat(turnCost, " turns."), colour);
          (0,external_kolmafia_.print)("".concat(testName, " took ").concat(seconds.toFixed(1), " seconds."), colour);
        } else {
          if (!(predictedTurns === 0 && turnCost === 0)) {
            (0,external_kolmafia_.print)("We predicted the task ".concat(testName, " would take ").concat(predictedTurns, " turns, ").concat(predictedTurns === turnCost ? "and" : "but", " it took ").concat(turnCost, " turns."), colour);
          }

          (0,external_kolmafia_.print)("The task ".concat(testName, " took ").concat(seconds.toFixed(1), " seconds."), colour);
        }
      }

      var totalTime = (0,utils/* sum */.Sm)(logEntries, _ref3 => {
        var _ref4 = _slicedToArray(_ref3, 2),
            testEntry = _ref4[1];

        return testEntry.seconds;
      });
      (0,external_kolmafia_.print)("All together, you have spent ".concat(totalTime.toFixed(1), " seconds during this Community Service run"), colour);
    } // Below, we have the tests themselves.

  }]);

  return CommunityService;
}();

CommunityService_defineProperty(CommunityService, "taskTimers", new Map());

CommunityService_defineProperty(CommunityService, "log", {});

CommunityService_defineProperty(CommunityService, "HP", new CommunityService(1, "HP", "Donate Blood", () => 60 - Math.floor(((0,external_kolmafia_.myMaxhp)() - (0,external_kolmafia_.myBuffedstat)((0,template_string/* $stat */.Ri)(CommunityService_templateObject8 || (CommunityService_templateObject8 = CommunityService_taggedTemplateLiteral(["muscle"])))) - 3) / 30), new maximize/* Requirement */.nb(["HP"], {})));

CommunityService_defineProperty(CommunityService, "Muscle", new CommunityService(2, "Muscle", "Feed The Children", statCommunityServicePredictor((0,template_string/* $stat */.Ri)(CommunityService_templateObject9 || (CommunityService_templateObject9 = CommunityService_taggedTemplateLiteral(["Muscle"])))), new maximize/* Requirement */.nb(["Muscle"], {})));

CommunityService_defineProperty(CommunityService, "Mysticality", new CommunityService(3, "Mysticality", "Build Playground Mazes", statCommunityServicePredictor((0,template_string/* $stat */.Ri)(CommunityService_templateObject10 || (CommunityService_templateObject10 = CommunityService_taggedTemplateLiteral(["Mysticality"])))), new maximize/* Requirement */.nb(["Mysticality"], {})));

CommunityService_defineProperty(CommunityService, "Moxie", new CommunityService(4, "Moxie", "Feed Conspirators", statCommunityServicePredictor((0,template_string/* $stat */.Ri)(CommunityService_templateObject11 || (CommunityService_templateObject11 = CommunityService_taggedTemplateLiteral(["Moxie"])))), new maximize/* Requirement */.nb(["Moxie"], {})));

CommunityService_defineProperty(CommunityService, "FamiliarWeight", new CommunityService(5, "Familiar Weight", "Breed More Collies", function () {
  for (var _len2 = arguments.length, effects = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    effects[_key2] = arguments[_key2];
  }

  return 60 - Math.floor((baseWeight() + hypotheticalModifier.apply(void 0, ["Familiar Weight"].concat(effects))) / 5);
}, new maximize/* Requirement */.nb(["Familiar Weight"], {})));

CommunityService_defineProperty(CommunityService, "WeaponDamage", new CommunityService(6, "Weapon Damage", "Reduce Gazelle Population", function () {
  var weaponPower = (0,external_kolmafia_.getPower)((0,external_kolmafia_.equippedItem)((0,template_string/* $slot */.Jh)(CommunityService_templateObject12 || (CommunityService_templateObject12 = CommunityService_taggedTemplateLiteral(["weapon"])))));
  var offhandPower = (0,external_kolmafia_.toSlot)((0,external_kolmafia_.equippedItem)((0,template_string/* $slot */.Jh)(CommunityService_templateObject13 || (CommunityService_templateObject13 = CommunityService_taggedTemplateLiteral(["off-hand"]))))) === (0,template_string/* $slot */.Jh)(CommunityService_templateObject14 || (CommunityService_templateObject14 = CommunityService_taggedTemplateLiteral(["weapon"]))) ? (0,external_kolmafia_.getPower)((0,external_kolmafia_.equippedItem)((0,template_string/* $slot */.Jh)(CommunityService_templateObject15 || (CommunityService_templateObject15 = CommunityService_taggedTemplateLiteral(["off-hand"]))))) : 0;
  var familiarPower = (0,external_kolmafia_.toSlot)((0,external_kolmafia_.equippedItem)((0,template_string/* $slot */.Jh)(CommunityService_templateObject16 || (CommunityService_templateObject16 = CommunityService_taggedTemplateLiteral(["familiar"]))))) === (0,template_string/* $slot */.Jh)(CommunityService_templateObject17 || (CommunityService_templateObject17 = CommunityService_taggedTemplateLiteral(["weapon"]))) ? (0,external_kolmafia_.getPower)((0,external_kolmafia_.equippedItem)((0,template_string/* $slot */.Jh)(CommunityService_templateObject18 || (CommunityService_templateObject18 = CommunityService_taggedTemplateLiteral(["familiar"]))))) : 0; // mafia does not currently count swagger

  var multiplier = (0,lib/* have */.lf)((0,template_string/* $effect */._G)(CommunityService_templateObject19 || (CommunityService_templateObject19 = CommunityService_taggedTemplateLiteral(["Bow-Legged Swagger"])))) ? 2 : 1; // We add 0.001 because the floor function sometimes introduces weird rounding errors

  for (var _len3 = arguments.length, effects = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    effects[_key3] = arguments[_key3];
  }

  return 60 - Math.floor(multiplier * (hypotheticalModifier.apply(void 0, ["Weapon Damage"].concat(effects)) - 0.15 * (weaponPower + offhandPower + familiarPower)) / 50 + 0.001) - Math.floor(multiplier * hypotheticalModifier.apply(void 0, ["Weapon Damage Percent"].concat(effects)) / 50 + 0.001);
}, new maximize/* Requirement */.nb(["Weapon Damage", "Weapon Damage Percent"], {})));

CommunityService_defineProperty(CommunityService, "SpellDamage", new CommunityService(7, "Spell Damage", "Make Sausage", function () {
  var dragonfishDamage = (0,external_kolmafia_.myFamiliar)() === (0,template_string/* $familiar */.HP)(CommunityService_templateObject20 || (CommunityService_templateObject20 = CommunityService_taggedTemplateLiteral(["Magic Dragonfish"]))) ? (0,external_kolmafia_.numericModifier)((0,template_string/* $familiar */.HP)(CommunityService_templateObject21 || (CommunityService_templateObject21 = CommunityService_taggedTemplateLiteral(["Magic Dragonfish"]))), "Spell Damage Percent", baseWeight() + (0,external_kolmafia_.weightAdjustment)(), template_string/* $item.none */.xr.none) : 0; // We add 0.001 because the floor function sometimes introduces weird rounding errors

  for (var _len4 = arguments.length, effects = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    effects[_key4] = arguments[_key4];
  }

  return 60 - Math.floor(hypotheticalModifier.apply(void 0, ["Spell Damage"].concat(effects)) / 50 + 0.001) - Math.floor((hypotheticalModifier.apply(void 0, ["Spell Damage Percent"].concat(effects)) - dragonfishDamage) / 50 + 0.001);
}, new maximize/* Requirement */.nb(["Spell Damage", "Spell Damage Percent"], {})));

CommunityService_defineProperty(CommunityService, "Noncombat", new CommunityService(8, "Non-Combat", "Be a Living Statue", function () {
  for (var _len5 = arguments.length, effects = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    effects[_key5] = arguments[_key5];
  }

  var noncombatRate = -1 * hypotheticalModifier.apply(void 0, ["Combat Rate"].concat(effects));

  var unsoftcappedRate = rate => rate > 25 ? 25 + (rate - 25) * 5 : rate;

  var currentFamiliarModifier = -1 * (0,external_kolmafia_.numericModifier)((0,external_kolmafia_.myFamiliar)(), "Combat Rate", (0,external_kolmafia_.familiarWeight)((0,external_kolmafia_.myFamiliar)()) + (0,external_kolmafia_.numericModifier)("Familiar Weight"), (0,external_kolmafia_.equippedItem)((0,template_string/* $slot */.Jh)(CommunityService_templateObject22 || (CommunityService_templateObject22 = CommunityService_taggedTemplateLiteral(["familiar"])))));
  var newFamiliarModifier = -1 * (0,external_kolmafia_.numericModifier)((0,external_kolmafia_.myFamiliar)(), "Combat Rate", (0,external_kolmafia_.familiarWeight)((0,external_kolmafia_.myFamiliar)()) + hypotheticalModifier.apply(void 0, ["Familiar Weight"].concat(effects)), (0,external_kolmafia_.equippedItem)((0,template_string/* $slot */.Jh)(CommunityService_templateObject23 || (CommunityService_templateObject23 = CommunityService_taggedTemplateLiteral(["familiar"])))));
  var adjustedRate = unsoftcappedRate(noncombatRate) - unsoftcappedRate(currentFamiliarModifier) + unsoftcappedRate(newFamiliarModifier);
  return 60 - 3 * Math.floor(adjustedRate / 5);
}, new maximize/* Requirement */.nb(["-combat"], {})));

CommunityService_defineProperty(CommunityService, "BoozeDrop", new CommunityService(9, "Item Drop", "Make Margaritas", function () {
  var mummingCostume = currentCostumes().get((0,external_kolmafia_.myFamiliar)());
  var mummingBuff = mummingCostume && mummingCostume[0] === "Item Drop" ? mummingCostume[1] : 0;
  var familiarItemDrop = (0,external_kolmafia_.numericModifier)((0,external_kolmafia_.myFamiliar)(), "Item Drop", baseWeight() + (0,external_kolmafia_.weightAdjustment)(), (0,external_kolmafia_.equippedItem)((0,template_string/* $slot */.Jh)(CommunityService_templateObject24 || (CommunityService_templateObject24 = CommunityService_taggedTemplateLiteral(["familiar"]))))) + mummingBuff - (0,external_kolmafia_.numericModifier)((0,external_kolmafia_.equippedItem)((0,template_string/* $slot */.Jh)(CommunityService_templateObject25 || (CommunityService_templateObject25 = CommunityService_taggedTemplateLiteral(["familiar"])))), "Item Drop");
  var familiarBoozeDrop = (0,external_kolmafia_.numericModifier)((0,external_kolmafia_.myFamiliar)(), "Booze Drop", baseWeight() + (0,external_kolmafia_.weightAdjustment)(), (0,external_kolmafia_.equippedItem)((0,template_string/* $slot */.Jh)(CommunityService_templateObject26 || (CommunityService_templateObject26 = CommunityService_taggedTemplateLiteral(["familiar"]))))) - (0,external_kolmafia_.numericModifier)((0,external_kolmafia_.equippedItem)((0,template_string/* $slot */.Jh)(CommunityService_templateObject27 || (CommunityService_templateObject27 = CommunityService_taggedTemplateLiteral(["familiar"])))), "Booze Drop"); // Champagne doubling does NOT count for CS, so we undouble

  var multiplier = (0,external_kolmafia_.haveEquipped)((0,template_string/* $item */.xr)(CommunityService_templateObject28 || (CommunityService_templateObject28 = CommunityService_taggedTemplateLiteral(["broken champagne bottle"])))) && (0,property.get)("garbageChampagneCharge") > 0 ? 0.5 : 1; // We add 0.001 because the floor function sometimes introduces weird rounding errors

  for (var _len6 = arguments.length, effects = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    effects[_key6] = arguments[_key6];
  }

  return 60 - Math.floor(multiplier * (hypotheticalModifier.apply(void 0, ["Item Drop"].concat(effects)) - familiarItemDrop - (0,external_kolmafia_.numericModifier)((0,external_kolmafia_.myThrall)(), "Item Drop")) / 30 + 0.001) - Math.floor((hypotheticalModifier.apply(void 0, ["Booze Drop"].concat(effects)) - familiarBoozeDrop) / 15 + 0.001);
}, new maximize/* Requirement */.nb(["Item Drop", "2 Booze Drop"], {
  preventEquip: (0,template_string/* $items */.vS)(CommunityService_templateObject29 || (CommunityService_templateObject29 = CommunityService_taggedTemplateLiteral(["broken champagne bottle"])))
})));

CommunityService_defineProperty(CommunityService, "HotRes", new CommunityService(10, "Hot Resistance", "Clean Steam Tunnels", function () {
  var currentFamiliarModifier = (0,external_kolmafia_.numericModifier)((0,external_kolmafia_.myFamiliar)(), "Hot Resistance", (0,external_kolmafia_.familiarWeight)((0,external_kolmafia_.myFamiliar)()) + (0,external_kolmafia_.numericModifier)("Familiar Weight"), (0,external_kolmafia_.equippedItem)((0,template_string/* $slot */.Jh)(CommunityService_templateObject30 || (CommunityService_templateObject30 = CommunityService_taggedTemplateLiteral(["familiar"])))));

  for (var _len7 = arguments.length, effects = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
    effects[_key7] = arguments[_key7];
  }

  var newFamiliarModifier = (0,external_kolmafia_.numericModifier)((0,external_kolmafia_.myFamiliar)(), "Hot Resistance", (0,external_kolmafia_.familiarWeight)((0,external_kolmafia_.myFamiliar)()) + hypotheticalModifier.apply(void 0, ["Familiar Weight"].concat(effects)), (0,external_kolmafia_.equippedItem)((0,template_string/* $slot */.Jh)(CommunityService_templateObject31 || (CommunityService_templateObject31 = CommunityService_taggedTemplateLiteral(["familiar"])))));
  return 60 - (hypotheticalModifier.apply(void 0, ["Hot Resistance"].concat(effects)) - currentFamiliarModifier + newFamiliarModifier);
}, new maximize/* Requirement */.nb(["Hot Resistance"], {})));

CommunityService_defineProperty(CommunityService, "CoilWire", new CommunityService(11, "Coil Wire", "Coil Wire", () => 60, new maximize/* Requirement */.nb([], {})));

CommunityService_defineProperty(CommunityService, "donate", () => {
  visitCouncil();
  (0,external_kolmafia_.visitUrl)("choice.php?whichchoice=1089&option=30");
});

CommunityService_defineProperty(CommunityService, "path", (0,template_string/* $path */.l$)(CommunityService_templateObject32 || (CommunityService_templateObject32 = CommunityService_taggedTemplateLiteral(["Community Service"]))));


;// CONCATENATED MODULE: ./node_modules/libram/dist/challengePaths/2016/NuclearAutumn.js
var NuclearAutumn_templateObject;

function NuclearAutumn_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



/**
 * Visits the Cooling Tank on level 8 of the Fallout shelter to gain 300 rads
 */

function coolingTank() {
  (0,external_kolmafia_.visitUrl)("place.php?whichplace=falloutshelter&action=vault8");
}
/**
 * Visits the Spa Simulation Chamber on level 4 of the Fallout shelter for 100 turns of "100% all stats"
 */

function spa() {
  (0,external_kolmafia_.visitUrl)("place.php?whichplace=falloutshelter&action=vault3");
}
/**
 * Visits the Chronodynamics Laboratory on level 5 of the Fallout shelter to permanently increase radiation level by 3
 */

function chronoLab() {
  (0,external_kolmafia_.visitUrl)("place.php?whichplace=falloutshelter&action=vault5");
}
var NuclearAutumn_path = (0,template_string/* $path */.l$)(NuclearAutumn_templateObject || (NuclearAutumn_templateObject = NuclearAutumn_taggedTemplateLiteral(["Nuclear Autumn"])));
;// CONCATENATED MODULE: ./node_modules/libram/dist/challengePaths/index.js




;// CONCATENATED MODULE: ./node_modules/libram/dist/counter.js

/**
 * Returns Infinity for counters that do not exist, and otherwise returns the duration of the counter
 *
 * @param counter The name of the counter in question
 * @returns Infinity if the counter does not exist; otherwise returns the duration of the counter
 */

function get(counter) {
  var value = (0,external_kolmafia_.getCounter)(counter); // getCounter returns -1 for counters that don't exist, but it also returns -1 for counters whose value is -1

  if (value === -1) {
    // if we have a counter with value -1, we check to see if that counter exists via getCounters()
    // We return null if it doesn't exist
    return (0,external_kolmafia_.getCounters)(counter, -1, -1).trim() === "" ? Infinity : -1;
  }

  return value;
}
/**
 * The world is everything that is the case. This determines which counters are the case.
 *
 * @param counter The name of the counter in question
 * @returns True for counters which currently exist; false for those which do not
 */

function exists(counter) {
  return (0,external_kolmafia_.getCounter)(counter) !== -1 || (0,external_kolmafia_.getCounters)(counter, -1, -1).trim() !== "";
}
/**
 * Creates a manual counter with specified name and duration
 *
 * @param counter Name of the counter to manually create
 * @param duration Duration of counter to manually set
 * @returns Whether the counter was successfully set
 */

function set(counter, duration) {
  (0,external_kolmafia_.cliExecute)("counters add ".concat(duration, " ").concat(counter));
  return get(counter) !== null;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/modifierTypes.js
// THIS FILE IS AUTOMATICALLY GENERATED. See tools/parseModifiers.ts for more information
var stringModifiers = ["Class", "Intrinsic Effect", "Equalize", "Wiki Name", "Modifiers", "Outfit", "Stat Tuning", "Effect", "Equips On", "Familiar Effect", "Jiggle", "Equalize Muscle", "Equalize Mysticality", "Equalize Moxie", "Avatar", "Rollover Effect", "Skill", "Floor Buffed Muscle", "Floor Buffed Mysticality", "Floor Buffed Moxie", "Plumber Stat", "Recipe", "Evaluated Modifiers"];
var booleanModifiers = ["Softcore Only", "Single Equip", "Never Fumble", "Weakens Monster", "Free Pull", "Variable", "Nonstackable Watch", "Cold Immunity", "Hot Immunity", "Sleaze Immunity", "Spooky Immunity", "Stench Immunity", "Cold Vulnerability", "Hot Vulnerability", "Sleaze Vulnerability", "Spooky Vulnerability", "Stench Vulnerability", "Moxie Controls MP", "Moxie May Control MP", "Four Songs", "Adventure Underwater", "Underwater Familiar", "Generic", "Unarmed", "No Pull", "Lasts Until Rollover", "Attacks Can't Miss", "Pirate", "Breakable", "Drops Items", "Drops Meat", "Volleyball or Sombrero", "Extra Pickpocket", "Negative Status Resist"];
var numericModifiers = ["Familiar Weight", "Monster Level", "Combat Rate", "Initiative", "Experience", "Item Drop", "Meat Drop", "Damage Absorption", "Damage Reduction", "Cold Resistance", "Hot Resistance", "Sleaze Resistance", "Spooky Resistance", "Stench Resistance", "Mana Cost", "Moxie", "Moxie Percent", "Muscle", "Muscle Percent", "Mysticality", "Mysticality Percent", "Maximum HP", "Maximum HP Percent", "Maximum MP", "Maximum MP Percent", "Weapon Damage", "Ranged Damage", "Spell Damage", "Spell Damage Percent", "Cold Damage", "Hot Damage", "Sleaze Damage", "Spooky Damage", "Stench Damage", "Cold Spell Damage", "Hot Spell Damage", "Sleaze Spell Damage", "Spooky Spell Damage", "Stench Spell Damage", "Underwater Combat Rate", "Fumble", "HP Regen Min", "HP Regen Max", "MP Regen Min", "MP Regen Max", "Adventures", "Familiar Weight Percent", "Weapon Damage Percent", "Ranged Damage Percent", "Stackable Mana Cost", "Hobo Power", "Base Resting HP", "Resting HP Percent", "Bonus Resting HP", "Base Resting MP", "Resting MP Percent", "Bonus Resting MP", "Critical Hit Percent", "PvP Fights", "Volleyball", "Sombrero", "Leprechaun", "Fairy", "Meat Drop Penalty", "Hidden Familiar Weight", "Item Drop Penalty", "Initiative Penalty", "Food Drop", "Booze Drop", "Hat Drop", "Weapon Drop", "Offhand Drop", "Shirt Drop", "Pants Drop", "Accessory Drop", "Volleyball Effectiveness", "Sombrero Effectiveness", "Leprechaun Effectiveness", "Fairy Effectiveness", "Familiar Weight Cap", "Slime Resistance", "Slime Hates It", "Spell Critical Percent", "Muscle Experience", "Mysticality Experience", "Moxie Experience", "Effect Duration", "Candy Drop", "DB Combat Damage", "Sombrero Bonus", "Familiar Experience", "Sporadic Meat Drop", "Sporadic Item Drop", "Meat Bonus", "Pickpocket Chance", "Combat Mana Cost", "Muscle Experience Percent", "Mysticality Experience Percent", "Moxie Experience Percent", "Minstrel Level", "Muscle Limit", "Mysticality Limit", "Moxie Limit", "Song Duration", "Prismatic Damage", "Smithsness", "Supercold Resistance", "Reduce Enemy Defense", "Pool Skill", "Familiar Damage", "Gear Drop", "Maximum Hooch", "Water Level", "Crimbot Outfit Power", "Familiar Tuning Muscle", "Familiar Tuning Mysticality", "Familiar Tuning Moxie", "Random Monster Modifiers", "Luck", "Othello Skill", "Disco Style", "Rollover Effect Duration", "Sixgun Damage", "Fishing Skill", "Additional Song", "Sprinkle Drop", "Absorb Adventures", "Absorb Stats", "Rubee Drop", "Kruegerand Drop", "WarBear Armor Penetration", "Maximum PP", "Plumber Power", "Drippy Damage", "Drippy Resistance", "Energy", "Scrap", "Familiar Action Bonus", "Water", "Spleen Drop", "Potion Drop", "Sauce Spell Damage", "Monster Level Percent", "Food Fairy", "Booze Fairy", "Candy Fairy", "Food Fairy Effectiveness", "Booze Fairy Effectiveness", "Candy Fairy Effectiveness", "Damage Aura", "Sporadic Damage Aura", "Thorns", "Sporadic Thorns", "Stomach Capacity", "Liver Capacity", "Spleen Capacity", "Free Rests", "Leaves", "Elf Warfare Effectiveness", "Pirate Warfare Effectiveness", "MPC Drop", "Piece of Twelve Drop"];
;// CONCATENATED MODULE: ./node_modules/libram/dist/modifier.js
var modifier_templateObject;

function modifier_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function modifier_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function modifier_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? modifier_ownKeys(Object(source), !0).forEach(function (key) { modifier_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : modifier_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function modifier_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






/**
 * Get the value of a modifier
 *
 * @param name Modifier name
 * @param subject Subject of modifier
 * @returns Value of modifier
 */

function modifier_get(name, subject) {
  if ((0,utils/* arrayContains */.IA)(name, booleanModifiers)) {
    return subject === undefined ? (0,external_kolmafia_.booleanModifier)(name) : (0,external_kolmafia_.booleanModifier)(subject, name);
  }

  if ((0,utils/* arrayContains */.IA)(name, numericModifiers)) {
    return subject === undefined ? (0,external_kolmafia_.numericModifier)(name) : (0,external_kolmafia_.numericModifier)(subject, name);
  }

  if ((0,utils/* arrayContains */.IA)(name, stringModifiers)) {
    return subject === undefined ? (0,external_kolmafia_.stringModifier)(name) : (0,external_kolmafia_.stringModifier)(subject, name);
  }
}
/**
 * Merge two Modifiers objects into one, summing all numeric modifiers, ||ing all boolean modifiers, and otherwise letting the second object overwrite the first.
 *
 * @param modifiers1 Modifiers objects to be merged onto.
 * @param modifiers2 Modifiers object to merge.
 * @returns A single Modifiers object obtained by merging.
 */

function pairwiseMerge(modifiers1, modifiers2) {
  var returnValue = modifier_objectSpread(modifier_objectSpread({}, modifiers1), modifiers2);

  for (var modifier in modifiers1) {
    if (Array.from(Object.values(modifiers2)).includes(modifier)) {
      if ((0,utils/* arrayContains */.IA)(modifier, numericModifiers)) {
        var _modifiers1$modifier, _modifiers2$modifier;

        returnValue[modifier] = ((_modifiers1$modifier = modifiers1[modifier]) !== null && _modifiers1$modifier !== void 0 ? _modifiers1$modifier : 0) + ((_modifiers2$modifier = modifiers2[modifier]) !== null && _modifiers2$modifier !== void 0 ? _modifiers2$modifier : 0);
      }

      if ((0,utils/* arrayContains */.IA)(modifier, booleanModifiers)) {
        var _modifiers1$modifier2, _modifiers2$modifier2;

        returnValue[modifier] = ((_modifiers1$modifier2 = modifiers1[modifier]) !== null && _modifiers1$modifier2 !== void 0 ? _modifiers1$modifier2 : false) || ((_modifiers2$modifier2 = modifiers2[modifier]) !== null && _modifiers2$modifier2 !== void 0 ? _modifiers2$modifier2 : false);
      }
    }
  }

  return returnValue;
}
/**
 * Merge arbitrarily many Modifiers objects into one, summing all numeric modifiers, and ||ing all boolean modifiers.
 *
 * @param modifierss Modifiers objects to be merged together.
 * @returns A single Modifiers object obtained by merging.
 */


function mergeModifiers() {
  for (var _len = arguments.length, modifierss = new Array(_len), _key = 0; _key < _len; _key++) {
    modifierss[_key] = arguments[_key];
  }

  return modifierss.reduce((a, b) => pairwiseMerge(a, b), {});
}
/**
 * Prints the modtrace to the log.
 * Example: printModtrace("Meat Drop") or printModtrace(["Item Drop", "Booze Drop"])
 *
 * @param inputModifiers A string (or string[]) containing the modtrace lookup term(s).
 * @param baseModifier A string where all the info about modifiers in the string[] array can be grabbed with this one lookup term. (Automatically generated in most cases)
 * @param componentColor The print color for the sum returned for each input modifier
 * @param totalColor The print color for the total sum over every input modifier
 * @returns void
 */

function printModtrace(inputModifiers, // the user's list of modifiers to look up
baseModifier) {
  var _htmlOutput$match, _htmlOutput$match2;

  var componentColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "purple";
  var totalColor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "blue";
  if (typeof inputModifiers === "string") return printModtrace([inputModifiers], inputModifiers);else if (inputModifiers.length === 0) return;else if (!baseModifier) {
    return inputModifiers.filter(mod1 => !inputModifiers.some(mod2 => mod2 !== mod1 && mod1.includes(mod2))).forEach(baseMod => printModtrace(inputModifiers.filter(mod => mod.includes(baseMod)), baseMod));
  }
  var htmlOutput = cliExecuteOutput("modtrace ".concat(baseModifier)); // The list of matched modifiers that mafia returns

  var modtraceModifiers = Array.from((_htmlOutput$match = htmlOutput.match(RegExp(/(>)(.*?)(<\/td>)/g))) !== null && _htmlOutput$match !== void 0 ? _htmlOutput$match : []).map(s => s.slice(1, -5)).slice(2);

  if (!modtraceModifiers.some(modifier => modifier.toLowerCase() === baseModifier.toLowerCase())) {
    return print("Could not find exact string match of ".concat(baseModifier, " in ").concat(inputModifiers.toString()), "red");
  }

  var initialVal = baseModifier.toLowerCase() === "familiar weight" ? (() => {
    var wt = familiarWeight(myFamiliar());
    print("[Familiar Weight] Base weight (".concat(wt, ")"));
    return wt;
  })() : 0;
  var modifierVals = new Map(modtraceModifiers.map(modifier => [modifier, initialVal])); // Maps modifier name to its value

  var lowerCaseModifiers = inputModifiers.map(modifier => modifier.toLowerCase());
  Array.from((_htmlOutput$match2 = htmlOutput.match(RegExp(/<tr>(.*?)<\/tr>/g))) !== null && _htmlOutput$match2 !== void 0 ? _htmlOutput$match2 : []).slice(1).map(s => s.slice(4, -5)).forEach(s => {
    var _s$replace$match;

    var rowArr = Array.from((_s$replace$match = s.replace(RegExp(/><\/td>/g), ">0</td>").match(RegExp(/(>)(.*?)(<\/td>)/g))) !== null && _s$replace$match !== void 0 ? _s$replace$match : []).map(s => s.slice(1, -5));
    var rowName = rowArr[1];
    rowArr.slice(2).filter((e, idx) => idx % 2 === 0).forEach((e, idx) => {
      var _modifierVals$get;

      var val = parseFloat(e);
      modifierVals.set(modtraceModifiers[idx], ((_modifierVals$get = modifierVals.get(modtraceModifiers[idx])) !== null && _modifierVals$get !== void 0 ? _modifierVals$get : 0) + val);

      if (val !== 0 && lowerCaseModifiers.includes(modtraceModifiers[idx].toLowerCase())) {
        print("[".concat(modtraceModifiers[idx], "] ").concat(rowName, " (").concat(val.toFixed(1), ")"));
      }
    });
  });
  var total = sum(modtraceModifiers, modifier => {
    if (lowerCaseModifiers.includes(modifier.toLowerCase())) {
      var _modifierVals$get2;

      var modVal = (_modifierVals$get2 = modifierVals.get(modifier)) !== null && _modifierVals$get2 !== void 0 ? _modifierVals$get2 : 0;

      if (have($effect(modifier_templateObject || (modifier_templateObject = modifier_taggedTemplateLiteral(["Bow-Legged Swagger"])))) && modifier.includes("Weapon Damage")) {
        print("[".concat(modifier, "] Bow-Legged Swagger (").concat(modVal.toFixed(1), ")"));
        modVal *= 2;
      }

      print("".concat(modifier, " => ").concat(modVal.toFixed(1)), componentColor);
      return modVal;
    } else return 0;
  });
  print("Total ".concat(baseModifier, ": ").concat(total.toFixed(1)), totalColor);
}
/**
 * Take the sum of a modifier over an array of Skills, Effects, and Items
 *
 * @param modifier A NumericModifier that we want to find the total value of
 * @param subjects A rested array of Skills, Effects, and Items that we want to find the total value of
 * @returns The sum of the appropriate modifier for all of the subjects
 */

function getTotalModifier(modifier) {
  for (var _len2 = arguments.length, subjects = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    subjects[_key2 - 1] = arguments[_key2];
  }

  return (0,utils/* sum */.Sm)(subjects, subject => modifier_get(modifier, subject));
}
// EXTERNAL MODULE: ./node_modules/libram/dist/logger.js
var logger = __webpack_require__(167);
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2015/MayoClinic.js
var MayoClinic_templateObject, MayoClinic_templateObject2, MayoClinic_templateObject3, MayoClinic_templateObject4, MayoClinic_templateObject5, MayoClinic_templateObject6, MayoClinic_templateObject7, MayoClinic_templateObject8, MayoClinic_templateObject9, MayoClinic_templateObject10;

function MayoClinic_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var Mayo = {
  nex: (0,template_string/* $item */.xr)(MayoClinic_templateObject || (MayoClinic_templateObject = MayoClinic_taggedTemplateLiteral(["Mayonex"]))),
  diol: (0,template_string/* $item */.xr)(MayoClinic_templateObject2 || (MayoClinic_templateObject2 = MayoClinic_taggedTemplateLiteral(["Mayodiol"]))),
  zapine: (0,template_string/* $item */.xr)(MayoClinic_templateObject3 || (MayoClinic_templateObject3 = MayoClinic_taggedTemplateLiteral(["Mayozapine"]))),
  flex: (0,template_string/* $item */.xr)(MayoClinic_templateObject4 || (MayoClinic_templateObject4 = MayoClinic_taggedTemplateLiteral(["Mayoflex"])))
};
/**
 * @returns Whether the Mayo Clinic is our current active workshed
 */

function installed() {
  return (0,external_kolmafia_.getWorkshed)() === (0,template_string/* $item */.xr)(MayoClinic_templateObject5 || (MayoClinic_templateObject5 = MayoClinic_taggedTemplateLiteral(["portable Mayo Clinic"])));
}
/**
 * @returns Whether we `have` the Mayo Clinic, or it's installed
 */

function MayoClinic_have() {
  return (0,lib/* have */.lf)((0,template_string/* $item */.xr)(MayoClinic_templateObject6 || (MayoClinic_templateObject6 = MayoClinic_taggedTemplateLiteral(["portable Mayo Clinic"])))) || installed();
}
/**
 * Sets mayo minder to a particular mayo, and ensures you have enough of it.
 *
 * @param mayo Mayo to use
 * @param quantity Quantity to ensure
 * @returns Whether we succeeded in this endeavor; a trivial `false` for people without the clinic `installed`
 */

function setMayoMinder(mayo) {
  var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  if ((0,external_kolmafia_.getWorkshed)() !== (0,template_string/* $item */.xr)(MayoClinic_templateObject7 || (MayoClinic_templateObject7 = MayoClinic_taggedTemplateLiteral(["portable Mayo Clinic"])))) return false;

  if (!Object.values(Mayo).includes(mayo)) {
    logger/* default.error */.Z.error("Invalid mayo selected");
    return false;
  }

  if ((0,property.get)("mayoInMouth") && (0,property.get)("mayoInMouth") !== mayo.name) {
    logger/* default.error */.Z.error("Currently have incorrect mayo in mouth");
    return false;
  }

  (0,external_kolmafia_.retrieveItem)(quantity, mayo);
  if (!(0,lib/* have */.lf)((0,template_string/* $item */.xr)(MayoClinic_templateObject8 || (MayoClinic_templateObject8 = MayoClinic_taggedTemplateLiteral(["Mayo Minder\u2122"]))))) (0,external_kolmafia_.buy)((0,template_string/* $item */.xr)(MayoClinic_templateObject9 || (MayoClinic_templateObject9 = MayoClinic_taggedTemplateLiteral(["Mayo Minder\u2122"]))));

  if ((0,property.get)("mayoMinderSetting") !== mayo.name) {
    (0,property.withChoice)(1076, mayo.id - 8260, () => (0,external_kolmafia_.use)((0,template_string/* $item */.xr)(MayoClinic_templateObject10 || (MayoClinic_templateObject10 = MayoClinic_taggedTemplateLiteral(["Mayo Minder\u2122"])))));
  }

  return (0,property.get)("mayoMinderSetting") === mayo.name;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/diet/knapsack.js
function knapsack_toConsumableArray(arr) { return knapsack_arrayWithoutHoles(arr) || knapsack_iterableToArray(arr) || knapsack_unsupportedIterableToArray(arr) || knapsack_nonIterableSpread(); }

function knapsack_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function knapsack_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function knapsack_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return knapsack_arrayLikeToArray(arr); }

function knapsack_slicedToArray(arr, i) { return knapsack_arrayWithHoles(arr) || knapsack_iterableToArrayLimit(arr, i) || knapsack_unsupportedIterableToArray(arr, i) || knapsack_nonIterableRest(); }

function knapsack_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function knapsack_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function knapsack_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function knapsack_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = knapsack_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function knapsack_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return knapsack_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return knapsack_arrayLikeToArray(o, minLen); }

function knapsack_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function knapsack_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function knapsack_createClass(Constructor, protoProps, staticProps) { if (protoProps) knapsack_defineProperties(Constructor.prototype, protoProps); if (staticProps) knapsack_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function knapsack_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function knapsack_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



var Not = /*#__PURE__*/knapsack_createClass(function Not(thing) {
  knapsack_classCallCheck(this, Not);

  knapsack_defineProperty(this, "thing", void 0);

  this.thing = thing;
});
/**
 * Assuming list is already sorted, count adjacent items.
 * Effectively run-length encoding.
 *
 * @param list List to count
 * @param isEqual Function that determines item equality
 * @returns List of 2-tuples relating item to count
 */


function aggregate(list, isEqual) {
  var aggregatedList = [];

  var _iterator = knapsack_createForOfIteratorHelper(list),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var item = _step.value;

      if (aggregatedList.length === 0) {
        aggregatedList.push([item, 1]);
      } else {
        var last = aggregatedList[aggregatedList.length - 1];

        var _last = knapsack_slicedToArray(last, 1),
            lastItem = _last[0];

        if (isEqual ? isEqual(item, lastItem) : item === lastItem) {
          last[1]++;
        } else {
          aggregatedList.push([item, 1]);
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return aggregatedList;
}
/**
 * Solve the knapsack problem.
 *
 * @param values Array of {[item, value, weight, maximum]} tuples for knapsack parameter.
 * @param capacity Capacity of knapsack.
 * @returns Tuple {[totalValue, items]} of selected items and total value of those items.
 */


function knapsack(values, capacity) {
  var _ref5;

  if (!Number.isFinite(capacity)) {
    throw new Error("Invalid capacity.");
  } // Invert negative values into a fake value for not using it.


  var valuesInverted = values.map(_ref => {
    var _ref2 = knapsack_slicedToArray(_ref, 4),
        thing = _ref2[0],
        value = _ref2[1],
        weight = _ref2[2],
        maximum = _ref2[3];

    return weight < 0 && maximum !== undefined ? [new Not(thing), -value, -weight, maximum] : [thing, value, weight, maximum];
  });
  var capacityAdjustment = (0,utils/* sum */.Sm)(values, _ref3 => {
    var _ref4 = knapsack_slicedToArray(_ref3, 4),
        weight = _ref4[2],
        maximum = _ref4[3];

    return weight < 0 && maximum !== undefined ? -weight * maximum : 0;
  });
  var adjustedCapacity = capacity + capacityAdjustment;

  if (adjustedCapacity < 0) {
    // We don't have enough cleaners to create any space, so can't fit anything.
    return [-Infinity, []];
  } // Sort values by weight.


  var valuesSorted = knapsack_toConsumableArray(valuesInverted).sort((x, y) => x[2] - y[2]); // Convert the problem into 0/1 knapsack - just include as many copies as possible of each item.


  var values01 = (_ref5 = []).concat.apply(_ref5, knapsack_toConsumableArray(valuesSorted.map(_ref6 => {
    var _ref7 = knapsack_slicedToArray(_ref6, 4),
        thing = _ref7[0],
        value = _ref7[1],
        weight = _ref7[2],
        maximum = _ref7[3];

    if (!Number.isFinite(weight) || weight < 0) {
      throw new Error("Invalid weight ".concat(weight, " for ").concat(thing instanceof Not ? "not ".concat(thing.thing) : thing));
    }

    var maxQuantity = Math.floor(maximum !== null && maximum !== void 0 ? maximum : adjustedCapacity / weight);

    if (maxQuantity < 0) {
      throw new Error("Invalid max quantity ".concat(maxQuantity, " for ").concat(thing instanceof Not ? "not ".concat(thing.thing) : thing));
    }

    return new Array(maxQuantity).fill([thing, value, weight]);
  })));

  var memoizationTable = new Array(values01.length);

  for (var i = 0; i < values01.length; i++) {
    memoizationTable[i] = new Array(adjustedCapacity).fill(null);
  }

  var _bestSolution = bestSolution(memoizationTable, values01, values01.length - 1, adjustedCapacity),
      _bestSolution2 = knapsack_slicedToArray(_bestSolution, 2),
      value = _bestSolution2[0],
      invertedSolution = _bestSolution2[1]; // Still need to replace Not<T>s with right quantity of T's.


  var aggregatedSolution = aggregate(invertedSolution);
  var countMap = new Map(aggregatedSolution);
  var valueAdjustment = 0;
  var solution = aggregatedSolution.filter(_ref8 => {
    var _ref9 = knapsack_slicedToArray(_ref8, 1),
        thingOrNot = _ref9[0];

    return !(thingOrNot instanceof Not);
  });

  var _iterator2 = knapsack_createForOfIteratorHelper(valuesSorted),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _step2$value = knapsack_slicedToArray(_step2.value, 4),
          thingOrNot = _step2$value[0],
          _value = _step2$value[1],
          maximum = _step2$value[3];

      if (thingOrNot instanceof Not) {
        var _countMap$get;

        var notCount = (_countMap$get = countMap.get(thingOrNot)) !== null && _countMap$get !== void 0 ? _countMap$get : 0;

        if (maximum === undefined) {
          throw new Error("Cannot find maximum for item ".concat(thingOrNot.thing, "."));
        }

        if (notCount > maximum) {
          throw new Error("Somehow picked ".concat(notCount, " more than the maximum ").concat(notCount, " for item ").concat(thingOrNot.thing, "."));
        }

        if (notCount < maximum) {
          solution.push([thingOrNot.thing, maximum - notCount]);
        }

        valueAdjustment -= maximum * _value;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return [value + valueAdjustment, solution];
}
/**
 * Find the best solution to a knapsack subproblem.
 *
 * @param memoizationTable Memoization table for dynamic programming approach.
 * @param values Array of {[item, value, weight, maximum]} tuples for knapsack parameter.
 * @param currentIndex Current index into values array - only add items before this index.
 * @param remainingCapacity Remaining capacity of knapsack.
 * @returns Tuple of value to item
 */

function bestSolution(memoizationTable, values, currentIndex, remainingCapacity) {
  // If we've used all our capacity, this solution is no good.
  if (remainingCapacity < 0) return [-Infinity, []];
  if (remainingCapacity === 0 || currentIndex < 0) return [0, []];
  var memoized = memoizationTable[currentIndex][remainingCapacity - 1];
  if (memoized !== null) return memoized;

  var _values$currentIndex = knapsack_slicedToArray(values[currentIndex], 3),
      item = _values$currentIndex[0],
      value = _values$currentIndex[1],
      weight = _values$currentIndex[2];

  var _bestSolution3 = bestSolution(memoizationTable, values, currentIndex - 1, remainingCapacity - weight),
      _bestSolution4 = knapsack_slicedToArray(_bestSolution3, 2),
      valueIncludeRest = _bestSolution4[0],
      itemsInclude = _bestSolution4[1];

  var valueInclude = valueIncludeRest + value;

  var _bestSolution5 = bestSolution(memoizationTable, values, currentIndex - 1, remainingCapacity),
      _bestSolution6 = knapsack_slicedToArray(_bestSolution5, 2),
      valueExclude = _bestSolution6[0],
      itemsExclude = _bestSolution6[1]; // Pick the better of the two options between including/excluding.


  var result = valueInclude > valueExclude ? [valueInclude, [].concat(knapsack_toConsumableArray(itemsInclude), [item])] : [valueExclude, itemsExclude];
  memoizationTable[currentIndex][remainingCapacity - 1] = result;
  return result;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/diet/index.js
var diet_templateObject, diet_templateObject2, diet_templateObject3, diet_templateObject4, diet_templateObject5, diet_templateObject6, diet_templateObject7, diet_templateObject8, diet_templateObject9, diet_templateObject10, diet_templateObject11, diet_templateObject12, diet_templateObject13, diet_templateObject14, diet_templateObject15, diet_templateObject16, diet_templateObject17, diet_templateObject18, diet_templateObject19, diet_templateObject20, diet_templateObject21, diet_templateObject22, diet_templateObject23, diet_templateObject24, diet_templateObject25, diet_templateObject26, diet_templateObject27, diet_templateObject28, diet_templateObject29, diet_templateObject30, diet_templateObject31, diet_templateObject32, diet_templateObject33, diet_templateObject34, diet_templateObject35, diet_templateObject36, diet_templateObject37, diet_templateObject38, diet_templateObject39, diet_templateObject40, diet_templateObject41, diet_templateObject42, diet_templateObject43, diet_templateObject44, diet_templateObject45, _templateObject46, _templateObject47, _templateObject48, _templateObject49, _templateObject50, _templateObject51, _templateObject52, _templateObject53, _templateObject54, _templateObject55, _templateObject56, _templateObject57, _templateObject58, _templateObject59, _templateObject60, _templateObject61, _templateObject62, _templateObject63, _templateObject64, _templateObject65, _templateObject66, _templateObject67, _templateObject68, _templateObject69, _templateObject70, _templateObject71, _templateObject72;

function diet_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = diet_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function diet_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function diet_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? diet_ownKeys(Object(source), !0).forEach(function (key) { diet_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : diet_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function diet_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function diet_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function diet_createClass(Constructor, protoProps, staticProps) { if (protoProps) diet_defineProperties(Constructor.prototype, protoProps); if (staticProps) diet_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function diet_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function diet_toConsumableArray(arr) { return diet_arrayWithoutHoles(arr) || diet_iterableToArray(arr) || diet_unsupportedIterableToArray(arr) || diet_nonIterableSpread(); }

function diet_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function diet_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function diet_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return diet_arrayLikeToArray(arr); }

function diet_slicedToArray(arr, i) { return diet_arrayWithHoles(arr) || diet_iterableToArrayLimit(arr, i) || diet_unsupportedIterableToArray(arr, i) || diet_nonIterableRest(); }

function diet_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function diet_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return diet_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return diet_arrayLikeToArray(o, minLen); }

function diet_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function diet_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function diet_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function diet_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }










function isMonday() {
  // Checking Tuesday's ruby is a hack to see if it's Monday in Arizona.
  return modifier_get("Muscle Percent", (0,template_string/* $item */.xr)(diet_templateObject || (diet_templateObject = diet_taggedTemplateLiteral(["Tuesday's ruby"])))) > 0;
}
/**
 * Expected adventures from an item given a specified state
 *
 * @todo Include Salty Mouth and potentially other modifiers.
 * @param item Item to consider
 * @param modifiers Consumption modifiers to consider
 * @returns Adventures expected
 */


function _expectedAdventures(item, modifiers) {
  var _item$notes, _item$notes2, _item$notes3, _item$notes4, _item$notes5;

  if (item.adventures === "") return 0;

  var _item$adventures$spli = item.adventures.split(/[-]/).map(s => parseInt(s)),
      _item$adventures$spli2 = diet_slicedToArray(_item$adventures$spli, 2),
      min = _item$adventures$spli2[0],
      recordedMax = _item$adventures$spli2[1];

  var max = recordedMax !== null && recordedMax !== void 0 ? recordedMax : min;

  var interpolated = diet_toConsumableArray(new Array(max - min + 1).keys()).map(n => n + min);

  var forkMugMultiplier = (0,external_kolmafia_.itemType)(item) === "food" && (_item$notes = item.notes) !== null && _item$notes !== void 0 && _item$notes.includes("SALAD") || (0,external_kolmafia_.itemType)(item) === "booze" && (_item$notes2 = item.notes) !== null && _item$notes2 !== void 0 && _item$notes2.includes("BEER") ? 1.5 : 1.3;
  var seasoningAdventures = max - min <= 1 ? 1 : 0.5;
  var aioliAdventures = item.fullness;
  var garish = modifiers.garish && ((_item$notes3 = item.notes) === null || _item$notes3 === void 0 ? void 0 : _item$notes3.includes("LASAGNA")) && !isMonday();
  var refinedPalate = modifiers.refinedPalate && ((_item$notes4 = item.notes) === null || _item$notes4 === void 0 ? void 0 : _item$notes4.includes("WINE"));
  var pinkyRing = modifiers.pinkyRing && ((_item$notes5 = item.notes) === null || _item$notes5 === void 0 ? void 0 : _item$notes5.includes("WINE"));
  return (0,utils/* sum */.Sm)(interpolated, baseAdventures => {
    var _item$notes6, _item$notes7;

    var adventures = baseAdventures;

    if (modifiers.forkMug) {
      adventures = Math.floor(adventures * forkMugMultiplier);
    }

    if ((_item$notes6 = item.notes) !== null && _item$notes6 !== void 0 && _item$notes6.includes("SAUCY") && modifiers.saucemaven) {
      adventures += (0,external_kolmafia_.myPrimestat)() === (0,template_string/* $stat */.Ri)(diet_templateObject2 || (diet_templateObject2 = diet_taggedTemplateLiteral(["Mysticality"]))) ? 5 : 3;
    }

    if (garish) adventures += 5;
    if (refinedPalate) adventures = Math.floor(adventures * 1.25);
    if (pinkyRing) adventures = Math.round(adventures * 1.125);

    if ((_item$notes7 = item.notes) !== null && _item$notes7 !== void 0 && _item$notes7.includes("MARTINI") && modifiers.tuxedoShirt) {
      adventures += 2;
    }

    if ((0,external_kolmafia_.itemType)(item) === "food" && modifiers.mayoflex) adventures++;
    if ((0,external_kolmafia_.itemType)(item) === "food" && modifiers.seasoning) adventures += seasoningAdventures;
    if ((0,external_kolmafia_.itemType)(item) === "food" && modifiers.aioli) adventures += aioliAdventures;
    if ((0,external_kolmafia_.itemType)(item) === "food" && modifiers.whetStone) adventures++;
    return adventures;
  }) / interpolated.length;
}

var MenuItem = /*#__PURE__*/function () {
  /**
   * Construct a new menu item, possibly with extra properties. Items in MenuItem.defaultOptions have intelligent defaults.
   *
   * @param item Item to add to menu.
   * @param options Options for this menu item
   * @param options.organ Designate item as belonging to a specific organ.
   * @param options.size Override item organ size. Necessary for any non-food/booze/spleen item.
   * @param options.maximum Maximum uses remaining today, or "auto" to check dailyusesleft Mafia property.
   * @param options.additionalValue Additional value (positive) or cost (negative) to consider with item, e.g. from buffs.
   * @param options.effect Effect associated with this menu item (pocket wish effect, sweet synthesis effect, pill keeper potion extension)
   * @param options.mayo Which mayo to use before item (ignored if mayo clinic is not installed or item is not a food)
   * @param options.note Any note to track information about item, to be used later
   */
  function MenuItem(item) {
    var _MenuItem$defaultOpti;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    diet_classCallCheck(this, MenuItem);

    diet_defineProperty(this, "item", void 0);

    diet_defineProperty(this, "organ", void 0);

    diet_defineProperty(this, "size", void 0);

    diet_defineProperty(this, "maximum", void 0);

    diet_defineProperty(this, "additionalValue", void 0);

    diet_defineProperty(this, "effect", void 0);

    diet_defineProperty(this, "priceOverride", void 0);

    diet_defineProperty(this, "mayo", void 0);

    diet_defineProperty(this, "data", void 0);

    var _options = diet_objectSpread(diet_objectSpread({}, options), (_MenuItem$defaultOpti = MenuItem.defaultOptions().get(item)) !== null && _MenuItem$defaultOpti !== void 0 ? _MenuItem$defaultOpti : {}),
        size = _options.size,
        organ = _options.organ,
        maximum = _options.maximum,
        additionalValue = _options.additionalValue,
        effect = _options.effect,
        priceOverride = _options.priceOverride,
        mayo = _options.mayo,
        data = _options.data;

    this.item = item;
    if ((0,utils/* notNullish */.nf)(maximum)) this.maximum = maximum === "auto" ? item.dailyusesleft : maximum;
    if ((0,utils/* notNullish */.nf)(additionalValue)) this.additionalValue = additionalValue;
    if ((0,utils/* notNullish */.nf)(effect)) this.effect = effect;
    if ((0,utils/* notNullish */.nf)(priceOverride)) this.priceOverride = priceOverride;
    if ((0,utils/* notNullish */.nf)(mayo)) this.mayo = mayo;
    if ((0,utils/* notNullish */.nf)(data)) this.data = data;

    if ((0,utils/* notNullish */.nf)(organ)) {
      this.organ = organ;
    } else {
      var typ = (0,external_kolmafia_.itemType)(this.item);
      if (isOrgan(typ)) this.organ = typ;
    }

    this.size = size !== null && size !== void 0 ? size : this.organ === "food" ? this.item.fullness : this.organ === "booze" ? this.item.inebriety : this.organ === "spleen item" ? this.item.spleen : 0;
  }

  diet_createClass(MenuItem, [{
    key: "equals",
    value: function equals(other) {
      return this.item === other.item && this.effect === other.effect;
    }
  }, {
    key: "toString",
    value: function toString() {
      if (this.effect) {
        return "".concat(this.item, ":").concat(this.effect);
      }

      return this.item.toString();
    }
  }, {
    key: "price",
    value: function price() {
      var _this$priceOverride, _MenuItem$defaultPric;

      return (_this$priceOverride = this.priceOverride) !== null && _this$priceOverride !== void 0 ? _this$priceOverride : (_MenuItem$defaultPric = MenuItem.defaultPriceFunction) === null || _MenuItem$defaultPric === void 0 ? void 0 : _MenuItem$defaultPric.call(MenuItem, this.item);
    }
  }], [{
    key: "defaultOptions",
    value: function defaultOptions() {
      return new Map([[(0,template_string/* $item */.xr)(diet_templateObject3 || (diet_templateObject3 = diet_taggedTemplateLiteral(["distention pill"]))), {
        organ: "food",
        maximum: !(0,lib/* have */.lf)((0,template_string/* $item */.xr)(diet_templateObject4 || (diet_templateObject4 = diet_taggedTemplateLiteral(["distention pill"])))) || (0,property.get)("_distentionPillUsed") ? 0 : 1,
        size: -1
      }], [(0,template_string/* $item */.xr)(diet_templateObject5 || (diet_templateObject5 = diet_taggedTemplateLiteral(["synthetic dog hair pill"]))), {
        organ: "booze",
        maximum: !(0,lib/* have */.lf)((0,template_string/* $item */.xr)(diet_templateObject6 || (diet_templateObject6 = diet_taggedTemplateLiteral(["synthetic dog hair pill"])))) || (0,property.get)("_syntheticDogHairPillUsed") ? 0 : 1,
        size: -1
      }], [(0,template_string/* $item */.xr)(diet_templateObject7 || (diet_templateObject7 = diet_taggedTemplateLiteral(["cuppa Voraci tea"]))), {
        organ: "food",
        maximum: (0,property.get)("_voraciTeaUsed") ? 0 : 1,
        size: -1
      }], [(0,template_string/* $item */.xr)(diet_templateObject8 || (diet_templateObject8 = diet_taggedTemplateLiteral(["cuppa Sobrie tea"]))), {
        organ: "booze",
        maximum: (0,property.get)("_sobrieTeaUsed") ? 0 : 1,
        size: -1
      }], [(0,template_string/* $item */.xr)(diet_templateObject9 || (diet_templateObject9 = diet_taggedTemplateLiteral(["mojo filter"]))), {
        organ: "spleen item",
        maximum: 3 - (0,property.get)("currentMojoFilters"),
        size: -1
      }], [(0,template_string/* $item */.xr)(diet_templateObject10 || (diet_templateObject10 = diet_taggedTemplateLiteral(["spice melange"]))), {
        maximum: (0,property.get)("spiceMelangeUsed") ? 0 : 1
      }], [(0,template_string/* $item */.xr)(diet_templateObject11 || (diet_templateObject11 = diet_taggedTemplateLiteral(["Ultra Mega Sour Ball"]))), {
        maximum: (0,property.get)("_ultraMegaSourBallUsed") ? 0 : 1
      }], [(0,template_string/* $item */.xr)(diet_templateObject12 || (diet_templateObject12 = diet_taggedTemplateLiteral(["The Plumber's mushroom stew"]))), {
        maximum: (0,property.get)("_plumbersMushroomStewEaten") ? 0 : 1
      }], [(0,template_string/* $item */.xr)(diet_templateObject13 || (diet_templateObject13 = diet_taggedTemplateLiteral(["The Mad Liquor"]))), {
        maximum: (0,property.get)("_madLiquorDrunk") ? 0 : 1
      }], [(0,template_string/* $item */.xr)(diet_templateObject14 || (diet_templateObject14 = diet_taggedTemplateLiteral(["Doc Clock's thyme cocktail"]))), {
        maximum: (0,property.get)("_docClocksThymeCocktailDrunk") ? 0 : 1
      }], [(0,template_string/* $item */.xr)(diet_templateObject15 || (diet_templateObject15 = diet_taggedTemplateLiteral(["Mr. Burnsger"]))), {
        maximum: (0,property.get)("_mrBurnsgerEaten") ? 0 : 1
      }], [(0,template_string/* $item */.xr)(diet_templateObject16 || (diet_templateObject16 = diet_taggedTemplateLiteral(["Calzone of Legend"]))), {
        maximum: (0,property.get)("calzoneOfLegendEaten") ? 0 : 1
      }], [(0,template_string/* $item */.xr)(diet_templateObject17 || (diet_templateObject17 = diet_taggedTemplateLiteral(["Deep Dish of Legend"]))), {
        maximum: (0,property.get)("deepDishOfLegendEaten") ? 0 : 1
      }], [(0,template_string/* $item */.xr)(diet_templateObject18 || (diet_templateObject18 = diet_taggedTemplateLiteral(["Pizza of Legend"]))), {
        maximum: (0,property.get)("pizzaOfLegendEaten") ? 0 : 1
      }], [(0,template_string/* $item */.xr)(diet_templateObject19 || (diet_templateObject19 = diet_taggedTemplateLiteral(["jar of fermented pickle juice"]))), {
        maximum: (0,property.get)("_pickleJuiceDrunk") ? 0 : 1
      }], [(0,template_string/* $item */.xr)(diet_templateObject20 || (diet_templateObject20 = diet_taggedTemplateLiteral(["extra-greasy slider"]))), {
        maximum: (0,property.get)("_extraGreasySliderEaten") ? 0 : 1
      }], [(0,template_string/* $item */.xr)(diet_templateObject21 || (diet_templateObject21 = diet_taggedTemplateLiteral(["voodoo snuff"]))), {
        maximum: (0,property.get)("_voodooSnuffUsed") ? 0 : 1
      }], [(0,template_string/* $item */.xr)(diet_templateObject22 || (diet_templateObject22 = diet_taggedTemplateLiteral(["Ol' Scratch's salad fork"]))), {
        maximum: (0,property.get)("_saladForkUsed") ? 0 : 1
      }], [(0,template_string/* $item */.xr)(diet_templateObject23 || (diet_templateObject23 = diet_taggedTemplateLiteral(["Frosty's frosty mug"]))), {
        maximum: (0,property.get)("_frostyMugUsed") ? 0 : 1
      }], [(0,template_string/* $item */.xr)(diet_templateObject24 || (diet_templateObject24 = diet_taggedTemplateLiteral(["tin cup of mulligan stew"]))), {
        maximum: (0,property.get)("_mulliganStewEaten") ? 0 : 1
      }], [(0,template_string/* $item */.xr)(diet_templateObject25 || (diet_templateObject25 = diet_taggedTemplateLiteral(["Hodgman's blanket"]))), {
        maximum: (0,property.get)("_hodgmansBlanketDrunk") ? 0 : 1
      }]]);
    }
  }]);

  return MenuItem;
}();

diet_defineProperty(MenuItem, "defaultPriceFunction", item => (0,external_kolmafia_.npcPrice)(item) > 0 ? (0,external_kolmafia_.npcPrice)(item) : (0,external_kolmafia_.mallPrice)(item));

var organs = ["food", "booze", "spleen item"];
/**
 * @param x Name of thing that might be an organ
 * @returns Whether the string supplied is the name of an organ
 */

function isOrgan(x) {
  return organs.includes(x);
}

var DietPlanner = /*#__PURE__*/function () {
  function DietPlanner(mpa, menu) {
    var _this = this;

    diet_classCallCheck(this, DietPlanner);

    diet_defineProperty(this, "mpa", void 0);

    diet_defineProperty(this, "menu", void 0);

    diet_defineProperty(this, "mayoLookup", void 0);

    diet_defineProperty(this, "fork", void 0);

    diet_defineProperty(this, "mug", void 0);

    diet_defineProperty(this, "seasoning", void 0);

    diet_defineProperty(this, "whetStone", void 0);

    diet_defineProperty(this, "aioli", void 0);

    diet_defineProperty(this, "spleenValue", 0);

    this.mpa = mpa;
    var fork = menu.find(item => item.item === (0,template_string/* $item */.xr)(diet_templateObject26 || (diet_templateObject26 = diet_taggedTemplateLiteral(["Ol' Scratch's salad fork"]))));
    if (fork) this.fork = fork;
    var mug = menu.find(item => item.item === (0,template_string/* $item */.xr)(diet_templateObject27 || (diet_templateObject27 = diet_taggedTemplateLiteral(["Frosty's frosty mug"]))));
    if (mug) this.mug = mug;
    var seasoning = menu.find(item => item.item === (0,template_string/* $item */.xr)(diet_templateObject28 || (diet_templateObject28 = diet_taggedTemplateLiteral(["Special Seasoning"]))));
    if (seasoning) this.seasoning = seasoning;
    var whetStone = menu.find(item => item.item === (0,template_string/* $item */.xr)(diet_templateObject29 || (diet_templateObject29 = diet_taggedTemplateLiteral(["whet stone"]))));
    if (whetStone) this.whetStone = whetStone;
    var aioli = menu.find(item => item.item === (0,template_string/* $item */.xr)(diet_templateObject30 || (diet_templateObject30 = diet_taggedTemplateLiteral(["mini kiwi aioli"]))));
    if (aioli) this.aioli = aioli;
    this.mayoLookup = new Map();

    if (installed()) {
      var _loop = function _loop() {
        var mayo = _arr2[_i2];
        var menuItem = menu.find(item => item.item === mayo);
        if (menuItem) _this.mayoLookup.set(mayo, menuItem);
      };

      for (var _i2 = 0, _arr2 = [Mayo.flex, Mayo.zapine]; _i2 < _arr2.length; _i2++) {
        _loop();
      }
    }

    this.menu = menu.filter(item => item.organ);

    if (menu.filter(item => (0,external_kolmafia_.historicalPrice)(item.item) === 0 || (0,external_kolmafia_.historicalAge)(item.item) >= 1).length > 100) {
      (0,external_kolmafia_.mallPrices)("food");
      (0,external_kolmafia_.mallPrices)("booze");
    }

    var spleenItems = menu.filter(item => (0,external_kolmafia_.itemType)(item.item) === "spleen item");
    spleenItems.sort((x, y) => -(this.consumptionValue(x) / x.item.spleen - this.consumptionValue(y) / y.item.spleen));

    if (spleenItems.length > 0) {
      // Marginal value for sliders and jars depends on our best unlimited spleen item.
      // TODO: spleenLimit() - mySpleenUse() is a poor estimate.
      var bestMarginalSpleenItem = spleenItems.find(spleenItem => spleenItem.maximum === undefined || spleenItem.maximum * spleenItem.size >= (0,external_kolmafia_.spleenLimit)() - (0,external_kolmafia_.mySpleenUse)());

      if (bestMarginalSpleenItem) {
        this.spleenValue = Math.max(0, this.consumptionValue(bestMarginalSpleenItem) / bestMarginalSpleenItem.size);
      }
    }
  }
  /**
   * Determine the value of consuming a menu item with any profitable helpers.
   *
   * @param menuItem Menu item to check.
   * @returns Value for consuming that menu item.
   */


  diet_createClass(DietPlanner, [{
    key: "consumptionValue",
    value: function consumptionValue(menuItem) {
      return this.consumptionHelpersAndValue(menuItem, {})[1];
    }
    /**
     * Determine which helpers will be used with a menu item and its resulting value.
     *
     * @param menuItem Menu item to check.
     * @param overrideModifiers Overrides for consumption modifiers, if any.
     * @returns Pair [array of helpers and base menu item, value].
     */

  }, {
    key: "consumptionHelpersAndValue",
    value: function consumptionHelpersAndValue(menuItem, overrideModifiers) {
      var _menuItem$additionalV, _menuItem$additionalV2;

      var helpers = [];

      if ((0,external_kolmafia_.itemType)(menuItem.item) === "food" && this.mayoLookup.size) {
        var mayo = menuItem.mayo ? this.mayoLookup.get(menuItem.mayo) : this.mayoLookup.get(Mayo.flex);
        if (mayo) helpers.push(mayo);
      }

      var defaultModifiers = diet_objectSpread({
        forkMug: false,
        seasoning: this.seasoning ? helpers.includes(this.seasoning) : false,
        whetStone: this.whetStone ? helpers.includes(this.whetStone) : false,
        aioli: this.aioli ? helpers.includes(this.aioli) : false,
        mayoflex: this.mayoLookup.size ? helpers.some(item => item.item === Mayo.flex) : false,
        refinedPalate: (0,lib/* have */.lf)((0,template_string/* $effect */._G)(diet_templateObject31 || (diet_templateObject31 = diet_taggedTemplateLiteral(["Refined Palate"])))),
        garish: (0,lib/* have */.lf)((0,template_string/* $effect */._G)(diet_templateObject32 || (diet_templateObject32 = diet_taggedTemplateLiteral(["Gar-ish"])))),
        saucemaven: (0,lib/* have */.lf)((0,template_string/* $skill */.tm)(diet_templateObject33 || (diet_templateObject33 = diet_taggedTemplateLiteral(["Saucemaven"])))),
        pinkyRing: (0,lib/* have */.lf)((0,template_string/* $item */.xr)(diet_templateObject34 || (diet_templateObject34 = diet_taggedTemplateLiteral(["mafia pinky ring"])))) && (0,external_kolmafia_.canEquip)((0,template_string/* $item */.xr)(diet_templateObject35 || (diet_templateObject35 = diet_taggedTemplateLiteral(["mafia pinky ring"])))),
        tuxedoShirt: (0,lib/* have */.lf)((0,template_string/* $item */.xr)(diet_templateObject36 || (diet_templateObject36 = diet_taggedTemplateLiteral(["tuxedo shirt"])))) && (0,external_kolmafia_.canEquip)((0,template_string/* $item */.xr)(diet_templateObject37 || (diet_templateObject37 = diet_taggedTemplateLiteral(["tuxedo shirt"]))))
      }, overrideModifiers);

      if (this.seasoning && (0,external_kolmafia_.itemType)(menuItem.item) === "food" && this.mpa * (_expectedAdventures(menuItem.item, diet_objectSpread(diet_objectSpread({}, defaultModifiers), {}, {
        seasoning: true
      })) - _expectedAdventures(menuItem.item, diet_objectSpread(diet_objectSpread({}, defaultModifiers), {}, {
        seasoning: false
      }))) > this.seasoning.price()) {
        helpers.push(this.seasoning);
      }

      if (this.whetStone && (0,external_kolmafia_.itemType)(menuItem.item) === "food" && this.mpa > this.whetStone.price()) {
        helpers.push(this.whetStone);
      }

      if (this.aioli && (0,external_kolmafia_.itemType)(menuItem.item) === "food" && this.mpa * menuItem.item.fullness > this.aioli.price()) {
        helpers.push(this.aioli);
      }

      var forkMug = (0,external_kolmafia_.itemType)(menuItem.item) === "food" ? this.fork : (0,external_kolmafia_.itemType)(menuItem.item) === "booze" ? this.mug : null;
      var forkMugPrice = forkMug ? forkMug.price() : Infinity;
      var baseCost = menuItem.price() + (0,utils/* sum */.Sm)(helpers, item => item.price());
      var valueRaw = _expectedAdventures(menuItem.item, defaultModifiers) * this.mpa - baseCost + ((_menuItem$additionalV = menuItem.additionalValue) !== null && _menuItem$additionalV !== void 0 ? _menuItem$additionalV : 0);
      var valueForkMug = _expectedAdventures(menuItem.item, diet_objectSpread(diet_objectSpread({}, defaultModifiers), {}, {
        forkMug: true
      })) * this.mpa - baseCost - forkMugPrice + ((_menuItem$additionalV2 = menuItem.additionalValue) !== null && _menuItem$additionalV2 !== void 0 ? _menuItem$additionalV2 : 0);
      var valueSpleen = (0,template_string/* $items */.vS)(diet_templateObject38 || (diet_templateObject38 = diet_taggedTemplateLiteral(["jar of fermented pickle juice, extra-greasy slider"]))).includes(menuItem.item) ? 5 * this.spleenValue : 0;
      return forkMug && valueForkMug > valueRaw ? [[].concat(helpers, [forkMug, menuItem]), valueForkMug + valueSpleen] : [[].concat(helpers, [menuItem]), valueRaw + valueSpleen];
    }
    /**
     * Plan an individual organ.
     *
     * @param organ Organ to plan
     * @param capacity Organ capacity.
     * @param overrideModifiers Overrides for consumption modifiers, if any.
     * @returns Pair of [value, menu items and quantities].
     */

  }, {
    key: "planOrgan",
    value: function planOrgan(organ, capacity) {
      var overrideModifiers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var submenu = this.menu.filter(menuItem => menuItem.organ === organ && (0,external_kolmafia_.myLevel)() >= menuItem.item.levelreq);
      var knapsackValues = submenu.map(menuItem => [].concat(diet_toConsumableArray(this.consumptionHelpersAndValue(menuItem, overrideModifiers)), [menuItem.size, menuItem.maximum]));
      return knapsack(knapsackValues, capacity);
    }
    /**
     * Plan organs.
     *
     * @param organCapacities Organ capacities.
     * @param overrideModifiers Overrides for consumption modifiers, if any.
     * @returns Pair of [value, menu items and quantities].
     */

  }, {
    key: "planOrgans",
    value: function planOrgans(organCapacities) {
      var _ref5;

      var overrideModifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var valuePlans = organCapacities.map(_ref => {
        var _ref2 = diet_slicedToArray(_ref, 2),
            organ = _ref2[0],
            capacity = _ref2[1];

        return this.planOrgan(organ, capacity, overrideModifiers);
      });
      return [(0,utils/* sum */.Sm)(valuePlans, _ref3 => {
        var _ref4 = diet_slicedToArray(_ref3, 1),
            value = _ref4[0];

        return value;
      }), (_ref5 = []).concat.apply(_ref5, diet_toConsumableArray(valuePlans.map(_ref6 => {
        var _ref7 = diet_slicedToArray(_ref6, 2),
            plan = _ref7[1];

        return plan;
      })))];
    }
    /**
     * Plan organs, retrying with and without each trial item. Runtime is
     * proportional to 2 ^ trialItems.length.
     *
     * @param organCapacities Organ capacities.
     * @param trialItems Items to rerun solver with and without.
     * @param overrideModifiers Overrides for consumption modifiers, if any.
     * @returns Pair of [value, menu items and quantities].
     */

  }, {
    key: "planOrgansWithTrials",
    value: function planOrgansWithTrials(organCapacities, trialItems, overrideModifiers) {
      if (trialItems.length === 0) {
        return this.planOrgans(organCapacities, overrideModifiers);
      }

      var _trialItems$ = diet_slicedToArray(trialItems[0], 2),
          trialItem = _trialItems$[0],
          organSizes = _trialItems$[1];

      if (trialItem.maximum !== undefined && trialItem.maximum <= 0) {
        return this.planOrgansWithTrials(organCapacities, trialItems.slice(1), overrideModifiers);
      }

      var organCapacitiesWithMap = new Map(organCapacities);

      var _iterator = diet_createForOfIteratorHelper(organSizes),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = diet_slicedToArray(_step.value, 2),
              organ = _step$value[0],
              size = _step$value[1];

          var current = organCapacitiesWithMap.get(organ);

          if (current === undefined) {
            // Organs with no capacity are excluded from the organCapacities map, so this item excluded from the trial.
            // Solves the problem with the diet offering to eat toasted brie after exiting Shrunken Adventurer with 20/15 fullness.
            return this.planOrgansWithTrials(organCapacities, trialItems.slice(1), overrideModifiers);
          }

          organCapacitiesWithMap.set(organ, current - size);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var organCapacitiesWith = diet_toConsumableArray(organCapacitiesWithMap);

      var isRefinedPalate = trialItem.item === (0,template_string/* $item */.xr)(diet_templateObject39 || (diet_templateObject39 = diet_taggedTemplateLiteral(["pocket wish"]))) && trialItem.effect === (0,template_string/* $effect */._G)(diet_templateObject40 || (diet_templateObject40 = diet_taggedTemplateLiteral(["Refined Palate"]))) || trialItem.item === (0,template_string/* $item */.xr)(diet_templateObject41 || (diet_templateObject41 = diet_taggedTemplateLiteral(["toasted brie"])));
      var isGarish = trialItem.item === (0,template_string/* $item */.xr)(diet_templateObject42 || (diet_templateObject42 = diet_taggedTemplateLiteral(["pocket wish"]))) && trialItem.effect === (0,template_string/* $effect */._G)(diet_templateObject43 || (diet_templateObject43 = diet_taggedTemplateLiteral(["Gar-ish"]))) || trialItem.item === (0,template_string/* $item */.xr)(diet_templateObject44 || (diet_templateObject44 = diet_taggedTemplateLiteral(["potion of the field gar"])));

      var _this$planOrgansWithT = this.planOrgansWithTrials(organCapacities, trialItems.slice(1), overrideModifiers),
          _this$planOrgansWithT2 = diet_slicedToArray(_this$planOrgansWithT, 2),
          valueWithout = _this$planOrgansWithT2[0],
          planWithout = _this$planOrgansWithT2[1];

      var _this$planOrgansWithT3 = this.planOrgansWithTrials(organCapacitiesWith, trialItems.slice(1), diet_objectSpread(diet_objectSpread(diet_objectSpread({}, overrideModifiers), isRefinedPalate ? {
        refinedPalate: true
      } : {}), isGarish ? {
        garish: true
      } : {})),
          _this$planOrgansWithT4 = diet_slicedToArray(_this$planOrgansWithT3, 2),
          valueWith = _this$planOrgansWithT4[0],
          planWith = _this$planOrgansWithT4[1];

      var _this$consumptionHelp = this.consumptionHelpersAndValue(trialItem, {}),
          _this$consumptionHelp2 = diet_slicedToArray(_this$consumptionHelp, 2),
          helpersAndItem = _this$consumptionHelp2[0],
          value = _this$consumptionHelp2[1];

      return valueWithout > valueWith + value ? [valueWithout, planWithout] : [valueWith + value, [].concat(diet_toConsumableArray(planWith), [[helpersAndItem, 1]])];
    }
  }]);

  return DietPlanner;
}();
/**
 * Because the knapsack solver is one-dimensional only, any items that touch
 * multiple organs have to be treated specially. What we do is run the knapsack
 * solver multiple times, trying with + without each interacting item.
 */


var interactingItems = [[(0,template_string/* $item */.xr)(diet_templateObject45 || (diet_templateObject45 = diet_taggedTemplateLiteral(["spice melange"]))), [["food", -3], ["booze", -3]]], [(0,template_string/* $item */.xr)(_templateObject46 || (_templateObject46 = diet_taggedTemplateLiteral(["Ultra Mega Sour Ball"]))), [["food", -3], ["booze", -3]]], [(0,template_string/* $item */.xr)(_templateObject47 || (_templateObject47 = diet_taggedTemplateLiteral(["The Plumber's mushroom stew"]))), [["food", 3], ["booze", -1]]], [(0,template_string/* $item */.xr)(_templateObject48 || (_templateObject48 = diet_taggedTemplateLiteral(["The Mad Liquor"]))), [["food", -1], ["booze", 3]]], [(0,template_string/* $item */.xr)(_templateObject49 || (_templateObject49 = diet_taggedTemplateLiteral(["Doc Clock's thyme cocktail"]))), [["food", -2], ["booze", 4]]], [(0,template_string/* $item */.xr)(_templateObject50 || (_templateObject50 = diet_taggedTemplateLiteral(["Mr. Burnsger"]))), [["food", 4], ["booze", -2]]], [(0,template_string/* $effect */._G)(_templateObject51 || (_templateObject51 = diet_taggedTemplateLiteral(["Refined Palate"]))), []], [(0,template_string/* $item */.xr)(_templateObject52 || (_templateObject52 = diet_taggedTemplateLiteral(["toasted brie"]))), [["food", 2]]], [(0,template_string/* $effect */._G)(_templateObject53 || (_templateObject53 = diet_taggedTemplateLiteral(["Gar-ish"]))), []], [(0,template_string/* $item */.xr)(_templateObject54 || (_templateObject54 = diet_taggedTemplateLiteral(["potion of the field gar"]))), []]];
/**
 * Plan out an optimal diet using a knapsack algorithm.
 *
 * @param mpa Meat per adventure value.
 * @param menu Array of MenuItems to consider for diet purposes.
 * @param organCapacities Optional override of each organ's capacity.
 * @returns Array of [menu item and helpers, count].
 */

function planDiet(mpa, menu) {
  var organCapacities = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [["food", null], ["booze", null], ["spleen item", null]];
  // FIXME: Figure out a better way to handle overfull organs (e.g. coming out of Ed).
  var resolvedOrganCapacities = organCapacities.map(_ref8 => {
    var _ref9 = diet_slicedToArray(_ref8, 2),
        organ = _ref9[0],
        size = _ref9[1];

    return [organ, size !== null && size !== void 0 ? size : organ === "food" ? (0,external_kolmafia_.fullnessLimit)() - (0,external_kolmafia_.myFullness)() : organ === "booze" ? (0,external_kolmafia_.inebrietyLimit)() - (0,external_kolmafia_.myInebriety)() : organ === "spleen item" ? (0,external_kolmafia_.spleenLimit)() - (0,external_kolmafia_.mySpleenUse)() : 0];
  });
  /**
   * Per above description, separate out items with cross-organ interaction
   * ("interacting items") for special treatment. These will be checked by
   * running the solver several times.
   */

  var includedInteractingItems = menu.map(menuItem => {
    var interacting = interactingItems.find(_ref10 => {
      var _ref11 = diet_slicedToArray(_ref10, 1),
          itemOrEffect = _ref11[0];

      return menuItem.item === itemOrEffect || menuItem.item === (0,template_string/* $item */.xr)(_templateObject55 || (_templateObject55 = diet_taggedTemplateLiteral(["pocket wish"]))) && menuItem.effect === itemOrEffect;
    });

    if (interacting) {
      var _interacting = diet_slicedToArray(interacting, 2),
          organSizes = _interacting[1];

      return [menuItem, organSizes];
    } else {
      return null;
    }
  }).filter(value => value !== null); // Filter out interacting items from natural consideration.

  var dietPlanner = new DietPlanner(mpa, menu.filter(menuItem => !includedInteractingItems.some(_ref12 => {
    var _ref13 = diet_slicedToArray(_ref12, 1),
        interacting = _ref13[0];

    return interacting === menuItem;
  })));
  /**
   * Because our knapsack solver is one-dimensional, we have to consider
   * each organ separately. Since there are no spleen items that affect
   * stomach/liver, we consider those two first, with an approximation of the
   * value of spleen-cleaning. Afterwards, we see how much spleen we have and
   * plan that.
   */

  var _dietPlanner$planOrga = dietPlanner.planOrgansWithTrials(resolvedOrganCapacities.filter(_ref14 => {
    var _ref15 = diet_slicedToArray(_ref14, 2),
        organ = _ref15[0],
        capacity = _ref15[1];

    return ["food", "booze"].includes(organ) && capacity >= 0;
  }), includedInteractingItems, {}),
      _dietPlanner$planOrga2 = diet_slicedToArray(_dietPlanner$planOrga, 2),
      planFoodBooze = _dietPlanner$planOrga2[1];

  var spleenCapacity = resolvedOrganCapacities.find(_ref16 => {
    var _ref17 = diet_slicedToArray(_ref16, 1),
        organ = _ref17[0];

    return organ === "spleen item";
  });

  if (spleenCapacity) {
    // Count sliders and pickle juice, figure out how much extra spleen we got.
    var additionalSpleen = (0,utils/* sum */.Sm)(planFoodBooze, _ref18 => {
      var _ref19 = diet_slicedToArray(_ref18, 2),
          items = _ref19[0],
          number = _ref19[1];

      return items.some(menuItem => (0,template_string/* $items */.vS)(_templateObject56 || (_templateObject56 = diet_taggedTemplateLiteral(["jar of fermented pickle juice, extra-greasy slider"]))).includes(menuItem.item)) ? 5 * number : 0;
    });

    var _spleenCapacity = diet_slicedToArray(spleenCapacity, 2),
        availableSpleen = _spleenCapacity[1];

    var _dietPlanner$planOrga3 = dietPlanner.planOrgan("spleen item", availableSpleen + additionalSpleen),
        _dietPlanner$planOrga4 = diet_slicedToArray(_dietPlanner$planOrga3, 2),
        planSpleen = _dietPlanner$planOrga4[1];

    return [].concat(diet_toConsumableArray(planFoodBooze), diet_toConsumableArray(planSpleen));
  } else {
    return planFoodBooze;
  }
}

var DietEntry = /*#__PURE__*/function () {
  function DietEntry(menuItems, quantity) {
    diet_classCallCheck(this, DietEntry);

    diet_defineProperty(this, "quantity", void 0);

    diet_defineProperty(this, "menuItems", void 0);

    this.menuItems = Object.freeze(menuItems);
    this.quantity = quantity;
  }

  diet_createClass(DietEntry, [{
    key: "target",
    value: function target() {
      return this.menuItems[this.menuItems.length - 1];
    }
  }, {
    key: "helpers",
    value: function helpers() {
      if (this.menuItems.length > 1) {
        return this.menuItems.slice(0, -1);
      }

      return [];
    }
  }, {
    key: "expectedAdventures",
    value: function expectedAdventures(diet) {
      {
        if (this.menuItems.length === 0 || this.quantity === 0) {
          return 0;
        } else {
          var items = this.menuItems.map(m => m.item);
          var targetItem = this.menuItems[this.menuItems.length - 1].item;
          var fork = (0,external_kolmafia_.itemType)(targetItem) === "food" && items.includes((0,template_string/* $item */.xr)(_templateObject57 || (_templateObject57 = diet_taggedTemplateLiteral(["Ol' Scratch's salad fork"]))));
          var mug = (0,external_kolmafia_.itemType)(targetItem) === "booze" && items.includes((0,template_string/* $item */.xr)(_templateObject58 || (_templateObject58 = diet_taggedTemplateLiteral(["Frosty's frosty mug"]))));
          return this.quantity * _expectedAdventures(this.menuItems[this.menuItems.length - 1].item, {
            forkMug: fork || mug,
            seasoning: items.includes((0,template_string/* $item */.xr)(_templateObject59 || (_templateObject59 = diet_taggedTemplateLiteral(["Special Seasoning"])))),
            whetStone: items.includes((0,template_string/* $item */.xr)(_templateObject60 || (_templateObject60 = diet_taggedTemplateLiteral(["whet stone"])))),
            aioli: items.includes((0,template_string/* $item */.xr)(_templateObject61 || (_templateObject61 = diet_taggedTemplateLiteral(["mini kiwi aioli"])))),
            mayoflex: items.includes(Mayo.flex),
            refinedPalate: diet.refinedPalate,
            garish: diet.garish,
            saucemaven: diet.saucemaven,
            pinkyRing: diet.pinkyRing,
            tuxedoShirt: diet.tuxedoShirt
          });
        }
      }
    }
  }, {
    key: "expectedValue",
    value: function expectedValue(mpa, diet) {
      var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "gross";
      var gross = mpa * this.expectedAdventures(diet) + this.quantity * (0,utils/* sum */.Sm)(this.menuItems, menuItem => {
        var _menuItem$additionalV3;

        return (_menuItem$additionalV3 = menuItem.additionalValue) !== null && _menuItem$additionalV3 !== void 0 ? _menuItem$additionalV3 : 0;
      });

      if (method === "gross") {
        return gross;
      } else {
        return gross - this.expectedPrice();
      }
    }
  }, {
    key: "expectedPrice",
    value: function expectedPrice() {
      return this.quantity * (0,utils/* sum */.Sm)(this.menuItems, menuItem => menuItem.price());
    }
  }]);

  return DietEntry;
}();
/**
 * A representation of a potential diet
 */


var Diet = /*#__PURE__*/function () {
  function Diet() {
    var entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    diet_classCallCheck(this, Diet);

    diet_defineProperty(this, "entries", void 0);

    this.entries = entries;
  }

  diet_createClass(Diet, [{
    key: "refinedPalate",
    get: function get() {
      return this.entries.some(dietEntry => dietEntry.menuItems.some(trialItem => trialItem.item === (0,template_string/* $item */.xr)(_templateObject62 || (_templateObject62 = diet_taggedTemplateLiteral(["pocket wish"]))) && trialItem.effect === (0,template_string/* $effect */._G)(_templateObject63 || (_templateObject63 = diet_taggedTemplateLiteral(["Refined Palate"]))) || trialItem.item === (0,template_string/* $item */.xr)(_templateObject64 || (_templateObject64 = diet_taggedTemplateLiteral(["toasted brie"])))));
    }
  }, {
    key: "garish",
    get: function get() {
      return this.entries.some(dietEntry => dietEntry.menuItems.some(trialItem => trialItem.item === (0,template_string/* $item */.xr)(_templateObject65 || (_templateObject65 = diet_taggedTemplateLiteral(["pocket wish"]))) && trialItem.effect === (0,template_string/* $effect */._G)(_templateObject66 || (_templateObject66 = diet_taggedTemplateLiteral(["Gar-ish"]))) || trialItem.item === (0,template_string/* $item */.xr)(_templateObject67 || (_templateObject67 = diet_taggedTemplateLiteral(["potion of the field gar"])))));
    }
  }, {
    key: "saucemaven",
    get: function get() {
      return (0,lib/* have */.lf)((0,template_string/* $skill */.tm)(_templateObject68 || (_templateObject68 = diet_taggedTemplateLiteral(["Saucemaven"]))));
    }
  }, {
    key: "tuxedoShirt",
    get: function get() {
      return (0,lib/* have */.lf)((0,template_string/* $item */.xr)(_templateObject69 || (_templateObject69 = diet_taggedTemplateLiteral(["tuxedo shirt"])))) && (0,external_kolmafia_.canEquip)((0,template_string/* $item */.xr)(_templateObject70 || (_templateObject70 = diet_taggedTemplateLiteral(["tuxedo shirt"]))));
    }
  }, {
    key: "pinkyRing",
    get: function get() {
      return (0,lib/* have */.lf)((0,template_string/* $item */.xr)(_templateObject71 || (_templateObject71 = diet_taggedTemplateLiteral(["mafia pinky ring"])))) && (0,external_kolmafia_.canEquip)((0,template_string/* $item */.xr)(_templateObject72 || (_templateObject72 = diet_taggedTemplateLiteral(["mafia pinky ring"]))));
    }
  }, {
    key: "expectedAdventures",
    value: function expectedAdventures() {
      return (0,utils/* sum */.Sm)(this.entries, dietEntry => dietEntry.expectedAdventures(this));
    }
  }, {
    key: "expectedValue",
    value: function expectedValue(mpa) {
      var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "gross";
      return (0,utils/* sum */.Sm)(this.entries, dietEntry => dietEntry.expectedValue(mpa, this, method));
    }
  }, {
    key: "expectedPrice",
    value: function expectedPrice() {
      return (0,utils/* sum */.Sm)(this.entries, dietEntry => dietEntry.expectedPrice());
    }
  }, {
    key: "copy",
    value: function copy() {
      return new Diet(diet_toConsumableArray(this.entries));
    }
  }], [{
    key: "from",
    value: function from(rawDiet) {
      var diet = rawDiet.map(item => {
        var _item = diet_slicedToArray(item, 2),
            menuItems = _item[0],
            quantity = _item[1];

        return new DietEntry(menuItems, quantity);
      });
      return new Diet(diet);
    }
  }, {
    key: "plan",
    value: function plan(mpa, menu) {
      var organCapacities = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        food: "auto",
        booze: "auto",
        spleen: "auto"
      };
      var food = organCapacities.food,
          booze = organCapacities.booze,
          spleen = organCapacities.spleen;
      var plannerCapacity = [];

      if (food) {
        plannerCapacity.push(["food", food === "auto" ? null : food]);
      }

      if (booze) {
        plannerCapacity.push(["booze", booze === "auto" ? null : booze]);
      }

      if (spleen) {
        plannerCapacity.push(["spleen item", spleen === "auto" ? null : spleen]);
      }

      return Diet.from(planDiet(mpa, menu, plannerCapacity));
    }
  }]);

  return Diet;
}();
;// CONCATENATED MODULE: ./node_modules/libram/dist/Dungeon.js
var Dungeon_templateObject, Dungeon_templateObject2, Dungeon_templateObject3;

function Dungeon_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function Dungeon_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = Dungeon_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function Dungeon_toConsumableArray(arr) { return Dungeon_arrayWithoutHoles(arr) || Dungeon_iterableToArray(arr) || Dungeon_unsupportedIterableToArray(arr) || Dungeon_nonIterableSpread(); }

function Dungeon_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function Dungeon_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Dungeon_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Dungeon_arrayLikeToArray(o, minLen); }

function Dungeon_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function Dungeon_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Dungeon_arrayLikeToArray(arr); }

function Dungeon_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function Dungeon_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Dungeon_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function Dungeon_createClass(Constructor, protoProps, staticProps) { if (protoProps) Dungeon_defineProperties(Constructor.prototype, protoProps); if (staticProps) Dungeon_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function Dungeon_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






var Dungeon = /*#__PURE__*/function () {
  /**
   * Creates dungeon object for managing clan dungeons
   *
   * @param name_ name_ of the dungeon in question
   * @param loot Distributable loot dropped by bosses in dungeon
   * @param openAction String action used in form submission to open dungeon
   * @param closeAction String action used in form submission to close dungeon
   * @param openCost Meat cost of opening dungeon
   * @param openImage Image text to search clan_basement.php for to check if dungeon is open
   * @param closedImage Image text to search clan_basement.php for to check if dungeon is closed
   */
  function Dungeon(name_, loot, openAction, closeAction, openCost, openImage, closedImage) {
    Dungeon_classCallCheck(this, Dungeon);

    Dungeon_defineProperty(this, "name_", void 0);

    Dungeon_defineProperty(this, "loot", void 0);

    Dungeon_defineProperty(this, "openAction", void 0);

    Dungeon_defineProperty(this, "closeAction", void 0);

    Dungeon_defineProperty(this, "openCost", void 0);

    Dungeon_defineProperty(this, "openImage", void 0);

    Dungeon_defineProperty(this, "closedImage", void 0);

    this.name_ = name_;
    this.loot = loot;
    this.openAction = openAction;
    this.closeAction = closeAction;
    this.openCost = openCost;
    this.openImage = openImage;
    this.closedImage = closedImage;
  }

  Dungeon_createClass(Dungeon, [{
    key: "possibleLoot",
    get: function get() {
      return Dungeon_toConsumableArray(this.loot);
    }
  }, {
    key: "name",
    get: function get() {
      return this.name_;
    }
  }, {
    key: "distribute",
    value: function distribute(idOrname_) {
      var loot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.loot;
      var distributeAllOfAGivenItem = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !(loot instanceof Map);
      var player = (0,lib/* getPlayerFromIdOrName */.Qq)(idOrname_);
      var lootList = loot instanceof Map ? (0,utils/* countedMapToArray */.Y8)(loot) : Array.isArray(loot) ? loot : [loot];
      var badLoot = lootList.find(lootItem => !this.loot.includes(lootItem));

      if (badLoot) {
        throw new Error("".concat(badLoot, " is not a valid piece of dungeon loot"));
      }

      var pageText = (0,external_kolmafia_.visitUrl)("clan_basement.php");

      if (!pageText.match(new RegExp(player.name, "i"))) {
        throw new Error("".concat(player.name, " cannot be distributed loot from ").concat((0,external_kolmafia_.getClanName)()));
      }

      var itemname_s = (0,external_kolmafia_.xpath)(pageText, "//tr/td[2]/b/text()");
      var whichLoots = (0,external_kolmafia_.xpath)(pageText, '//form[@action="clan_basement.php"]//input[@type="hidden"][@name_="whichloot"]/@value');
      itemname_s.forEach((itemname_, index) => {
        if (lootList.includes((0,external_kolmafia_.toItem)(itemname_))) {
          (0,external_kolmafia_.visitUrl)("clan_basement.php?whichloot=".concat(whichLoots[index], "&recipient=").concat(player.id));
          if (!distributeAllOfAGivenItem) lootList.splice(lootList.indexOf((0,external_kolmafia_.toItem)(itemname_)));
        }
      });
    }
    /**
     * Close this dungeon
     *
     * @returns Whether the dungeon is now closed
     */

  }, {
    key: "close",
    value: function close() {
      (0,external_kolmafia_.visitUrl)("clan_basement.php?action=".concat(this.closeAction, "&confirm=true"), true);
      var pageText = (0,external_kolmafia_.visitUrl)("clan_basement.php");
      return pageText.includes(this.closedImage);
    }
    /**
     * Open an instance of this dungeon
     *
     * @param paymentPolicy How much meat should we put into the clan stash to open this dungeon?
     * @returns Whether the dungeon is now open
     */

  }, {
    key: "open",
    value: function open() {
      var paymentPolicy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Difference";
      var pageText = (0,external_kolmafia_.visitUrl)("clan_basement.php");
      if (pageText.includes(this.openImage)) return true;
      var clan = Clan/* Clan.get */._.get();

      if (paymentPolicy === "All") {
        clan.putMeatInCoffer(this.openCost);
      } else {
        var stashMeat = clan.getMeatInCoffer();
        var payDifference = this.openCost - stashMeat;

        if (payDifference > 0) {
          if (paymentPolicy === "None") return false;
          clan.putMeatInCoffer(payDifference);
        }
      }

      (0,external_kolmafia_.visitUrl)("clan_basement.php?action=".concat(this.openAction), true);
      return (0,external_kolmafia_.visitUrl)("clan_basement.php").includes(this.openImage);
    }
    /**
     * @returns A counted map of all loot from this dungeon eligible for distribution
     */

  }, {
    key: "findLoot",
    value: function findLoot() {
      var result = new Map();
      var pageText = (0,external_kolmafia_.visitUrl)("clan_basement.php");

      var _iterator = Dungeon_createForOfIteratorHelper(this.loot),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _pageText$match$lengt, _pageText$match;

          var lootItem = _step.value;
          result.set(lootItem, (_pageText$match$lengt = (_pageText$match = pageText.match(new RegExp(lootItem.name, "g"))) === null || _pageText$match === void 0 ? void 0 : _pageText$match.length) !== null && _pageText$match$lengt !== void 0 ? _pageText$match$lengt : 0);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return result;
    }
  }]);

  return Dungeon;
}();
var Dreadsylvania = new Dungeon("Dreadsylvania", (0,template_string/* $items */.vS)(Dungeon_templateObject || (Dungeon_templateObject = Dungeon_taggedTemplateLiteral(["Great Wolf's headband, Great Wolf's right paw, Great Wolf's left paw, Great Wolf's lice, Great Wolf's rocket launcher, Great Wolf's beastly trousers, Drapes-You-Regally, Warms-Your-Tush, Covers-Your-Head, Protects-Your-Junk, Quiets-Your-Steps, Helps-You-Sleep, Mayor Ghost's khakis, Mayor Ghost's cloak, Mayor Ghost's toupee, Mayor Ghost's scissors, Mayor Ghost's sash, Mayor Ghost's gavel, zombie mariachi hat, zombie accordion, zombie mariachi pants, HOA regulation book, HOA zombie eyes, HOA citation pad, Unkillable Skeleton's skullcap, Unkillable Skeleton's shinguards, Unkillable Skeleton's breastplate, Unkillable Skeleton's shield, Unkillable Skeleton's sawsword, Unkillable Skeleton's restless leg, skull capacitor, Thunkula's drinking cap, Drunkula's silky pants, Drunkula's cape, Drunkula's ring of haze, Drunkula's wineglass, Drunkula's bell, bottle of Bloodweiser, bottle of Bloodweiser, bottle of Bloodweiser, bottle of Bloodweiser, electric Kool-Aid, electric Kool-Aid, electric Kool-Aid, electric Kool-Aid, ghost pepper, ghost pepper, ghost pepper, ghost pepper, Gets-You-Drunk, Gets-You-Drunk, Gets-You-Drunk, Gets-You-Drunk, wriggling severed nose, wriggling severed nose, wriggling severed nose, wriggling severed nose, Hunger\u2122 Sauce, Hunger\u2122 Sauce, Hunger\u2122 Sauce, Hunger\u2122 Sauce"]))), "translatemap", "foldmap", 1000000, "dvmap.gif", "foldmap.gif");
var Hobopolis = new Dungeon("Hobopolis", (0,template_string/* $items */.vS)(Dungeon_templateObject2 || (Dungeon_templateObject2 = Dungeon_taggedTemplateLiteral(["Ol' Scratch's ash can, Ol' Scratch's ol' britches, Ol' Scratch's stovepipe hat, Ol' Scratch's infernal pitchfork, Ol' Scratch's manacles, Ol' Scratch's stove door, Frosty's carrot, Frosty's nailbat, Frosty's old silk hat, Frosty's arm, Frosty's iceball, Frosty's snowball sack, Oscus's dumpster waders, Oscus's pelt, Wand of Oscus, Oscus's flypaper pants, Oscus's garbage can lid, Oscus's neverending soda, Zombo's grievous greaves, Zombo's shield, Zombo's skullcap, Zombo's empty eye, Zombo's shoulder blade, Zombo's skull ring, Chester's bag of candy, Chester's cutoffs, Chester's moustache, Chester's Aquarius medallion, Chester's muscle shirt, Chester's sunglasses, Hodgman's bow tie, Hodgman's porkpie hat, Hodgman's lobsterskin pants, Hodgman's almanac, Hodgman's lucky sock, Hodgman's metal detector, Hodgman's varcolac paw, Hodgman's harmonica, Hodgman's garbage sticker, Hodgman's cane, Hodgman's whackin' stick, Hodgman's disgusting technicolor overcoat, Hodgman's imaginary hamster"]))), "cleansewer", "floodsewer", 1000000, "opengrate.gif", "sewergrate.gif");
var SlimeTube = new Dungeon("The Slime Tube", (0,template_string/* $items */.vS)(Dungeon_templateObject3 || (Dungeon_templateObject3 = Dungeon_taggedTemplateLiteral(["slime-soaked brain, slime-soaked hypophysis, slime-soaked sweat gland, squirming Slime larva, caustic slime nodule, caustic slime nodule, hardened slime belt, hardened slime hat, hardened slime pants"]))), "cleanspot", "sealtube", 250000, "slimehole.gif", "greasespot.gif");
;// CONCATENATED MODULE: ./node_modules/libram/dist/mood.js
var mood_templateObject, mood_templateObject2, mood_templateObject3, mood_templateObject4, mood_templateObject5, mood_templateObject6, mood_templateObject7, mood_templateObject8, mood_templateObject9, mood_templateObject10;

function mood_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function mood_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? mood_ownKeys(Object(source), !0).forEach(function (key) { mood_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : mood_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function mood_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = mood_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function mood_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return mood_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return mood_arrayLikeToArray(o, minLen); }

function mood_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function mood_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function mood_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function mood_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function mood_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function mood_createClass(Constructor, protoProps, staticProps) { if (protoProps) mood_defineProperties(Constructor.prototype, protoProps); if (staticProps) mood_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }







var MpSource = /*#__PURE__*/function () {
  function MpSource() {
    mood_classCallCheck(this, MpSource);
  }

  mood_createClass(MpSource, [{
    key: "usesRemaining",
    value: function usesRemaining() {
      return 0;
    }
  }, {
    key: "availableMpMax",
    value: function availableMpMax() {
      return this.availableMpMin();
    }
  }]);

  return MpSource;
}();
var OscusSoda = /*#__PURE__*/function (_MpSource) {
  _inherits(OscusSoda, _MpSource);

  var _super = _createSuper(OscusSoda);

  function OscusSoda() {
    mood_classCallCheck(this, OscusSoda);

    return _super.apply(this, arguments);
  }

  mood_createClass(OscusSoda, [{
    key: "available",
    value: function available() {
      return (0,lib/* have */.lf)((0,template_string/* $item */.xr)(mood_templateObject || (mood_templateObject = mood_taggedTemplateLiteral(["Oscus's neverending soda"]))));
    }
  }, {
    key: "usesRemaining",
    value: function usesRemaining() {
      return (0,property.get)("oscusSodaUsed") ? 0 : 1;
    }
  }, {
    key: "availableMpMin",
    value: function availableMpMin() {
      return this.available() && this.usesRemaining() > 0 ? 200 : 0;
    }
  }, {
    key: "availableMpMax",
    value: function availableMpMax() {
      return this.available() && this.usesRemaining() > 0 ? 300 : 0;
    }
  }, {
    key: "execute",
    value: function execute() {
      (0,external_kolmafia_.use)((0,template_string/* $item */.xr)(mood_templateObject2 || (mood_templateObject2 = mood_taggedTemplateLiteral(["Oscus's neverending soda"]))));
    }
  }]);

  return OscusSoda;
}(MpSource);

mood_defineProperty(OscusSoda, "instance", new OscusSoda());

var MagicalSausages = /*#__PURE__*/function (_MpSource2) {
  _inherits(MagicalSausages, _MpSource2);

  var _super2 = _createSuper(MagicalSausages);

  function MagicalSausages() {
    mood_classCallCheck(this, MagicalSausages);

    return _super2.apply(this, arguments);
  }

  mood_createClass(MagicalSausages, [{
    key: "available",
    value: function available() {
      return (0,lib/* have */.lf)((0,template_string/* $item */.xr)(mood_templateObject3 || (mood_templateObject3 = mood_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"]))));
    }
  }, {
    key: "usesRemaining",
    value: function usesRemaining() {
      var maxSausages = (0,external_kolmafia_.availableAmount)((0,template_string/* $item */.xr)(mood_templateObject4 || (mood_templateObject4 = mood_taggedTemplateLiteral(["magical sausage"])))) + (0,external_kolmafia_.availableAmount)((0,template_string/* $item */.xr)(mood_templateObject5 || (mood_templateObject5 = mood_taggedTemplateLiteral(["magical sausage casing"]))));
      return this.available() ? (0,utils/* clamp */.uZ)(23 - (0,property.get)("_sausagesEaten"), 0, maxSausages) : 0;
    }
  }, {
    key: "availableMpMin",
    value: function availableMpMin() {
      return this.available() ? Math.min((0,external_kolmafia_.myMaxmp)(), 999) * this.usesRemaining() : 0;
    }
  }, {
    key: "execute",
    value: function execute() {
      var mpSpaceAvailable = (0,external_kolmafia_.myMaxmp)() - (0,external_kolmafia_.myMp)();
      if (mpSpaceAvailable < 700) return;
      var maxSausages = Math.min(this.usesRemaining(), Math.floor(((0,external_kolmafia_.myMaxmp)() - (0,external_kolmafia_.myMp)()) / Math.min((0,external_kolmafia_.myMaxmp)() - (0,external_kolmafia_.myMp)(), 999)));
      (0,external_kolmafia_.retrieveItem)(maxSausages, (0,template_string/* $item */.xr)(mood_templateObject6 || (mood_templateObject6 = mood_taggedTemplateLiteral(["magical sausage"]))));
      (0,external_kolmafia_.eat)(maxSausages, (0,template_string/* $item */.xr)(mood_templateObject7 || (mood_templateObject7 = mood_taggedTemplateLiteral(["magical sausage"]))));
    }
  }]);

  return MagicalSausages;
}(MpSource);

mood_defineProperty(MagicalSausages, "instance", new MagicalSausages());

var MoodElement = /*#__PURE__*/function () {
  function MoodElement() {
    mood_classCallCheck(this, MoodElement);
  }

  mood_createClass(MoodElement, [{
    key: "mpCostPerTurn",
    value: function mpCostPerTurn() {
      return 0;
    }
  }, {
    key: "turnIncrement",
    value: function turnIncrement() {
      return 1;
    }
  }]);

  return MoodElement;
}();

var SkillMoodElement = /*#__PURE__*/function (_MoodElement) {
  _inherits(SkillMoodElement, _MoodElement);

  var _super3 = _createSuper(SkillMoodElement);

  function SkillMoodElement(skill) {
    var _this;

    mood_classCallCheck(this, SkillMoodElement);

    _this = _super3.call(this);

    mood_defineProperty(_assertThisInitialized(_this), "skill", void 0);

    _this.skill = skill;
    return _this;
  }

  mood_createClass(SkillMoodElement, [{
    key: "mpCostPerTurn",
    value: function mpCostPerTurn() {
      var turns = (0,external_kolmafia_.turnsPerCast)(this.skill);
      return turns > 0 ? (0,external_kolmafia_.mpCost)(this.skill) / turns : 0;
    }
  }, {
    key: "turnIncrement",
    value: function turnIncrement() {
      return (0,external_kolmafia_.turnsPerCast)(this.skill);
    }
  }, {
    key: "execute",
    value: function execute(mood, ensureTurns) {
      var effect = (0,external_kolmafia_.toEffect)(this.skill);
      var initialTurns = (0,external_kolmafia_.haveEffect)(effect);
      if (!(0,external_kolmafia_.haveSkill)(this.skill)) return false;
      if (initialTurns >= ensureTurns) return true; // Deal with song slots.

      if (mood.options.songSlots.length > 0 && (0,lib/* isSong */.rU)(this.skill) && !(0,lib/* have */.lf)(effect)) {
        var activeSongs = (0,lib/* getActiveSongs */.b_)();

        var _iterator = mood_createForOfIteratorHelper(activeSongs),
            _step;

        try {
          var _loop = function _loop() {
            var song = _step.value;
            var slot = mood.options.songSlots.find(slot => slot.includes(song));

            if (!slot || slot.includes(effect)) {
              (0,external_kolmafia_.cliExecute)("shrug ".concat(song));
              return "break";
            }
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _ret = _loop();

            if (_ret === "break") break;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      var oldRemainingCasts = -1;
      var remainingCasts = Math.ceil((ensureTurns - (0,external_kolmafia_.haveEffect)(effect)) / (0,external_kolmafia_.turnsPerCast)(this.skill));

      while (remainingCasts > 0 && oldRemainingCasts !== remainingCasts) {
        var maxCasts = void 0;

        if ((0,external_kolmafia_.hpCost)(this.skill) > 0) {
          // FIXME: restore HP
          maxCasts = Math.max(0, Math.floor(((0,external_kolmafia_.myHp)() - 1) / (0,external_kolmafia_.hpCost)(this.skill))); // Do not allow ourselves to hit 0 hp
        } else {
          var cost = (0,external_kolmafia_.mpCost)(this.skill);
          maxCasts = Math.floor(Math.min(mood.availableMp(), (0,external_kolmafia_.myMp)()) / cost);

          if (maxCasts < remainingCasts) {
            var bestMp = Math.min(remainingCasts * (0,external_kolmafia_.mpCost)(this.skill), (0,external_kolmafia_.myMaxmp)());
            mood.moreMp(bestMp);
            maxCasts = Math.floor(Math.min(mood.availableMp(), (0,external_kolmafia_.myMp)()) / cost);
          }
        }

        var casts = (0,utils/* clamp */.uZ)(remainingCasts, 0, Math.min(100, maxCasts));
        (0,external_kolmafia_.useSkill)(casts, this.skill);
        oldRemainingCasts = remainingCasts;
        remainingCasts = Math.ceil((ensureTurns - (0,external_kolmafia_.haveEffect)(effect)) / (0,external_kolmafia_.turnsPerCast)(this.skill));
      }

      return (0,external_kolmafia_.haveEffect)(effect) > ensureTurns;
    }
  }]);

  return SkillMoodElement;
}(MoodElement);

var PotionMoodElement = /*#__PURE__*/function (_MoodElement2) {
  _inherits(PotionMoodElement, _MoodElement2);

  var _super4 = _createSuper(PotionMoodElement);

  function PotionMoodElement(potion, maxPricePerTurn) {
    var _this2;

    mood_classCallCheck(this, PotionMoodElement);

    _this2 = _super4.call(this);

    mood_defineProperty(_assertThisInitialized(_this2), "potion", void 0);

    mood_defineProperty(_assertThisInitialized(_this2), "maxPricePerTurn", void 0);

    _this2.potion = potion;
    _this2.maxPricePerTurn = maxPricePerTurn;
    return _this2;
  }

  mood_createClass(PotionMoodElement, [{
    key: "execute",
    value: function execute(mood, ensureTurns) {
      // FIXME: Smarter buying logic.
      // FIXME: Allow constructing stuff (e.g. snow cleats)
      var effect = (0,external_kolmafia_.effectModifier)(this.potion, "Effect");
      var effectTurns = (0,external_kolmafia_.haveEffect)(effect);
      var turnsPerUse = (0,external_kolmafia_.numericModifier)(this.potion, "Effect Duration");

      if ((0,external_kolmafia_.mallPrice)(this.potion) > this.maxPricePerTurn * turnsPerUse) {
        return false;
      } // integer part


      if (effectTurns < ensureTurns) {
        var uses = Math.floor((ensureTurns - effectTurns) / turnsPerUse);
        var quantityToBuy = (0,utils/* clamp */.uZ)(uses - (0,external_kolmafia_.availableAmount)(this.potion), 0, 100);
        (0,external_kolmafia_.buy)(quantityToBuy, this.potion, Math.floor(this.maxPricePerTurn * turnsPerUse));
        var quantityToUse = (0,utils/* clamp */.uZ)(uses, 0, (0,external_kolmafia_.availableAmount)(this.potion));
        (0,external_kolmafia_.use)(quantityToUse, this.potion);
      } // fractional part


      var remainingDifference = ensureTurns - (0,external_kolmafia_.haveEffect)(effect);

      if (remainingDifference > 0) {
        var maxPrice = Math.floor(this.maxPricePerTurn * remainingDifference);

        if ((0,external_kolmafia_.mallPrice)(this.potion) <= maxPrice) {
          if ((0,external_kolmafia_.availableAmount)(this.potion) || (0,external_kolmafia_.buy)(1, this.potion, maxPrice)) {
            (0,external_kolmafia_.use)(1, this.potion);
          }
        }
      }

      return (0,external_kolmafia_.haveEffect)(effect) >= ensureTurns;
    }
  }]);

  return PotionMoodElement;
}(MoodElement);

var GenieMoodElement = /*#__PURE__*/function (_MoodElement3) {
  _inherits(GenieMoodElement, _MoodElement3);

  var _super5 = _createSuper(GenieMoodElement);

  function GenieMoodElement(effect) {
    var _this3;

    mood_classCallCheck(this, GenieMoodElement);

    _this3 = _super5.call(this);

    mood_defineProperty(_assertThisInitialized(_this3), "effect", void 0);

    _this3.effect = effect;
    return _this3;
  }

  mood_createClass(GenieMoodElement, [{
    key: "execute",
    value: function execute(mood, ensureTurns) {
      if ((0,external_kolmafia_.haveEffect)(this.effect) >= ensureTurns) return true;
      var neededWishes = Math.ceil(((0,external_kolmafia_.haveEffect)(this.effect) - ensureTurns) / 20);
      var wishesToBuy = (0,utils/* clamp */.uZ)(neededWishes - (0,external_kolmafia_.availableAmount)((0,template_string/* $item */.xr)(mood_templateObject8 || (mood_templateObject8 = mood_taggedTemplateLiteral(["pocket wish"])))), 0, 20);
      (0,external_kolmafia_.buy)(wishesToBuy, (0,template_string/* $item */.xr)(mood_templateObject9 || (mood_templateObject9 = mood_taggedTemplateLiteral(["pocket wish"]))), 50000);
      var wishesToUse = (0,utils/* clamp */.uZ)(neededWishes, 0, (0,external_kolmafia_.availableAmount)((0,template_string/* $item */.xr)(mood_templateObject10 || (mood_templateObject10 = mood_taggedTemplateLiteral(["pocket wish"])))));

      for (; wishesToUse > 0; wishesToUse--) {
        (0,external_kolmafia_.cliExecute)("genie effect ".concat(this.effect.name));
      }

      return (0,external_kolmafia_.haveEffect)(this.effect) >= ensureTurns;
    }
  }]);

  return GenieMoodElement;
}(MoodElement);

var CustomMoodElement = /*#__PURE__*/function (_MoodElement4) {
  _inherits(CustomMoodElement, _MoodElement4);

  var _super6 = _createSuper(CustomMoodElement);

  function CustomMoodElement(effect, gainEffect) {
    var _this4;

    mood_classCallCheck(this, CustomMoodElement);

    _this4 = _super6.call(this);

    mood_defineProperty(_assertThisInitialized(_this4), "effect", void 0);

    mood_defineProperty(_assertThisInitialized(_this4), "gainEffect", void 0);

    _this4.effect = effect;
    _this4.gainEffect = gainEffect !== null && gainEffect !== void 0 ? gainEffect : () => (0,external_kolmafia_.cliExecute)(effect.default);
    return _this4;
  }

  mood_createClass(CustomMoodElement, [{
    key: "execute",
    value: function execute(mood, ensureTurns) {
      var currentTurns = (0,external_kolmafia_.haveEffect)(this.effect);
      var lastCurrentTurns = -1;

      while (currentTurns < ensureTurns && currentTurns !== lastCurrentTurns) {
        this.gainEffect();
        lastCurrentTurns = currentTurns;
        currentTurns = (0,external_kolmafia_.haveEffect)(this.effect);
      }

      return (0,external_kolmafia_.haveEffect)(this.effect) > ensureTurns;
    }
  }]);

  return CustomMoodElement;
}(MoodElement);

var AsdonMoodElement = /*#__PURE__*/function (_MoodElement5) {
  _inherits(AsdonMoodElement, _MoodElement5);

  var _super7 = _createSuper(AsdonMoodElement);

  function AsdonMoodElement(effect) {
    var _this5;

    var preferInventory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    mood_classCallCheck(this, AsdonMoodElement);

    _this5 = _super7.call(this);

    mood_defineProperty(_assertThisInitialized(_this5), "effect", void 0);

    mood_defineProperty(_assertThisInitialized(_this5), "preferInventory", void 0);

    _this5.effect = effect;
    _this5.preferInventory = preferInventory;
    return _this5;
  }

  mood_createClass(AsdonMoodElement, [{
    key: "execute",
    value: function execute(mood, ensureTurns) {
      return AsdonMartin.drive(this.effect, ensureTurns, this.preferInventory);
    }
  }]);

  return AsdonMoodElement;
}(MoodElement);
/**
 * Class representing a mood object. Add mood elements using the instance methods, which can be chained.
 */


var Mood = /*#__PURE__*/function () {
  /**
   * Construct a new Mood instance.
   *
   * @param options Options for mood.
   */
  function Mood() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    mood_classCallCheck(this, Mood);

    mood_defineProperty(this, "options", void 0);

    mood_defineProperty(this, "elements", []);

    this.options = mood_objectSpread(mood_objectSpread({}, Mood.defaultOptions), options);
  }
  /**
   * Get the MP available for casting skills.
   *
   * @returns Available MP
   */


  mood_createClass(Mood, [{
    key: "availableMp",
    value: function availableMp() {
      return this.options.useNativeRestores ? Infinity : (0,utils/* sum */.Sm)(this.options.mpSources, mpSource => mpSource.availableMpMin()) + Math.max((0,external_kolmafia_.myMp)() - this.options.reserveMp, 0);
    }
  }, {
    key: "moreMp",
    value: function moreMp(minimumTarget) {
      if ((0,external_kolmafia_.myMp)() >= minimumTarget) return;

      var _iterator2 = mood_createForOfIteratorHelper(this.options.mpSources),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var mpSource = _step2.value;

          if (mpSource.usesRemaining() > 0) {
            mpSource.execute();
            if ((0,external_kolmafia_.myMp)() >= minimumTarget) break;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      if (this.options.useNativeRestores) {
        (0,external_kolmafia_.restoreMp)(minimumTarget);
      }
    }
    /**
     * Add a skill to the mood.
     *
     * @param skill Skill to add.
     * @returns This mood to enable chaining
     */

  }, {
    key: "skill",
    value: function skill(_skill) {
      this.elements.push(new SkillMoodElement(_skill));
      return this;
    }
    /**
     * Add an effect to the mood, with casting based on {effect.default}.
     *
     * @param effect Effect to add.
     * @param gainEffect How to gain the effect. Only runs if we don't have the effect.
     * @returns This mood to enable chaining
     */

  }, {
    key: "effect",
    value: function effect(_effect, gainEffect) {
      var skill = (0,external_kolmafia_.toSkill)(_effect);

      if (!gainEffect && skill !== template_string/* $skill.none */.tm.none) {
        this.skill(skill);
      } else {
        this.elements.push(new CustomMoodElement(_effect, gainEffect));
      }

      return this;
    }
    /**
     * Add a potion to the mood.
     *
     * @param potion Potion to add.
     * @param maxPricePerTurn Maximum price to pay per turn of the effect.
     * @returns This mood to enable chaining
     */

  }, {
    key: "potion",
    value: function potion(_potion, maxPricePerTurn) {
      this.elements.push(new PotionMoodElement(_potion, maxPricePerTurn));
      return this;
    }
    /**
     * Add an effect to acquire via pocket wishes to the mood.
     *
     * @param effect Effect to wish for in the mood.
     * @returns This mood to enable chaining
     */

  }, {
    key: "genie",
    value: function genie(effect) {
      this.elements.push(new GenieMoodElement(effect));
      return this;
    }
    /**
     * Add an Asdon Martin driving style to the mood.
     *
     * @param effect Driving style to add to the mood.
     * @returns This mood to enable chaining
     */

  }, {
    key: "drive",
    value: function drive(effect) {
      if (Object.values(AsdonMartin.Driving).includes(effect) && AsdonMartin.installed()) {
        this.elements.push(new AsdonMoodElement(effect));
      }

      return this;
    }
    /**
     * Execute the mood, trying to ensure {ensureTurns} of each effect.
     *
     * @param ensureTurns Turns of each effect to try and achieve.
     * @returns Whether or not we successfully got this many turns of every effect in the mood.
     */

  }, {
    key: "execute",
    value: function execute() {
      var ensureTurns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var availableMp = this.availableMp();
      var totalMpPerTurn = (0,utils/* sum */.Sm)(this.elements, element => element.mpCostPerTurn());
      var potentialTurns = Math.floor(availableMp / totalMpPerTurn);
      var completeSuccess = true;

      var _iterator3 = mood_createForOfIteratorHelper(this.elements),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var element = _step3.value;
          var elementTurns = ensureTurns;

          if (element.mpCostPerTurn() > 0) {
            var elementPotentialTurns = Math.floor(potentialTurns / element.turnIncrement()) * element.turnIncrement();
            elementTurns = Math.min(ensureTurns, elementPotentialTurns);
          }

          completeSuccess = element.execute(this, elementTurns) && completeSuccess;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      this.moreMp(this.options.reserveMp);
      return completeSuccess;
    }
  }], [{
    key: "setDefaultOptions",
    value:
    /**
     * Set default options for new Mood instances.
     *
     * @param options Default options for new Mood instances.
     */
    function setDefaultOptions(options) {
      Mood.defaultOptions = mood_objectSpread(mood_objectSpread({}, Mood.defaultOptions), options);
    }
  }]);

  return Mood;
}();

mood_defineProperty(Mood, "defaultOptions", {
  songSlots: [],
  mpSources: [MagicalSausages.instance, OscusSoda.instance],
  reserveMp: 0,
  useNativeRestores: false
});
// EXTERNAL MODULE: ./node_modules/libram/dist/moonSign.js
var moonSign = __webpack_require__(186);
// EXTERNAL MODULE: ./node_modules/libram/dist/propertyTyping.js
var propertyTyping = __webpack_require__(137);
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2008/Stickers.js
var Stickers_templateObject, Stickers_templateObject2, Stickers_templateObject3, Stickers_templateObject4, Stickers_templateObject5, Stickers_templateObject6, Stickers_templateObject7, Stickers_templateObject8, Stickers_templateObject9, Stickers_templateObject10, Stickers_templateObject11;

function Stickers_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



var stickers = {
  unicorn: (0,template_string/* $item */.xr)(Stickers_templateObject || (Stickers_templateObject = Stickers_taggedTemplateLiteral(["scratch 'n' sniff unicorn sticker"]))),
  apple: (0,template_string/* $item */.xr)(Stickers_templateObject2 || (Stickers_templateObject2 = Stickers_taggedTemplateLiteral(["scratch 'n' sniff apple sticker"]))),
  UPC: (0,template_string/* $item */.xr)(Stickers_templateObject3 || (Stickers_templateObject3 = Stickers_taggedTemplateLiteral(["scratch 'n' sniff UPC sticker"]))),
  wrestler: (0,template_string/* $item */.xr)(Stickers_templateObject4 || (Stickers_templateObject4 = Stickers_taggedTemplateLiteral(["scratch 'n' sniff wrestler sticker"]))),
  dragon: (0,template_string/* $item */.xr)(Stickers_templateObject5 || (Stickers_templateObject5 = Stickers_taggedTemplateLiteral(["scratch 'n' sniff dragon sticker"]))),
  rockband: (0,template_string/* $item */.xr)(Stickers_templateObject6 || (Stickers_templateObject6 = Stickers_taggedTemplateLiteral(["scratch 'n' sniff rock band sticker"])))
};
/**
 * @returns Whether the player has the Summon Stickers skill
 */

function Stickers_have() {
  return (0,external_kolmafia_.haveSkill)((0,template_string/* $skill */.tm)(Stickers_templateObject7 || (Stickers_templateObject7 = Stickers_taggedTemplateLiteral(["Summon Stickers"]))));
}
/**
 * @returns The player's current sticker weapon
 */

function weapon() {
  var _find;

  return (_find = (0,template_string/* $items */.vS)(Stickers_templateObject8 || (Stickers_templateObject8 = Stickers_taggedTemplateLiteral(["scratch 'n' sniff sword, scratch 'n' sniff crossbow"]))).find(i => (0,external_kolmafia_.availableAmount)(i))) !== null && _find !== void 0 ? _find : null;
}
var weapons = {
  sword: (0,template_string/* $item */.xr)(Stickers_templateObject9 || (Stickers_templateObject9 = Stickers_taggedTemplateLiteral(["scratch 'n' sniff sword"]))),
  crossbow: (0,template_string/* $item */.xr)(Stickers_templateObject10 || (Stickers_templateObject10 = Stickers_taggedTemplateLiteral(["scratch 'n' sniff crossbow"])))
};
/**
 * Make a sword
 *
 * @param sticker Sticker to use when making the sword
 */

function makeSword(sticker) {
  if (weapon()) return;
  (0,external_kolmafia_.visitUrl)("bedazzle.php?action=juststick&sticker=".concat(stickers[sticker].id, "&pwd"));
}
/**
 * Change weapon mode
 *
 * @param mode New weapon mode
 * @returns Success
 */

function foldWeapon(mode) {
  var currentWep = weapon();
  if (!currentWep) return false;
  if (weapons[mode] === currentWep) return true;
  (0,external_kolmafia_.visitUrl)("bedazzle.php?action=fold&pwd");
  return weapons[mode] === currentWep;
}
/**
 * Get current stickers on sticker weapon
 *
 * @returns Tuple of stickers
 */

function currentStickers() {
  return (0,template_string/* $slots */.ei)(Stickers_templateObject11 || (Stickers_templateObject11 = Stickers_taggedTemplateLiteral(["sticker1, sticker2, sticker3"]))).map(s => (0,external_kolmafia_.equippedItem)(s));
}
/**
 * Set configuration for sticker weapon
 *
 * @param options Tuple of either sticker or null
 * @returns Resultant configuration
 */

function setStickers() {
  for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {
    options[_key] = arguments[_key];
  }

  var _loop = function _loop() {
    var s = _options[_i];
    if (s) (0,external_kolmafia_.retrieveItem)(stickers[s], options.filter(x => x === s).length);
  };

  for (var _i = 0, _options = options; _i < _options.length; _i++) {
    _loop();
  }

  (0,external_kolmafia_.visitUrl)("bedazzle.php");
  var start = currentStickers();

  for (var i = 0; i <= 2; i++) {
    var sticker = options[i];
    if (!sticker) continue;
    var item = stickers[sticker];
    if (start[i] === item) continue;
    (0,external_kolmafia_.visitUrl)("bedazzle.php?action=peel&slot=".concat(i + 1, "&pwd"));
    (0,external_kolmafia_.visitUrl)("bedazzle.php?action=stick&slot=".concat(i + 1, "&sticker=").concat(item.id, "&pwd"));
  }

  return currentStickers();
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2009/SpookyPutty.js
var SpookyPutty_templateObject;

function SpookyPutty_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var sheet = (0,template_string/* $item */.xr)(SpookyPutty_templateObject || (SpookyPutty_templateObject = SpookyPutty_taggedTemplateLiteral(["Spooky Putty sheet"])));
/**
 * See whether the player has a Spooky Putty item in some form
 *
 * @returns Whether the player has any Spooky Putty item
 */

function SpookyPutty_have() {
  return (0,lib/* getFoldGroup */._D)(sheet).some(item => (0,lib/* have */.lf)(item));
}
/**
 * Get spooky putty sheet copies made today
 *
 * @returns Number of spooky putty sheet copies made
 */

function getSpookyPuttySheetCopiesMade() {
  return Math.max(0, (0,property.get)("spookyPuttyCopiesMade"));
}
/**
 * Prepares a spooky putty sheet for use
 *
 * @returns Success
 */

function prepareSpookyPuttySheet() {
  if (!SpookyPutty_have()) return false;
  if ((0,lib/* have */.lf)(sheet)) return true;
  return (0,external_kolmafia_.cliExecute)("fold Spooky putty sheet");
}
/**
 * Get the current puttied monster
 *
 * @returns Current puttied monster
 */

function getSpookyPuttySheetMonster() {
  return (0,property.get)("spookyPuttyMonster");
}
/**
 * Use the spooky putty sheet (i.e. fight the monster probably)
 *
 * @returns Success
 */

function useSpookyPuttySheet() {
  return (0,external_kolmafia_.use)(sheet);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2010/CrownOfThrones.js
var CrownOfThrones_templateObject, CrownOfThrones_templateObject2, CrownOfThrones_templateObject3, CrownOfThrones_templateObject4, CrownOfThrones_templateObject5, CrownOfThrones_templateObject6, CrownOfThrones_templateObject7, CrownOfThrones_templateObject8, CrownOfThrones_templateObject9, CrownOfThrones_templateObject10, CrownOfThrones_templateObject11, CrownOfThrones_templateObject12, CrownOfThrones_templateObject13, CrownOfThrones_templateObject14, CrownOfThrones_templateObject15, CrownOfThrones_templateObject16, CrownOfThrones_templateObject17, CrownOfThrones_templateObject18, CrownOfThrones_templateObject19, CrownOfThrones_templateObject20, CrownOfThrones_templateObject21, CrownOfThrones_templateObject22, CrownOfThrones_templateObject23, CrownOfThrones_templateObject24, CrownOfThrones_templateObject25, CrownOfThrones_templateObject26, CrownOfThrones_templateObject27, CrownOfThrones_templateObject28, CrownOfThrones_templateObject29, CrownOfThrones_templateObject30, CrownOfThrones_templateObject31, CrownOfThrones_templateObject32, CrownOfThrones_templateObject33, CrownOfThrones_templateObject34, CrownOfThrones_templateObject35, CrownOfThrones_templateObject36, CrownOfThrones_templateObject37, CrownOfThrones_templateObject38, CrownOfThrones_templateObject39, CrownOfThrones_templateObject40, CrownOfThrones_templateObject41, CrownOfThrones_templateObject42, CrownOfThrones_templateObject43, CrownOfThrones_templateObject44, CrownOfThrones_templateObject45, CrownOfThrones_templateObject46, CrownOfThrones_templateObject47, CrownOfThrones_templateObject48, CrownOfThrones_templateObject49, CrownOfThrones_templateObject50, CrownOfThrones_templateObject51, CrownOfThrones_templateObject52, CrownOfThrones_templateObject53, CrownOfThrones_templateObject54, CrownOfThrones_templateObject55, CrownOfThrones_templateObject56, CrownOfThrones_templateObject57, CrownOfThrones_templateObject58, CrownOfThrones_templateObject59, CrownOfThrones_templateObject60, CrownOfThrones_templateObject61, CrownOfThrones_templateObject62, CrownOfThrones_templateObject63, CrownOfThrones_templateObject64, CrownOfThrones_templateObject65, CrownOfThrones_templateObject66, CrownOfThrones_templateObject67, CrownOfThrones_templateObject68, CrownOfThrones_templateObject69, CrownOfThrones_templateObject70, CrownOfThrones_templateObject71, CrownOfThrones_templateObject72, _templateObject73, _templateObject74, _templateObject75, _templateObject76, _templateObject77, _templateObject78, _templateObject79, _templateObject80, _templateObject81, _templateObject82, _templateObject83, _templateObject84, _templateObject85, _templateObject86, _templateObject87, _templateObject88, _templateObject89, _templateObject90, _templateObject91, _templateObject92, _templateObject93, _templateObject94, _templateObject95, _templateObject96, _templateObject97, _templateObject98, _templateObject99, _templateObject100, _templateObject101;

function CrownOfThrones_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function CrownOfThrones_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? CrownOfThrones_ownKeys(Object(source), !0).forEach(function (key) { CrownOfThrones_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : CrownOfThrones_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function CrownOfThrones_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function CrownOfThrones_toConsumableArray(arr) { return CrownOfThrones_arrayWithoutHoles(arr) || CrownOfThrones_iterableToArray(arr) || CrownOfThrones_unsupportedIterableToArray(arr) || CrownOfThrones_nonIterableSpread(); }

function CrownOfThrones_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function CrownOfThrones_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return CrownOfThrones_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return CrownOfThrones_arrayLikeToArray(o, minLen); }

function CrownOfThrones_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function CrownOfThrones_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return CrownOfThrones_arrayLikeToArray(arr); }

function CrownOfThrones_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function CrownOfThrones_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var ridingFamiliars = [{
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject || (CrownOfThrones_templateObject = CrownOfThrones_taggedTemplateLiteral(["Puck Man"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject2 || (CrownOfThrones_templateObject2 = CrownOfThrones_taggedTemplateLiteral(["yellow pixel"]))),
  probability: 0.25,
  dropPredicate: () => (0,property.get)("_yellowPixelDropsCrown") < 25
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject3 || (CrownOfThrones_templateObject3 = CrownOfThrones_taggedTemplateLiteral(["Ms. Puck Man"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject4 || (CrownOfThrones_templateObject4 = CrownOfThrones_taggedTemplateLiteral(["yellow pixel"]))),
  probability: 0.25,
  dropPredicate: () => (0,property.get)("_yellowPixelDropsCrown") < 25
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject5 || (CrownOfThrones_templateObject5 = CrownOfThrones_taggedTemplateLiteral(["Grimstone Golem"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject6 || (CrownOfThrones_templateObject6 = CrownOfThrones_taggedTemplateLiteral(["grimstone mask"]))),
  probability: 0.5,
  dropPredicate: () => (0,property.get)("_grimstoneMaskDropsCrown") < 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject7 || (CrownOfThrones_templateObject7 = CrownOfThrones_taggedTemplateLiteral(["Knob Goblin Organ Grinder"]))),
  drops: 30,
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject8 || (CrownOfThrones_templateObject8 = CrownOfThrones_taggedTemplateLiteral(["Happy Medium"]))),
  drops: 30,
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject9 || (CrownOfThrones_templateObject9 = CrownOfThrones_taggedTemplateLiteral(["Garbage Fire"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject10 || (CrownOfThrones_templateObject10 = CrownOfThrones_taggedTemplateLiteral(["burning newspaper"]))),
  probability: 0.5,
  dropPredicate: () => (0,property.get)("_garbageFireDropsCrown") < 3
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject11 || (CrownOfThrones_templateObject11 = CrownOfThrones_taggedTemplateLiteral(["Machine Elf"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject12 || (CrownOfThrones_templateObject12 = CrownOfThrones_taggedTemplateLiteral(["abstraction: sensation, abstraction: thought, abstraction: action, abstraction: category, abstraction: perception, abstraction: purpose"]))),
  probability: 0.2,
  dropPredicate: () => (0,property.get)("_abstractionDropsCrown") < 25
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject13 || (CrownOfThrones_templateObject13 = CrownOfThrones_taggedTemplateLiteral(["Trick-or-Treating Tot"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject14 || (CrownOfThrones_templateObject14 = CrownOfThrones_taggedTemplateLiteral(["hoarded candy wad"]))),
  probability: 0.5,
  dropPredicate: () => (0,property.get)("_hoardedCandyDropsCrown") < 3
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject15 || (CrownOfThrones_templateObject15 = CrownOfThrones_taggedTemplateLiteral(["Warbear Drone"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject16 || (CrownOfThrones_templateObject16 = CrownOfThrones_taggedTemplateLiteral(["warbear whosit"]))),
  probability: 1 / 4.5
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject17 || (CrownOfThrones_templateObject17 = CrownOfThrones_taggedTemplateLiteral(["Li'l Xenomorph"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject18 || (CrownOfThrones_templateObject18 = CrownOfThrones_taggedTemplateLiteral(["lunar isotope"]))),
  probability: 0.05
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject19 || (CrownOfThrones_templateObject19 = CrownOfThrones_taggedTemplateLiteral(["Pottery Barn Owl"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject20 || (CrownOfThrones_templateObject20 = CrownOfThrones_taggedTemplateLiteral(["volcanic ash"]))),
  probability: 0.1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject21 || (CrownOfThrones_templateObject21 = CrownOfThrones_taggedTemplateLiteral(["Grim Brother"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject22 || (CrownOfThrones_templateObject22 = CrownOfThrones_taggedTemplateLiteral(["grim fairy tale"]))),
  probability: 1,
  dropPredicate: () => (0,property.get)("_grimFairyTaleDropsCrown") < 2
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject23 || (CrownOfThrones_templateObject23 = CrownOfThrones_taggedTemplateLiteral(["Optimistic Candle"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject24 || (CrownOfThrones_templateObject24 = CrownOfThrones_taggedTemplateLiteral(["glob of melted wax"]))),
  probability: 1,
  dropPredicate: () => (0,property.get)("_optimisticCandleDropsCrown") < 3
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject25 || (CrownOfThrones_templateObject25 = CrownOfThrones_taggedTemplateLiteral(["Adventurous Spelunker"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject26 || (CrownOfThrones_templateObject26 = CrownOfThrones_taggedTemplateLiteral(["teflon ore, velcro ore, vinyl ore, cardboard ore, styrofoam ore, bubblewrap ore"]))),
  probability: 1,
  dropPredicate: () => (0,property.get)("_oreDropsCrown") < 6
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject27 || (CrownOfThrones_templateObject27 = CrownOfThrones_taggedTemplateLiteral(["Twitching Space Critter"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject28 || (CrownOfThrones_templateObject28 = CrownOfThrones_taggedTemplateLiteral(["space beast fur"]))),
  probability: 1,
  dropPredicate: () => (0,property.get)("_spaceFurDropsCrown") < 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject29 || (CrownOfThrones_templateObject29 = CrownOfThrones_taggedTemplateLiteral(["Party Mouse"]))),
  drops: 50,
  probability: 0.05
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject30 || (CrownOfThrones_templateObject30 = CrownOfThrones_taggedTemplateLiteral(["Yule Hound"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject31 || (CrownOfThrones_templateObject31 = CrownOfThrones_taggedTemplateLiteral(["candy cane"]))),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject32 || (CrownOfThrones_templateObject32 = CrownOfThrones_taggedTemplateLiteral(["Gluttonous Green Ghost"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject33 || (CrownOfThrones_templateObject33 = CrownOfThrones_taggedTemplateLiteral(["bean burrito, enchanted bean burrito, jumping bean burrito"]))),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject34 || (CrownOfThrones_templateObject34 = CrownOfThrones_taggedTemplateLiteral(["Reassembled Blackbird"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject35 || (CrownOfThrones_templateObject35 = CrownOfThrones_taggedTemplateLiteral(["blackberry"]))),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject36 || (CrownOfThrones_templateObject36 = CrownOfThrones_taggedTemplateLiteral(["Reconstituted Crow"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject37 || (CrownOfThrones_templateObject37 = CrownOfThrones_taggedTemplateLiteral(["blackberry"]))),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject38 || (CrownOfThrones_templateObject38 = CrownOfThrones_taggedTemplateLiteral(["Hunchbacked Minion"]))),
  drops: new Map([[(0,template_string/* $item */.xr)(CrownOfThrones_templateObject39 || (CrownOfThrones_templateObject39 = CrownOfThrones_taggedTemplateLiteral(["disembodied brain"]))), 0.02], [(0,template_string/* $item */.xr)(CrownOfThrones_templateObject40 || (CrownOfThrones_templateObject40 = CrownOfThrones_taggedTemplateLiteral(["skeleton bone"]))), 0.98]]),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject41 || (CrownOfThrones_templateObject41 = CrownOfThrones_taggedTemplateLiteral(["Reanimated Reanimator"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject42 || (CrownOfThrones_templateObject42 = CrownOfThrones_taggedTemplateLiteral(["hot wing, broken skull"]))),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject43 || (CrownOfThrones_templateObject43 = CrownOfThrones_taggedTemplateLiteral(["Attention-Deficit Demon"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject44 || (CrownOfThrones_templateObject44 = CrownOfThrones_taggedTemplateLiteral(["chorizo brownies, white chocolate and tomato pizza, carob chunk noodles"]))),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject45 || (CrownOfThrones_templateObject45 = CrownOfThrones_taggedTemplateLiteral(["Piano Cat"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject46 || (CrownOfThrones_templateObject46 = CrownOfThrones_taggedTemplateLiteral(["beertini, papaya slung, salty slug, tomato daiquiri"]))),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject47 || (CrownOfThrones_templateObject47 = CrownOfThrones_taggedTemplateLiteral(["Golden Monkey"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject48 || (CrownOfThrones_templateObject48 = CrownOfThrones_taggedTemplateLiteral(["gold nuggets"]))),
  probability: 0.5
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject49 || (CrownOfThrones_templateObject49 = CrownOfThrones_taggedTemplateLiteral(["Robot Reindeer"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject50 || (CrownOfThrones_templateObject50 = CrownOfThrones_taggedTemplateLiteral(["candy cane, eggnog, fruitcake, gingerbread bugbear"]))),
  probability: 0.3
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject51 || (CrownOfThrones_templateObject51 = CrownOfThrones_taggedTemplateLiteral(["Stocking Mimic"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject52 || (CrownOfThrones_templateObject52 = CrownOfThrones_taggedTemplateLiteral(["Angry Farmer candy, Cold Hots candy, Rock Pops, Tasty Fun Good rice candy, Wint-O-Fresh mint"]))),
  probability: 0.3
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject53 || (CrownOfThrones_templateObject53 = CrownOfThrones_taggedTemplateLiteral(["BRICKO chick"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject54 || (CrownOfThrones_templateObject54 = CrownOfThrones_taggedTemplateLiteral(["BRICKO brick"]))),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject55 || (CrownOfThrones_templateObject55 = CrownOfThrones_taggedTemplateLiteral(["Cotton Candy Carnie"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject56 || (CrownOfThrones_templateObject56 = CrownOfThrones_taggedTemplateLiteral(["cotton candy pinch"]))),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject57 || (CrownOfThrones_templateObject57 = CrownOfThrones_taggedTemplateLiteral(["Untamed Turtle"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject58 || (CrownOfThrones_templateObject58 = CrownOfThrones_taggedTemplateLiteral(["snailmail bits, turtlemail bits, turtle wax"]))),
  probability: 0.35
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject59 || (CrownOfThrones_templateObject59 = CrownOfThrones_taggedTemplateLiteral(["Astral Badger"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject60 || (CrownOfThrones_templateObject60 = CrownOfThrones_taggedTemplateLiteral(["spooky mushroom, Knob mushroom, Knoll mushroom"]))),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject61 || (CrownOfThrones_templateObject61 = CrownOfThrones_taggedTemplateLiteral(["Green Pixie"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject62 || (CrownOfThrones_templateObject62 = CrownOfThrones_taggedTemplateLiteral(["bottle of tequila"]))),
  probability: 0.2
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject63 || (CrownOfThrones_templateObject63 = CrownOfThrones_taggedTemplateLiteral(["Angry Goat"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject64 || (CrownOfThrones_templateObject64 = CrownOfThrones_taggedTemplateLiteral(["goat cheese pizza"]))),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject65 || (CrownOfThrones_templateObject65 = CrownOfThrones_taggedTemplateLiteral(["Adorable Seal Larva"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject66 || (CrownOfThrones_templateObject66 = CrownOfThrones_taggedTemplateLiteral(["stench nuggets, spooky nuggets, hot nuggets, cold nuggets, sleaze nuggets"]))),
  probability: 0.35
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject67 || (CrownOfThrones_templateObject67 = CrownOfThrones_taggedTemplateLiteral(["Ancient Yuletide Troll"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject68 || (CrownOfThrones_templateObject68 = CrownOfThrones_taggedTemplateLiteral(["candy cane, eggnog, fruitcake, gingerbread bugbear"]))),
  probability: 0.3
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject69 || (CrownOfThrones_templateObject69 = CrownOfThrones_taggedTemplateLiteral(["Sweet Nutcracker"]))),
  drops: (0,template_string/* $items */.vS)(CrownOfThrones_templateObject70 || (CrownOfThrones_templateObject70 = CrownOfThrones_taggedTemplateLiteral(["candy cane, eggnog, fruitcake, gingerbread bugbear"]))),
  probability: 0.3
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject71 || (CrownOfThrones_templateObject71 = CrownOfThrones_taggedTemplateLiteral(["Casagnova Gnome"]))),
  drops: 0,
  probability: 0
}, {
  familiar: (0,template_string/* $familiar */.HP)(CrownOfThrones_templateObject72 || (CrownOfThrones_templateObject72 = CrownOfThrones_taggedTemplateLiteral(["Coffee Pixie"]))),
  drops: 0,
  probability: 0
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject73 || (_templateObject73 = CrownOfThrones_taggedTemplateLiteral(["Dancing Frog"]))),
  drops: 0,
  probability: 0
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject74 || (_templateObject74 = CrownOfThrones_taggedTemplateLiteral(["Grouper Groupie"]))),
  drops: 0,
  probability: 0
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject75 || (_templateObject75 = CrownOfThrones_taggedTemplateLiteral(["Hand Turkey"]))),
  drops: 30,
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject76 || (_templateObject76 = CrownOfThrones_taggedTemplateLiteral(["Hippo Ballerina"]))),
  drops: 0,
  probability: 0
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject77 || (_templateObject77 = CrownOfThrones_taggedTemplateLiteral(["Jitterbug"]))),
  drops: 0,
  probability: 0
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject78 || (_templateObject78 = CrownOfThrones_taggedTemplateLiteral(["Leprechaun"]))),
  drops: 30,
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject79 || (_templateObject79 = CrownOfThrones_taggedTemplateLiteral(["Obtuse Angel"]))),
  drops: 0,
  probability: 0
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject80 || (_templateObject80 = CrownOfThrones_taggedTemplateLiteral(["Psychedelic Bear"]))),
  drops: 0,
  probability: 0
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject81 || (_templateObject81 = CrownOfThrones_taggedTemplateLiteral(["Robortender"]))),
  drops: 0,
  probability: 0
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject82 || (_templateObject82 = CrownOfThrones_taggedTemplateLiteral(["Ghost of Crimbo Commerce"]))),
  drops: 30,
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject83 || (_templateObject83 = CrownOfThrones_taggedTemplateLiteral(["Hobo Monkey"]))),
  drops: 0,
  probability: 0
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject84 || (_templateObject84 = CrownOfThrones_taggedTemplateLiteral(["Rockin' Robin"]))),
  drops: 60,
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject85 || (_templateObject85 = CrownOfThrones_taggedTemplateLiteral(["Feral Kobold"]))),
  drops: 30,
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject86 || (_templateObject86 = CrownOfThrones_taggedTemplateLiteral(["Oily Woim"]))),
  drops: 30,
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject87 || (_templateObject87 = CrownOfThrones_taggedTemplateLiteral(["Cat Burglar"]))),
  drops: 0,
  probability: 0
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject88 || (_templateObject88 = CrownOfThrones_taggedTemplateLiteral(["Misshapen Animal Skeleton"]))),
  drops: 30,
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject89 || (_templateObject89 = CrownOfThrones_taggedTemplateLiteral(["Gelatinous Cubeling"]))),
  drops: 0,
  probability: 0
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject90 || (_templateObject90 = CrownOfThrones_taggedTemplateLiteral(["Frozen Gravy Fairy"]))),
  drops: (0,template_string/* $items */.vS)(_templateObject91 || (_templateObject91 = CrownOfThrones_taggedTemplateLiteral(["cold nuggets"]))),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject92 || (_templateObject92 = CrownOfThrones_taggedTemplateLiteral(["Stinky Gravy Fairy"]))),
  drops: (0,template_string/* $items */.vS)(_templateObject93 || (_templateObject93 = CrownOfThrones_taggedTemplateLiteral(["stench nuggets"]))),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject94 || (_templateObject94 = CrownOfThrones_taggedTemplateLiteral(["Sleazy Gravy Fairy"]))),
  drops: (0,template_string/* $items */.vS)(_templateObject95 || (_templateObject95 = CrownOfThrones_taggedTemplateLiteral(["sleaze nuggets"]))),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject96 || (_templateObject96 = CrownOfThrones_taggedTemplateLiteral(["Spooky Gravy Fairy"]))),
  drops: (0,template_string/* $items */.vS)(_templateObject97 || (_templateObject97 = CrownOfThrones_taggedTemplateLiteral(["spooky nuggets"]))),
  probability: 1
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject98 || (_templateObject98 = CrownOfThrones_taggedTemplateLiteral(["Mini Kiwi"]))),
  drops: (0,template_string/* $items */.vS)(_templateObject99 || (_templateObject99 = CrownOfThrones_taggedTemplateLiteral(["mini kiwi"]))),
  probability: 0.08
}, {
  familiar: (0,template_string/* $familiar */.HP)(_templateObject100 || (_templateObject100 = CrownOfThrones_taggedTemplateLiteral(["Flaming Gravy Fairy"]))),
  // drops a hot nugget every combat, 5 of which can be used to make a hot wad
  drops: (0,template_string/* $items */.vS)(_templateObject101 || (_templateObject101 = CrownOfThrones_taggedTemplateLiteral(["hot nuggets"]))),
  probability: 1
}];
var FULL_RIDING_LIST = [].concat(ridingFamiliars, CrownOfThrones_toConsumableArray(external_kolmafia_.Familiar.all().filter(f => !ridingFamiliars.some(_ref => {
  var familiar = _ref.familiar;
  return familiar === f;
})).map(familiar => ({
  familiar: familiar,
  drops: 0,
  probability: 1
}))));
/**
 * Value a specified familiar Crown rider
 *
 * @param rider Familiar to value
 * @param modifierValueFunction Value of the extra modifiers the familiar provides,
 * @param dropsValueFunction Value to assign the drops of the familiar gives
 * @param ignoreLimitedDrops Whether to ignore drops that are daily or otherwise limited
 * @returns Rider value (in meat)
 */

function valueRider(rider, modifierValueFunction, dropsValueFunction) {
  var ignoreLimitedDrops = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var dropValue = !rider.dropPredicate || rider.dropPredicate() && !ignoreLimitedDrops ? rider.probability * (typeof rider.drops === "number" ? rider.drops : dropsValueFunction(rider.drops)) : 0;
  var modifierValue = modifierValueFunction(rider.familiar);
  return dropValue + modifierValue;
}
var riderModes = new Map();
var DEFAULTS = {
  modifierValueFunction: () => 0,
  dropsValueFunction: () => 0,
  ignoreLimitedDrops: false,
  excludeCurrentFamiliar: true
};
/**
 * Creates a rider mode for this session
 *
 * @param name Rider mode name
 * @param details An object consisting of various settings for the RiderMode:
 * @param details.modifierValueFunction Function to value a familiar itself, often using modifiers,
 * @param details.dropsValueFunction Function to value the drops of a familiar, which are stored as an `Item[]` or `Map<Item, number>`
 * @param details.ignoreLimitedDrops Whether to ignore daily or otherwise limited drops
 * @param details.excludeCurrentFamiliar Whether to exclude the player's current familiar
 * @returns Map of all rider modes created this session, including the one that was just made
 */

function createRiderMode(name, details) {
  return riderModes.set(name, CrownOfThrones_objectSpread(CrownOfThrones_objectSpread({}, DEFAULTS), details));
}
/**
 * @param name The name of the `RiderMode` to check
 * @returns Whether or not said `RiderMode` exists
 */

function hasRiderMode(name) {
  return riderModes.has(name);
}
var riderLists = new Map();
/**
 * Pick a rider
 *
 * @param mode Mode by which to select possible riders
 * @returns Picked faimiliar rider or null if no rider could be selected
 */

function pickRider(mode) {
  var modeData = riderModes.get(mode);
  if (!modeData) return null;
  var modifierValueFunction = modeData.modifierValueFunction,
      dropsValueFunction = modeData.dropsValueFunction,
      ignoreLimitedDrops = modeData.ignoreLimitedDrops,
      excludeCurrentFamiliar = modeData.excludeCurrentFamiliar;

  if (!riderLists.has(mode)) {
    riderLists.set(mode, FULL_RIDING_LIST.filter(_ref2 => {
      var familiar = _ref2.familiar;
      return (0,lib/* have */.lf)(familiar);
    }).sort((a, b) => valueRider(b, modifierValueFunction, dropsValueFunction, ignoreLimitedDrops) - valueRider(a, modifierValueFunction, dropsValueFunction, ignoreLimitedDrops)));
  }

  var list = riderLists.get(mode);

  if (list) {
    var riderToReturn = list.find(_ref3 => {
      var _dropPredicate;

      var dropPredicate = _ref3.dropPredicate,
          familiar = _ref3.familiar;
      return ((_dropPredicate = dropPredicate === null || dropPredicate === void 0 ? void 0 : dropPredicate()) !== null && _dropPredicate !== void 0 ? _dropPredicate : true) && (!excludeCurrentFamiliar || (0,external_kolmafia_.myFamiliar)() !== familiar);
    });
    return riderToReturn !== null && riderToReturn !== void 0 ? riderToReturn : null;
  }

  return null;
}
/**
 * Find the associated NumericModifier for a given familiar when enthroned or bjornified
 *
 * @param modifier The NumericModifier in question
 * @param familiar The Familiar in question
 * @returns The value of the given numeric modifier for the Crown of Thrones (or buddy bjorn) when the given familiar is encromulated
 */

function getModifier(modifier, familiar) {
  return (0,external_kolmafia_.numericModifier)("Throne:".concat(familiar), modifier);
}
/**
 * Create a `modifierValueFunction` for a familiar.
 *
 * @param modifiers An array consisting of the `NumericModifier`s relevant to your valuation
 * @param functions An object keyed by `NumericModifier`s whose values are functions that map the the result of a modifier to its corresponding valuation
 * @returns A function that maps a familiar to the value of its modifiers in the crown of thrones or buddy bjorn.
 */

function createModifierValueFunction(modifiers, functions) {
  return familiar => (0,utils/* sum */.Sm)(modifiers, modifier => functions[modifier](getModifier(modifier, familiar)));
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2010/LookingGlass.js
var LookingGlass_templateObject, LookingGlass_templateObject2, LookingGlass_templateObject3, LookingGlass_templateObject4, LookingGlass_templateObject5;

function LookingGlass_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var firstTeaPartyEffect = (0,template_string/* $effect */._G)(LookingGlass_templateObject || (LookingGlass_templateObject = LookingGlass_taggedTemplateLiteral(["Assaulted with Pepper"])));
var lastTeaPartyEffect = (0,template_string/* $effect */._G)(LookingGlass_templateObject2 || (LookingGlass_templateObject2 = LookingGlass_taggedTemplateLiteral(["Oleaginous Soles"])));
/**
 * Checks if an item is a valid hat for The Mad Tea Party
 *
 * @param item The item to check
 * @param characters The desired nameLength for The Mad Tea Party effect
 * @returns If this item is a valid hat for The Mad Tea Party
 */

function validTeaPartyHat(item, characters) {
  if ((0,external_kolmafia_.toSlot)(item) !== (0,template_string/* $slot */.Jh)(LookingGlass_templateObject3 || (LookingGlass_templateObject3 = LookingGlass_taggedTemplateLiteral(["hat"]))) || !(0,external_kolmafia_.canEquip)(item)) {
    return false;
  } else if (characters <= 5) {
    return item.nameLength <= 5;
  } else if (characters >= 30) {
    return item.nameLength >= 30;
  }

  return characters === item.nameLength;
}
/**
 * Find the name length required to get an effect from The Mad Tea Party
 *
 * @param effect The effect to check
 * @returns The number of characters required to get an effect
 */


function findTeaPartyHatLength(effect) {
  var effectId = effect.id;

  if (effectId < firstTeaPartyEffect.id || effectId > lastTeaPartyEffect.id) {
    throw new Error("Invalid Mad Tea Party effect ".concat(effect));
  }

  return Math.floor(effectId - firstTeaPartyEffect.id + 5);
}
/**
 * Find all hats that will get an effect from The Mad Tea Party
 *
 * @param effect The effect to check
 * @returns An array of equippable hats
 */

function findTeaPartyHats(effect) {
  var characters = findTeaPartyHatLength(effect);

  if (!characters) {
    throw new Error("Invalid Mad Tea Party effect ".concat(effect));
  }

  return external_kolmafia_.Item.all().filter(item => validTeaPartyHat(item, characters));
}
/**
 * Check if a hat is available to get an effect from The Mad Tea Party
 *
 * @param effect The effect to check
 * @returns If any valid hat is in inventory
 */

function haveTeaPartyHat(effect) {
  var characters = findTeaPartyHatLength(effect);

  if (!characters) {
    throw new Error("Invalid Mad Tea Party effect ".concat(effect));
  }

  return external_kolmafia_.Item.all().find(item => validTeaPartyHat(item, characters) && (0,lib/* have */.lf)(item)) !== undefined;
}
/**
 * Try to get an effect from The Mad Tea Party
 *
 * @param effect The effect to get
 * @returns If the request was successful
 */

function tryTeaPartyBuff(effect) {
  if ((0,property.get)("_madTeaParty")) {
    return false;
  }

  var characters = findTeaPartyHatLength(effect);

  if (!characters) {
    throw new Error("Invalid Mad Tea Party effect ".concat(effect));
  }

  if (!haveTeaPartyHat(effect)) {
    return false;
  }

  (0,lib/* ensureEffect */.pq)((0,template_string/* $effect */._G)(LookingGlass_templateObject4 || (LookingGlass_templateObject4 = LookingGlass_taggedTemplateLiteral(["Down the Rabbit Hole"]))));

  if (!(0,lib/* have */.lf)((0,template_string/* $effect */._G)(LookingGlass_templateObject5 || (LookingGlass_templateObject5 = LookingGlass_taggedTemplateLiteral(["Down the Rabbit Hole"]))))) {
    return false;
  }

  var turns = (0,external_kolmafia_.haveEffect)(effect);
  (0,external_kolmafia_.cliExecute)("hatter ".concat(characters));
  return (0,lib/* have */.lf)(effect) && (0,external_kolmafia_.haveEffect)(effect) > turns;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/Copier.js
function Copier_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function Copier_createClass(Constructor, protoProps, staticProps) { if (protoProps) Copier_defineProperties(Constructor.prototype, protoProps); if (staticProps) Copier_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function Copier_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Copier_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Copier = /*#__PURE__*/Copier_createClass(function Copier(couldCopy, prepare, canCopy, copiedMonster, fightCopy) {
  Copier_classCallCheck(this, Copier);

  Copier_defineProperty(this, "couldCopy", void 0);

  Copier_defineProperty(this, "prepare", void 0);

  Copier_defineProperty(this, "canCopy", void 0);

  Copier_defineProperty(this, "copiedMonster", void 0);

  Copier_defineProperty(this, "fightCopy", null);

  this.couldCopy = couldCopy;
  this.prepare = prepare;
  this.canCopy = canCopy;
  this.copiedMonster = copiedMonster;
  if (fightCopy) this.fightCopy = fightCopy;
});
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2011/ObtuseAngel.js
var ObtuseAngel_templateObject;

function ObtuseAngel_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var ObtuseAngel_familiar = (0,template_string/* $familiar */.HP)(ObtuseAngel_templateObject || (ObtuseAngel_templateObject = ObtuseAngel_taggedTemplateLiteral(["Obtuse Angel"])));
/**
 * @returns whether the player has an Obtuse Angel
 */

function ObtuseAngel_have() {
  return (0,lib/* have */.lf)(ObtuseAngel_familiar);
}
/**
 * @returns number of badly romantic arrows used today
 */

function getBadlyRomanticArrowUses() {
  return Math.max(0, (0,property.get)("_badlyRomanticArrows"));
}
/**
 * @returns whether badly romantic arrow can still be used
 */

function haveBadlyRomanticArrowUsesRemaining() {
  return getBadlyRomanticArrowUses() === 0;
}
/**
 * @returns whether the player could use badly romantic arrow in theory
 */

function couldUseBadlyRomanticArrow() {
  return ObtuseAngel_have() && haveBadlyRomanticArrowUsesRemaining();
}
/**
 * Prepares badly romantic arrow for use
 *
 * @returns success
 */

function prepareBadlyRomanticArrow() {
  return (0,external_kolmafia_.useFamiliar)(ObtuseAngel_familiar);
}
/**
 * @returns whether the player can use badly romantic arrow right now
 */

function canUseBadlyRomanticArrow() {
  return (0,lib/* isCurrentFamiliar */.ic)(ObtuseAngel_familiar) && haveBadlyRomanticArrowUsesRemaining();
}
/**
 * @returns current badly romantic arrow monster target
 */

function getBadlyRomanticArrowMonster() {
  return (0,property.get)("romanticTarget");
}
var BadlyRomanticArrow = new Copier(() => couldUseBadlyRomanticArrow(), () => prepareBadlyRomanticArrow(), () => canUseBadlyRomanticArrow(), () => getBadlyRomanticArrowMonster());
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2012/RainDoh.js
var RainDoh_templateObject;

function RainDoh_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var box = (0,template_string/* $item */.xr)(RainDoh_templateObject || (RainDoh_templateObject = RainDoh_taggedTemplateLiteral(["Rain-Doh black box"])));
/**
 * See whether the player has a Rain-Doh item in some form
 *
 * @returns Whether the player has any Rain-Doh item
 */

function RainDoh_have() {
  return (0,lib/* getFoldGroup */._D)(box).some(item => (0,lib/* have */.lf)(item));
}
/**
 * Get Rain-Doh black box copies made today
 *
 * @returns Number of Rain-Doh black box copies made
 */

function getRainDohBlackBoxCopiesMade() {
  return Math.max(0, (0,property.get)("_raindohCopiesMade"));
}
/**
 * Get the current Rain-doh box monster
 *
 * @returns Current Rain-doh box monster
 */

function getRainDohBlackBoxMonster() {
  return (0,property.get)("rainDohMonster");
}
/**
 * Use the Rain-Doh box full of monster (i.e. fight the monster probably)
 *
 * @returns Success
 */

function useRainDohBlackBox() {
  return (0,external_kolmafia_.use)(box);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2012/ReagnimatedGnome.js
var ReagnimatedGnome_templateObject, ReagnimatedGnome_templateObject2, ReagnimatedGnome_templateObject3, ReagnimatedGnome_templateObject4, ReagnimatedGnome_templateObject5, ReagnimatedGnome_templateObject6;

function ReagnimatedGnome_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




/**
 * @returns Whether the player has a Reagnimated Gnome in their terrarium
 */

function ReagnimatedGnome_have() {
  return (0,lib/* have */.lf)((0,template_string/* $familiar */.HP)(ReagnimatedGnome_templateObject || (ReagnimatedGnome_templateObject = ReagnimatedGnome_taggedTemplateLiteral(["Reagnimated Gnome"]))));
}
var bodyParts = {
  ears: (0,template_string/* $item */.xr)(ReagnimatedGnome_templateObject2 || (ReagnimatedGnome_templateObject2 = ReagnimatedGnome_taggedTemplateLiteral(["gnomish swimmer's ears"]))),
  lung: (0,template_string/* $item */.xr)(ReagnimatedGnome_templateObject3 || (ReagnimatedGnome_templateObject3 = ReagnimatedGnome_taggedTemplateLiteral(["gnomish coal miner's lung"]))),
  elbow: (0,template_string/* $item */.xr)(ReagnimatedGnome_templateObject4 || (ReagnimatedGnome_templateObject4 = ReagnimatedGnome_taggedTemplateLiteral(["gnomish tennis elbow"]))),
  kgnee: (0,template_string/* $item */.xr)(ReagnimatedGnome_templateObject5 || (ReagnimatedGnome_templateObject5 = ReagnimatedGnome_taggedTemplateLiteral(["gnomish housemaid's kgnee"]))),
  foot: (0,template_string/* $item */.xr)(ReagnimatedGnome_templateObject6 || (ReagnimatedGnome_templateObject6 = ReagnimatedGnome_taggedTemplateLiteral(["gnomish athlete's foot"])))
};
/**
 * @returns Reagnimated Gnome parts that have already been retrieved from the arena
 */

function chosenParts() {
  return Object.values(bodyParts).filter(part => (0,lib/* have */.lf)(part));
}
/**
 * Fetch Reagnimated Gnome part from the arena
 *
 * @param part Reagnimated Gnome body part
 * @returns Success
 */

function choosePart(part) {
  if (!ReagnimatedGnome_have()) return false;
  if ((0,lib/* have */.lf)(bodyParts[part])) return true;
  (0,external_kolmafia_.visitUrl)("arena.php");
  (0,external_kolmafia_.runChoice)(4);
  return chosenParts().includes(bodyParts[part]);
}
/**
 * Calculate expected adventures from a given combat for a Reagnimated Gnome at a given weight
 *
 * @param weight Weight with which to calculuate
 * @returns Expected adventures
 */

function expectedAdvsPerCombat(weight) {
  return Math.min(0.01 + weight / 1000 * 0.99, 1);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2013/Florist.js
function Florist_toConsumableArray(arr) { return Florist_arrayWithoutHoles(arr) || Florist_iterableToArray(arr) || Florist_unsupportedIterableToArray(arr) || Florist_nonIterableSpread(); }

function Florist_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function Florist_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Florist_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Florist_arrayLikeToArray(o, minLen); }

function Florist_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function Florist_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Florist_arrayLikeToArray(arr); }

function Florist_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function Florist_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Florist_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function Florist_createClass(Constructor, protoProps, staticProps) { if (protoProps) Florist_defineProperties(Constructor.prototype, protoProps); if (staticProps) Florist_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function Florist_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







var Flower = /*#__PURE__*/function () {
  function Flower(name, id, environment, modifier) {
    var territorial = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

    Florist_classCallCheck(this, Flower);

    Florist_defineProperty(this, "name", void 0);

    Florist_defineProperty(this, "id", void 0);

    Florist_defineProperty(this, "environment", void 0);

    Florist_defineProperty(this, "modifier", void 0);

    Florist_defineProperty(this, "territorial", void 0);

    this.name = name;
    this.id = id;
    this.environment = environment;
    this.modifier = modifier;
    this.territorial = territorial;
  }

  Florist_createClass(Flower, [{
    key: "isPlantedHere",
    value: function isPlantedHere() {
      var _get, _Flower$plantNamesInZ;

      var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (_get = (0,property.get)("lastAdventure")) !== null && _get !== void 0 ? _get : template_string/* $location.none */.PG.none;
      var plantedHere = (_Flower$plantNamesInZ = Flower.plantNamesInZone(location)) === null || _Flower$plantNamesInZ === void 0 ? void 0 : _Flower$plantNamesInZ.includes(this.name);
      return plantedHere !== undefined && plantedHere;
    }
  }, {
    key: "available",
    value: function available() {
      var _get2;

      var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (_get2 = (0,property.get)("lastAdventure")) !== null && _get2 !== void 0 ? _get2 : template_string/* $location.none */.PG.none;
      return this.environment === location.environment && !(0,property.get)("_floristPlantsUsed").includes(this.name) && !this.isPlantedHere(location);
    }
  }, {
    key: "dig",
    value: function dig() {
      if (!this.isPlantedHere()) return false;
      var flowers = Flower.plantNamesInZone();
      if (!flowers[2]) return false;
      var plantNumber = flowers.indexOf(this.name);
      Flower.visit();
      (0,external_kolmafia_.runChoice)(2, "plnti=".concat(plantNumber));
      return !this.isPlantedHere();
    }
  }, {
    key: "plant",
    value: function plant() {
      if (this.isPlantedHere()) return true;
      if (isFull()) return false;
      Flower.visit();
      (0,external_kolmafia_.runChoice)(1, "plant=".concat(this.id));
      return this.isPlantedHere();
    }
  }], [{
    key: "visit",
    value: function visit() {
      (0,external_kolmafia_.visitUrl)("place.php?whichplace=forestvillage&action=fv_friar");
    }
  }, {
    key: "plantNamesInZone",
    value: function plantNamesInZone() {
      var _get3, _getFloristPlants$loc;

      var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (_get3 = (0,property.get)("lastAdventure")) !== null && _get3 !== void 0 ? _get3 : template_string/* $location.none */.PG.none;
      return (_getFloristPlants$loc = (0,external_kolmafia_.getFloristPlants)()[location.toString()]) !== null && _getFloristPlants$loc !== void 0 ? _getFloristPlants$loc : [];
    }
  }, {
    key: "plantsInZone",
    value: function plantsInZone() {
      var _get4;

      var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (_get4 = (0,property.get)("lastAdventure")) !== null && _get4 !== void 0 ? _get4 : template_string/* $location.none */.PG.none;
      return this.plantNamesInZone(location).map(flowerName => toFlower(flowerName)).filter(utils/* notNull */.Nf);
    }
  }, {
    key: "modifiersInZone",
    value: function modifiersInZone() {
      var _get5;

      var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (_get5 = (0,property.get)("lastAdventure")) !== null && _get5 !== void 0 ? _get5 : template_string/* $location.none */.PG.none;
      var plants = this.plantsInZone(location);
      if (!plants) return {};
      var modifiers = plants.map(plant => plant.modifier).map(modifier => typeof modifier === "string" ? {} : modifier);
      return mergeModifiers.apply(void 0, Florist_toConsumableArray(modifiers));
    }
  }]);

  return Flower;
}();
/**
 * @returns Whether or not the Florist is currently available
 */


function Florist_have() {
  return (0,external_kolmafia_.floristAvailable)();
}
/**
 * Internal function used to convert strings to Flower instances
 *
 * @param name The flower name
 * @returns a Flower instance
 */

function toFlower(name) {
  var _all$find;

  return (_all$find = Florist_all.find(flower => name === flower.name)) !== null && _all$find !== void 0 ? _all$find : null;
}
/**
 * @param location The location to check
 * @returns an array of the Flowers in that location
 */


function flowersIn(location) {
  var returnValue = [];
  Flower.plantNamesInZone(location).map(toFlower).forEach(flower => {
    if (flower) returnValue.push(flower);
  });
  return returnValue;
}
/**
 * @param location The location to check
 * @returns an array of the Flowers we can plant in that location
 */

function flowersAvailableFor() {
  var _get6;

  var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (_get6 = (0,property.get)("lastAdventure")) !== null && _get6 !== void 0 ? _get6 : template_string/* $location.none */.PG.none;
  return Florist_all.filter(flower => flower.available(location));
}
/**
 * @param location The location to check
 * @returns `true` if the location has 3 flowers in it; `false` otherwise
 */

function isFull() {
  var _get7;

  var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (_get7 = (0,property.get)("lastAdventure")) !== null && _get7 !== void 0 ? _get7 : template_string/* $location.none */.PG.none;
  return flowersIn(location).length === 3;
}
var RabidDogwood = new Flower("Rabid Dogwood", 1, "outdoor", {
  "Monster Level": 30
}, true);
var Rutabeggar = new Flower("Rutabeggar", 2, "outdoor", {
  "Item Drop": 25
}, true);
var RadishRadish = new Flower("Rad-ish Radish", 3, "outdoor", {
  "Moxie Experience": 5
}, true);
var Artichoker = new Flower("Artichoker", 4, "outdoor", "Delevels Enemy");
var SmokeRa = new Flower("Smoke-ra", 5, "outdoor", "Blocks Attacks");
var SkunkCabbage = new Flower("Skunk Cabbage", 6, "outdoor", {
  "Stench Damage": 12.5
});
var DeadlyCinnamon = new Flower("Deadly Cinnamon", 7, "outdoor", {
  "Hot Damage": 12.5
});
var CeleryStalker = new Flower("Celery Stalker", 8, "outdoor", {
  "Spooky Damage": 12.5
});
var LettuceSpray = new Flower("Lettus Spray", 9, "outdoor", {
  "HP Regen Min": 10,
  "HP Regen Max": 29
});
var SeltzerWatercress = new Flower("Seltzer Watercress", 10, "outdoor", {
  "MP Regen Min": 5,
  "MP Regen Max": 15
});
var WarLily = new Flower("War Lily", 11, "indoor", {
  "Monster Level": 30
}, true);
var StealingMagnolia = new Flower("Stealing Magnolia", 12, "indoor", {
  "Item Drop": 25
}, true);
var CannedSpinach = new Flower("Canned Spinach", 13, "indoor", {
  "Muscle Experience": 5
}, true);
var Impatiens = new Flower("Impatiens", 14, "indoor", {
  Initiative: 25
});
var SpiderPlant = new Flower("Spider Plant", 15, "indoor", "Poison");
var RedFern = new Flower("Red Fern", 16, "indoor", "Delevels Enemy");
var BamBoo = new Flower("BamBOO!", 17, "indoor", {
  "Spooky Damage": 12.5
});
var ArcticMoss = new Flower("Arctic Moss", 18, "indoor", {
  "Cold Damage": 12.5
});
var AloeGuvnor = new Flower("Aloe Guv'nor", 19, "indoor", {
  "HP Regen Min": 10,
  "HP Regen Max": 30
});
var PitcherPlant = new Flower("Pitcher Plant", 20, "indoor", {
  "MP Regen Min": 5,
  "MP Regen Max": 15
});
var BlusteryPuffball = new Flower("Blustery Puffball", 21, "underground", {
  "Monster Level": 30
}, true);
var HornOfPlenty = new Flower("Horn of Plenty", 22, "underground", {
  "Item Drop": 25
}, true);
var WizardsWig = new Flower("Wizard's Wig", 23, "underground", {
  "Mysticality Experience": 5
}, true);
var ShuffleTruffle = new Flower("Shuffle Truffle", 24, "underground", {
  Initiative: 25
});
var DisLichen = new Flower("Dis Lichen", 25, "underground", "Delevels Enemy");
var LooseMorels = new Flower("Loose Morels", 26, "underground", {
  "Sleaze Damage": 12.5
});
var FoulToadstool = new Flower("Foul Toadstool", 27, "underground", {
  "Stench Damage": 12.5
});
var Chillterelle = new Flower("Chillterelle", 28, "underground", {
  "Cold Damage": 12.5
});
var Portlybella = new Flower("Portlybella", 29, "underground", {
  "HP Regen Min": 10,
  "HP Regen Max": 30
});
var MaxHeadshroom = new Flower("Max Headshroom", 30, "underground", {
  "MP Regen Min": 5,
  "MP Regen Max": 15
});
var Spankton = new Flower("Spankton", 31, "underwater", "Delevels Enemy", true);
var Kelptomaniac = new Flower("Kelptomaniac", 32, "underwater", {
  "Item Drop": 40
}, true);
var Crookweed = new Flower("Crookweed", 33, "underwater", {
  "Meat Drop": 60
}, true);
var ElectricEelgrass = new Flower("Electric Eelgrass", 34, "underwater", "Blocks Attacks");
var Duckweed = new Flower("Duckweed", 35, "underwater", "Blocks Attacks");
var OrcaOrchid = new Flower("Orca Orchid", 36, "underwater", {
  "Weapon Damage": 12.5
});
var Sargassum = new Flower("Sargassum", 37, "underwater", {
  "Stench Damage": 12.5
});
var SubSeaRose = new Flower("Sub-Sea Rose", 38, "underwater", {
  "Cold Damage": 12.5
});
var Snori = new Flower("Snori", 39, "underwater", {
  "HP Regen Min": 20,
  "HP Regen Max": 30,
  "MP Regen Min": 10,
  "MP Regen Max": 20
});
var UpSeaDaisy = new Flower("Up Sea Daisy", 40, "underwater", {
  Experience: 30
});
var Florist_all = Object.freeze([RabidDogwood, Rutabeggar, RadishRadish, Artichoker, SmokeRa, SkunkCabbage, DeadlyCinnamon, CeleryStalker, LettuceSpray, SeltzerWatercress, WarLily, StealingMagnolia, CannedSpinach, Impatiens, SpiderPlant, RedFern, BamBoo, ArcticMoss, AloeGuvnor, PitcherPlant, BlusteryPuffball, HornOfPlenty, WizardsWig, ShuffleTruffle, DisLichen, LooseMorels, FoulToadstool, Chillterelle, Portlybella, MaxHeadshroom, Spankton, Kelptomaniac, Crookweed, ElectricEelgrass, Duckweed, OrcaOrchid, Sargassum, SubSeaRose, Snori, UpSeaDaisy]);
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2013/JungMan.js
var JungMan_templateObject, _PLACES, JungMan_templateObject2, JungMan_templateObject3, JungMan_templateObject4, JungMan_templateObject5, JungMan_templateObject6, JungMan_templateObject7, JungMan_templateObject8, _JAR_ITEMS;

function JungMan_slicedToArray(arr, i) { return JungMan_arrayWithHoles(arr) || JungMan_iterableToArrayLimit(arr, i) || JungMan_unsupportedIterableToArray(arr, i) || JungMan_nonIterableRest(); }

function JungMan_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function JungMan_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return JungMan_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return JungMan_arrayLikeToArray(o, minLen); }

function JungMan_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function JungMan_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function JungMan_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function JungMan_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function JungMan_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var JungMan_familiar = (0,template_string/* $familiar */.HP)(JungMan_templateObject || (JungMan_templateObject = JungMan_taggedTemplateLiteral(["Angry Jung Man"])));
/**
 * @returns Whether we `have` the Jung Man
 */

function JungMan_have() {
  return (0,external_kolmafia_.haveFamiliar)(JungMan_familiar);
}
var Jar;

(function (Jar) {
  Jar["SUSPICIOUS_GUY"] = "susguy";
  Jar["GOURD_CAPTAIN"] = "gourdcaptain";
  Jar["CRACKPOT_MYSTIC"] = "mystic";
  Jar["OLD_MAN"] = "oldman";
  Jar["PRETENTIOUS_ARTIST"] = "artist";
  Jar["MEATSMITH"] = "meatsmith";
  Jar["JICK"] = "jick";
})(Jar || (Jar = {}));

var PLACES = (_PLACES = {}, JungMan_defineProperty(_PLACES, Jar.PRETENTIOUS_ARTIST, ["place", "town_wrong"]), JungMan_defineProperty(_PLACES, Jar.GOURD_CAPTAIN, ["place", "town_right"]), JungMan_defineProperty(_PLACES, Jar.CRACKPOT_MYSTIC, ["shop", "mystic"]), JungMan_defineProperty(_PLACES, Jar.OLD_MAN, ["place", "sea_oldman"]), JungMan_defineProperty(_PLACES, Jar.MEATSMITH, ["shop", "meatsmith"]), JungMan_defineProperty(_PLACES, Jar.JICK, ["showplayer", "1"]), JungMan_defineProperty(_PLACES, Jar.SUSPICIOUS_GUY, ["tavern"]), _PLACES);
var JAR_ITEMS = (_JAR_ITEMS = {}, JungMan_defineProperty(_JAR_ITEMS, Jar.SUSPICIOUS_GUY, (0,template_string/* $item */.xr)(JungMan_templateObject2 || (JungMan_templateObject2 = JungMan_taggedTemplateLiteral(["jar of psychoses (The Suspicious-Looking Guy)"])))), JungMan_defineProperty(_JAR_ITEMS, Jar.GOURD_CAPTAIN, (0,template_string/* $item */.xr)(JungMan_templateObject3 || (JungMan_templateObject3 = JungMan_taggedTemplateLiteral(["jar of psychoses (The Captain of the Gourd)"])))), JungMan_defineProperty(_JAR_ITEMS, Jar.CRACKPOT_MYSTIC, (0,template_string/* $item */.xr)(JungMan_templateObject4 || (JungMan_templateObject4 = JungMan_taggedTemplateLiteral(["jar of psychoses (The Crackpot Mystic)"])))), JungMan_defineProperty(_JAR_ITEMS, Jar.OLD_MAN, (0,template_string/* $item */.xr)(JungMan_templateObject5 || (JungMan_templateObject5 = JungMan_taggedTemplateLiteral(["jar of psychoses (The Old Man)"])))), JungMan_defineProperty(_JAR_ITEMS, Jar.PRETENTIOUS_ARTIST, (0,template_string/* $item */.xr)(JungMan_templateObject6 || (JungMan_templateObject6 = JungMan_taggedTemplateLiteral(["jar of psychoses (The Pretentious Artist)"])))), JungMan_defineProperty(_JAR_ITEMS, Jar.MEATSMITH, (0,template_string/* $item */.xr)(JungMan_templateObject7 || (JungMan_templateObject7 = JungMan_taggedTemplateLiteral(["jar of psychoses (The Meatsmith)"])))), JungMan_defineProperty(_JAR_ITEMS, Jar.JICK, (0,template_string/* $item */.xr)(JungMan_templateObject8 || (JungMan_templateObject8 = JungMan_taggedTemplateLiteral(["jar of psychoses (Jick)"])))), _JAR_ITEMS);

function getJungUrl(jar) {
  var _PLACES$jar = JungMan_slicedToArray(PLACES[jar], 2),
      page = _PLACES$jar[0],
      answer = _PLACES$jar[1];

  var question = page === "showplayer" ? "who" : "which".concat(page);
  var params = [["action", "jung"], ["whichperson", jar]];
  if (answer) params.push([question, answer]);
  return "".concat(page, ".php?").concat(params.map(pair => pair.join("=")).join("&"));
}
/**
 * @returns Whether we can currently make a Jick jar
 */


function canJickJar() {
  if ((0,property.get)("_jickJarAvailable") === "unknown") (0,external_kolmafia_.visitUrl)("showplayer.php?who=1");
  return (0,property.get)("_jickJarAvailable") === "true" && !(0,property.get)("_psychoJarFilled");
}
/**
 * Tries to make a psychoanalytic jar with the chosen target
 *
 * @param jar The character of Loathing to psychoanalyze
 * @returns Whether we successfully crafted the jar
 */

function makeJar(jar) {
  if (jar === Jar.JICK && !canJickJar()) return false;
  var result = (0,external_kolmafia_.visitUrl)(getJungUrl(jar));
  return result.includes("You open up the jar and look into the patient's eyes.");
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2014/CrimboShrub.js
var CrimboShrub_templateObject, CrimboShrub_templateObject2, CrimboShrub_templateObject3, CrimboShrub_templateObject4;

function CrimboShrub_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





/**
 * @returns Whether we `have` the Crimbo Shrub in our terrarium
 */

function CrimboShrub_have() {
  return (0,lib/* have */.lf)((0,template_string/* $familiar */.HP)(CrimboShrub_templateObject || (CrimboShrub_templateObject = CrimboShrub_taggedTemplateLiteral(["Crimbo Shrub"]))));
}
var Toppers = {
  Muscle: 1,
  Mysticality: 2,
  Moxie: 3
};
var Lights = {
  "Prismatic Damage": 1,
  "Hot Damage": 2,
  "Cold Damage": 3,
  "Stench Damage": 4,
  "Spooky Damage": 5,
  "Sleaze Damage": 6
};
var Garland = {
  "HP Regen": 1,
  "PvP Fights": 2,
  Blocking: 3
};
var Gifts = {
  "Yellow Ray": 1,
  "Red Ray": 2,
  Gifts: 3
};
var Prefs = {
  Muscle: "Muscle",
  Mysticality: "Mysticality",
  Moxie: "Moxie",
  Prismatic: "Prismatic Damage",
  Hot: "Hot Damage",
  Cold: "Cold Damage",
  Stench: "Stench Damage",
  Spooky: "Spooky Damage",
  Sleaze: "Sleaze Damage",
  HP: "HP Regen",
  PvP: "PvP Fights",
  blocking: "Blocking",
  yellow: "Yellow Ray",
  meat: "Red Ray",
  gifts: "Gifts"
};
/**
 * Internal function used to check whether decour perfectly matches what we want
 *
 * @param topper Topper to check for
 * @param lights Lights to check for
 * @param garland Garland to check for
 * @param gifts Gifts to check for
 * @returns Whether every single decour matches what we expect
 */

function isDecoratedWith(topper, lights, garland, gifts) {
  var decorations = [(0,property.get)("shrubTopper"), (0,property.get)("shrubLights"), (0,property.get)("shrubGarland"), (0,property.get)("shrubGifts")].map(x => Prefs[x]);
  return [topper, lights, garland, gifts].every((x, i) => x === decorations[i]);
}
/**
 * Decorates our Crimbo Shrub with the chosen decour, if able
 *
 * @param topper The shrub Topper to select
 * @param lights The shrub Lights to select
 * @param garland The shrub Garland to select
 * @param gifts The shrub Gifts to select
 * @returns Whether the shrub's decour perfectly matches the given decour
 */


function decorate(topper, lights, garland, gifts) {
  if (!CrimboShrub_have()) return false;
  if ((0,property.get)("_shrubDecorated")) return isDecoratedWith(topper, lights, garland, gifts);

  if (!(0,lib/* have */.lf)((0,template_string/* $item */.xr)(CrimboShrub_templateObject2 || (CrimboShrub_templateObject2 = CrimboShrub_taggedTemplateLiteral(["box of old Crimbo decorations"]))))) {
    (0,external_kolmafia_.useFamiliar)((0,template_string/* $familiar */.HP)(CrimboShrub_templateObject3 || (CrimboShrub_templateObject3 = CrimboShrub_taggedTemplateLiteral(["Crimbo Shrub"]))));
  }

  (0,lib/* directlyUse */.tg)((0,template_string/* $item */.xr)(CrimboShrub_templateObject4 || (CrimboShrub_templateObject4 = CrimboShrub_taggedTemplateLiteral(["box of old Crimbo decorations"]))));
  (0,external_kolmafia_.visitUrl)("choice.php?whichchoice=999&pwd=&option=1&topper=".concat(Toppers[topper], "&lights=").concat(Lights[lights], "&garland=").concat(Garland[garland], "&gift=").concat(Gifts[gifts]));
  return isDecoratedWith(topper, lights, garland, gifts);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2014/DNALab.js
var DNALab_templateObject, DNALab_templateObject2, DNALab_templateObject3, DNALab_templateObject4, DNALab_templateObject5, DNALab_templateObject6, DNALab_templateObject7, DNALab_templateObject8, DNALab_templateObject9, DNALab_templateObject10, DNALab_templateObject11, DNALab_templateObject12, DNALab_templateObject13, DNALab_templateObject14, DNALab_templateObject15, DNALab_templateObject16, DNALab_templateObject17, DNALab_templateObject18, DNALab_templateObject19, DNALab_templateObject20, DNALab_templateObject21, DNALab_templateObject22, DNALab_templateObject23, DNALab_templateObject24, DNALab_templateObject25, DNALab_templateObject26, DNALab_templateObject27, DNALab_templateObject28, DNALab_templateObject29, DNALab_templateObject30, DNALab_templateObject31, DNALab_templateObject32, DNALab_templateObject33, DNALab_templateObject34, DNALab_templateObject35, DNALab_templateObject36, DNALab_templateObject37, DNALab_templateObject38, DNALab_templateObject39, DNALab_templateObject40, DNALab_templateObject41, DNALab_templateObject42, DNALab_templateObject43, DNALab_templateObject44, DNALab_templateObject45, DNALab_templateObject46, DNALab_templateObject47, DNALab_templateObject48, DNALab_templateObject49, DNALab_templateObject50, DNALab_templateObject51, DNALab_templateObject52, DNALab_templateObject53, DNALab_templateObject54, DNALab_templateObject55, DNALab_templateObject56, DNALab_templateObject57, DNALab_templateObject58, DNALab_templateObject59, DNALab_templateObject60, DNALab_templateObject61, DNALab_templateObject62, DNALab_templateObject63, DNALab_templateObject64, DNALab_templateObject65, DNALab_templateObject66, DNALab_templateObject67, DNALab_templateObject68, DNALab_templateObject69, DNALab_templateObject70, DNALab_templateObject71, DNALab_templateObject72, DNALab_templateObject73, DNALab_templateObject74, DNALab_templateObject75, DNALab_templateObject76, DNALab_templateObject77, DNALab_templateObject78, DNALab_templateObject79, DNALab_templateObject80, DNALab_templateObject81, DNALab_templateObject82, DNALab_templateObject83, DNALab_templateObject84, DNALab_templateObject85;

function DNALab_slicedToArray(arr, i) { return DNALab_arrayWithHoles(arr) || DNALab_iterableToArrayLimit(arr, i) || DNALab_unsupportedIterableToArray(arr, i) || DNALab_nonIterableRest(); }

function DNALab_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function DNALab_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return DNALab_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return DNALab_arrayLikeToArray(o, minLen); }

function DNALab_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function DNALab_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function DNALab_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function DNALab_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }







var lab = (0,template_string/* $item */.xr)(DNALab_templateObject || (DNALab_templateObject = DNALab_taggedTemplateLiteral(["Little Geneticist DNA-Splicing Lab"])));
/**
 * @returns Whether or not you `have` DNA lab or it's installed
 */

function DNALab_have() {
  return (0,lib/* have */.lf)(lab) || (0,external_kolmafia_.getWorkshed)() === lab;
}
/**
 * @returns Whether the DNA Lab is your currently active workshed
 */

function DNALab_installed() {
  return (0,external_kolmafia_.getWorkshed)() === lab;
}
var phylaEffects = new Map([[(0,template_string/* $phylum */.tq)(DNALab_templateObject2 || (DNALab_templateObject2 = DNALab_taggedTemplateLiteral(["beast"]))), (0,template_string/* $effect */._G)(DNALab_templateObject3 || (DNALab_templateObject3 = DNALab_taggedTemplateLiteral(["Human-Beast Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject4 || (DNALab_templateObject4 = DNALab_taggedTemplateLiteral(["bug"]))), (0,template_string/* $effect */._G)(DNALab_templateObject5 || (DNALab_templateObject5 = DNALab_taggedTemplateLiteral(["Human-Insect Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject6 || (DNALab_templateObject6 = DNALab_taggedTemplateLiteral(["constellation"]))), (0,template_string/* $effect */._G)(DNALab_templateObject7 || (DNALab_templateObject7 = DNALab_taggedTemplateLiteral(["Human-Constellation Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject8 || (DNALab_templateObject8 = DNALab_taggedTemplateLiteral(["construct"]))), (0,template_string/* $effect */._G)(DNALab_templateObject9 || (DNALab_templateObject9 = DNALab_taggedTemplateLiteral(["Human-Machine Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject10 || (DNALab_templateObject10 = DNALab_taggedTemplateLiteral(["demon"]))), (0,template_string/* $effect */._G)(DNALab_templateObject11 || (DNALab_templateObject11 = DNALab_taggedTemplateLiteral(["Human-Demon Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject12 || (DNALab_templateObject12 = DNALab_taggedTemplateLiteral(["dude"]))), (0,template_string/* $effect */._G)(DNALab_templateObject13 || (DNALab_templateObject13 = DNALab_taggedTemplateLiteral(["Human-Human Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject14 || (DNALab_templateObject14 = DNALab_taggedTemplateLiteral(["elemental"]))), (0,template_string/* $effect */._G)(DNALab_templateObject15 || (DNALab_templateObject15 = DNALab_taggedTemplateLiteral(["Human-Elemental Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject16 || (DNALab_templateObject16 = DNALab_taggedTemplateLiteral(["elf"]))), (0,template_string/* $effect */._G)(DNALab_templateObject17 || (DNALab_templateObject17 = DNALab_taggedTemplateLiteral(["Human-Elf Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject18 || (DNALab_templateObject18 = DNALab_taggedTemplateLiteral(["fish"]))), (0,template_string/* $effect */._G)(DNALab_templateObject19 || (DNALab_templateObject19 = DNALab_taggedTemplateLiteral(["Human-Fish Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject20 || (DNALab_templateObject20 = DNALab_taggedTemplateLiteral(["goblin"]))), (0,template_string/* $effect */._G)(DNALab_templateObject21 || (DNALab_templateObject21 = DNALab_taggedTemplateLiteral(["Human-Goblin Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject22 || (DNALab_templateObject22 = DNALab_taggedTemplateLiteral(["hippy"]))), (0,template_string/* $effect */._G)(DNALab_templateObject23 || (DNALab_templateObject23 = DNALab_taggedTemplateLiteral(["Human-Hobo Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject24 || (DNALab_templateObject24 = DNALab_taggedTemplateLiteral(["horror"]))), (0,template_string/* $effect */._G)(DNALab_templateObject25 || (DNALab_templateObject25 = DNALab_taggedTemplateLiteral(["Human-Horror Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject26 || (DNALab_templateObject26 = DNALab_taggedTemplateLiteral(["humanoid"]))), (0,template_string/* $effect */._G)(DNALab_templateObject27 || (DNALab_templateObject27 = DNALab_taggedTemplateLiteral(["Human-Humanoid Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject28 || (DNALab_templateObject28 = DNALab_taggedTemplateLiteral(["mer-kin"]))), (0,template_string/* $effect */._G)(DNALab_templateObject29 || (DNALab_templateObject29 = DNALab_taggedTemplateLiteral(["Human-Mer-kin Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject30 || (DNALab_templateObject30 = DNALab_taggedTemplateLiteral(["orc"]))), (0,template_string/* $effect */._G)(DNALab_templateObject31 || (DNALab_templateObject31 = DNALab_taggedTemplateLiteral(["Human-Orc Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject32 || (DNALab_templateObject32 = DNALab_taggedTemplateLiteral(["penguin"]))), (0,template_string/* $effect */._G)(DNALab_templateObject33 || (DNALab_templateObject33 = DNALab_taggedTemplateLiteral(["Human-Penguin Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject34 || (DNALab_templateObject34 = DNALab_taggedTemplateLiteral(["pirate"]))), (0,template_string/* $effect */._G)(DNALab_templateObject35 || (DNALab_templateObject35 = DNALab_taggedTemplateLiteral(["Human-Pirate Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject36 || (DNALab_templateObject36 = DNALab_taggedTemplateLiteral(["plant"]))), (0,template_string/* $effect */._G)(DNALab_templateObject37 || (DNALab_templateObject37 = DNALab_taggedTemplateLiteral(["Human-Plant Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject38 || (DNALab_templateObject38 = DNALab_taggedTemplateLiteral(["slime"]))), (0,template_string/* $effect */._G)(DNALab_templateObject39 || (DNALab_templateObject39 = DNALab_taggedTemplateLiteral(["Human-Slime Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject40 || (DNALab_templateObject40 = DNALab_taggedTemplateLiteral(["undead"]))), (0,template_string/* $effect */._G)(DNALab_templateObject41 || (DNALab_templateObject41 = DNALab_taggedTemplateLiteral(["Human-Undead Hybrid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject42 || (DNALab_templateObject42 = DNALab_taggedTemplateLiteral(["weird"]))), (0,template_string/* $effect */._G)(DNALab_templateObject43 || (DNALab_templateObject43 = DNALab_taggedTemplateLiteral(["Human-Weird Thing Hybrid"])))]]);
var phylaTonics = new Map([[(0,template_string/* $phylum */.tq)(DNALab_templateObject44 || (DNALab_templateObject44 = DNALab_taggedTemplateLiteral(["beast"]))), (0,template_string/* $item */.xr)(DNALab_templateObject45 || (DNALab_templateObject45 = DNALab_taggedTemplateLiteral(["Gene Tonic: Beast"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject46 || (DNALab_templateObject46 = DNALab_taggedTemplateLiteral(["bug"]))), (0,template_string/* $item */.xr)(DNALab_templateObject47 || (DNALab_templateObject47 = DNALab_taggedTemplateLiteral(["Gene Tonic: Insect"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject48 || (DNALab_templateObject48 = DNALab_taggedTemplateLiteral(["constellation"]))), (0,template_string/* $item */.xr)(DNALab_templateObject49 || (DNALab_templateObject49 = DNALab_taggedTemplateLiteral(["Gene Tonic: Constellation"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject50 || (DNALab_templateObject50 = DNALab_taggedTemplateLiteral(["construct"]))), (0,template_string/* $item */.xr)(DNALab_templateObject51 || (DNALab_templateObject51 = DNALab_taggedTemplateLiteral(["Gene Tonic: Construct"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject52 || (DNALab_templateObject52 = DNALab_taggedTemplateLiteral(["demon"]))), (0,template_string/* $item */.xr)(DNALab_templateObject53 || (DNALab_templateObject53 = DNALab_taggedTemplateLiteral(["Gene Tonic: Demon"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject54 || (DNALab_templateObject54 = DNALab_taggedTemplateLiteral(["dude"]))), (0,template_string/* $item */.xr)(DNALab_templateObject55 || (DNALab_templateObject55 = DNALab_taggedTemplateLiteral(["Gene Tonic: Humanoid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject56 || (DNALab_templateObject56 = DNALab_taggedTemplateLiteral(["elemental"]))), (0,template_string/* $item */.xr)(DNALab_templateObject57 || (DNALab_templateObject57 = DNALab_taggedTemplateLiteral(["Gene Tonic: Elemental"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject58 || (DNALab_templateObject58 = DNALab_taggedTemplateLiteral(["elf"]))), (0,template_string/* $item */.xr)(DNALab_templateObject59 || (DNALab_templateObject59 = DNALab_taggedTemplateLiteral(["Gene Tonic: Elf"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject60 || (DNALab_templateObject60 = DNALab_taggedTemplateLiteral(["fish"]))), (0,template_string/* $item */.xr)(DNALab_templateObject61 || (DNALab_templateObject61 = DNALab_taggedTemplateLiteral(["Gene Tonic: Fish"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject62 || (DNALab_templateObject62 = DNALab_taggedTemplateLiteral(["goblin"]))), (0,template_string/* $item */.xr)(DNALab_templateObject63 || (DNALab_templateObject63 = DNALab_taggedTemplateLiteral(["Gene Tonic: Goblin"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject64 || (DNALab_templateObject64 = DNALab_taggedTemplateLiteral(["hippy"]))), (0,template_string/* $item */.xr)(DNALab_templateObject65 || (DNALab_templateObject65 = DNALab_taggedTemplateLiteral(["Gene Tonic: Hobo"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject66 || (DNALab_templateObject66 = DNALab_taggedTemplateLiteral(["horror"]))), (0,template_string/* $item */.xr)(DNALab_templateObject67 || (DNALab_templateObject67 = DNALab_taggedTemplateLiteral(["Gene Tonic: Horror"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject68 || (DNALab_templateObject68 = DNALab_taggedTemplateLiteral(["humanoid"]))), (0,template_string/* $item */.xr)(DNALab_templateObject69 || (DNALab_templateObject69 = DNALab_taggedTemplateLiteral(["Gene Tonic: Humanoid"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject70 || (DNALab_templateObject70 = DNALab_taggedTemplateLiteral(["mer-kin"]))), (0,template_string/* $item */.xr)(DNALab_templateObject71 || (DNALab_templateObject71 = DNALab_taggedTemplateLiteral(["Gene Tonic: Mer-kin"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject72 || (DNALab_templateObject72 = DNALab_taggedTemplateLiteral(["orc"]))), (0,template_string/* $item */.xr)(DNALab_templateObject73 || (DNALab_templateObject73 = DNALab_taggedTemplateLiteral(["Gene Tonic: Orc"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject74 || (DNALab_templateObject74 = DNALab_taggedTemplateLiteral(["penguin"]))), (0,template_string/* $item */.xr)(DNALab_templateObject75 || (DNALab_templateObject75 = DNALab_taggedTemplateLiteral(["Gene Tonic: Penguin"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject76 || (DNALab_templateObject76 = DNALab_taggedTemplateLiteral(["pirate"]))), (0,template_string/* $item */.xr)(DNALab_templateObject77 || (DNALab_templateObject77 = DNALab_taggedTemplateLiteral(["Gene Tonic: Pirate"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject78 || (DNALab_templateObject78 = DNALab_taggedTemplateLiteral(["plant"]))), (0,template_string/* $item */.xr)(DNALab_templateObject79 || (DNALab_templateObject79 = DNALab_taggedTemplateLiteral(["Gene Tonic: Plant"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject80 || (DNALab_templateObject80 = DNALab_taggedTemplateLiteral(["slime"]))), (0,template_string/* $item */.xr)(DNALab_templateObject81 || (DNALab_templateObject81 = DNALab_taggedTemplateLiteral(["Gene Tonic: Slime"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject82 || (DNALab_templateObject82 = DNALab_taggedTemplateLiteral(["undead"]))), (0,template_string/* $item */.xr)(DNALab_templateObject83 || (DNALab_templateObject83 = DNALab_taggedTemplateLiteral(["Gene Tonic: Undead"])))], [(0,template_string/* $phylum */.tq)(DNALab_templateObject84 || (DNALab_templateObject84 = DNALab_taggedTemplateLiteral(["weird"]))), (0,template_string/* $item */.xr)(DNALab_templateObject85 || (DNALab_templateObject85 = DNALab_taggedTemplateLiteral(["Gene Tonic: Weird"])))]]);
var tonicEffects = Array.from(phylaEffects.values());
/**
 * Tells you whether you are currently hybridized. When passed with an input of any sort, tells you whether you are currently hybridized with that effect.
 *
 * @param tonic Optional input. When passed, the function returns whether that specific effect is hybridized.
 * @returns Whether the given tonic is currently hybridized
 */

function isHybridized(tonic) {
  if (!tonic) return DNALab_installed() && (0,property.get)("_dnaHybrid");
  var tonicEffect = tonic instanceof external_kolmafia_.Effect ? tonic : tonic instanceof external_kolmafia_.Phylum ? getEffect(tonic) : (0,external_kolmafia_.toEffect)(modifier_get("Effect", tonic));
  return tonicEffects.includes(tonicEffect) && (0,external_kolmafia_.haveEffect)(tonicEffect) === 2147483647;
}
/**
 * Returns the tonic item associated with a particular phylum.
 *
 * @param phylum The phylum in question.
 * @returns The tonic item associated with that phylum; returns $item.none for $phylum.none.
 */

function getTonic(phylum) {
  var _phylaTonics$get;

  return (_phylaTonics$get = phylaTonics.get(phylum)) !== null && _phylaTonics$get !== void 0 ? _phylaTonics$get : template_string/* $item.none */.xr.none; //return $item.none rather than null because it should never happen.
}
/**
 * Returns the tonic effect associated with a particular phylum.
 *
 * @param phylum The phylum in question.
 * @returns The tonic effect associated with that phylum; returns $effect.none for $phylum.none.
 */

function getEffect(phylum) {
  var _phylaEffects$get;

  return (_phylaEffects$get = phylaEffects.get(phylum)) !== null && _phylaEffects$get !== void 0 ? _phylaEffects$get : template_string/* $effect.none */._G.none; //return $effect.none rather than null because it should never happen
}
/**
 * Tells you which phylum to hunt down for a given effect or item.
 *
 * @param dnatype The tonic effect or item in question
 * @returns The Phylum associated with that effect or item; null if an invalid choice
 */

function phylumFor(dnatype) {
  if (dnatype instanceof external_kolmafia_.Effect) {
    var phylumPair = Array.from(phylaEffects.entries()).find(_ref => {
      var _ref2 = DNALab_slicedToArray(_ref, 2),
          effect = _ref2[1];

      return effect === dnatype;
    });
    return phylumPair ? phylumPair[0] : null;
  } else {
    var _phylumPair = Array.from(phylaTonics.entries()).find(_ref3 => {
      var _ref4 = DNALab_slicedToArray(_ref3, 2),
          tonic = _ref4[1];

      return tonic === dnatype;
    });

    return _phylumPair ? _phylumPair[0] : null;
  }
}
/**
 * Hybridize yourself with the current contents of your syringe, if possible.
 *
 * @returns Whether or not we succeeded
 */

function hybridize() {
  if ((0,property.get)("_dnaHybrid")) return false;
  if (!DNALab_installed()) return false;
  var currentSyringe = (0,property.get)("dnaSyringe");
  if (!currentSyringe) return false;
  var tonicPotion = getTonic(currentSyringe);
  var expectedEffect = (0,external_kolmafia_.toEffect)(modifier_get("Effect", tonicPotion));
  (0,external_kolmafia_.cliExecute)("camp dnainject");
  return isHybridized(expectedEffect);
}
/**
 * Makes tonics with whatever phylum is currently in your syringe
 *
 * @param {number} [amount=1] the number of tonics to make
 * @returns Whether we successfully made tonics; returns true if we made as many as we could, regardless of whether that was the number requested
 */

function makeTonic() {
  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  if (!DNALab_installed()) return false;
  var currentSyringe = (0,property.get)("dnaSyringe");
  if (!currentSyringe) return false;
  var tonicPotion = getTonic(currentSyringe);
  var amountToMake = (0,utils/* clamp */.uZ)(amount, 0, tonicsLeft());
  var startingAmount = (0,external_kolmafia_.itemAmount)(tonicPotion);
  (0,external_kolmafia_.cliExecute)("camp dnapotion ".concat(amountToMake));
  return (0,external_kolmafia_.itemAmount)(tonicPotion) - startingAmount === amountToMake;
}
/**
 * Tells you how many tonics you can make the rest of the day.
 *
 * @returns The remaining tonics you can make
 */

function tonicsLeft() {
  return (0,utils/* clamp */.uZ)(3 - (0,property.get)("_dnaPotionsMade"), 0, 3);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2014/WinterGarden.js
var WinterGarden_templateObject, WinterGarden_templateObject2, WinterGarden_templateObject3, WinterGarden_templateObject4;

function WinterGarden_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





/**
 * @returns Whether the Winter Garden is our currently installed garden
 */

function WinterGarden_have() {
  return (0,lib/* haveInCampground */.sy)((0,template_string/* $item */.xr)(WinterGarden_templateObject || (WinterGarden_templateObject = WinterGarden_taggedTemplateLiteral(["packet of winter seeds"]))));
}
/**
 * @returns Whether we have an unfinished ice sculpture hanging around
 */

function haveUnfinishedIceSculpture() {
  return (0,lib/* have */.lf)((0,template_string/* $item */.xr)(WinterGarden_templateObject2 || (WinterGarden_templateObject2 = WinterGarden_taggedTemplateLiteral(["unfinished ice sculpture"]))));
}
/**
 * @returns Whether or not we've used an unfinished ice sculpture today
 */

function isUnfinishedIceSculptureUsed() {
  return (0,property.get)("_iceSculptureUsed");
}
/**
 * @returns Whether we're able to use an unfinished ice sculpture in combat right now
 */

function couldUseUnfinishedIceSculpture() {
  return (0,lib/* have */.lf)((0,template_string/* $item */.xr)(WinterGarden_templateObject3 || (WinterGarden_templateObject3 = WinterGarden_taggedTemplateLiteral(["unfinished ice sculpture"])))) && !(0,lib/* have */.lf)((0,template_string/* $item */.xr)(WinterGarden_templateObject4 || (WinterGarden_templateObject4 = WinterGarden_taggedTemplateLiteral(["ice sculpture"]))));
}
/**
 * @returns Our current ice sculpture monster; `null` if none
 */

function getUnfinishedIceSculptureMonster() {
  return (0,property.get)("iceSculptureMonster");
}
var UnfinishedIceSculpture = new Copier(() => couldUseUnfinishedIceSculpture(), null, () => couldUseUnfinishedIceSculpture(), () => getUnfinishedIceSculptureMonster());
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2015/BarrelShrine.js
var BarrelShrine_templateObject;

function BarrelShrine_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var BARRELS = (0,template_string/* $items */.vS)(BarrelShrine_templateObject || (BarrelShrine_templateObject = BarrelShrine_taggedTemplateLiteral(["little firkin, normal barrel, big tun, weathered barrel, dusty barrel, disintegrating barrel, moist barrel, rotting barrel, mouldering barrel, barnacled barrel"])));
/**
 * @returns Whether we have the barrel shrine
 */

function BarrelShrine_have() {
  return (0,property.get)("barrelShrineUnlocked");
}
/**
 * Smashes all barrels in our inventory
 */

function smashParty() {
  if (!BarrelShrine_have()) return;
  var total = (0,utils/* sum */.Sm)(BARRELS, external_kolmafia_.availableAmount);
  if (total <= 0) return;
  (0,external_kolmafia_.visitUrl)("inv_use.php?pwd&whichitem=8568&choice=1");

  for (var i = 0; i < total / 100; i++) {
    (0,external_kolmafia_.runChoice)(2);
  }
}
// EXTERNAL MODULE: ./node_modules/libram/dist/resources/2015/ChateauMantegna.js
var ChateauMantegna = __webpack_require__(543);
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2015/DeckOfEveryCard.js
var DeckOfEveryCard_templateObject;

function DeckOfEveryCard_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






/**
 * @returns Do we `have` the Deck of Every Card?
 */

function DeckOfEveryCard_have() {
  return (0,lib/* have */.lf)((0,template_string/* $item */.xr)(DeckOfEveryCard_templateObject || (DeckOfEveryCard_templateObject = DeckOfEveryCard_taggedTemplateLiteral(["Deck of Every Card"]))));
}
var cards = Object.freeze(["X of Clubs", "X of Diamonds", "X of Hearts", "X of Spades", "X of Papayas", "X of Kumquats", "X of Salads", "X of Cups", "X of Coins", "X of Swords", "X of Wands", "XVI - The Tower", "Professor Plum", "Spare Tire", "Extra Tank", "Sheep", "Year of Plenty", "Mine", "Laboratory", "Plains", "Swamp", "Mountain", "Forest", "Island", "Lead Pipe", "Rope", "Wrench", "Candlestick", "Knife", "Revolver", "Gift Card", "1952 Mickey Mantle", "XXI - The World", "III - The Empress", "VI - The Lovers", "Healing Salve", "Dark Ritual", "Lightning Bolt", "Giant Growth", "Ancestral Recall", "XI - Strength", "I - The Magician", "0 - The Fool", "X - The Wheel of Fortune", "The Race Card", "Green Card", "IV - The Emperor", "IX - The Hermit", "Werewolf", "The Hive", "XVII - The Star", "VII - The Chariot", "XV - The Devil", "V - The Hierophant", "Fire Elemental", "Christmas Card", "Go Fish", "Goblin Sapper", "II - The High Priestess", "XIV - Temperance", "XVIII - The Moon", "Hunky Fireman Card", "Aquarius Horoscope", "XII - The Hanged Man", "Suit Warehouse Discount Card", "Pirate Birthday Card", "Plantable Greeting Card", "Slimer Trading Card", "XIII - Death", "Unstable Portal"]);
/**
 * @returns The number of cards we've drawn so far today--remember, cheating counts as 5
 */

function getCardsDrawn() {
  return (0,utils/* clamp */.uZ)((0,property.get)("_deckCardsDrawn"), 0, 15);
}
/**
 * @returns The number of draws we have remaining today--remember, cheating counts as 5
 */

function getRemainingDraws() {
  return 15 - getCardsDrawn();
}
/**
 * @returns The number of additional cards we can cheat today
 */

function getRemainingCheats() {
  return Math.floor(getRemainingDraws() / 5);
}
/**
 * @returns An array of the Cards we've seen today
 */

function getCardsSeen() {
  return (0,property.get)("_deckCardsSeen") ? (0,property.get)("_deckCardsSeen").split("|") : [];
}
/**
 * Cheat a card of your choice from the Deck
 *
 * @param card The card in question
 * @returns `true` if we succeed or if we've already cheated that card today; `false` if we fail or are out of draws/cheats for the day.
 */

function cheatCard(card) {
  if (getCardsSeen().includes(card)) return true;
  if (getRemainingDraws() < 5) return false;
  return (0,external_kolmafia_.cliExecute)("cheat ".concat(card));
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2015/Dinseylandfill.js
var Dinseylandfill_templateObject, Dinseylandfill_templateObject2, Dinseylandfill_templateObject3, Dinseylandfill_templateObject4, Dinseylandfill_templateObject5, Dinseylandfill_templateObject6, Dinseylandfill_templateObject7, Dinseylandfill_templateObject8, Dinseylandfill_templateObject9, Dinseylandfill_templateObject10, Dinseylandfill_templateObject11, Dinseylandfill_templateObject12, Dinseylandfill_templateObject13, Dinseylandfill_templateObject14, Dinseylandfill_templateObject15, Dinseylandfill_templateObject16, Dinseylandfill_templateObject17, Dinseylandfill_templateObject18, Dinseylandfill_templateObject19, Dinseylandfill_templateObject20, Dinseylandfill_templateObject21, Dinseylandfill_templateObject22, Dinseylandfill_templateObject23, Dinseylandfill_templateObject24, Dinseylandfill_templateObject25, Dinseylandfill_templateObject26, Dinseylandfill_templateObject27;

function Dinseylandfill_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = Dinseylandfill_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function Dinseylandfill_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Dinseylandfill_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Dinseylandfill_arrayLikeToArray(o, minLen); }

function Dinseylandfill_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function Dinseylandfill_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function Dinseylandfill_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Dinseylandfill_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function Dinseylandfill_createClass(Constructor, protoProps, staticProps) { if (protoProps) Dinseylandfill_defineProperties(Constructor.prototype, protoProps); if (staticProps) Dinseylandfill_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function Dinseylandfill_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





/**
 * @returns Whether you permanently own Dinseylandfill
 */

function Dinseylandfill_have() {
  return (0,property.get)("stenchAirportAlways");
}
/**
 * @returns Whether you have access to Dinseylandfill currently
 */

function available() {
  return Dinseylandfill_have() || (0,property.get)("_stenchAirportToday");
}

var QuestData = /*#__PURE__*/function () {
  /**
   * Process for determining where to put a wanderer to extract additional value from it
   *
   * @param name easy to refer to name of the quest
   * @param priority ranked preference of quests
   * @param questNameKiosk returns the name of the quest as found at the dinseylandfill Job Kiosk
   * @param questNameQuestLog returns the name of the quest as found in the quest log
   * @param questStateProperty name of the mafia property tracing the current state of the quest (e.g. unstarted, step[x], finished)
   * @param questProgressProperty name of the mafia property that tracks progress of the current quest state
   * @param questProgressLimit Maximum questProgressProperty can reach
   * @param canUseWanderers whether wandering monsters can be used to progress the quest
   * @param requiredItem the required item (if any) needed to be equipped to progress the quest
   * @param questLocation where to adventure to progress the quest
   */
  function QuestData(name, priority, questNameKiosk, questNameQuestLog, questStateProperty, questProgressProperty, questProgressLimit, canUseWanderers, requiredItem, questLocation) {
    Dinseylandfill_classCallCheck(this, QuestData);

    Dinseylandfill_defineProperty(this, "name", void 0);

    Dinseylandfill_defineProperty(this, "priority", void 0);

    Dinseylandfill_defineProperty(this, "questNameKiosk", void 0);

    Dinseylandfill_defineProperty(this, "questNameQuestLog", void 0);

    Dinseylandfill_defineProperty(this, "questStateProperty", void 0);

    Dinseylandfill_defineProperty(this, "questProgressProperty", void 0);

    Dinseylandfill_defineProperty(this, "questProgressLimit", void 0);

    Dinseylandfill_defineProperty(this, "canUseWanderers", void 0);

    Dinseylandfill_defineProperty(this, "requiredItem", void 0);

    Dinseylandfill_defineProperty(this, "questLocation", void 0);

    this.name = name;
    this.priority = priority;
    this.questNameKiosk = questNameKiosk;
    this.questNameQuestLog = questNameQuestLog;
    this.questStateProperty = questStateProperty;
    this.questProgressProperty = questProgressProperty;
    this.questProgressLimit = questProgressLimit;
    this.canUseWanderers = canUseWanderers;
    this.requiredItem = requiredItem;
    this.questLocation = questLocation;
  }

  Dinseylandfill_createClass(QuestData, [{
    key: "currentQuest",
    value: function currentQuest() {
      return (0,property.get)(this.questStateProperty) !== "unstarted";
    }
  }]);

  return QuestData;
}();

var kioskUrl = "place.php?whichplace=airport_stench&action=airport3_kiosk";
var maintUrl = "place.php?whichplace=airport_stench&action=airport3_tunnels";
var quests = [new QuestData("lube", 1, "Track Maintenance", "Super Luber", "questEStSuperLuber", "", 0, false, (0,template_string/* $item */.xr)(Dinseylandfill_templateObject || (Dinseylandfill_templateObject = Dinseylandfill_taggedTemplateLiteral(["lube-shoes"]))), (0,template_string/* $location */.PG)(Dinseylandfill_templateObject2 || (Dinseylandfill_templateObject2 = Dinseylandfill_taggedTemplateLiteral(["Barf Mountain"])))), new QuestData("fuel", 0, "Electrical Maintenance", "Give Me Fuel", "questEStGiveMeFuel", "", 0, false, (0,template_string/* $item */.xr)(Dinseylandfill_templateObject3 || (Dinseylandfill_templateObject3 = Dinseylandfill_taggedTemplateLiteral(["none"]))), (0,template_string/* $location */.PG)(Dinseylandfill_templateObject4 || (Dinseylandfill_templateObject4 = Dinseylandfill_taggedTemplateLiteral(["The Toxic Teacups"])))), new QuestData("sexism", 2, "Sexism Reduction", "Social Justice Adventurer I", "questEStSocialJusticeI", "dinseySocialJusticeIProgress", 15, true, (0,template_string/* $item */.xr)(Dinseylandfill_templateObject5 || (Dinseylandfill_templateObject5 = Dinseylandfill_taggedTemplateLiteral(["none"]))), (0,template_string/* $location */.PG)(Dinseylandfill_templateObject6 || (Dinseylandfill_templateObject6 = Dinseylandfill_taggedTemplateLiteral(["Pirates of the Garbage Barges"])))), new QuestData("racism", 3, "Racism Reduction", "Social Justice Adventurer II", "questEStSocialJusticeII", "dinseySocialJusticeIIProgress", 15, true, (0,template_string/* $item */.xr)(Dinseylandfill_templateObject7 || (Dinseylandfill_templateObject7 = Dinseylandfill_taggedTemplateLiteral(["none"]))), (0,template_string/* $location */.PG)(Dinseylandfill_templateObject8 || (Dinseylandfill_templateObject8 = Dinseylandfill_taggedTemplateLiteral(["Uncle Gator's Country Fun-Time Liquid Waste Sluice"])))), new QuestData("fun", 4, "Compulsory Fun", "Whistling Zippity-Doo-Dah", "questEStZippityDooDah", "dinseyFunProgress", 15, true, (0,template_string/* $item */.xr)(Dinseylandfill_templateObject9 || (Dinseylandfill_templateObject9 = Dinseylandfill_taggedTemplateLiteral(["Dinsey mascot mask"]))), (0,template_string/* $location */.PG)(Dinseylandfill_templateObject10 || (Dinseylandfill_templateObject10 = Dinseylandfill_taggedTemplateLiteral(["The Toxic Teacups"])))), new QuestData("trash", 6, "Waterway Debris Removal", "Teach a Man to Fish Trash", "questEStFishTrash", "dinseyFilthLevel", 0, true, (0,template_string/* $item */.xr)(Dinseylandfill_templateObject11 || (Dinseylandfill_templateObject11 = Dinseylandfill_taggedTemplateLiteral(["trash net"]))), (0,template_string/* $location */.PG)(Dinseylandfill_templateObject12 || (Dinseylandfill_templateObject12 = Dinseylandfill_taggedTemplateLiteral(["Pirates of the Garbage Barges"])))), new QuestData("bear", 5, "Bear Removal", "Nasty, Nasty Bears", "questEStNastyBears", "dinseyNastyBearsDefeated", 8, false, (0,template_string/* $item */.xr)(Dinseylandfill_templateObject13 || (Dinseylandfill_templateObject13 = Dinseylandfill_taggedTemplateLiteral(["none"]))), (0,template_string/* $location */.PG)(Dinseylandfill_templateObject14 || (Dinseylandfill_templateObject14 = Dinseylandfill_taggedTemplateLiteral(["Uncle Gator's Country Fun-Time Liquid Waste Sluice"])))), new QuestData("food", 7, "Guest Sustenance Assurance", "Will Work With Food", "questEStWorkWithFood", "dinseyTouristsFed", 30, false, (0,template_string/* $item */.xr)(Dinseylandfill_templateObject15 || (Dinseylandfill_templateObject15 = Dinseylandfill_taggedTemplateLiteral(["none"]))), (0,template_string/* $location */.PG)(Dinseylandfill_templateObject16 || (Dinseylandfill_templateObject16 = Dinseylandfill_taggedTemplateLiteral(["Barf Mountain"]))))];
/**
 * Disposes of a Bag of park garbage in the Maintenance Tunnels for daily funfunds
 *
 * @returns Whether you successfully deposited a bag for funfunds
 */

function disposeGarbage() {
  if (hasDisposedGarbage()) {
    return false;
  }

  if (!hasDisposedGarbage() && (0,lib/* have */.lf)((0,template_string/* $item */.xr)(Dinseylandfill_templateObject17 || (Dinseylandfill_templateObject17 = Dinseylandfill_taggedTemplateLiteral(["bag of park garbage"]))))) {
    (0,external_kolmafia_.visitUrl)(maintUrl);
    (0,external_kolmafia_.runChoice)(6);
  }

  return hasDisposedGarbage();
}
/**
 * @returns Whether you have a current Dinsey quest
 */

function hasQuest() {
  return quests.some(q => q.currentQuest());
}
var BLANK_QUEST = new QuestData("", -1, "", "", "", "", -1, false, (0,template_string/* $item */.xr)(Dinseylandfill_templateObject18 || (Dinseylandfill_templateObject18 = Dinseylandfill_taggedTemplateLiteral(["none"]))), (0,template_string/* $location */.PG)(Dinseylandfill_templateObject19 || (Dinseylandfill_templateObject19 = Dinseylandfill_taggedTemplateLiteral(["none"]))));
/**
 * @returns The QuestData for your current active quest
 */

function activeQuest() {
  return quests.find(q => q.currentQuest()) || BLANK_QUEST;
}
/**
 * @returns Whether your quest is ready to hand in
 */

function questComplete() {
  var quest = activeQuest();
  return quest !== BLANK_QUEST && (0,property.get)(quest.questStateProperty) === "finished";
}
/**
 * @returns Whether your quest still has actions needing completion
 */

function hasActiveQuest() {
  return hasQuest() && !questComplete();
}
/**
 * Determines the probability of getting a robortender drop based on number of drops received
 *
 * @param priority The name or ranked preference of the lowest priority quest you want to accept.
 * @returns Whether you accepted a quest or not
 */

function acceptQuest(priority) {
  var _quests$find$priority, _quests$find;

  if (hasQuest()) {
    return false;
  }

  var page = (0,external_kolmafia_.visitUrl)(kioskUrl);
  var choice = 6;
  var at = (0,external_kolmafia_.indexOf)(page, "Available Assignments");

  if (at == -1) {
    return false;
  }

  var jobs = [];
  quests.forEach(quest => {
    jobs.push(quest.name);
  });
  var priorityNum = typeof priority === "string" ? (_quests$find$priority = (_quests$find = quests.find(q => q.name === priority)) === null || _quests$find === void 0 ? void 0 : _quests$find.priority) !== null && _quests$find$priority !== void 0 ? _quests$find$priority : 7 : priority;
  var availableJobs = [];
  var jobChoices = [["none", 999]];

  var _iterator = Dinseylandfill_createForOfIteratorHelper(quests),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var quest = _step.value;
      var job = quest.name;
      var jobAt = (0,external_kolmafia_.indexOf)(page, job, at);

      if (jobAt != -1) {
        availableJobs.push(quest);
        jobChoices.push([job, jobAt]);
        break;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var bestJob = availableJobs.sort((a, b) => a.priority - b.priority)[0];
  var sortedChoices = jobChoices.sort((a, b) => a[1] - b[1]);

  if (bestJob.priority <= priorityNum) {
    for (var index in sortedChoices) {
      var jobName = sortedChoices[index][0];

      if (jobName === bestJob.name) {
        choice = parseInt(index) + 1;
        break;
      }
    }
  }

  (0,external_kolmafia_.runChoice)(choice);
  return hasQuest();
}
/**
 * Turns in a completed quest
 */

function turnInQuest() {
  if (questComplete()) {
    if (activeQuest().name === "racism") (0,property.set)("questEStSocialJusticeI", "unstarted");
    (0,external_kolmafia_.visitUrl)(kioskUrl);
    (0,external_kolmafia_.runChoice)(3);
  }
}
var keyCardsLocations = new Map([[(0,template_string/* $item */.xr)(Dinseylandfill_templateObject20 || (Dinseylandfill_templateObject20 = Dinseylandfill_taggedTemplateLiteral(["keycard \u03B1"]))), (0,template_string/* $location */.PG)(Dinseylandfill_templateObject21 || (Dinseylandfill_templateObject21 = Dinseylandfill_taggedTemplateLiteral(["Barf Mountain"])))], [(0,template_string/* $item */.xr)(Dinseylandfill_templateObject22 || (Dinseylandfill_templateObject22 = Dinseylandfill_taggedTemplateLiteral(["keycard \u03B2"]))), (0,template_string/* $location */.PG)(Dinseylandfill_templateObject23 || (Dinseylandfill_templateObject23 = Dinseylandfill_taggedTemplateLiteral(["Pirates of the Garbage Barges"])))], [(0,template_string/* $item */.xr)(Dinseylandfill_templateObject24 || (Dinseylandfill_templateObject24 = Dinseylandfill_taggedTemplateLiteral(["keycard \u03B3"]))), (0,template_string/* $location */.PG)(Dinseylandfill_templateObject25 || (Dinseylandfill_templateObject25 = Dinseylandfill_taggedTemplateLiteral(["The Toxic Teacups"])))], [(0,template_string/* $item */.xr)(Dinseylandfill_templateObject26 || (Dinseylandfill_templateObject26 = Dinseylandfill_taggedTemplateLiteral(["keycard \u03B4"]))), (0,template_string/* $location */.PG)(Dinseylandfill_templateObject27 || (Dinseylandfill_templateObject27 = Dinseylandfill_taggedTemplateLiteral(["Uncle Gator's Country Fun-Time Liquid Waste Sluice"])))]]);
/**
 * @returns Whether you currently have access to fighting Wart Dinsey
 */

function canFightWartDinsey() {
  return Array.from(keyCardsLocations.keys()).every(keycard => (0,lib/* have */.lf)(keycard)) && !foughtWartDinseyThisLife() && (0,lib/* getRemainingLiver */.bf)() >= 0 && (0,external_kolmafia_.myAdventures)() > 0;
}
/**
 * @returns Whether you permanently own Dinseylandfill
 */

function coasterNextTurn() {
  return (0,property.get)("dinseyRollercoasterNext");
}
/**
 * @returns Whether you permanently own Dinseylandfill
 */

function foughtWartDinseyThisLife() {
  return (0,property.get)("lastWartDinseyDefeated") === (0,external_kolmafia_.myAscensions)();
}
/**
 * @returns Whether you have disposed of garbage for funfunds today
 */

function hasDisposedGarbage() {
  return (0,property.get)("_dinseyGarbageDisposed");
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2016/GingerBread.js
var GingerBread_templateObject, GingerBread_templateObject2, GingerBread_templateObject3, GingerBread_templateObject4, GingerBread_templateObject5, GingerBread_templateObject6, GingerBread_templateObject7, GingerBread_templateObject8, GingerBread_templateObject9;

function GingerBread_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




/**
 * @returns Whether or not you can currently access Gingerbread City
 */

function GingerBread_available() {
  return ((0,property.get)("gingerbreadCityAvailable") || (0,property.get)("_gingerbreadCityToday")) && turns() < availableTurns();
}

function turns() {
  return (0,property.get)("_gingerbreadCityTurns") + ((0,property.get)("_gingerbreadClockAdvanced") ? 5 : 0);
}

function availableTurns() {
  return 20 + ((0,property.get)("gingerExtraAdventures") ? 10 : 0);
}
/**
 * @returns The number of Gingerbread encounters until it's Midnight in the city; this may be negative if the time has passed
 */


function minutesToMidnight() {
  return 19 - turns();
}
/**
 * @returns The number of Gingerbread encounters until it's Noon in the city; this may be negative if the time has passed
 */

function minutesToNoon() {
  return 9 - turns();
}
var LOCATIONS = Object.freeze((0,template_string/* $locations */.xw)(GingerBread_templateObject || (GingerBread_templateObject = GingerBread_taggedTemplateLiteral(["Gingerbread Civic Center, Gingerbread Train Station, Gingerbread Industrial Zone, Gingerbread Upscale Retail District, Gingerbread Sewers"]))));
/**
 * @returns A list of all Gingerbread locations at which you can currently adventure
 */

function availableLocations() {
  return LOCATIONS.filter(l => (0,external_kolmafia_.canAdventure)(l));
}
var NOONS = new Map([[(0,template_string/* $location */.PG)(GingerBread_templateObject2 || (GingerBread_templateObject2 = GingerBread_taggedTemplateLiteral(["Gingerbread Train Station"]))), 1204], [(0,template_string/* $location */.PG)(GingerBread_templateObject3 || (GingerBread_templateObject3 = GingerBread_taggedTemplateLiteral(["Gingerbread Civic Center"]))), 1202], [(0,template_string/* $location */.PG)(GingerBread_templateObject4 || (GingerBread_templateObject4 = GingerBread_taggedTemplateLiteral(["Gingerbread Industrial Zone"]))), 1206], [(0,template_string/* $location */.PG)(GingerBread_templateObject5 || (GingerBread_templateObject5 = GingerBread_taggedTemplateLiteral(["Gingerbread Upscale Retail District"]))), 1208]]);
var MIDNIGHTS = new Map([[(0,template_string/* $location */.PG)(GingerBread_templateObject6 || (GingerBread_templateObject6 = GingerBread_taggedTemplateLiteral(["Gingerbread Train Station"]))), 1205], [(0,template_string/* $location */.PG)(GingerBread_templateObject7 || (GingerBread_templateObject7 = GingerBread_taggedTemplateLiteral(["Gingerbread Civic Center"]))), 1203], [(0,template_string/* $location */.PG)(GingerBread_templateObject8 || (GingerBread_templateObject8 = GingerBread_taggedTemplateLiteral(["Gingerbread Industrial Zone"]))), 1207], [(0,template_string/* $location */.PG)(GingerBread_templateObject9 || (GingerBread_templateObject9 = GingerBread_taggedTemplateLiteral(["Gingerbread Upscale Retail District"]))), 1209]]);
/**
 * @param location The location in question
 * @returns The id of the Noon choice adventure at that location; 0 if inapplicable
 */

function getNoonChoiceId(location) {
  var _NOONS$get;

  return (_NOONS$get = NOONS.get(location)) !== null && _NOONS$get !== void 0 ? _NOONS$get : 0;
}
/**
 * @param location The location in question
 * @returns The id of the Midnight choice adventure at that location; 0 if inapplicable
 */

function getMidnightChoiceId(location) {
  var _MIDNIGHTS$get;

  return (_MIDNIGHTS$get = MIDNIGHTS.get(location)) !== null && _MIDNIGHTS$get !== void 0 ? _MIDNIGHTS$get : 0;
}
/**
 * @returns Whether or not it is possible for you to fight Judge Fudge today
 */

function canJudgeFudge() {
  if (minutesToNoon() >= 0) {
    return true;
  }

  if (minutesToMidnight() >= 0 && (0,property.get)("_gingerbreadColumnDestroyed")) {
    return true;
  }

  return false;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2016/SourceTerminal.js
var SourceTerminal_templateObject, SourceTerminal_templateObject2, SourceTerminal_templateObject3, SourceTerminal_templateObject4, SourceTerminal_templateObject5, SourceTerminal_templateObject6, SourceTerminal_templateObject7, SourceTerminal_templateObject8, SourceTerminal_templateObject9, SourceTerminal_templateObject10, SourceTerminal_templateObject11, SourceTerminal_templateObject12, SourceTerminal_templateObject13, SourceTerminal_templateObject14, SourceTerminal_templateObject15, SourceTerminal_templateObject16, SourceTerminal_templateObject17, SourceTerminal_templateObject18, SourceTerminal_templateObject19, SourceTerminal_templateObject20, SourceTerminal_templateObject21, SourceTerminal_templateObject22, SourceTerminal_templateObject23, SourceTerminal_templateObject24, SourceTerminal_templateObject25, SourceTerminal_templateObject26, SourceTerminal_templateObject27;

function SourceTerminal_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = SourceTerminal_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function SourceTerminal_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return SourceTerminal_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return SourceTerminal_arrayLikeToArray(o, minLen); }

function SourceTerminal_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function SourceTerminal_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }







var item = (0,template_string/* $item */.xr)(SourceTerminal_templateObject || (SourceTerminal_templateObject = SourceTerminal_taggedTemplateLiteral(["Source terminal"])));
/**
 * @returns Is the terminal currently installed & available in our campground?
 */

function SourceTerminal_have() {
  return (0,lib/* haveInCampground */.sy)(item);
}
/**
 * Buffs that can be acquired from Enhance
 *
 * - Items: +30% Item Drop
 * - Meat: +60% Meat Drop
 * - Init: +50% Initiative
 * - Critical: +10% chance of Critical Hit, +10% chance of Spell Critical Hit
 * - Damage: +5 Prismatic Damage
 * - Substats: +3 Stats Per Fight
 */

var Buffs = {
  Items: (0,template_string/* $effect */._G)(SourceTerminal_templateObject2 || (SourceTerminal_templateObject2 = SourceTerminal_taggedTemplateLiteral(["items.enh"]))),
  Meat: (0,template_string/* $effect */._G)(SourceTerminal_templateObject3 || (SourceTerminal_templateObject3 = SourceTerminal_taggedTemplateLiteral(["meat.enh"]))),
  Init: (0,template_string/* $effect */._G)(SourceTerminal_templateObject4 || (SourceTerminal_templateObject4 = SourceTerminal_taggedTemplateLiteral(["init.enh"]))),
  Critical: (0,template_string/* $effect */._G)(SourceTerminal_templateObject5 || (SourceTerminal_templateObject5 = SourceTerminal_taggedTemplateLiteral(["critical.enh"]))),
  Damage: (0,template_string/* $effect */._G)(SourceTerminal_templateObject6 || (SourceTerminal_templateObject6 = SourceTerminal_taggedTemplateLiteral(["damage.enh"]))),
  Substats: (0,template_string/* $effect */._G)(SourceTerminal_templateObject7 || (SourceTerminal_templateObject7 = SourceTerminal_taggedTemplateLiteral(["substats.enh"])))
};
/**
 * Acquire a buff from the Source Terminal
 *
 * @param buff The buff to acquire
 * @see Buffs
 * @returns Whether we successfully acquired the buff
 */

function enhance(buff) {
  if (!Object.values(Buffs).includes(buff)) {
    return false;
  }

  return (0,external_kolmafia_.cliExecute)("terminal enhance ".concat(buff.name));
}
/**
 * Rollover buffs that can be acquired from Enquiry
 */

var RolloverBuffs = {
  /** +5 Familiar Weight */
  Familiar: (0,template_string/* $effect */._G)(SourceTerminal_templateObject8 || (SourceTerminal_templateObject8 = SourceTerminal_taggedTemplateLiteral(["familiar.enq"]))),

  /** +25 ML */
  Monsters: (0,template_string/* $effect */._G)(SourceTerminal_templateObject9 || (SourceTerminal_templateObject9 = SourceTerminal_taggedTemplateLiteral(["monsters.enq"]))),

  /** +5 Prismatic Resistance */
  Protect: (0,template_string/* $effect */._G)(SourceTerminal_templateObject10 || (SourceTerminal_templateObject10 = SourceTerminal_taggedTemplateLiteral(["protect.enq"]))),

  /** +100% Muscle, +100% Mysticality, +100% Moxie */
  Stats: (0,template_string/* $effect */._G)(SourceTerminal_templateObject11 || (SourceTerminal_templateObject11 = SourceTerminal_taggedTemplateLiteral(["stats.enq"])))
};
/**
 * Acquire a buff from the Source Terminal
 *
 * @param rolloverBuff The buff to acquire
 * @see RolloverBuffs
 * @returns Whether we successfully `enquire`d the terminal for our rollover buff
 */

function enquiry(rolloverBuff) {
  if (!Object.values(RolloverBuffs).includes(rolloverBuff)) {
    return false;
  }

  return (0,external_kolmafia_.cliExecute)("terminal enquiry ".concat(rolloverBuff.name));
}
/**
 * Skills that can be acquired from Enhance
 */

var Skills = {
  /** Collect Source essence from enemies once per combat */
  Extract: (0,template_string/* $skill */.tm)(SourceTerminal_templateObject12 || (SourceTerminal_templateObject12 = SourceTerminal_taggedTemplateLiteral(["Extract"]))),

  /** Stagger and create a wandering monster 1-3 times per day */
  Digitize: (0,template_string/* $skill */.tm)(SourceTerminal_templateObject13 || (SourceTerminal_templateObject13 = SourceTerminal_taggedTemplateLiteral(["Digitize"]))),

  /** Stagger and deal 25% of enemy HP in damage once per combat */
  Compress: (0,template_string/* $skill */.tm)(SourceTerminal_templateObject14 || (SourceTerminal_templateObject14 = SourceTerminal_taggedTemplateLiteral(["Compress"]))),

  /** Double monster's HP, attack, defence, attacks per round and item drops once per fight and once per day (five in The Source) */
  Duplicate: (0,template_string/* $skill */.tm)(SourceTerminal_templateObject15 || (SourceTerminal_templateObject15 = SourceTerminal_taggedTemplateLiteral(["Duplicate"]))),

  /** Causes government agent/Source Agent wanderer next turn once per combat and three times per day */
  Portscan: (0,template_string/* $skill */.tm)(SourceTerminal_templateObject16 || (SourceTerminal_templateObject16 = SourceTerminal_taggedTemplateLiteral(["Portscan"]))),

  /** Increase Max MP by 100% and recover 1000 MP once per combat with a 30 turn cooldown */
  Turbo: (0,template_string/* $skill */.tm)(SourceTerminal_templateObject17 || (SourceTerminal_templateObject17 = SourceTerminal_taggedTemplateLiteral(["Turbo"])))
};
/**
 * Make a skill available.
 * The Source Terminal can give the player access to two skills at any time
 *
 * @param skills Skill or 2-tuple of Skills to learn
 * @see Skills
 * @returns Whether our current skills match the ones we asked for
 */

function educate(skills) {
  var skillsArray = Array.isArray(skills) ? skills.slice(0, 2) : [skills];
  if ((0,utils/* arrayEquals */._g)(skillsArray, getSkills())) return true;

  var _iterator = SourceTerminal_createForOfIteratorHelper(skillsArray),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var skill = _step.value;
      if (!Object.values(Skills).includes(skill)) return false;
      (0,external_kolmafia_.cliExecute)("terminal educate ".concat(skill.name.toLowerCase(), ".edu"));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return true;
}
/**
 * @returns The Skills currently available from Source Terminal
 */

function getSkills() {
  return ["sourceTerminalEducate1", "sourceTerminalEducate2"].map(p => (0,property.get)(p)).filter(Boolean).map(s => external_kolmafia_.Skill.get(s.slice(0, -4)));
}
/**
 * @param skills A Skill or 2-tuple of Skills to check if we currently have active
 * @returns Whether the input agrees with our current skills
 */

function isCurrentSkill(skills) {
  var currentSkills = getSkills();
  var skillsArray = Array.isArray(skills) ? skills.slice(0, 2) : [skills];
  return skillsArray.every(skill => currentSkills.includes(skill));
}
/**
 * Items that can be generated by the Source Terminal
 */

var Items = new Map([[(0,template_string/* $item */.xr)(SourceTerminal_templateObject18 || (SourceTerminal_templateObject18 = SourceTerminal_taggedTemplateLiteral(["browser cookie"]))), "food.ext"], [(0,template_string/* $item */.xr)(SourceTerminal_templateObject19 || (SourceTerminal_templateObject19 = SourceTerminal_taggedTemplateLiteral(["hacked gibson"]))), "booze.ext"], [(0,template_string/* $item */.xr)(SourceTerminal_templateObject20 || (SourceTerminal_templateObject20 = SourceTerminal_taggedTemplateLiteral(["Source shades"]))), "goggles.ext"], [(0,template_string/* $item */.xr)(SourceTerminal_templateObject21 || (SourceTerminal_templateObject21 = SourceTerminal_taggedTemplateLiteral(["Source terminal GRAM chip"]))), "gram.ext"], [(0,template_string/* $item */.xr)(SourceTerminal_templateObject22 || (SourceTerminal_templateObject22 = SourceTerminal_taggedTemplateLiteral(["Source terminal PRAM chip"]))), "pram.ext"], [(0,template_string/* $item */.xr)(SourceTerminal_templateObject23 || (SourceTerminal_templateObject23 = SourceTerminal_taggedTemplateLiteral(["Source terminal SPAM chip"]))), "spam.ext"], [(0,template_string/* $item */.xr)(SourceTerminal_templateObject24 || (SourceTerminal_templateObject24 = SourceTerminal_taggedTemplateLiteral(["Source terminal CRAM chip"]))), "cram.ext"], [(0,template_string/* $item */.xr)(SourceTerminal_templateObject25 || (SourceTerminal_templateObject25 = SourceTerminal_taggedTemplateLiteral(["Source terminal DRAM chip"]))), "dram.ext"], [(0,template_string/* $item */.xr)(SourceTerminal_templateObject26 || (SourceTerminal_templateObject26 = SourceTerminal_taggedTemplateLiteral(["Source terminal TRAM chip"]))), "tram.ext"], [(0,template_string/* $item */.xr)(SourceTerminal_templateObject27 || (SourceTerminal_templateObject27 = SourceTerminal_taggedTemplateLiteral(["software bug"]))), "familiar.ext"]]);
/**
 * Collect an item from the Source Terminal (up to three times a day)
 *
 * @param item Item to collect
 * @see Items
 * @returns Whether the `cliExecute` succeeded
 */

function extrude(item) {
  var fileName = Items.get(item);
  if (!fileName) return false;
  return (0,external_kolmafia_.cliExecute)("terminal extrude ".concat(fileName));
}
/**
 * @returns chips currently installed to player's Source Terminal
 */

function getChips() {
  return (0,property.get)("sourceTerminalChips").split(",");
}
/**
 * @returns number of times digitize was cast today
 */

function getDigitizeUses() {
  return (0,property.get)("_sourceTerminalDigitizeUses");
}
/**
 * @returns Monster that is currently digitized, else `null`
 */

function getDigitizeMonster() {
  return (0,property.get)("_sourceTerminalDigitizeMonster");
}
/**
 * @returns number of digitized monsters encountered since it was last cast
 */

function getDigitizeMonsterCount() {
  return (0,property.get)("_sourceTerminalDigitizeMonsterCount");
}
/**
 * @returns maximum number of digitizes player can cast
 */

function getMaximumDigitizeUses() {
  var chips = getChips();
  return 1 + (chips.includes("TRAM") ? 1 : 0) + (chips.includes("TRIGRAM") ? 1 : 0);
}
/**
 * @returns the current day's number of remaining digitize uses
 */

function getDigitizeUsesRemaining() {
  return getMaximumDigitizeUses() - getDigitizeUses();
}
/**
 * @returns whether the player could theoretically cast Digitize
 */

function couldDigitize() {
  return getDigitizeUses() < getMaximumDigitizeUses();
}
/**
 * Sets Digitize to be one of our skills if it currently isn't
 *
 * @returns Whether we expect that Digitize is one of our active skills now
 */

function prepareDigitize() {
  if (!isCurrentSkill(Skills.Digitize)) {
    return educate(Skills.Digitize);
  }

  return true;
}
/**
 * Determines whether the player can cast Digitize immediately
 * This only considers whether the player has learned the skill
 * and has sufficient daily casts remaining, not whether they have sufficient MP
 *
 * @returns Whether the player can currently cast digitize, ignoring the MP cost but accounting for other factors
 */

function canDigitize() {
  return couldDigitize() && getSkills().includes(Skills.Digitize);
}
var Digitize = new Copier(() => couldDigitize(), () => prepareDigitize(), () => canDigitize(), () => getDigitizeMonster());
/**
 * @returns number of times duplicate was cast today
 */

function getDuplicateUses() {
  return (0,property.get)("_sourceTerminalDuplicateUses");
}
/**
 * @returns number of times enhance was cast today
 */

function getEnhanceUses() {
  return (0,property.get)("_sourceTerminalEnhanceUses");
}
/**
 * @returns number of times portscan was cast today
 */

function getPortscanUses() {
  return (0,property.get)("_sourceTerminalPortscanUses");
}
/**
 * @returns maximum number of times duplicate can be used
 */

function maximumDuplicateUses() {
  return (0,external_kolmafia_.myPath)() === external_kolmafia_.Path.get("The Source") ? 5 : 1;
}
/**
 * @returns number of remaining times duplicate can be used today
 */

function duplicateUsesRemaining() {
  return maximumDuplicateUses() - getDuplicateUses();
}
/**
 * @returns number of times enhance can be used per day
 */

function maximumEnhanceUses() {
  return 1 + getChips().filter(chip => ["CRAM", "SCRAM"].includes(chip)).length;
}
/**
 * @returns number of remaining times enahce can be used today
 */

function enhanceUsesRemaining() {
  return maximumEnhanceUses() - getEnhanceUses();
}
/**
 * @returns expected duration of an enhance buff
 */

function enhanceBuffDuration() {
  return 25 + (0,property.get)("sourceTerminalPram") * 5 + (getChips().includes("INGRAM") ? 25 : 0);
}
/**
 * @returns expected duration of an enquiry buff
 */

function enquiryBuffDuration() {
  return 50 + 10 * (0,property.get)("sourceTerminalGram") + (getChips().includes("DIAGRAM") ? 50 : 0);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2016/Witchess.js
var Witchess_templateObject;

function Witchess_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var Witchess_item = (0,template_string/* $item */.xr)(Witchess_templateObject || (Witchess_templateObject = Witchess_taggedTemplateLiteral(["Witchess Set"])));
/**
 * @returns Is the Witchess installed and available in our campground?
 */

function Witchess_have() {
  return (0,lib/* haveInCampground */.sy)(Witchess_item);
}
/**
 * @returns How many Witchess fights have we done so far today?
 */

function fightsDone() {
  return (0,property.get)("_witchessFights");
}
var pieces = external_kolmafia_.Monster.get(["Witchess Pawn", "Witchess Knight", "Witchess Bishop", "Witchess Rook", "Witchess Queen", "Witchess King", "Witchess Witch", "Witchess Ox"]);
/**
 * Fight a Witchess piece of your choice
 *
 * @param piece The piece to fight
 * @param combatParams Any parameters you'd like to pass to `runCombat`
 * @returns The value of `runCombat()`, which is the page html of the final round
 */

function fightPiece(piece) {
  if (!pieces.includes(piece)) throw new Error("That is not a valid piece.");

  if (!(0,external_kolmafia_.visitUrl)("campground.php?action=witchess").includes("whichchoice value=1181")) {
    throw new Error("Failed to open Witchess.");
  }

  if (!(0,external_kolmafia_.runChoice)(1).includes("whichchoice=1182")) {
    throw new Error("Failed to visit shrink ray.");
  }

  if (!(0,external_kolmafia_.visitUrl)("choice.php?option=1&pwd=".concat((0,external_kolmafia_.myHash)(), "&whichchoice=1182&piece=").concat(piece.id), false).includes(piece.name)) {
    throw new Error("Failed to start fight.");
  }

  for (var _len = arguments.length, combatParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    combatParams[_key - 1] = arguments[_key];
  }

  return external_kolmafia_.runCombat.apply(void 0, combatParams);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2017/Horsery.js


/**
 * @returns Whether or not the horsery is available
 */

function Horsery_have() {
  return (0,property.get)("horseryAvailable");
}
/**
 * @returns Your current horse; `null` if you are horseless
 */

function current() {
  var horse = (0,property.get)("_horsery");
  return horse ? horse.split(" ")[0] : null;
}
/**
 * @param horse The horse to change to
 * @returns Whether, at the end of all things, that is your horse
 */

function changeHorse(horse) {
  if (horse === current()) return true;
  if (!Horsery_have()) return false;
  (0,external_kolmafia_.cliExecute)("horsery ".concat(horse));
  return current() === horse;
}
/**
 * @returns a `Modifiers` object consisting of the crazy horse's stats today
 */

function crazyHorseStats() {
  if (!Horsery_have()) return {};

  if (!(0,property.get)("_horseryCrazyName")) {
    (0,external_kolmafia_.visitUrl)("place.php?whichplace=town_right&action=town_horsery");
  }

  return {
    "Mysticality Percent": Number((0,property.get)("_horseryCrazyMys")),
    "Muscle Percent": Number((0,property.get)("_horseryCrazyMus")),
    "Moxie Percent": Number((0,property.get)("_horseryCrazyMox"))
  };
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2017/Pantogram.js
var Pantogram_templateObject, Pantogram_templateObject2, _Alignment, _Element, Pantogram_templateObject3, Pantogram_templateObject4, Pantogram_templateObject5, Pantogram_templateObject6, Pantogram_templateObject7, Pantogram_templateObject8, Pantogram_templateObject9, _LeftSacrifice, Pantogram_templateObject10, Pantogram_templateObject11, Pantogram_templateObject12, Pantogram_templateObject13, Pantogram_templateObject14, Pantogram_templateObject15, Pantogram_templateObject16, Pantogram_templateObject17, Pantogram_templateObject18, _MiddleSacrifice, Pantogram_templateObject19, Pantogram_templateObject20, Pantogram_templateObject21, Pantogram_templateObject22, Pantogram_templateObject23, Pantogram_templateObject24, Pantogram_templateObject25, Pantogram_templateObject26, Pantogram_templateObject27, Pantogram_templateObject28, _RightSacrifice;

function Pantogram_slicedToArray(arr, i) { return Pantogram_arrayWithHoles(arr) || Pantogram_iterableToArrayLimit(arr, i) || Pantogram_unsupportedIterableToArray(arr, i) || Pantogram_nonIterableRest(); }

function Pantogram_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function Pantogram_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Pantogram_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Pantogram_arrayLikeToArray(o, minLen); }

function Pantogram_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function Pantogram_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function Pantogram_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function Pantogram_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function Pantogram_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var pantogram = (0,template_string/* $item */.xr)(Pantogram_templateObject || (Pantogram_templateObject = Pantogram_taggedTemplateLiteral(["portable pantogram"])));
var pants = (0,template_string/* $item */.xr)(Pantogram_templateObject2 || (Pantogram_templateObject2 = Pantogram_taggedTemplateLiteral(["pantogram pants"])));
/**
 * @returns Do we `have` the Pantogram itself?
 */

function Pantogram_have() {
  return (0,lib/* have */.lf)(pantogram);
}
/**
 * @returns Do we `have` pantogram pants?
 */

function havePants() {
  return (0,lib/* have */.lf)(pants);
}
var Alignment = (_Alignment = {}, Pantogram_defineProperty(_Alignment, "Muscle", 1), Pantogram_defineProperty(_Alignment, "Mysticality", 2), Pantogram_defineProperty(_Alignment, "Moxie", 3), _Alignment);
var Element = (_Element = {}, Pantogram_defineProperty(_Element, "Hot Resistance: 2", 1), Pantogram_defineProperty(_Element, "Cold Resistance: 2", 2), Pantogram_defineProperty(_Element, "Spooky Resistance: 2", 3), Pantogram_defineProperty(_Element, "Sleaze Resistance: 2", 4), Pantogram_defineProperty(_Element, "Stench Resistance: 2", 5), _Element);
var LeftSacrifice = (_LeftSacrifice = {}, Pantogram_defineProperty(_LeftSacrifice, "Maximum HP: 40", [-1, 0]), Pantogram_defineProperty(_LeftSacrifice, "Maximum MP: 20", [-2, 0]), Pantogram_defineProperty(_LeftSacrifice, "HP Regen Max: 10", [(0,template_string/* $item */.xr)(Pantogram_templateObject3 || (Pantogram_templateObject3 = Pantogram_taggedTemplateLiteral(["red pixel potion"]))), 1]), Pantogram_defineProperty(_LeftSacrifice, "HP Regen Max: 15", [(0,template_string/* $item */.xr)(Pantogram_templateObject4 || (Pantogram_templateObject4 = Pantogram_taggedTemplateLiteral(["royal jelly"]))), 1]), Pantogram_defineProperty(_LeftSacrifice, "HP Regen Max: 20", [(0,template_string/* $item */.xr)(Pantogram_templateObject5 || (Pantogram_templateObject5 = Pantogram_taggedTemplateLiteral(["scented massage oil"]))), 1]), Pantogram_defineProperty(_LeftSacrifice, "MP Regen Max: 10", [(0,template_string/* $item */.xr)(Pantogram_templateObject6 || (Pantogram_templateObject6 = Pantogram_taggedTemplateLiteral(["Cherry Cloaca Cola"]))), 1]), Pantogram_defineProperty(_LeftSacrifice, "MP Regen Max: 15", [(0,template_string/* $item */.xr)(Pantogram_templateObject7 || (Pantogram_templateObject7 = Pantogram_taggedTemplateLiteral(["bubblin' crude"]))), 1]), Pantogram_defineProperty(_LeftSacrifice, "MP Regen Max: 20", [(0,template_string/* $item */.xr)(Pantogram_templateObject8 || (Pantogram_templateObject8 = Pantogram_taggedTemplateLiteral(["glowing New Age crystal"]))), 1]), Pantogram_defineProperty(_LeftSacrifice, "Mana Cost: -3", [(0,template_string/* $item */.xr)(Pantogram_templateObject9 || (Pantogram_templateObject9 = Pantogram_taggedTemplateLiteral(["baconstone"]))), 1]), _LeftSacrifice);
/**
 * Internal function used for `makePants`
 *
 * @param mod Modifier to get from our Left sacrifice
 * @returns Item-tuple to use in our URL string
 */

function getLeftSacPair(mod) {
  return LeftSacrifice[mod];
}

var MiddleSacrifice = (_MiddleSacrifice = {}, Pantogram_defineProperty(_MiddleSacrifice, "Combat Rate: -5", [-1, 0]), Pantogram_defineProperty(_MiddleSacrifice, "Combat Rate: 5", [-2, 0]), Pantogram_defineProperty(_MiddleSacrifice, "Critical Hit Percent: 10", [(0,template_string/* $item */.xr)(Pantogram_templateObject10 || (Pantogram_templateObject10 = Pantogram_taggedTemplateLiteral(["hamethyst"]))), 1]), Pantogram_defineProperty(_MiddleSacrifice, "Initiative: 50", [(0,template_string/* $item */.xr)(Pantogram_templateObject11 || (Pantogram_templateObject11 = Pantogram_taggedTemplateLiteral(["bar skin"]))), 1]), Pantogram_defineProperty(_MiddleSacrifice, "Familiar Weight: 10", [(0,template_string/* $item */.xr)(Pantogram_templateObject12 || (Pantogram_templateObject12 = Pantogram_taggedTemplateLiteral(["lead necklace"]))), 11]), Pantogram_defineProperty(_MiddleSacrifice, "Candy Drop: 100", [(0,template_string/* $item */.xr)(Pantogram_templateObject13 || (Pantogram_templateObject13 = Pantogram_taggedTemplateLiteral(["huge bowl of candy"]))), 1]), Pantogram_defineProperty(_MiddleSacrifice, "Item Drop Penalty: -10", [(0,template_string/* $item */.xr)(Pantogram_templateObject14 || (Pantogram_templateObject14 = Pantogram_taggedTemplateLiteral(["sea salt crystal"]))), 11]), Pantogram_defineProperty(_MiddleSacrifice, "Fishing Skill: 5", [(0,template_string/* $item */.xr)(Pantogram_templateObject15 || (Pantogram_templateObject15 = Pantogram_taggedTemplateLiteral(["wriggling worm"]))), 1]), Pantogram_defineProperty(_MiddleSacrifice, "Pool Skill: 5", [(0,template_string/* $item */.xr)(Pantogram_templateObject16 || (Pantogram_templateObject16 = Pantogram_taggedTemplateLiteral(["8-ball"]))), 15]), Pantogram_defineProperty(_MiddleSacrifice, "Avatar: Purple", [(0,template_string/* $item */.xr)(Pantogram_templateObject17 || (Pantogram_templateObject17 = Pantogram_taggedTemplateLiteral(["moxie weed"]))), 99]), Pantogram_defineProperty(_MiddleSacrifice, "Drops Items: true", [(0,template_string/* $item */.xr)(Pantogram_templateObject18 || (Pantogram_templateObject18 = Pantogram_taggedTemplateLiteral(["ten-leaf clover"]))), 1]), _MiddleSacrifice);
/**
 * Internal function used for `makePants`
 *
 * @param mod Modifier to get from our Middle sacrifice
 * @returns Item-tuple to use in our URL string
 */

function getMiddleSacPair(mod) {
  return MiddleSacrifice[mod];
}

var RightSacrifice = (_RightSacrifice = {}, Pantogram_defineProperty(_RightSacrifice, "Weapon Damage: 20", [-1, 0]), Pantogram_defineProperty(_RightSacrifice, "Spell Damage Percent: 20", [-2, 0]), Pantogram_defineProperty(_RightSacrifice, "Meat Drop: 30", [(0,template_string/* $item */.xr)(Pantogram_templateObject19 || (Pantogram_templateObject19 = Pantogram_taggedTemplateLiteral(["taco shell"]))), 1]), Pantogram_defineProperty(_RightSacrifice, "Meat Drop: 60", [(0,template_string/* $item */.xr)(Pantogram_templateObject20 || (Pantogram_templateObject20 = Pantogram_taggedTemplateLiteral(["porquoise"]))), 1]), Pantogram_defineProperty(_RightSacrifice, "Item Drop: 15", [(0,template_string/* $item */.xr)(Pantogram_templateObject21 || (Pantogram_templateObject21 = Pantogram_taggedTemplateLiteral(["fairy gravy boat"]))), 1]), Pantogram_defineProperty(_RightSacrifice, "Item Drop: 30", [(0,template_string/* $item */.xr)(Pantogram_templateObject22 || (Pantogram_templateObject22 = Pantogram_taggedTemplateLiteral(["tiny dancer"]))), 1]), Pantogram_defineProperty(_RightSacrifice, "Muscle Experience: 3", [(0,template_string/* $item */.xr)(Pantogram_templateObject23 || (Pantogram_templateObject23 = Pantogram_taggedTemplateLiteral(["Knob Goblin firecracker"]))), 3]), Pantogram_defineProperty(_RightSacrifice, "Mysticality Experience: 3", [(0,template_string/* $item */.xr)(Pantogram_templateObject24 || (Pantogram_templateObject24 = Pantogram_taggedTemplateLiteral(["razor-sharp can lid"]))), 3]), Pantogram_defineProperty(_RightSacrifice, "Moxie Experience: 3", [(0,template_string/* $item */.xr)(Pantogram_templateObject25 || (Pantogram_templateObject25 = Pantogram_taggedTemplateLiteral(["spider web"]))), 3]), Pantogram_defineProperty(_RightSacrifice, "Muscle Experience Percent: 25", [(0,template_string/* $item */.xr)(Pantogram_templateObject26 || (Pantogram_templateObject26 = Pantogram_taggedTemplateLiteral(["synthetic marrow"]))), 5]), Pantogram_defineProperty(_RightSacrifice, "Mysticality Experience Percent: 25", [(0,template_string/* $item */.xr)(Pantogram_templateObject27 || (Pantogram_templateObject27 = Pantogram_taggedTemplateLiteral(["haunted battery"]))), 5]), Pantogram_defineProperty(_RightSacrifice, "Moxie Experience Percent: 25", [(0,template_string/* $item */.xr)(Pantogram_templateObject28 || (Pantogram_templateObject28 = Pantogram_taggedTemplateLiteral(["the funk"]))), 5]), _RightSacrifice);
/**
 * Internal function used for `makePants`
 *
 * @param mod Modifier to get from our Right sacrifice
 * @returns Item-tuple to use in our URL string
 */

function getRightSacPair(mod) {
  return RightSacrifice[mod];
}
/**
 * Finds the item requirements for a particular pair of pants.
 *
 * @param modifiers An object consisting of the modifiers you want on your pants. For modifiers repeated across a particular sacrifice, use a tuple of that modifier and its value.
 * @returns A map of the items you need to make these pants and the quantities needed.
 */


function findRequirements(modifiers) {
  var leftSac = modifiers.leftSac,
      rightSac = modifiers.rightSac,
      middleSac = modifiers.middleSac;
  var returnValue = new Map();

  if (leftSac) {
    var _getLeftSacPair = getLeftSacPair(leftSac),
        _getLeftSacPair2 = Pantogram_slicedToArray(_getLeftSacPair, 2),
        sacrifice = _getLeftSacPair2[0],
        quantity = _getLeftSacPair2[1];

    if (sacrifice instanceof external_kolmafia_.Item) {
      returnValue.set(sacrifice, quantity);
    }
  }

  if (rightSac) {
    var _getRightSacPair = getRightSacPair(rightSac),
        _getRightSacPair2 = Pantogram_slicedToArray(_getRightSacPair, 2),
        _sacrifice = _getRightSacPair2[0],
        _quantity = _getRightSacPair2[1];

    if (_sacrifice instanceof external_kolmafia_.Item) {
      returnValue.set(_sacrifice, _quantity);
    }
  }

  if (middleSac) {
    var _getMiddleSacPair = getMiddleSacPair(middleSac),
        _getMiddleSacPair2 = Pantogram_slicedToArray(_getMiddleSacPair, 2),
        _sacrifice2 = _getMiddleSacPair2[0],
        _quantity2 = _getMiddleSacPair2[1];

    if (_sacrifice2 instanceof external_kolmafia_.Item) {
      returnValue.set(_sacrifice2, _quantity2);
    }
  }

  return returnValue;
}
/**
 * Internal function used in `makePants`
 *
 * @param pair Tuple consisting of an item or number and another number
 * @returns URL parameter associated with the tuple
 */

function sacrificePairToURL(pair) {
  var _pair = Pantogram_slicedToArray(pair, 2),
      rawSacrifice = _pair[0],
      quantity = _pair[1];

  var sacrifice = rawSacrifice instanceof external_kolmafia_.Item ? rawSacrifice.id : rawSacrifice;
  return "".concat(sacrifice, ",").concat(quantity);
}
/**
 * Makes a pair of pants with the given modifiers
 *
 * @param alignment The stat you'd like your pants to improve. Moxie, Mysticality, or Muscle
 * @param element The element you'd like your pants to provide resistance for
 * @param leftSac The modifier you'd like to get from your leftmost sacrifice in Pantagramming.
 * @param middleSac The modifier you'd like to get from your middle sacrifice in Pantagramming.
 * @param rightSac The modifier you'd like to get from your rightmost sacrifice in Pantagramming.
 * @returns Whether or not you successfully created a pair of pants. False if you don't own the pantogram or if you already have pantogram pants.
 */


function makePants(alignment, element, leftSac, middleSac, rightSac) {
  if ((0,lib/* have */.lf)(pants) || !(0,lib/* have */.lf)(pantogram)) return false;
  var requirements = findRequirements({
    alignment: alignment,
    element: element,
    leftSac: leftSac,
    rightSac: rightSac,
    middleSac: middleSac
  });

  if (Array.from(requirements.entries()).some(_ref => {
    var _ref2 = Pantogram_slicedToArray(_ref, 2),
        item = _ref2[0],
        quantity = _ref2[1];

    return !(0,lib/* have */.lf)(item, quantity);
  })) {
    return false;
  }

  var s1 = sacrificePairToURL(getLeftSacPair(leftSac));
  var s2 = sacrificePairToURL(getRightSacPair(rightSac));
  var s3 = sacrificePairToURL(getMiddleSacPair(middleSac));
  var url = "choice.php?whichchoice=1270&pwd&option=1&m=".concat(Alignment[alignment], "&e=").concat(Element[element], "&s1=").concat(s1, "&s2=").concat(s2, "&s3=").concat(s3);
  (0,lib/* directlyUse */.tg)(pantogram);
  (0,external_kolmafia_.visitUrl)(url);
  return (0,lib/* have */.lf)(pants);
}
/**
 * Creates a pair of pants from a Pants object.
 *
 * @param pants An object consisting of the modifiers you'd like the pants to give you.
 * @returns Whether or not you successfully created a pair of pants. False if you don't own the pantogram or if you already have pantogram pants.
 */

function makePantsFromObject(pants) {
  return makePants(pants.alignment, pants.element, pants.leftSac, pants.middleSac, pants.rightSac);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2017/Robortender.js
var Robortender_templateObject, Robortender_templateObject2, Robortender_templateObject3, Robortender_templateObject4, Robortender_templateObject5, Robortender_templateObject6, Robortender_templateObject7, Robortender_templateObject8, Robortender_templateObject9, Robortender_templateObject10, Robortender_templateObject11, Robortender_templateObject12, Robortender_templateObject13, Robortender_templateObject14, Robortender_templateObject15, Robortender_templateObject16, Robortender_templateObject17, Robortender_templateObject18, Robortender_templateObject19, Robortender_templateObject20, Robortender_templateObject21, Robortender_templateObject22, Robortender_templateObject23, Robortender_templateObject24, Robortender_templateObject25, Robortender_templateObject26, Robortender_templateObject27, Robortender_templateObject28, Robortender_templateObject29, Robortender_templateObject30, Robortender_templateObject31, Robortender_templateObject32, Robortender_templateObject33, Robortender_templateObject34, Robortender_templateObject35, Robortender_templateObject36, Robortender_templateObject37;

function Robortender_toConsumableArray(arr) { return Robortender_arrayWithoutHoles(arr) || Robortender_iterableToArray(arr) || Robortender_unsupportedIterableToArray(arr) || Robortender_nonIterableSpread(); }

function Robortender_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function Robortender_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Robortender_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Robortender_arrayLikeToArray(o, minLen); }

function Robortender_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function Robortender_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Robortender_arrayLikeToArray(arr); }

function Robortender_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function Robortender_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




/**
 * The Robortender itself
 */

var Robortender_familiar = (0,template_string/* $familiar */.HP)(Robortender_templateObject || (Robortender_templateObject = Robortender_taggedTemplateLiteral(["Robortender"])));
/**
 * @returns Whether you have the Robortender in your terrarium/available
 */

function Robortender_have() {
  return (0,external_kolmafia_.haveFamiliar)(Robortender_familiar);
}
var phylumDrops = new Map([[(0,template_string/* $phylum */.tq)(Robortender_templateObject2 || (Robortender_templateObject2 = Robortender_taggedTemplateLiteral(["Bug"]))), (0,template_string/* $item */.xr)(Robortender_templateObject3 || (Robortender_templateObject3 = Robortender_taggedTemplateLiteral(["pickled grasshopper"])))], // bottle of anís
[(0,template_string/* $phylum */.tq)(Robortender_templateObject4 || (Robortender_templateObject4 = Robortender_taggedTemplateLiteral(["Constellation"]))), external_kolmafia_.Item.get(9348)], [(0,template_string/* $phylum */.tq)(Robortender_templateObject5 || (Robortender_templateObject5 = Robortender_taggedTemplateLiteral(["Demon"]))), (0,template_string/* $item */.xr)(Robortender_templateObject6 || (Robortender_templateObject6 = Robortender_taggedTemplateLiteral(["bottle of novelty hot sauce"])))], [(0,template_string/* $phylum */.tq)(Robortender_templateObject7 || (Robortender_templateObject7 = Robortender_taggedTemplateLiteral(["Elemental"]))), (0,template_string/* $item */.xr)(Robortender_templateObject8 || (Robortender_templateObject8 = Robortender_taggedTemplateLiteral(["elemental sugarcube"])))], [(0,template_string/* $phylum */.tq)(Robortender_templateObject9 || (Robortender_templateObject9 = Robortender_taggedTemplateLiteral(["Elf"]))), (0,template_string/* $item */.xr)(Robortender_templateObject10 || (Robortender_templateObject10 = Robortender_taggedTemplateLiteral(["peppermint sprig"])))], [(0,template_string/* $phylum */.tq)(Robortender_templateObject11 || (Robortender_templateObject11 = Robortender_taggedTemplateLiteral(["Fish"]))), (0,template_string/* $item */.xr)(Robortender_templateObject12 || (Robortender_templateObject12 = Robortender_taggedTemplateLiteral(["bottle of clam juice"])))], [(0,template_string/* $phylum */.tq)(Robortender_templateObject13 || (Robortender_templateObject13 = Robortender_taggedTemplateLiteral(["Goblin"]))), (0,template_string/* $item */.xr)(Robortender_templateObject14 || (Robortender_templateObject14 = Robortender_taggedTemplateLiteral(["cocktail mushroom"])))], [(0,template_string/* $phylum */.tq)(Robortender_templateObject15 || (Robortender_templateObject15 = Robortender_taggedTemplateLiteral(["Hippy"]))), (0,template_string/* $item */.xr)(Robortender_templateObject16 || (Robortender_templateObject16 = Robortender_taggedTemplateLiteral(["shot of granola liqueur"])))], [(0,template_string/* $phylum */.tq)(Robortender_templateObject17 || (Robortender_templateObject17 = Robortender_taggedTemplateLiteral(["Hobo"]))), (0,template_string/* $item */.xr)(Robortender_templateObject18 || (Robortender_templateObject18 = Robortender_taggedTemplateLiteral(["can of cherry-flavored sterno"])))], [(0,template_string/* $phylum */.tq)(Robortender_templateObject19 || (Robortender_templateObject19 = Robortender_taggedTemplateLiteral(["Horror"]))), (0,template_string/* $item */.xr)(Robortender_templateObject20 || (Robortender_templateObject20 = Robortender_taggedTemplateLiteral(["lump of black ichor"])))], [(0,template_string/* $phylum */.tq)(Robortender_templateObject21 || (Robortender_templateObject21 = Robortender_taggedTemplateLiteral(["Humanoid"]))), (0,template_string/* $item */.xr)(Robortender_templateObject22 || (Robortender_templateObject22 = Robortender_taggedTemplateLiteral(["bottle of gregnadigne"])))], // bottle of Crème de Fugu
[(0,template_string/* $phylum */.tq)(Robortender_templateObject23 || (Robortender_templateObject23 = Robortender_taggedTemplateLiteral(["Mer-kin"]))), external_kolmafia_.Item.get(9358)], [(0,template_string/* $phylum */.tq)(Robortender_templateObject24 || (Robortender_templateObject24 = Robortender_taggedTemplateLiteral(["Orc"]))), (0,template_string/* $item */.xr)(Robortender_templateObject25 || (Robortender_templateObject25 = Robortender_taggedTemplateLiteral(["baby oil shooter"])))], [(0,template_string/* $phylum */.tq)(Robortender_templateObject26 || (Robortender_templateObject26 = Robortender_taggedTemplateLiteral(["Penguin"]))), (0,template_string/* $item */.xr)(Robortender_templateObject27 || (Robortender_templateObject27 = Robortender_taggedTemplateLiteral(["fish head"])))], [(0,template_string/* $phylum */.tq)(Robortender_templateObject28 || (Robortender_templateObject28 = Robortender_taggedTemplateLiteral(["Pirate"]))), (0,template_string/* $item */.xr)(Robortender_templateObject29 || (Robortender_templateObject29 = Robortender_taggedTemplateLiteral(["limepatch"])))], [(0,template_string/* $phylum */.tq)(Robortender_templateObject30 || (Robortender_templateObject30 = Robortender_taggedTemplateLiteral(["Plant"]))), (0,template_string/* $item */.xr)(Robortender_templateObject31 || (Robortender_templateObject31 = Robortender_taggedTemplateLiteral(["pile of dirt"])))], [(0,template_string/* $phylum */.tq)(Robortender_templateObject32 || (Robortender_templateObject32 = Robortender_taggedTemplateLiteral(["Slime"]))), (0,template_string/* $item */.xr)(Robortender_templateObject33 || (Robortender_templateObject33 = Robortender_taggedTemplateLiteral(["slime shooter"])))], [(0,template_string/* $phylum */.tq)(Robortender_templateObject34 || (Robortender_templateObject34 = Robortender_taggedTemplateLiteral(["Weird"]))), (0,template_string/* $item */.xr)(Robortender_templateObject35 || (Robortender_templateObject35 = Robortender_taggedTemplateLiteral(["imaginary lemon"])))]]);
/**
 *
 * @param target The phylum or monster you want to know the robortender drop of
 * @returns The robortender drop associated with that phylum or monster
 */

function dropFrom(target) {
  var _phylumDrops$get;

  var phylum = target instanceof external_kolmafia_.Monster ? target.phylum : target;
  return (_phylumDrops$get = phylumDrops.get(phylum)) !== null && _phylumDrops$get !== void 0 ? _phylumDrops$get : template_string/* $item.none */.xr.none;
}
/**
 * Determines the probability of getting a robortender drop based on number of drops received
 *
 * @param dropNumber The number of drops to assume you've already received; defaults to mafia's tracked amount
 * @returns The probability of getting a robort drop
 */

function dropChance() {
  var _dropNumber;

  var dropNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,property.get)("_roboDrops");
  return (_dropNumber = [1, 0.5, 0.4, 0.4, 0.4, 0.3, 0.3, 0.3][dropNumber]) !== null && _dropNumber !== void 0 ? _dropNumber : 0.2;
}
var minorDrinks = (0,template_string/* $items */.vS)(Robortender_templateObject36 || (Robortender_templateObject36 = Robortender_taggedTemplateLiteral(["literal grasshopper, double entendre, Phlegethon, Siberian sunrise, mentholated wine, low tide martini, shroomtini, morning dew, whiskey squeeze, great old fashioned, Gnomish sagngria, vodka stinger, extremely slippery nipple, piscatini, Churchill, soilzerac, London frog, nothingtini"])));
var majorDrinks = (0,template_string/* $items */.vS)(Robortender_templateObject37 || (Robortender_templateObject37 = Robortender_taggedTemplateLiteral(["eighth plague, single entendre, reverse Tantalus, elemental caipiroska, Feliz Navidad, Bloody Nora, moreltini, hell in a bucket, Newark, R'lyeh, Gnollish sangria, vodka barracuda, Mysterious Island iced tea, drive-by shooting, gunner's daughter, dirt julep, Simepore slime, Phil Collins"])));
var drinks = [].concat(Robortender_toConsumableArray(minorDrinks), Robortender_toConsumableArray(majorDrinks));
/**
 * @returns An array consisting of the drinks you've fed your robortender today.
 */

function currentDrinks() {
  var pref = (0,property.get)("_roboDrinks");
  if (!pref) return [];
  return pref.split(",").filter(x => x.trim()).map(name => (0,external_kolmafia_.toItem)(name)).filter(drink => drinks.includes(drink));
}
/**
 * @param beverage A robortender-consumable drink of choice (i.e. Drive-By Shooting, Single Entendre, etc)
 * @returns A boolean; if true, the user's robortender has drunk that drink after execution. If false, it has not. This ALSO returns false if the user has not passed the function a robortender-consumable drink. If the user does not already have the beverage in their inventory, this function will not purchase the requested for you.
 */

function feed(beverage) {
  if (currentDrinks().includes(beverage)) return true;
  if (currentDrinks().length >= 5) return false;
  if (!drinks.includes(beverage)) return false;
  if (!(0,external_kolmafia_.itemAmount)(beverage)) return false;
  if (!Robortender_have()) return false;
  var priorFamiliar = (0,external_kolmafia_.myFamiliar)();
  (0,external_kolmafia_.useFamiliar)(Robortender_familiar); // must equip Robortender to feed it

  (0,external_kolmafia_.visitUrl)("inventory.php?action=robooze&which=1&whichitem=".concat(beverage.id));
  (0,external_kolmafia_.useFamiliar)(priorFamiliar);
  return currentDrinks().includes(beverage);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2017/Spacegate.js
var Spacegate_templateObject, Spacegate_templateObject2, Spacegate_templateObject3, Spacegate_templateObject4, Spacegate_templateObject5;

function Spacegate_slicedToArray(arr, i) { return Spacegate_arrayWithHoles(arr) || Spacegate_iterableToArrayLimit(arr, i) || Spacegate_unsupportedIterableToArray(arr, i) || Spacegate_nonIterableRest(); }

function Spacegate_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function Spacegate_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Spacegate_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Spacegate_arrayLikeToArray(o, minLen); }

function Spacegate_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function Spacegate_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function Spacegate_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function Spacegate_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




/**
 * @returns Whether you have permanent Spacegate Access
 */

function Spacegate_have() {
  return (0,property.get)("spacegateAlways");
  "";
}
/**
 * Refreshes the data from the Spacegate Terminal to determine current Spacegate Status
 */

function updateStatus() {
  (0,external_kolmafia_.visitUrl)("place.php?whichplace=spacegate&action=sg_Terminal");
}
/**
 * @returns Whether you have dialled the spacegate today.
 */

function dialled() {
  updateStatus();
  return (0,property.get)("_spacegateCoordinates") !== "" || (0,property.get)("_spacegateToday");
}
/**
 * @returns A string containing a pipe-separated (|) list of all known hazards at the dialled planet
 */

function hazards() {
  return (0,property.get)("_spacegateHazards");
}
/**
 * @returns The name of the dialled planet
 */

function planetName() {
  return (0,property.get)("_spacegatePlanetName");
}
/**
 * @returns The 7-letter coordinates of the dialled planet
 */

function planetCoords() {
  return (0,property.get)("_spacegateCoordinates");
}
/**
 * @returns The level of plantlife expected on the dialled planet (none, primitive, advanced, anomalous)
 */

function plantLife() {
  return (0,property.get)("_spacegatePlantLife");
}
/**
 * @returns The level of animal life expected on the dialled planet (none, primitive, advanced, anomalous)
 */

function animalLife() {
  return (0,property.get)("_spacegateAnimalLife");
}
/**
 * @returns Whether intelligent life is detected on the dialled planet
 */

function intelligentLife() {
  return (0,property.get)("_spacegateIntelligentLife").includes("detected");
}
/**
 * @returns Whether hostile life is detected on the dialled planet
 */

function hostileLife() {
  return (0,property.get)("_spacegateIntelligentLife").includes("hostile");
}
/**
 * @returns Whether alien ruins are detected on the dialled planet
 */

function ruins() {
  return (0,property.get)("_spacegateRuins");
}
/**
 * @returns Whether Spants are detected on the dialled planet
 */

function spants() {
  return (0,property.get)("_spacegateSpant");
}
/**
 * @returns Whether muderbots are detected on the dialled planet
 */

function murderBots() {
  return (0,property.get)("_spacegateMurderbot");
}
/**
 * @param hazards A string of the various hazard names
 * @returns An array of the various required equipment to deal with those hazards
 */

function hazardEquipment(hazards) {
  var hazardEquipment = {
    "toxic atmosphere": (0,template_string/* $item */.xr)(Spacegate_templateObject || (Spacegate_templateObject = Spacegate_taggedTemplateLiteral(["filter helmet"]))),
    "high gravity": (0,template_string/* $item */.xr)(Spacegate_templateObject2 || (Spacegate_templateObject2 = Spacegate_taggedTemplateLiteral(["exo-servo leg braces"]))),
    irradiated: (0,template_string/* $item */.xr)(Spacegate_templateObject3 || (Spacegate_templateObject3 = Spacegate_taggedTemplateLiteral(["rad cloak"]))),
    "magnetic storms": (0,template_string/* $item */.xr)(Spacegate_templateObject4 || (Spacegate_templateObject4 = Spacegate_taggedTemplateLiteral(["gate transceiver"]))),
    "high winds": (0,template_string/* $item */.xr)(Spacegate_templateObject5 || (Spacegate_templateObject5 = Spacegate_taggedTemplateLiteral(["high-friction boots"])))
  };
  return Object.entries(hazardEquipment).filter(_ref => {
    var _ref2 = Spacegate_slicedToArray(_ref, 1),
        clue = _ref2[0];

    return hazards.includes(clue);
  }).map(_ref3 => {
    var _ref4 = Spacegate_slicedToArray(_ref3, 2),
        item = _ref4[1];

    return item;
  });
}
/**
 * Tries to acquire all necessary equipment for the stated hazards at the dialed planet
 *
 * @returns Whether you successfully acquired all necessary equipment
 */

function getHazardEquipment() {
  if (!Spacegate_have()) {
    return false;
  }

  var equipment = hazardEquipment(hazards());
  equipment.forEach(equip => {
    var num = equip.id - 9404; //Equipment items are 9405 - 9409,

    (0,external_kolmafia_.visitUrl)("place.php?whichplace=spacegate&action=sg_requisition");
    (0,external_kolmafia_.visitUrl)("choice.php?whichchoice=1233&option=".concat(num));
  });
  equipment.forEach(equip => {
    if ((0,external_kolmafia_.availableAmount)(equip) !== 1) {
      return false;
    }
  });
  return true;
}
/**
 * Gets the requested Spacegate Vaccine Buff
 *
 * @param choice Name of Vaccine or Buff type requested
 * @returns Whether you successfully acquired a vaccine
 */

function getVaccine(choice) {
  if ((0,property.get)("_spacegateVaccine")) {
    return false;
  }

  var nums = {
    Rainbow: 1,
    "Elemental Resistance": 1,
    "Broad-Spectrum": 2,
    Stats: 2,
    Emotional: 3,
    "Monster Level": 3
  };
  var num = nums[choice];

  if (!(0,property.get)("spacegateVaccine".concat(num))) {
    throw "You don't appear to have that Vaccine Unlocked!";
  }

  (0,external_kolmafia_.cliExecute)("spacegate vaccine ".concat(num));
  return (0,property.get)("_spacegateVaccine");
}
/**
 * Dials the requested gate address
 *
 * @param address 7-letter string indicating the coordinates of the planet you wish to dial.
 * @returns Whether you successfully dialled the requested planet.
 */

function dial(address) {
  if (!Spacegate_have() || dialled()) {
    //cannot dial if we already have or don't own it.
    return false;
  }

  if (!address.match("^[[alpha]]+$") || address.length !== 7) {
    throw "Invalid Spacegate Address - must be exactly 7 alphabetic characters";
  } else {
    (0,external_kolmafia_.cliExecute)("spacegate destination ".concat(address));
  }

  return dialled() && planetCoords() === address;
}
/**
 * Dials a random gate address
 *
 * @returns Whether you successfully dialled a planet.
 */

function dialRandom() {
  if (!Spacegate_have() || dialled()) {
    //cannot dial if we already have or don't own it.
    return false;
  }

  (0,external_kolmafia_.cliExecute)("spacegate destination random");
  return dialled();
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2017/TunnelOfLove.js
var TunnelOfLove_templateObject, TunnelOfLove_templateObject2;

function TunnelOfLove_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






/**
 * @returns Is the love tunnel available?
 */

function TunnelOfLove_have() {
  return (0,property.get)("loveTunnelAvailable");
}
/**
 * @returns Have we visited the love tunnel yet today?
 */

function isUsed() {
  return (0,property.get)("_loveTunnelUsed");
}
/**
 * @returns Do we `have` an Enamorang?
 */

function haveLovEnamorang() {
  return (0,lib/* have */.lf)((0,template_string/* $item */.xr)(TunnelOfLove_templateObject || (TunnelOfLove_templateObject = TunnelOfLove_taggedTemplateLiteral(["LOV Enamorang"]))));
}
/**
 * @returns How many enamorangs have we used today?
 */

function getLovEnamorangUses() {
  return (0,property.get)("_enamorangs");
}
/**
 * @returns Can we currently use an enamorang?
 */

function couldUseLoveEnamorang() {
  return !(0,lib/* haveWandererCounter */.aY)(lib/* Wanderer.Enamorang */.Ie.Enamorang) && getLovEnamorangUses() < 3 && haveLovEnamorang();
}
/**
 * @returns The Monster currently in our enamorang; `null` for none
 */

function getLovEnamorangMonster() {
  return (0,property.get)("enamorangMonster");
}
var LovEnamorang = new Copier(() => couldUseLoveEnamorang(), null, () => couldUseLoveEnamorang(), () => getLovEnamorangMonster());
/**
 * Internal function used for `fightAll`
 *
 * @param equipment The equipment to select from the tunnel
 * @returns The relevant choice option
 */

function equipmentChoice(equipment) {
  switch (equipment) {
    case "LOV Eardigan":
      return 1;

    case "LOV Epaulettes":
      return 2;

    case "LOV Earring":
      return 3;
  }
}
/**
 *Internal function used for `fightAll`
 *
 * @param effect The effect to select from the tunnel
 * @returns The relevant choice option
 */


function effectChoice(effect) {
  switch (effect) {
    case "Lovebotamy":
      return 1;

    case "Open Heart Surgery":
      return 2;

    case "Wandering Eye Surgery":
      return 3;
  }
}
/**
 * Internal function used for `fightAll`
 *
 * @param extra The extra item to select from the tunnel
 * @returns The relevant choice option
 */


function extraChoice(extra) {
  switch (extra) {
    case "LOV Enamorang":
      return 1;

    case "LOV Emotionizer":
      return 2;

    case "LOV Extraterrestrial Chocolate":
      return 3;

    case "LOV Echinacea Bouquet":
      return 4;

    case "LOV Elephant":
      return 5;

    case "toast":
      return 6;

    case null:
      return 7;
  }
}
/**
 * Fight all LOV monsters and get buffs/equipment.
 *
 * @param equipment Equipment to take from LOV.
 * @param effect Effect to take from LOV.
 * @param extra Extra item to take from LOV.
 */


function fightAll(equipment, effect, extra) {
  (0,property.withChoices)({
    1222: 1,
    1223: 1,
    1224: equipmentChoice(equipment),
    1225: 1,
    1226: effectChoice(effect),
    1227: 1,
    1228: extraChoice(extra)
  }, () => {
    (0,external_kolmafia_.adv1)((0,template_string/* $location */.PG)(TunnelOfLove_templateObject2 || (TunnelOfLove_templateObject2 = TunnelOfLove_taggedTemplateLiteral(["The Tunnel of L.O.V.E."]))), 0, "");
  });
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2018/LatteLoversMembersMug.js
var LatteLoversMembersMug_templateObject, LatteLoversMembersMug_templateObject2, LatteLoversMembersMug_templateObject3, LatteLoversMembersMug_templateObject4, LatteLoversMembersMug_templateObject5, LatteLoversMembersMug_templateObject6, LatteLoversMembersMug_templateObject7, LatteLoversMembersMug_templateObject8, LatteLoversMembersMug_templateObject9, LatteLoversMembersMug_templateObject10, LatteLoversMembersMug_templateObject11, LatteLoversMembersMug_templateObject12, LatteLoversMembersMug_templateObject13, LatteLoversMembersMug_templateObject14, LatteLoversMembersMug_templateObject15, LatteLoversMembersMug_templateObject16, LatteLoversMembersMug_templateObject17, LatteLoversMembersMug_templateObject18, LatteLoversMembersMug_templateObject19, LatteLoversMembersMug_templateObject20, LatteLoversMembersMug_templateObject21, LatteLoversMembersMug_templateObject22, LatteLoversMembersMug_templateObject23, LatteLoversMembersMug_templateObject24, LatteLoversMembersMug_templateObject25, LatteLoversMembersMug_templateObject26, LatteLoversMembersMug_templateObject27, LatteLoversMembersMug_templateObject28, LatteLoversMembersMug_templateObject29, LatteLoversMembersMug_templateObject30, LatteLoversMembersMug_templateObject31, LatteLoversMembersMug_templateObject32, LatteLoversMembersMug_templateObject33, LatteLoversMembersMug_templateObject34, LatteLoversMembersMug_templateObject35, LatteLoversMembersMug_templateObject36, LatteLoversMembersMug_templateObject37, LatteLoversMembersMug_templateObject38, LatteLoversMembersMug_templateObject39, LatteLoversMembersMug_templateObject40, LatteLoversMembersMug_templateObject41, LatteLoversMembersMug_templateObject42, LatteLoversMembersMug_templateObject43, LatteLoversMembersMug_templateObject44, LatteLoversMembersMug_templateObject45, LatteLoversMembersMug_templateObject46, LatteLoversMembersMug_templateObject47, LatteLoversMembersMug_templateObject48, LatteLoversMembersMug_templateObject49, LatteLoversMembersMug_templateObject50, LatteLoversMembersMug_templateObject51, LatteLoversMembersMug_templateObject52, LatteLoversMembersMug_templateObject53;

function LatteLoversMembersMug_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }







/**
 * @returns Whether we `have` the latte lovers member's mug
 */

function LatteLoversMembersMug_have() {
  return (0,lib/* have */.lf)((0,template_string/* $item */.xr)(LatteLoversMembersMug_templateObject || (LatteLoversMembersMug_templateObject = LatteLoversMembersMug_taggedTemplateLiteral(["latte lovers member's mug"]))));
}
/**
 * @returns The current target of `Offer Latte`, assuming the effect is active; otherwise, `null`
 */

function sniffedMonster() {
  return exists("Latte Monster") ? (0,property.get)("_latteMonster") : null;
}
/**
 * @returns The number of latte refills remaining for the day
 */

function refillsRemaining() {
  return (0,utils/* clamp */.uZ)(3 - (0,property.get)("_latteRefillsUsed"), 0, 3);
}
var INGREDIENTS = {
  ancient: {
    modifier: {
      "Spooky Damage": 50
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject2 || (LatteLoversMembersMug_templateObject2 = LatteLoversMembersMug_taggedTemplateLiteral(["The Mouldering Mansion"])))
  },
  asp: {
    modifier: {
      "Weapon Damage": 25
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject3 || (LatteLoversMembersMug_templateObject3 = LatteLoversMembersMug_taggedTemplateLiteral(["The Middle Chamber"])))
  },
  basil: {
    modifier: {
      "HP Regen Min": 5,
      "HP Regen Max": 5
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject4 || (LatteLoversMembersMug_templateObject4 = LatteLoversMembersMug_taggedTemplateLiteral(["The Overgrown Lot"])))
  },
  belgian: {
    modifier: {
      "Moxie Percent": 20,
      "Mysticality Percent": 20,
      "Muscle Percent": 20
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject5 || (LatteLoversMembersMug_templateObject5 = LatteLoversMembersMug_taggedTemplateLiteral(["Whitey's Grove"])))
  },
  chalk: {
    modifier: {
      "Cold Damage": 25
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject6 || (LatteLoversMembersMug_templateObject6 = LatteLoversMembersMug_taggedTemplateLiteral(["The Haunted Billiards Room"])))
  },
  "bug-thistle": {
    modifier: {
      Mysticality: 20
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject7 || (LatteLoversMembersMug_templateObject7 = LatteLoversMembersMug_taggedTemplateLiteral(["The Bugbear Pen"])))
  },
  butternut: {
    modifier: {
      "Spell Damage": 10
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject8 || (LatteLoversMembersMug_templateObject8 = LatteLoversMembersMug_taggedTemplateLiteral(["Madness Bakery"])))
  },
  cajun: {
    modifier: {
      "Meat Drop": 40
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject9 || (LatteLoversMembersMug_templateObject9 = LatteLoversMembersMug_taggedTemplateLiteral(["The Black Forest"])))
  },
  carrot: {
    modifier: {
      "Item Drop": 20
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject10 || (LatteLoversMembersMug_templateObject10 = LatteLoversMembersMug_taggedTemplateLiteral(["The Dire Warren"])))
  },
  carrrdamom: {
    modifier: {
      "MP Regen Min": 4,
      "MP Regen Max": 6
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject11 || (LatteLoversMembersMug_templateObject11 = LatteLoversMembersMug_taggedTemplateLiteral(["Barrrney's Barrr"])))
  },
  chili: {
    modifier: {
      "Hot Resistance": 3
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject12 || (LatteLoversMembersMug_templateObject12 = LatteLoversMembersMug_taggedTemplateLiteral(["The Haunted Kitchen"])))
  },
  clove: {
    modifier: {
      "Stench Resistance": 3
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject13 || (LatteLoversMembersMug_templateObject13 = LatteLoversMembersMug_taggedTemplateLiteral(["The Sleazy Back Alley"])))
  },
  coal: {
    modifier: {
      "Hot Damage": 25
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject14 || (LatteLoversMembersMug_templateObject14 = LatteLoversMembersMug_taggedTemplateLiteral(["The Haunted Boiler Room"])))
  },
  cocoa: {
    modifier: {
      "Cold Resistance": 3
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject15 || (LatteLoversMembersMug_templateObject15 = LatteLoversMembersMug_taggedTemplateLiteral(["The Icy Peak"])))
  },
  diet: {
    modifier: {
      Initiative: 50
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject16 || (LatteLoversMembersMug_templateObject16 = LatteLoversMembersMug_taggedTemplateLiteral(["Battlefield (No Uniform)"])))
  },
  dwarf: {
    modifier: {
      Muscle: 30
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject17 || (LatteLoversMembersMug_templateObject17 = LatteLoversMembersMug_taggedTemplateLiteral(["Itznotyerzitz Mine"])))
  },
  dyspepsi: {
    modifier: {
      Initiative: 25
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject18 || (LatteLoversMembersMug_templateObject18 = LatteLoversMembersMug_taggedTemplateLiteral(["Battlefield (Dyspepsi Uniform)"])))
  },
  filth: {
    modifier: {
      "Damage Reduction": 20
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject19 || (LatteLoversMembersMug_templateObject19 = LatteLoversMembersMug_taggedTemplateLiteral(["The Feeding Chamber"])))
  },
  grass: {
    modifier: {
      Experience: 3
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject20 || (LatteLoversMembersMug_templateObject20 = LatteLoversMembersMug_taggedTemplateLiteral(["The Hidden Park"])))
  },
  fungus: {
    modifier: {
      "Maximum MP": 30
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject21 || (LatteLoversMembersMug_templateObject21 = LatteLoversMembersMug_taggedTemplateLiteral(["The Fungal Nethers"])))
  },
  mold: {
    modifier: {
      "Spooky Damage": 20
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject22 || (LatteLoversMembersMug_templateObject22 = LatteLoversMembersMug_taggedTemplateLiteral(["The Unquiet Garves"])))
  },
  greek: {
    modifier: {
      "Sleaze Damage": 25
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject23 || (LatteLoversMembersMug_templateObject23 = LatteLoversMembersMug_taggedTemplateLiteral(["Wartime Frat House"])))
  },
  grobold: {
    modifier: {
      "Sleaze Damage": 25
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject24 || (LatteLoversMembersMug_templateObject24 = LatteLoversMembersMug_taggedTemplateLiteral(["The Old Rubee Mine"])))
  },
  guarna: {
    modifier: {
      Adventures: 4
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject25 || (LatteLoversMembersMug_templateObject25 = LatteLoversMembersMug_taggedTemplateLiteral(["The Bat Hole Entrance"])))
  },
  gunpowder: {
    modifier: {
      "Weapon Damage": 50
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject26 || (LatteLoversMembersMug_templateObject26 = LatteLoversMembersMug_taggedTemplateLiteral(["1st Floor, Shiawase-Mitsuhama Building"])))
  },
  healing: {
    modifier: {
      "HP Regen Min": 10,
      "HP Regen Max": 20
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject27 || (LatteLoversMembersMug_templateObject27 = LatteLoversMembersMug_taggedTemplateLiteral(["The Daily Dungeon"])))
  },
  hellion: {
    modifier: {
      "PvP Fights": 6
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject28 || (LatteLoversMembersMug_templateObject28 = LatteLoversMembersMug_taggedTemplateLiteral(["The Dark Neck of the Woods"])))
  },
  hobo: {
    modifier: {
      "Damage Absorption": 50
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject29 || (LatteLoversMembersMug_templateObject29 = LatteLoversMembersMug_taggedTemplateLiteral(["Hobopolis Town Square"])))
  },
  greasy: {
    modifier: {
      "Muscle Percent": 50
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject30 || (LatteLoversMembersMug_templateObject30 = LatteLoversMembersMug_taggedTemplateLiteral(["Cobb's Knob Barracks"])))
  },
  wing: {
    modifier: {
      "Combat Rate": 10
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject31 || (LatteLoversMembersMug_templateObject31 = LatteLoversMembersMug_taggedTemplateLiteral(["The Dark Heart of the Woods"])))
  },
  ink: {
    modifier: {
      "Combat Rate": -10
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject32 || (LatteLoversMembersMug_templateObject32 = LatteLoversMembersMug_taggedTemplateLiteral(["The Haunted Library"])))
  },
  kombucha: {
    modifier: {
      "Stench Damage": 25
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject33 || (LatteLoversMembersMug_templateObject33 = LatteLoversMembersMug_taggedTemplateLiteral(["Wartime Hippy Camp"])))
  },
  lihc: {
    modifier: {
      "Spooky Damage": 25
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject34 || (LatteLoversMembersMug_templateObject34 = LatteLoversMembersMug_taggedTemplateLiteral(["The Defiled Niche"])))
  },
  lizard: {
    modifier: {
      "MP Regen Min": 5,
      "MP Regen Max": 15
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject35 || (LatteLoversMembersMug_templateObject35 = LatteLoversMembersMug_taggedTemplateLiteral(["The Arid, Extra-Dry Desert"])))
  },
  macaroni: {
    modifier: {
      "Maximum HP": 20
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject36 || (LatteLoversMembersMug_templateObject36 = LatteLoversMembersMug_taggedTemplateLiteral(["The Haunted Pantry"])))
  },
  mega: {
    modifier: {
      "Moxie Percent": 50
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject37 || (LatteLoversMembersMug_templateObject37 = LatteLoversMembersMug_taggedTemplateLiteral(["Cobb's Knob Laboratory"])))
  },
  oil: {
    modifier: {
      "Sleaze Damage": 20
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject38 || (LatteLoversMembersMug_templateObject38 = LatteLoversMembersMug_taggedTemplateLiteral(["The Old Landfill"])))
  },
  msg: {
    modifier: {
      "Critical Hit Percent": 15
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject39 || (LatteLoversMembersMug_templateObject39 = LatteLoversMembersMug_taggedTemplateLiteral(["The Briniest Deepests"])))
  },
  norwhal: {
    modifier: {
      "Maximum HP Percent": 200
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject40 || (LatteLoversMembersMug_templateObject40 = LatteLoversMembersMug_taggedTemplateLiteral(["The Ice Hole"])))
  },
  paint: {
    modifier: {
      "Prismatic Damage": 5
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject41 || (LatteLoversMembersMug_templateObject41 = LatteLoversMembersMug_taggedTemplateLiteral(["The Haunted Gallery"])))
  },
  paradise: {
    modifier: {
      Moxie: 20,
      Muscle: 20,
      Mysticality: 20
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject42 || (LatteLoversMembersMug_templateObject42 = LatteLoversMembersMug_taggedTemplateLiteral(["The Stately Pleasure Dome"])))
  },
  rawhide: {
    modifier: {
      "Familiar Weight": 5
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject43 || (LatteLoversMembersMug_templateObject43 = LatteLoversMembersMug_taggedTemplateLiteral(["The Spooky Forest"])))
  },
  rock: {
    modifier: {
      "Critical Hit Percent": 10
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject44 || (LatteLoversMembersMug_templateObject44 = LatteLoversMembersMug_taggedTemplateLiteral(["The Brinier Deepers"])))
  },
  salt: {
    modifier: {
      "Critical Hit Percent": 5
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject45 || (LatteLoversMembersMug_templateObject45 = LatteLoversMembersMug_taggedTemplateLiteral(["The Briny Deeps"])))
  },
  sandalwood: {
    modifier: {
      Moxie: 5,
      Muscle: 5,
      Mysticality: 5
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject46 || (LatteLoversMembersMug_templateObject46 = LatteLoversMembersMug_taggedTemplateLiteral(["Noob Cave"])))
  },
  sausage: {
    modifier: {
      "Mysticality Percent": 50
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject47 || (LatteLoversMembersMug_templateObject47 = LatteLoversMembersMug_taggedTemplateLiteral(["Cobb's Knob Kitchens"])))
  },
  space: {
    modifier: {
      Moxie: 10,
      Muscle: 10,
      Mysticality: 10
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject48 || (LatteLoversMembersMug_templateObject48 = LatteLoversMembersMug_taggedTemplateLiteral(["The Hole in the Sky"])))
  },
  squash: {
    modifier: {
      "Spell Damage": 10
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject49 || (LatteLoversMembersMug_templateObject49 = LatteLoversMembersMug_taggedTemplateLiteral(["The Copperhead Club"])))
  },
  teeth: {
    modifier: {
      "Spooky Damage": 25,
      "Weapon Damage": 25
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject50 || (LatteLoversMembersMug_templateObject50 = LatteLoversMembersMug_taggedTemplateLiteral(["The VERY Unquiet Garves"])))
  },
  vitamin: {
    modifier: {
      "Familiar Experience": 3
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject51 || (LatteLoversMembersMug_templateObject51 = LatteLoversMembersMug_taggedTemplateLiteral(["The Dark Elbow of the Woods"])))
  },
  flour: {
    modifier: {
      "Sleaze Resistance": 3
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject52 || (LatteLoversMembersMug_templateObject52 = LatteLoversMembersMug_taggedTemplateLiteral(["The Road to the White Citadel"])))
  },
  squamous: {
    modifier: {
      "Spooky Resistance": 3
    },
    location: (0,template_string/* $location */.PG)(LatteLoversMembersMug_templateObject53 || (LatteLoversMembersMug_templateObject53 = LatteLoversMembersMug_taggedTemplateLiteral(["The Caliginous Abyss"])))
  },
  pumpkin: {
    modifier: {
      "Mysticality Experience": 1,
      "Spell Damage": 5,
      "Mysticality Percent": 5
    },
    location: null
  },
  cinnamon: {
    modifier: {
      "Moxie Experience": 1,
      "Pickpocket Rate": 5,
      "Moxie Percent": 5
    },
    location: null
  },
  vanilla: {
    modifier: {
      "Muscle Experience": 1,
      "Weapon Damage Percent": 5,
      "Muscle Percent": 5
    },
    location: null
  }
};
/**
 * @returns An array consisting of the Ingredients you've unlocked so far this ascension
 */

function ingredientsUnlocked() {
  return (0,property.get)("latteUnlocks").split(",");
}
/**
 * Fill the latte with ingredients of your choosing
 *
 * @param ingredients Ingredients to fill the latte with
 * @returns Whether we succeeded in this endeavor
 */

function fill() {
  if (refillsRemaining() <= 0) return false;

  for (var _len = arguments.length, ingredients = new Array(_len), _key = 0; _key < _len; _key++) {
    ingredients[_key] = arguments[_key];
  }

  if (new Set(ingredients).size < 3) return false;
  if (ingredients.some(i => !ingredientsUnlocked().includes(i))) return false;
  return (0,external_kolmafia_.cliExecute)("latte refill ".concat(ingredients.join(" ")));
}
/**
 * @param ingredient A latte ingredient
 * @returns An object containing the modifiers associated with that latte ingredient
 */

function modifierOf(ingredient) {
  return INGREDIENTS[ingredient].modifier;
}
/**
 * @param ingredient A latte ingredient
 * @returns The location that can be used to unlock said ingredient; null if the ingredient is free
 */

function locationOf(ingredient) {
  return INGREDIENTS[ingredient].location;
}
/**
 * @returns An array consisting of all Ingredients currently in your latte
 */

function currentIngredients() {
  return (0,external_kolmafia_.getProperty)("latteIngredients").split(",");
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2018/SongBoom.js
var SongBoom_templateObject;

function SongBoom_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var SongBoom_item = (0,template_string/* $item */.xr)(SongBoom_templateObject || (SongBoom_templateObject = SongBoom_taggedTemplateLiteral(["SongBoom\u2122 BoomBox"])));
/**
 * @returns Whether we `have` the SongBoom™ BoomBox
 */

function SongBoom_have() {
  return (0,lib/* have */.lf)(SongBoom_item);
}
var keywords = {
  "Eye of the Giger": "spooky",
  "Food Vibrations": "food",
  "Remainin' Alive": "dr",
  "These Fists Were Made for Punchin'": "damage",
  "Total Eclipse of Your Meat": "meat"
};
var songBoomSongs = new Set(Object.keys(keywords));
/**
 * @returns The `SongBoomSong` you currently have active; `null` if none is active at this time
 */

function song() {
  var stored = (0,property.get)("boomBoxSong");
  return songBoomSongs.has(stored) ? stored : null;
}
/**
 * @returns Song changes left today.
 */

function songChangesLeft() {
  return (0,property.get)("_boomBoxSongsLeft");
}
/**
 * Change the song. Throws an error if unable.
 *
 * @param newSong Song to change to.
 * @returns Whether we successfully changed the song; `false` thus means that this was already our current song.
 */

function setSong(newSong) {
  if (song() !== newSong) {
    if (songChangesLeft() === 0) throw new Error("Out of song changes!");
    (0,external_kolmafia_.cliExecute)("boombox ".concat(newSong ? keywords[newSong] : "none"));
    return true;
  } else {
    return false;
  }
}
/**
 * @returns Progress to next song drop (e.g. gathered meat-clip).
 */

function dropProgress() {
  return (0,property.get)("_boomBoxFights");
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2019/BeachComb.js
var BeachComb_templateObject, BeachComb_templateObject2, BeachComb_templateObject3, BeachComb_templateObject4, BeachComb_templateObject5, BeachComb_templateObject6, BeachComb_templateObject7, BeachComb_templateObject8, BeachComb_templateObject9, BeachComb_templateObject10, BeachComb_templateObject11, BeachComb_templateObject12, BeachComb_templateObject13, BeachComb_templateObject14, BeachComb_templateObject15, BeachComb_templateObject16, BeachComb_templateObject17, BeachComb_templateObject18, BeachComb_templateObject19, BeachComb_templateObject20, BeachComb_templateObject21;

function BeachComb_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






/**
 * Determines whether we `have` the beach comb
 *
 * @returns Whether we `have` the beach comb
 */

function BeachComb_have() {
  return (0,lib/* have */.lf)(external_kolmafia_.Item.get("Beach Comb"));
}
/**
 * Determines whether we `have` the beach comb or the driftwood beach comb
 *
 * @returns Whether we `have` either the beach comb or the driftwood beach comb
 */

function BeachComb_available() {
  return BeachComb_have() || (0,lib/* have */.lf)(external_kolmafia_.Item.get("driftwood beach comb"));
}
var headBuffs = [(0,template_string/* $effect */._G)(BeachComb_templateObject || (BeachComb_templateObject = BeachComb_taggedTemplateLiteral(["Hot-Headed"]))), (0,template_string/* $effect */._G)(BeachComb_templateObject2 || (BeachComb_templateObject2 = BeachComb_taggedTemplateLiteral(["Cold as Nice"]))), (0,template_string/* $effect */._G)(BeachComb_templateObject3 || (BeachComb_templateObject3 = BeachComb_taggedTemplateLiteral(["A Brush with Grossness"]))), (0,template_string/* $effect */._G)(BeachComb_templateObject4 || (BeachComb_templateObject4 = BeachComb_taggedTemplateLiteral(["Does It Have a Skull In There??"]))), (0,template_string/* $effect */._G)(BeachComb_templateObject5 || (BeachComb_templateObject5 = BeachComb_taggedTemplateLiteral(["Oiled, Slick"]))), (0,template_string/* $effect */._G)(BeachComb_templateObject6 || (BeachComb_templateObject6 = BeachComb_taggedTemplateLiteral(["Lack of Body-Building"]))), (0,template_string/* $effect */._G)(BeachComb_templateObject7 || (BeachComb_templateObject7 = BeachComb_taggedTemplateLiteral(["We're All Made of Starfish"]))), (0,template_string/* $effect */._G)(BeachComb_templateObject8 || (BeachComb_templateObject8 = BeachComb_taggedTemplateLiteral(["Pomp & Circumsands"]))), (0,template_string/* $effect */._G)(BeachComb_templateObject9 || (BeachComb_templateObject9 = BeachComb_taggedTemplateLiteral(["Resting Beach Face"]))), (0,template_string/* $effect */._G)(BeachComb_templateObject10 || (BeachComb_templateObject10 = BeachComb_taggedTemplateLiteral(["Do I Know You From Somewhere?"]))), (0,template_string/* $effect */._G)(BeachComb_templateObject11 || (BeachComb_templateObject11 = BeachComb_taggedTemplateLiteral(["You Learned Something Maybe!"])))];
var head = {
  HOT: (0,template_string/* $effect */._G)(BeachComb_templateObject12 || (BeachComb_templateObject12 = BeachComb_taggedTemplateLiteral(["Hot-Headed"]))),
  COLD: (0,template_string/* $effect */._G)(BeachComb_templateObject13 || (BeachComb_templateObject13 = BeachComb_taggedTemplateLiteral(["Cold as Nice"]))),
  STENCH: (0,template_string/* $effect */._G)(BeachComb_templateObject14 || (BeachComb_templateObject14 = BeachComb_taggedTemplateLiteral(["A Brush with Grossness"]))),
  SPOOKY: (0,template_string/* $effect */._G)(BeachComb_templateObject15 || (BeachComb_templateObject15 = BeachComb_taggedTemplateLiteral(["Does It Have a Skull In There??"]))),
  SLEAZE: (0,template_string/* $effect */._G)(BeachComb_templateObject16 || (BeachComb_templateObject16 = BeachComb_taggedTemplateLiteral(["Oiled, Slick"]))),
  MUSCLE: (0,template_string/* $effect */._G)(BeachComb_templateObject17 || (BeachComb_templateObject17 = BeachComb_taggedTemplateLiteral(["Lack of Body-Building"]))),
  MYSTICALITY: (0,template_string/* $effect */._G)(BeachComb_templateObject18 || (BeachComb_templateObject18 = BeachComb_taggedTemplateLiteral(["We're All Made of Starfish"]))),
  INITIATIVE: (0,template_string/* $effect */._G)(BeachComb_templateObject19 || (BeachComb_templateObject19 = BeachComb_taggedTemplateLiteral(["Resting Beach Face"]))),
  FAMILIAR: (0,template_string/* $effect */._G)(BeachComb_templateObject20 || (BeachComb_templateObject20 = BeachComb_taggedTemplateLiteral(["Do I Know You From Somewhere?"]))),
  EXPERIENCE: (0,template_string/* $effect */._G)(BeachComb_templateObject21 || (BeachComb_templateObject21 = BeachComb_taggedTemplateLiteral(["You Learned Something Maybe!"])))
};
/**
 * Calculates the tide level for a given game day
 *
 * @param day The day to check the tide level of; defaults to today
 * @returns The tide level as an integer
 */

function tideLevel() {
  var day = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,external_kolmafia_.gamedayToInt)();
  var dayOfMonth = 1 + day % 8;
  return 4 - Math.abs(4 - dayOfMonth);
}
/**
 * Determines whether a given tile can currently be combed, based on the tide level
 *
 * @param tile The tile to check
 * @returns Whether today's tides permit the combing of this tile
 */

function canComb(tile) {
  return tile.row > tideLevel();
}
/**
 * @returns The number of free combs we have available for today
 */

function freeCombs() {
  return BeachComb_available() ? (0,utils/* clamp */.uZ)(11 - (0,property.get)("_freeBeachWalksUsed"), 0, 11) : 0;
}
/**
 * Comb a tile or tiles; skips any presently uncombablle tiles
 *
 * @param tiles The tiles to comb
 */

function comb() {
  for (var _len = arguments.length, tiles = new Array(_len), _key = 0; _key < _len; _key++) {
    tiles[_key] = arguments[_key];
  }

  if (!BeachComb_available() || !tiles.length) return;

  for (var _i = 0, _tiles = tiles; _i < _tiles.length; _i++) {
    var tile = _tiles[_i];

    if (canComb(tile)) {
      var minute = tile.minute,
          row = tile.row,
          column = tile.column;
      (0,external_kolmafia_.cliExecute)("beach wander ".concat(minute));
      (0,external_kolmafia_.cliExecute)("beach comb ".concat(row, " ").concat(column));
    }
  }

  if ((0,external_kolmafia_.handlingChoice)()) (0,external_kolmafia_.runChoice)(5);
}
/**
 * Determines whether a given Beach Head can be combed today
 *
 * @param target The head in question, either as the Effect it grants or as its name
 * @returns Whether the given head is combable
 */

function headAvailable(target) {
  var effect = target instanceof external_kolmafia_.Effect ? target : head[target];
  var headNumber = 1 + headBuffs.indexOf(effect);
  return (0,external_kolmafia_.getProperty)("beachHeadsUnlocked").split(",").includes(headNumber.toString()) && !(0,external_kolmafia_.getProperty)("_beachHeadsUsed").split(",").includes(headNumber.toString());
}
/**
 * Tries to comb a given Beach Head
 *
 * @param target The Beach Head to comb, given either as its effect or as its name
 * @returns Whether we have the head effect at the end of the whole rigamarole; this means that if you `tryHead` when you already have the effect, it will (presumably) fail to comb but will return `true`
 */

function tryHead(target) {
  var effect = target instanceof external_kolmafia_.Effect ? target : head[target];
  if (!headBuffs.includes(effect)) return false;
  if (!headAvailable(target)) return false;
  (0,external_kolmafia_.cliExecute)(effect.default);
  return (0,lib/* have */.lf)(effect);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2019/CampAway.js
var CampAway_templateObject;

function CampAway_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






/**
 * Determines whether we `have` the campsite
 *
 * @returns Whether we `have` the campsite
 */

function CampAway_have() {
  return (0,property.get)("getawayCampsiteUnlocked");
}
/**
 * @returns Number of cloud buffs acquired today
 */

function getCloudBuffsToday() {
  return (0,property.get)("_campAwayCloudBuffs");
}
/**
 * @returns Number of cloud buffs acquired today
 */

function getSmileBuffsToday() {
  return (0,property.get)("_campAwaySmileBuffs");
}
/**
 * @returns Number of buffs acquired today from gazing at the stars
 */

function getBuffsToday() {
  return getCloudBuffsToday() + getSmileBuffsToday();
}
/**
 * @returns Whether player has acquired all their buffs today from gazing at the stars
 */

function canGaze() {
  return getBuffsToday() < 4;
}
/**
 * Gaze at the stars
 */

function gaze() {
  if (!canGaze()) return;
  (0,external_kolmafia_.visitUrl)("place.php?whichplace=campaway&action=campaway_sky");
}
/**
 * @param daycountToCheck Daycount to check, defaults to today
 * @returns The buff that the user will get if they gaze on the supplied daycount
 */

function getGazeBuff() {
  var daycountToCheck = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,external_kolmafia_.daycount)();
  var buffSign = (0,moonSign/* signIdToName */.r)((daycountToCheck + (0,external_kolmafia_.myPath)().id) % 9 + 1);
  var effectName = [];
  if (buffSign === (0,external_kolmafia_.mySign)()) effectName.push("Big");
  effectName.push("Smile of the", buffSign);
  return external_kolmafia_.Effect.get(effectName.join(" "));
}
/**
 * Retrieve a number of campfire smokes and use them selecting randomly from the supplied messages
 *
 * @param messages Array of messages to blow
 * @param times Number of times to blow smoke
 */

function blowSmoke(messages) {
  var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var smoke = (0,template_string/* $item */.xr)(CampAway_templateObject || (CampAway_templateObject = CampAway_taggedTemplateLiteral(["campfire smoke"])));
  (0,external_kolmafia_.retrieveItem)(smoke, times);

  for (var i = 0; i < times; i++) {
    (0,property.withChoice)(1394, "1&message=".concat((0,utils/* random */.MX)(messages)), () => {
      (0,external_kolmafia_.use)(smoke);
    });
  }
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2019/Snapper.js
function Snapper_slicedToArray(arr, i) { return Snapper_arrayWithHoles(arr) || Snapper_iterableToArrayLimit(arr, i) || Snapper_unsupportedIterableToArray(arr, i) || Snapper_nonIterableRest(); }

function Snapper_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function Snapper_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function Snapper_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function Snapper_toConsumableArray(arr) { return Snapper_arrayWithoutHoles(arr) || Snapper_iterableToArray(arr) || Snapper_unsupportedIterableToArray(arr) || Snapper_nonIterableSpread(); }

function Snapper_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function Snapper_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Snapper_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Snapper_arrayLikeToArray(o, minLen); }

function Snapper_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function Snapper_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Snapper_arrayLikeToArray(arr); }

function Snapper_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



var Snapper_familiar = external_kolmafia_.Familiar.get("Red-Nosed Snapper");
/**
 * Map of phylum to item that phylum drops.
 */

var phylumItem = new Map([[external_kolmafia_.Phylum.get("beast"), external_kolmafia_.Item.get("patch of extra-warm fur")], [external_kolmafia_.Phylum.get("bug"), external_kolmafia_.Item.get("a bug's lymph")], [external_kolmafia_.Phylum.get("constellation"), external_kolmafia_.Item.get("micronova")], [external_kolmafia_.Phylum.get("construct"), external_kolmafia_.Item.get("industrial lubricant")], [external_kolmafia_.Phylum.get("demon"), external_kolmafia_.Item.get("infernal snowball")], [external_kolmafia_.Phylum.get("dude"), external_kolmafia_.Item.get("human musk")], [external_kolmafia_.Phylum.get("elemental"), external_kolmafia_.Item.get("livid energy")], [external_kolmafia_.Phylum.get("elf"), external_kolmafia_.Item.get("peppermint syrup")], [external_kolmafia_.Phylum.get("fish"), external_kolmafia_.Item.get("fish sauce")], [external_kolmafia_.Phylum.get("goblin"), external_kolmafia_.Item.get("guffin")], [external_kolmafia_.Phylum.get("hippy"), external_kolmafia_.Item.get("organic potpourri")], [external_kolmafia_.Phylum.get("hobo"), external_kolmafia_.Item.get("beggin' cologne")], [external_kolmafia_.Phylum.get("horror"), external_kolmafia_.Item.get("powdered madness")], [external_kolmafia_.Phylum.get("humanoid"), external_kolmafia_.Item.get("vial of humanoid growth hormone")], [external_kolmafia_.Phylum.get("mer-kin"), external_kolmafia_.Item.get("Mer-kin eyedrops")], [external_kolmafia_.Phylum.get("orc"), external_kolmafia_.Item.get("boot flask")], [external_kolmafia_.Phylum.get("penguin"), external_kolmafia_.Item.get("envelope full of Meat")], [external_kolmafia_.Phylum.get("pirate"), external_kolmafia_.Item.get("Shantix™")], [external_kolmafia_.Phylum.get("plant"), external_kolmafia_.Item.get("goodberry")], [external_kolmafia_.Phylum.get("slime"), external_kolmafia_.Item.get("extra-strength goo")], [external_kolmafia_.Phylum.get("undead"), external_kolmafia_.Item.get("unfinished pleasure")], [external_kolmafia_.Phylum.get("weird"), external_kolmafia_.Item.get("non-Euclidean angle")]]);
/**
 * Map of drop item to phylum it drops from.
 */

var itemPhylum = new Map(Snapper_toConsumableArray(phylumItem).map(_ref => {
  var _ref2 = Snapper_slicedToArray(_ref, 2),
      phylum = _ref2[0],
      item = _ref2[1];

  return [item, phylum];
}));
/**
 * Return whether you have a Red-Nosed Snapper.
 *
 * @returns True if you have a Red-Nosed Snapper, false otherwise.
 */

function Snapper_have() {
  return (0,external_kolmafia_.haveFamiliar)(Snapper_familiar);
}
/**
 * Get the phylum currently being tracked by the snapper.
 *
 * @returns Tracked phylum, or null if no phylum tracked.
 */

function getTrackedPhylum() {
  return (0,property.get)("redSnapperPhylum");
}
/**
 * Set snapper tracking to a certain phylum.
 *
 * @param phylum Phylum to track.
 */

function trackPhylum(phylum) {
  var currentFamiliar = (0,external_kolmafia_.myFamiliar)();

  try {
    (0,external_kolmafia_.useFamiliar)(Snapper_familiar);
    (0,external_kolmafia_.cliExecute)("snapper ".concat(phylum));
  } finally {
    (0,external_kolmafia_.useFamiliar)(currentFamiliar);
  }
}
/**
 * Get progress to next snapper drop.
 *
 * @returns Number of fights completed (out of 11) to reach next drop.
 */

function getProgress() {
  return (0,property.get)("redSnapperProgress");
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2020/Cartography.js
var Cartography_templateObject, Cartography_templateObject2;

function Cartography_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var passive = (0,template_string/* $skill */.tm)(Cartography_templateObject || (Cartography_templateObject = Cartography_taggedTemplateLiteral(["Comprehensive Cartography"])));
/**
 * Determines whether you `have` the skill Comprehensive Cartography
 *
 * @returns Whether you currently `have` the skill
 */

function Cartography_have() {
  return (0,lib/* have */.lf)(passive);
}
/**
 * Map a particular monster in a particular location
 * You'll need to set your autoattack or CCS in advance of using this. Additionally, it will loop to try to avoid time-spinner pranks or zone intro adventures
 *
 * @param location The location to target
 * @param monster The monster to target
 * @returns Whether we successfully mapped the monster
 */

function mapMonster(location, monster) {
  if (!Cartography_have()) return false;
  if ((0,property.get)("_monstersMapped") >= 3) return false;
  if (!(0,external_kolmafia_.canAdventure)(location)) return false;
  (0,external_kolmafia_.useSkill)((0,template_string/* $skill */.tm)(Cartography_templateObject2 || (Cartography_templateObject2 = Cartography_taggedTemplateLiteral(["Map the Monsters"]))));
  if (!(0,property.get)("mappingMonsters")) return false;
  var turns = (0,external_kolmafia_.myTurncount)();

  while ((0,external_kolmafia_.currentRound)() < 1) {
    // Not in combat
    if ((0,external_kolmafia_.myTurncount)() > turns) {
      throw new Error("Map the Monsters unsuccessful?");
    }

    (0,external_kolmafia_.visitUrl)((0,external_kolmafia_.toUrl)(location));

    if ((0,external_kolmafia_.handlingChoice)() && (0,external_kolmafia_.lastChoice)() === 1435) {
      (0,external_kolmafia_.runChoice)(1, "heyscriptswhatsupwinkwink=".concat(monster.id));
      return true;
    } else {
      (0,external_kolmafia_.runChoice)(-1, false);
    }
  }

  return false;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2020/Guzzlr.js
var Guzzlr_templateObject, Guzzlr_templateObject2, Guzzlr_templateObject3, Guzzlr_templateObject4, Guzzlr_templateObject5, Guzzlr_templateObject6, Guzzlr_templateObject7, Guzzlr_templateObject8, Guzzlr_templateObject9, Guzzlr_templateObject10, Guzzlr_templateObject11, Guzzlr_templateObject12, Guzzlr_templateObject13;

function Guzzlr_slicedToArray(arr, i) { return Guzzlr_arrayWithHoles(arr) || Guzzlr_iterableToArrayLimit(arr, i) || Guzzlr_unsupportedIterableToArray(arr, i) || Guzzlr_nonIterableRest(); }

function Guzzlr_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function Guzzlr_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function Guzzlr_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function Guzzlr_toConsumableArray(arr) { return Guzzlr_arrayWithoutHoles(arr) || Guzzlr_iterableToArray(arr) || Guzzlr_unsupportedIterableToArray(arr) || Guzzlr_nonIterableSpread(); }

function Guzzlr_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function Guzzlr_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Guzzlr_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Guzzlr_arrayLikeToArray(o, minLen); }

function Guzzlr_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function Guzzlr_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Guzzlr_arrayLikeToArray(arr); }

function Guzzlr_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function Guzzlr_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var Guzzlr_item = (0,template_string/* $item */.xr)(Guzzlr_templateObject || (Guzzlr_templateObject = Guzzlr_taggedTemplateLiteral(["Guzzlr tablet"])));
/**
 * Determines whether you `have` Guzzlr
 *
 * @returns Whether you `have` Guzzlr
 */

function Guzzlr_have() {
  return (0,lib/* have */.lf)(Guzzlr_item);
}
/**
 * Internal function used to navigate the Guzzlr interface
 *
 * @param option Choice option to select
 */

function useTabletWithChoice(option) {
  (0,property.withChoice)(1412, option, () => (0,external_kolmafia_.use)(1, Guzzlr_item));
}
/**
 * Determines whether you currently have an active Guzzlr quest
 *
 * @returns Whether you currently have an active Guzzlr quest
 */


function isQuestActive() {
  return (0,property.get)("questGuzzlr") !== "unstarted";
}
/**
 * Determines total number of Platinum deliveries completed
 *
 * @returns Platinum deliveries completed overall
 */

function getPlatinum() {
  return (0,property.get)("guzzlrPlatinumDeliveries");
}
/**
 * Determines the number of Platinum deliveries completed today
 *
 * @returns Platinum deliveries completed today
 */

function getPlatinumToday() {
  return (0,property.get)("_guzzlrPlatinumDeliveries");
}
/**
 * Determines whether you are currently eligible to do a Platinum delivery
 *
 * @returns Whether you are currently eligible to do a Platinum delivery
 */

function canPlatinum() {
  return !isQuestActive() && getGold() >= 5 && getPlatinumToday() < 1;
}
/**
 * Determines whether you have fully unlocked the Platinum delivery bonuses (done >= 30)
 *
 * @returns Whether you have fully unlocked the Platinum delivery enchantment bonuses
 */

function haveFullPlatinumBonus() {
  return getPlatinum() >= 30;
}
/**
 * Accepts a Platinum delivery
 *
 * @returns Whether we succeeded in this endeavor
 */

function acceptPlatinum() {
  if (!canPlatinum()) return false;
  useTabletWithChoice(4);
  return true;
}
/**
 * Determines total number of Gold deliveries completed
 *
 * @returns Gold deliveries completed overall
 */

function getGold() {
  return (0,property.get)("guzzlrGoldDeliveries");
}
/**
 * Determines the number of Gold deliveries completed today
 *
 * @returns Gold deliveries completed today
 */

function getGoldToday() {
  return (0,property.get)("_guzzlrGoldDeliveries");
}
/**
 * Determines whether you are currently eligible to do a Gold delivery
 *
 * @returns Whether you are currently eligible to do a Gold delivery
 */

function canGold() {
  return !isQuestActive() && getBronze() >= 5 && getGoldToday() < 3;
}
/**
 * Determines whether you have fully unlocked the Gold delivery bonuses (done >= 150)
 *
 * @returns Whether you have fully unlocked the Gold delivery enchantment bonuses
 */

function haveFullGoldBonus() {
  return getGold() >= 150;
}
/**
 * Accepts a Gold delivery
 *
 * @returns Whether we succeeded in this endeavor
 */

function acceptGold() {
  if (!canGold()) return false;
  useTabletWithChoice(3);
  return true;
}
/**
 * Determines total number of Bronze deliveries completed
 *
 * @returns Bronze deliveries completed overall
 */

function getBronze() {
  return (0,property.get)("guzzlrBronzeDeliveries");
}
/**
 * Determines whether you have fully unlocked the Bronze delivery bonuses (done >= 196)
 *
 * @returns Whether you have fully unlocked the Bronze delivery enchantment bonuses
 */

function haveFullBronzeBonus() {
  return getBronze() >= 196;
}
/**
 * Accepts a Bronze delivery
 *
 * @returns Whether we succeeded in this endeavor
 */

function acceptBronze() {
  if (isQuestActive()) return false;
  useTabletWithChoice(2);
  return true;
}
/**
 * Determines whether we can abandon the current Guzzlr quest
 *
 * @returns Whether we are able to abandon our current Guzzlr quest
 */

function canAbandon() {
  return isQuestActive() && !(0,property.get)("_guzzlrQuestAbandoned");
}
/**
 * Abandons Guzzlr quest
 *
 * @returns `false` if we were unable to abandon a quest; `true` otherwise
 */

function abandon() {
  if (!canAbandon()) return false;
  (0,external_kolmafia_.visitUrl)("inventory.php?tap=guzzlr", false);
  (0,external_kolmafia_.runChoice)(1);
  (0,external_kolmafia_.runChoice)(5);
  return true;
}
/**
 * Determines the target location for your current Guzzlr quest
 *
 * @returns The current target location for your Guzzlr quest, if it exists
 */

function getLocation() {
  return (0,property.get)("guzzlrQuestLocation");
}
/**
 * Determines the tier of your current Guzzlr quest
 *
 * @returns The tier of your current Guzzlr quest; `null` if there is no active quest
 */

function getTier() {
  var tier = (0,property.get)("guzzlrQuestTier");
  return tier === "" ? null : tier;
}
/**
 * Determines the current booze item you need to deliver for your current Guzzlr quest
 *
 * @returns The booze item associated with your Guzzlr quest if it exists; `null` otherwise
 */

function getBooze() {
  var booze = (0,property.get)("guzzlrQuestBooze");
  if (booze === "") return null;
  return external_kolmafia_.Item.get(booze);
}
/**
 * List of the platinum cocktails
 */

var Cocktails = (0,template_string/* $items */.vS)(Guzzlr_templateObject2 || (Guzzlr_templateObject2 = Guzzlr_taggedTemplateLiteral(["Buttery Boy, Steamboat, Ghiaccio Colada, Nog-on-the-Cob, Sourfinger"])));
/**
 * Determines whether you currently have a Platinum cocktail available
 *
 * @returns `true` if you have at least one Platinum cocktail in your inventory; `false` otherwise
 */

function havePlatinumBooze() {
  return Cocktails.some(cock => (0,external_kolmafia_.itemAmount)(cock) > 0);
}
/**
 * Determines if you currently have in your inventory the booze necessary to progress your Guzzlr quest
 *
 * @returns `true` if you have the booze necessary to progress your Guzzlr quest
 */

function haveBooze() {
  var booze = getBooze();

  switch (booze) {
    case null:
      return false;

    case (0,template_string/* $item */.xr)(Guzzlr_templateObject3 || (Guzzlr_templateObject3 = Guzzlr_taggedTemplateLiteral(["Guzzlr cocktail set"]))):
      return havePlatinumBooze();

    default:
      return (0,external_kolmafia_.itemAmount)(booze) > 0;
  }
}
var ingredientToPlatinumCocktail = new Map([[(0,template_string/* $item */.xr)(Guzzlr_templateObject4 || (Guzzlr_templateObject4 = Guzzlr_taggedTemplateLiteral(["miniature boiler"]))), (0,template_string/* $item */.xr)(Guzzlr_templateObject5 || (Guzzlr_templateObject5 = Guzzlr_taggedTemplateLiteral(["Steamboat"])))], [(0,template_string/* $item */.xr)(Guzzlr_templateObject6 || (Guzzlr_templateObject6 = Guzzlr_taggedTemplateLiteral(["cold wad"]))), (0,template_string/* $item */.xr)(Guzzlr_templateObject7 || (Guzzlr_templateObject7 = Guzzlr_taggedTemplateLiteral(["Ghiaccio Colada"])))], [(0,template_string/* $item */.xr)(Guzzlr_templateObject8 || (Guzzlr_templateObject8 = Guzzlr_taggedTemplateLiteral(["robin's egg"]))), (0,template_string/* $item */.xr)(Guzzlr_templateObject9 || (Guzzlr_templateObject9 = Guzzlr_taggedTemplateLiteral(["Nog-on-the-Cob"])))], [(0,template_string/* $item */.xr)(Guzzlr_templateObject10 || (Guzzlr_templateObject10 = Guzzlr_taggedTemplateLiteral(["mangled finger"]))), (0,template_string/* $item */.xr)(Guzzlr_templateObject11 || (Guzzlr_templateObject11 = Guzzlr_taggedTemplateLiteral(["Sourfinger"])))], [(0,template_string/* $item */.xr)(Guzzlr_templateObject12 || (Guzzlr_templateObject12 = Guzzlr_taggedTemplateLiteral(["Dish of Clarified Butter"]))), (0,template_string/* $item */.xr)(Guzzlr_templateObject13 || (Guzzlr_templateObject13 = Guzzlr_taggedTemplateLiteral(["Buttery Boy"])))]]);
var platinumCocktailToIngredient = (0,utils/* invertMap */.Mp)(ingredientToPlatinumCocktail);
/**
 * Determines the cheapest Platinum cocktail to obtain or produce
 *
 * @param freeCraft Defaults to `true`; if set to `false`, will count the price of any turns spent cocktailcrafting
 * @returns The expected price of the cheapest Platinum cocktail to obtain or produce
 */

function getCheapestPlatinumCocktail() {
  var freeCraft = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  if (freeCraft) {
    return (0,utils/* maxBy */.UT)(Array.from(ingredientToPlatinumCocktail), ingredientAndCocktail => Math.min.apply(Math, Guzzlr_toConsumableArray(ingredientAndCocktail.map(item => (0,external_kolmafia_.mallPrice)(item)))), true)[1];
  } else {
    return (0,utils/* maxBy */.UT)(Array.from(ingredientToPlatinumCocktail), _ref => {
      var _ref2 = Guzzlr_slicedToArray(_ref, 2),
          cocktail = _ref2[1];

      return (0,external_kolmafia_.mallPrice)(cocktail);
    })[1];
  }
}
/**
 * Calculates the number of turns remaining for your Guzzlr quest
 *
 * @param useShoes Whether or not the calculation should assume you are using Guzzlr shoes
 * @returns The expected number of turns needed to finish your current delivery
 */

function turnsLeftOnQuest() {
  var useShoes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var progressPerTurn = useShoes ? Math.floor((10 - (0,property.get)("_guzzlrDeliveries")) * 1.5) : 10 - (0,property.get)("_guzzlrDeliveries");
  return Math.ceil((100 - (0,property.get)("guzzlrDeliveryProgress")) / progressPerTurn);
}
/**
 * Calculates the expected Guzzlrbuck reward for completing your current Guzzlr quest
 *
 * @param usePants Whether or not we should account for Guzzlr pants in our calculation
 * @returns The expected Guzzlrbuck reward of our current Guzzlr quest
 */

function expectedReward() {
  var usePants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  switch (getTier()) {
    case "platinum":
      // 20-25
      return 22.5 + (usePants ? 5 : 0);

    case "gold":
      // 5-7
      return 6 + (usePants ? 3 : 0);

    case "bronze":
      // 2-4
      return 3 + (usePants ? 3 : 0);

    default:
      return 0;
  }
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2020/RetroCape.js
var RetroCape_templateObject, RetroCape_templateObject2, RetroCape_templateObject3, RetroCape_templateObject4, RetroCape_templateObject5, RetroCape_templateObject6, RetroCape_templateObject7;

function RetroCape_toConsumableArray(arr) { return RetroCape_arrayWithoutHoles(arr) || RetroCape_iterableToArray(arr) || RetroCape_unsupportedIterableToArray(arr) || RetroCape_nonIterableSpread(); }

function RetroCape_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function RetroCape_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return RetroCape_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return RetroCape_arrayLikeToArray(o, minLen); }

function RetroCape_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function RetroCape_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return RetroCape_arrayLikeToArray(arr); }

function RetroCape_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function RetroCape_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function RetroCape_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? RetroCape_ownKeys(Object(source), !0).forEach(function (key) { RetroCape_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : RetroCape_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function RetroCape_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function RetroCape_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var RetroCape_item = (0,template_string/* $item */.xr)(RetroCape_templateObject || (RetroCape_templateObject = RetroCape_taggedTemplateLiteral(["unwrapped knock-off retro superhero cape"])));
/**
 * Determines whether you have() the Retro Cape.
 *
 * @returns Whether you have the Retro Cape available.
 */

function RetroCape_have() {
  return (0,lib/* have */.lf)(RetroCape_item);
}
var Heroes = {
  vampire: {
    "Muscle Percent": 30,
    "Maximum HP": 50
  },
  heck: {
    "Mysticality Percent": 30,
    "Maximum MP": 50
  },
  robot: {
    "Moxie Percent": 30,
    "Maximum HP": 25,
    "Maximum MP": 25
  }
};
var currentHero = () => (0,property.get)("retroCapeSuperhero");
var currentMode = () => (0,property.get)("retroCapeWashingInstructions");
var modeMap = new Map([[["vampire", "hold"], {
  "Hot Resistance": 3,
  "Cold Resistance": 3,
  "Stench Resistance": 3,
  "Spooky Resistance": 3,
  "Sleaze Resistance": 3
}], [["vampire", "thrill"], {
  "Muscle Experience": 3
}], [["vampire", "kiss"], {
  Skill: "Smooch of the Daywalker"
}], [["vampire", "kill"], {
  Skill: "Slay the Dead"
}], [["heck", "thrill"], {
  "Mysticality Experience": 3
}], [["heck", "kiss"], {
  Skill: "Unleash the Devil's Kiss"
}], [["robot", "hold"], {
  Skill: "Deploy Robo-Handcuffs"
}], [["robot", "thrill"], {
  "Moxie Experience": 3
}], [["robot", "kiss"], {
  Skill: "Blow a Robo-Kiss"
}], [["robot", "kill"], {
  Skill: "Precision Shot"
}]]);
/**
 * Tunes retro cape to a given setting
 *
 * @param hero The Superhero to set it to
 * @param mode The washing instructions to set it to
 * @returns Whether we successfully tuned the Retro Cape.
 */

function RetroCape_set(hero, mode) {
  if (!RetroCape_have()) return false;
  if (currentHero() === hero && currentMode() === mode) return true;
  (0,external_kolmafia_.cliExecute)("retrocape ".concat(hero, " ").concat(mode));
  return currentHero() === hero && currentMode() === mode;
}
/**
 * Returns the expected Modifiers of the Retro Cape for a particular setting
 *
 * @param hero The Superhero setting
 * @param mode The washing instructions setting
 * @returns A Modifiers object describing the Retro Cape were it to be tuned to that setting.
 */

function RetroCape_getModifier() {
  var _modeMap$get;

  var hero = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currentHero();
  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : currentMode();
  return RetroCape_objectSpread(RetroCape_objectSpread({}, Heroes[hero]), (_modeMap$get = modeMap.get([hero, mode])) !== null && _modeMap$get !== void 0 ? _modeMap$get : {});
}
var skills = new Map([[(0,template_string/* $skill */.tm)(RetroCape_templateObject2 || (RetroCape_templateObject2 = RetroCape_taggedTemplateLiteral(["Smooch of the Daywalker"]))), ["vampire", "kiss"]], [(0,template_string/* $skill */.tm)(RetroCape_templateObject3 || (RetroCape_templateObject3 = RetroCape_taggedTemplateLiteral(["Slay the Dead"]))), ["vampire", "kill"]], [(0,template_string/* $skill */.tm)(RetroCape_templateObject4 || (RetroCape_templateObject4 = RetroCape_taggedTemplateLiteral(["Unleash the Devil's Kiss"]))), ["heck", "kiss"]], [(0,template_string/* $skill */.tm)(RetroCape_templateObject5 || (RetroCape_templateObject5 = RetroCape_taggedTemplateLiteral(["Deploy Robo-Handcuffs"]))), ["robot", "hold"]], [(0,template_string/* $skill */.tm)(RetroCape_templateObject6 || (RetroCape_templateObject6 = RetroCape_taggedTemplateLiteral(["Blow a Robo-Kiss"]))), ["robot", "kiss"]], [(0,template_string/* $skill */.tm)(RetroCape_templateObject7 || (RetroCape_templateObject7 = RetroCape_taggedTemplateLiteral(["Precision Shot"]))), ["robot", "kill"]]]);
/**
 * Tunes the Retro Cape to allow it to grant a particular skill.
 *
 * @param skill The skill to tune the Retro Cape to.
 * @returns Whether we successfully tuned the cape.
 */

function tuneToSkill(skill) {
  var setting = skills.get(skill);
  if (!setting || !RetroCape_have()) return false;
  RetroCape_set.apply(void 0, RetroCape_toConsumableArray(setting));
  return [currentHero(), currentMode()].every((element, index) => element === setting[index]);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2021/CrystalBall.js
function CrystalBall_slicedToArray(arr, i) { return CrystalBall_arrayWithHoles(arr) || CrystalBall_iterableToArrayLimit(arr, i) || CrystalBall_unsupportedIterableToArray(arr, i) || CrystalBall_nonIterableRest(); }

function CrystalBall_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function CrystalBall_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return CrystalBall_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return CrystalBall_arrayLikeToArray(o, minLen); }

function CrystalBall_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function CrystalBall_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function CrystalBall_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }





var orb = external_kolmafia_.Item.get("miniature crystal ball");
/**
 * Determines whether you `have` the Miniature Crystal Ball
 *
 * @returns Whether you `have` the Miniature Crystal Ball
 */

function CrystalBall_have() {
  return (0,external_kolmafia_.availableAmount)(orb) > 0;
}

var parsedProp = () => (0,property.get)("crystalBallPredictions").split("|").filter(Boolean).map(element => element.split(":")).filter(tuple => tuple.length === 3).map(_ref => {
  var _ref2 = CrystalBall_slicedToArray(_ref, 3),
      location = _ref2[1],
      monster = _ref2[2];

  return [(0,external_kolmafia_.toLocation)(location), (0,external_kolmafia_.toMonster)(monster)];
});

var getLastPondered = () => "".concat((0,external_kolmafia_.myTotalTurnsSpent)(), ";").concat((0,external_kolmafia_.totalTurnsPlayed)(), ";").concat((0,property.get)("lastAdventure"));

var lastPondered = "";
/**
 * Ponders your orb (if it is able to do so safely) and then returns a Map keyed by location consisting of extant predictions
 *
 * @returns A map of all predictions currently active in an adventurer's miniature crystal ball, after visiting the "ponder" URL to refresh them.
 */

function ponder() {
  if (!CrystalBall_have()) return new Map();

  if (lastPondered !== getLastPondered()) {
    if ((0,lib/* canVisitUrl */.Ao)()) {
      logger/* default.debug */.Z.debug("Now pondering Crystal Ball.");
      (0,external_kolmafia_.visitUrl)("inventory.php?ponder=1", false);
      lastPondered = getLastPondered();
    } else {
      logger/* default.debug */.Z.debug("Failed to ponder Crystall Ball.");
    }
  }

  return new Map(parsedProp());
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2021/DaylightShavings.js
var DaylightShavings_templateObject, DaylightShavings_templateObject2;

function DaylightShavings_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var helmet = (0,template_string/* $item */.xr)(DaylightShavings_templateObject || (DaylightShavings_templateObject = DaylightShavings_taggedTemplateLiteral(["Daylight Shavings Helmet"])));
/**
 * Returns whether the player owns an unpackaged Daylight Shavings Helmet, and it's available in either the inventory or other zones as determined by autoSatisfy settings.
 *
 * @returns whether we have the Daylight Shavings Helmet.
 */

function DaylightShavings_have() {
  return (0,lib/* have */.lf)(helmet);
}
var buffs = (0,template_string/* $effects */.lh)(DaylightShavings_templateObject2 || (DaylightShavings_templateObject2 = DaylightShavings_taggedTemplateLiteral(["Spectacle Moustache, Toiletbrush Moustache, Barbell Moustache, Grizzly Beard, Surrealist's Moustache, Musician's Musician's Moustache, Gull-Wing Moustache, Space Warlord's Beard, Pointy Wizard Beard, Cowboy Stache, Friendly Chops"])));
/**
 * Tells you whether you currently have a beardbuff active. Warning: because of spaghetti, this does not determine buff eligibility.
 *
 * @returns Whether you currently have a beardbuff active
 */

function hasBuff() {
  return buffs.some(buff => (0,lib/* have */.lf)(buff));
}
/**
 * Checks to see if there are any beardbuffs you have more than 1 turn of, determining whether you are eligible to receive a buff post-combat.
 *
 * @returns Whether you current are able to get a buff from the Daylight Shaving Helmet.
 */

function buffAvailable() {
  return !buffs.some(buff => (0,lib/* have */.lf)(buff, 2));
}
/**
 * Calculates and returns the cycle of buffs that the hat should cycle through.
 *
 * @param playerclass The class to generate a cycle for
 * @returns An ordered array consisting of the cycle for this class. The first element of the array will be the first buff a player should expect to get in a given ascension.
 */

function buffCycle() {
  var playerclass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,external_kolmafia_.myClass)();
  if (playerclass.id <= 0) return [];
  var returnValue = [];
  var id = playerclass.id;
  var seed = id > 6 ? id % 6 + 1 : id;

  for (var i = 1; i < 12; i++) {
    var index = i * seed % 11;
    returnValue.push(buffs[index]);
  }

  return returnValue;
}
/**
 * Returns the next buff we expect to get from the shaving hat.
 *
 * @returns The next buff we expect to get from the shaving hat.
 */

function nextBuff() {
  var currentBuff = (0,external_kolmafia_.toEffect)((0,property.get)("lastBeardBuff").toFixed(0));
  var cycle = buffCycle();
  var index = cycle.indexOf(currentBuff);
  var newIndex = (1 + index) % 11;
  return cycle[newIndex];
}
/**
 * Returns the number of buffs we expect it'll take to get to a given buff. Returns 1 for the next buff, 2 for the one after that, and so on. Returns 11 for the most recent buff.
 *
 * @param buff The shaving buff in question
 * @returns The number of buffs we expect it'll take to get to the inputted buff; null if said buff is not granted by the shaving hat.
 */

function buffsUntil(buff) {
  if (!buffs.includes(buff)) return null;
  var currentIndex = buffs.indexOf(nextBuff()) - 1;
  var newIndex = buffs.indexOf(buff);
  var diff = (newIndex - currentIndex) % 11;
  return diff === 0 ? 11 : diff;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2022/AutumnAton.js
var AutumnAton_templateObject, AutumnAton_templateObject2, AutumnAton_templateObject3, AutumnAton_templateObject4, AutumnAton_templateObject5, AutumnAton_templateObject6, AutumnAton_templateObject7, AutumnAton_templateObject8, AutumnAton_templateObject9;

function AutumnAton_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var AutumnAton_item = external_kolmafia_.Item.get("autumn-aton");
/**
 * Is the autumn-aton currently in your inventory, available to deploy?
 *
 * @returns The whether the autumn-aton is currently available for deployment
 */

function AutumnAton_available() {
  return (0,external_kolmafia_.availableAmount)(AutumnAton_item) > 0;
}
/**
 * Do you own the autumn-aton?
 *
 * @returns Whether you are an autumn-aton `have`r
 */

function AutumnAton_have() {
  return (0,property.get)("hasAutumnaton") || AutumnAton_available();
}
/**
 * Internal function used to parse the fallbot's choice adventure to determine which zones are currently available
 *
 * @param html The pagetext of the fallbot's choice adventure
 * @returns The locations currently available to send the fallbot to
 */

function checkLocations(html) {
  return (0,external_kolmafia_.xpath)(html, '//select[@name="heythereprogrammer"]//option[position()>1]/text()').map(name => (0,external_kolmafia_.toLocation)(name));
}
/**
 * @returns The current location the autumn-aton is questing in; null if it is not on a quest.
 */


function currentlyIn() {
  return (0,property.get)("autumnatonQuestLocation");
}
/**
 * Deploy the autumn-aton to a location of your choosing.
 *
 * @param target A location to send the autumn-aton to, or a prioritized list of locations to send it to, or a function to pick which location to send it to.
 * @param upgrade Should we apply any upgrades we see available?
 * @returns Where we ended up sending the autumn-aton; null if we didn't send it off.
 */

function sendTo(target) {
  var upgrade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  if (!AutumnAton_available()) return null;
  var pageHtml = (0,lib/* directlyUse */.tg)(AutumnAton_item);
  if (upgrade && (0,external_kolmafia_.availableChoiceOptions)()[1]) (0,external_kolmafia_.runChoice)(1);
  var locationsAvailable = checkLocations(pageHtml);
  var location = target instanceof external_kolmafia_.Location ? target : Array.isArray(target) ? target.find(l => locationsAvailable.includes(l)) : target(locationsAvailable);
  if (!location) return null;
  if (!locationsAvailable.includes(location)) return null;
  if (!(0,external_kolmafia_.handlingChoice)()) (0,lib/* directlyUse */.tg)(AutumnAton_item);
  (0,external_kolmafia_.runChoice)(2, "heythereprogrammer=".concat(location.id));
  if ((0,external_kolmafia_.handlingChoice)()) (0,external_kolmafia_.visitUrl)("main.php");
  return location;
}
/**
 * Install any available upgrades for the autumn-aton.
 *
 * @returns Whether there were any upgrades to install.
 */

function upgrade() {
  (0,lib/* directlyUse */.tg)(AutumnAton_item);
  var canUpgrade = (0,external_kolmafia_.availableChoiceOptions)()[1] !== undefined;
  if (canUpgrade) (0,external_kolmafia_.runChoice)(1);
  (0,external_kolmafia_.visitUrl)("main.php");
  return canUpgrade;
}
/**
 * @returns A list of all locations you can send your autumn-aton to right now. Empty if you are unable to send it anywhere.
 */

function AutumnAton_availableLocations() {
  if (!AutumnAton_available()) return [];
  var pageHtml = (0,lib/* directlyUse */.tg)(AutumnAton_item);
  (0,external_kolmafia_.visitUrl)("main.php");
  return checkLocations(pageHtml);
}
/**
 * The mafia names for the autumn-aton upgrades
 */

var possibleUpgrades = ["leftarm1", "leftleg1", "rightarm1", "rightleg1", "base_blackhat", "cowcatcher", "periscope", "radardish", "dualexhaust"];
/**
 * @returns An array containing the upgrades that you currently have on your autumn-aton.
 */

function currentUpgrades() {
  return (0,property.get)("autumnatonUpgrades").split(",");
}
/**
 * @returns The number of turns remaining in your current autumn-aton quest. This number may be negative for any number of reasons.
 */

function turnsLeft() {
  return (0,property.get)("autumnatonQuestTurn") - (0,external_kolmafia_.totalTurnsPlayed)();
}
/**
 * @returns The number of leg-upgrades your autumn-aton has installed
 */

function legs() {
  return currentUpgrades().filter(u => u.includes("leg")).length;
}
/**
 * @returns The number of turns we expect your next autumn-aton quest to take.
 */

function turnsForQuest() {
  return 11 * Math.max(1, (0,property.get)("_autumnatonQuests") - legs());
}
/**
 * @returns The current visual acuity level of your autumn-aton as determined by the current upgrade-state.
 */

function visualAcuity() {
  var visualUpgrades = ["periscope", "radardish"];
  return 1 + currentUpgrades().filter(u => visualUpgrades.includes(u)).length;
}
/**
 * @returns The number of items from a zone we expect the autumn-aton to steal based on the current upgrade-state. It may not succeed in stealing every item it can.
 */

function zoneItems() {
  return 3 + currentUpgrades().filter(u => u.includes("arm")).length;
}
/**
 * @returns The number of seasonal items we expect the autumn-aton to return with given its current upgrade-state.
 */

function seasonalItems() {
  return currentUpgrades().includes("cowcatcher") ? 2 : 1;
}
var difficulties = ["low", "mid", "high"];
var UNIQUES = {
  outdoor: {
    low: {
      index: 4,
      item: (0,template_string/* $item */.xr)(AutumnAton_templateObject || (AutumnAton_templateObject = AutumnAton_taggedTemplateLiteral(["autumn leaf"])))
    },
    mid: {
      index: 2,
      item: (0,template_string/* $item */.xr)(AutumnAton_templateObject2 || (AutumnAton_templateObject2 = AutumnAton_taggedTemplateLiteral(["autumn debris shield"])))
    },
    high: {
      index: 6,
      item: (0,template_string/* $item */.xr)(AutumnAton_templateObject3 || (AutumnAton_templateObject3 = AutumnAton_taggedTemplateLiteral(["autumn leaf pendant"])))
    }
  },
  indoor: {
    low: {
      index: 0,
      item: (0,template_string/* $item */.xr)(AutumnAton_templateObject4 || (AutumnAton_templateObject4 = AutumnAton_taggedTemplateLiteral(["AutumnFest ale"])))
    },
    mid: {
      index: 3,
      item: (0,template_string/* $item */.xr)(AutumnAton_templateObject5 || (AutumnAton_templateObject5 = AutumnAton_taggedTemplateLiteral(["autumn-spice donut"])))
    },
    high: {
      index: 7,
      item: (0,template_string/* $item */.xr)(AutumnAton_templateObject6 || (AutumnAton_templateObject6 = AutumnAton_taggedTemplateLiteral(["autumn breeze"])))
    }
  },
  underground: {
    low: {
      index: 1,
      item: (0,template_string/* $item */.xr)(AutumnAton_templateObject7 || (AutumnAton_templateObject7 = AutumnAton_taggedTemplateLiteral(["autumn sweater-weather sweater"])))
    },
    mid: {
      index: 5,
      item: (0,template_string/* $item */.xr)(AutumnAton_templateObject8 || (AutumnAton_templateObject8 = AutumnAton_taggedTemplateLiteral(["autumn dollar"])))
    },
    high: {
      index: 8,
      item: (0,template_string/* $item */.xr)(AutumnAton_templateObject9 || (AutumnAton_templateObject9 = AutumnAton_taggedTemplateLiteral(["autumn years wisdom"])))
    }
  }
};
/**
 * Determines and returns the upgrade and item drop associated with the given location
 *
 * @param location The location to check the expected autumn-aton-unique drops of
 * @returns `null` if the location has no upgrade or drop; otherwise, the upgrade and the autumn-aton item associated with that item
 */

function getUniques(location) {
  var env = location.environment;
  var difficulty = location.difficultyLevel;

  if ((0,utils/* arrayContains */.IA)(env, ["outdoor", "indoor", "underground"]) && (0,utils/* arrayContains */.IA)(difficulty, difficulties)) {
    var _UNIQUES$env$difficul = UNIQUES[env][difficulty],
        index = _UNIQUES$env$difficul.index,
        _item = _UNIQUES$env$difficul.item;
    return {
      upgrade: possibleUpgrades[index],
      item: _item
    };
  }

  return null;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2022/CombatLoversLocket.js
var CombatLoversLocket_templateObject;

function CombatLoversLocket_slicedToArray(arr, i) { return CombatLoversLocket_arrayWithHoles(arr) || CombatLoversLocket_iterableToArrayLimit(arr, i) || CombatLoversLocket_unsupportedIterableToArray(arr, i) || CombatLoversLocket_nonIterableRest(); }

function CombatLoversLocket_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function CombatLoversLocket_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return CombatLoversLocket_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return CombatLoversLocket_arrayLikeToArray(o, minLen); }

function CombatLoversLocket_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function CombatLoversLocket_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function CombatLoversLocket_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function CombatLoversLocket_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var locket = (0,template_string/* $item */.xr)(CombatLoversLocket_templateObject || (CombatLoversLocket_templateObject = CombatLoversLocket_taggedTemplateLiteral(["combat lover's locket"])));
/**
 * @returns Whether you `have` the Combat Lover's Locket
 */

function CombatLoversLocket_have() {
  return (0,lib/* have */.lf)(locket);
}
/**
 * Filters the set of all unlocked locket monsters to only the ones available to be locketed right now.
 *
 * @returns An array consisting of all Monsters you can fight with your locket right now.
 */

function availableLocketMonsters() {
  if (reminiscesLeft() === 0) return [];
  return Object.entries((0,external_kolmafia_.getLocketMonsters)()).filter(_ref => {
    var _ref2 = CombatLoversLocket_slicedToArray(_ref, 2),
        unused = _ref2[1];

    return unused;
  }).map(_ref3 => {
    var _ref4 = CombatLoversLocket_slicedToArray(_ref3, 1),
        name = _ref4[0];

    return (0,external_kolmafia_.toMonster)(name);
  });
}
/**
 * Parses getLocketMonsters and returns the collection of all Monsters as an Array.
 *
 * @returns An array consisting of all Monsters you can hypothetically fight, regardless of whether they've been fought today.
 */

function unlockedLocketMonsters() {
  return Object.entries((0,external_kolmafia_.getLocketMonsters)()).map(_ref5 => {
    var _ref6 = CombatLoversLocket_slicedToArray(_ref5, 1),
        name = _ref6[0];

    return (0,external_kolmafia_.toMonster)(name);
  });
}

function parseLocketProperty() {
  return (0,property.get)("_locketMonstersFought").split(",").filter(id => id.trim().length > 0);
}
/**
 * Determines how many reminisces remain by parsing the _locketMonstersFought property.
 *
 * @returns The number of reminisces a player has available; 0 if they lack the Locket.
 */


function reminiscesLeft() {
  return CombatLoversLocket_have() ? (0,utils/* clamp */.uZ)(3 - parseLocketProperty().length, 0, 3) : 0;
}
/**
 * Determines which monsters were reminisced today by parsing the _locketMonstersFought property.
 *
 * @returns An array consisting of the Monsters reminisced today.
 */

function monstersReminisced() {
  return parseLocketProperty().map(id => (0,external_kolmafia_.toMonster)(id));
}
/**
 * Fight a Monster using the Combat Lover's Locket
 *
 * @param monster The Monster to fight
 * @param combatParams Any parameters you'd like to pass to `runCombat`
 * @returns false if we are unable to reminisce about this monster. Else, returns whether, at the end of all things, we have reminisced about this monster.
 */

function reminisce(monster) {
  if (!CombatLoversLocket_have() || reminiscesLeft() === 0 || !(0,external_kolmafia_.getLocketMonsters)()[monster.name]) {
    return false;
  }

  (0,external_kolmafia_.cliExecute)("reminisce ".concat(monster));

  for (var _len = arguments.length, combatParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    combatParams[_key - 1] = arguments[_key];
  }

  external_kolmafia_.runCombat.apply(void 0, combatParams);
  return monstersReminisced().includes(monster);
}
/**
 * This function efficiently evaluates all of an adventurer's possibly reminiscable monsters, placing them through a filtering criteria and evaluating them based on a passed function.
 *
 * @param criteria A filtering function for delineating which monsters are "fair game" for the search, such as "is this monster free".
 * @param value A function for deciding which monsters are "better" than others.
 * @returns A singular monster that fulfills the criteria function and maximizes the value function.
 */

function findMonster(criteria) {
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => 1;
  if (!CombatLoversLocket_have() || reminiscesLeft() === 0) return null;
  var options = availableLocketMonsters().filter(criteria);
  if (!options.length) return null;
  return options.reduce((a, b) => value(a) > value(b) ? a : b);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2022/GreyGoose.js
var GreyGoose_templateObject, GreyGoose_templateObject2, GreyGoose_templateObject3, GreyGoose_templateObject4;

function GreyGoose_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var goose = (0,template_string/* $familiar */.HP)(GreyGoose_templateObject || (GreyGoose_templateObject = GreyGoose_taggedTemplateLiteral(["Grey Goose"])));
/**
 * Determines whether you `have` the Grey Goose
 *
 * @returns Whether you `have` the Grey Goose
 */

function GreyGoose_have() {
  return (0,lib/* have */.lf)(goose);
}
/**
 * Determines your expected Grey Goose experience, were you to make it your active familiar
 *
 * @returns Your current expected Grey Goose experience, paying attention to potential experience from the Shorter-Order Cook
 */

function currentExperience() {
  var postAscensionBaseExperience = (0,lib/* have */.lf)((0,template_string/* $familiar */.HP)(GreyGoose_templateObject2 || (GreyGoose_templateObject2 = GreyGoose_taggedTemplateLiteral(["Shorter-Order Cook"])))) && !(0,property.get)("gooseReprocessed") ? 81 + ((0,lib/* have */.lf)((0,template_string/* $item */.xr)(GreyGoose_templateObject3 || (GreyGoose_templateObject3 = GreyGoose_taggedTemplateLiteral(["blue plate"])))) ? 19 : 0) : 0;
  return goose.experience || postAscensionBaseExperience;
}
/**
 * Determines the current expected weight of your goose, were you to make it your active familiar
 *
 * @returns Your current expected Grey Goose weight, paying attention to potential experience from the Shorter-Order Cook
 */

function currentWeight() {
  return Math.min(Math.floor(Math.sqrt(currentExperience())), 20);
}
/**
 * Determines the number of drones emitted for a given weight
 *
 * @param weight The weight to test; defaults to current weight
 * @returns The nubmer of drones expected to be emitted for the weight in question
 */

function expectedDrones() {
  var weight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currentWeight();
  return Math.max(0, weight - 5);
}
/**
 * Determines the experience (or, in Grey You, fullstats) you'd get from using the appropriate Grey Goose skill for a given weight
 *
 * @param weight The goose weight you care about; defaults to current weight
 * @returns In Grey You, returns the fullstats you'll gain from goose levelling; outside Grey You, returns substats
 */

function expectedExperience() {
  var weight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currentWeight();
  return Math.pow(Math.max(weight - 5, 0), (0,external_kolmafia_.myClass)().id === 27 ? 2 : 3);
}
/**
 * Determines the meat you'd expect to get from using Meatify Matter at the given weight
 *
 * @param weight The weight in question (defaults to current)
 * @returns The expected meat from Meatify Matter
 */

function expectedMeat() {
  var weight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currentWeight();
  return Math.pow(Math.max(weight - 5, 0), 4);
}
/**
 * Determines whether you've used Meatify Matter today
 *
 * @returns Whether you've used Meatify Matter today
 */

function hasMeatified() {
  return (0,property.get)("_meatifyMatterUsed");
}
/**
 * Calculates the number of fights you need to reach a particular weight
 *
 * @param target The weight you want to reach
 * @param bonusExperience The amount of bonus exdperience you'll be running--defaults to the current value
 * @returns Number of fights needed
 */

function fightsUntil(target) {
  var bonusExperience = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : modifier_get("Familiar Experience");
  var diff = Math.pow(target, 2) - currentExperience();
  if (diff <= 0) return 0;
  return Math.ceil(diff / (1 + bonusExperience + ((0,lib/* have */.lf)((0,template_string/* $skill */.tm)(GreyGoose_templateObject4 || (GreyGoose_templateObject4 = GreyGoose_taggedTemplateLiteral(["Testudinal Teachings"])))) ? 1 / 6 : 0)));
}
/**
 * Determines how many matter-duplicating drones are currently hovering around you
 *
 * @returns The number of matter-duplicating drones currently hovering around you
 */

function currentDrones() {
  return (0,property.get)("gooseDronesRemaining");
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2022/JuneCleaver.js


var cleaver = (0,external_kolmafia_.toItem)("June cleaver");
/**
 * Determines whether you currently `have` the June cleaver
 *
 * @returns Whether you currently `have` the June cleaver
 */

function JuneCleaver_have() {
  return (0,external_kolmafia_.availableAmount)(cleaver) > 0;
}
/**
 * Determines the number of cleaver-combats it takes to get a particular encounter number.
 *
 * @param encounters The ordinal value of the June cleaver encounter you're asking about
 * @returns The number of cleaver-combats it takes to get a particular encounter number--this is agnostic of your current fights.
 */

function getInterval() {
  var _encounters;

  var encounters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,property.get)("_juneCleaverEncounters");
  return (_encounters = [1, 6, 10, 12, 15, 20][encounters]) !== null && _encounters !== void 0 ? _encounters : 30;
}
/**
 * Determines the number of cleaver-combats it takes to get a particular encounter number, when a skip is in the mix
 *
 * @param encounters The ordinal value of the June cleaver encounter you're asking about, assuming you've skipped
 * @returns The number of cleaver-combats it would take to get a particular encounter after skipping.
 */

function getSkippedInterval() {
  var _encounters2;

  var encounters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,property.get)("_juneCleaverEncounters");
  return (_encounters2 = [1, 2, 3, 3, 4, 5][encounters]) !== null && _encounters2 !== void 0 ? _encounters2 : 8;
}
/**
 * Determines the amount of bonus elemental damage your cleaver currently grants
 *
 * @param element The element in question
 * @returns The bonus damage your cleaver currently gives for a given element.
 */

function damage(element) {
  return (0,property.get)("_juneCleaver".concat(element));
}
/**
 * Determines the number of times today you can skip a june cleaver choice
 *
 * @returns The number of additional times you can select option 4 in a cleaver choice today.
 */

function skipsRemaining() {
  return 5 - (0,property.get)("_juneCleaverSkips");
}
var choices = [1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475];
/**
 * Returns the current June cleaver queue; you are not currently able to encounter any June cleaver choice adventure in this list
 *
 * @returns An array consisting of the cleaver choice adventures currently in the queue.
 */

function queue() {
  return (0,property.get)("juneCleaverQueue").split(",").filter(x => x.trim().length > 0).map(x => parseInt(x));
}
/**
 * Determines which choices are currently eligible to be encountered with your June cleaver
 *
 * @returns An array consisting of the cleaver choice adventures not currently in the queue.
 */

function choicesAvailable() {
  var currentQueue = queue();
  return choices.filter(choice => !currentQueue.includes(choice));
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2022/TrainSet.js
var TrainSet_templateObject;

function TrainSet_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var TrainSet_item = (0,template_string/* $item */.xr)(TrainSet_templateObject || (TrainSet_templateObject = TrainSet_taggedTemplateLiteral(["model train set"])));
/**
 * Determines whether the Model Train Set is your current workshed
 *
 * @returns Whether the Model Train Set is your current workshed
 */

function TrainSet_installed() {
  return (0,external_kolmafia_.getWorkshed)() === TrainSet_item;
}
/**
 * Determines whether you `have` the model train set (or if it is installed)
 *
 * @returns Whether you `have` the model train set or it's installed
 */

function TrainSet_have() {
  return TrainSet_installed() || (0,lib/* have */.lf)(TrainSet_item);
}
var Station;

(function (Station) {
  /**
   * Unknown station
   */
  Station["UNKNOWN"] = "";
  /**
   * Empty station
   */

  Station["EMPTY"] = "empty";
  /**
   * Gain 800 meat
   */

  Station["GAIN_MEAT"] = "meat_mine";
  /**
   * Effect: Regenerate MP
   */

  Station["TOWER_FIZZY"] = "tower_fizzy";
  /**
   * Gain mus, mys, mox stats
   */

  Station["VIEWING_PLATFORM"] = "viewing_platform";
  /**
   * Effect: Hot resist, cold damage
   */

  Station["TOWER_FROZEN"] = "tower_frozen";
  /**
   * Effect: Stench resist, spooky damage
   */

  Station["SPOOKY_GRAVEYARD"] = "spooky_graveyard";
  /**
   * Get smut bridge part, or stats
   */

  Station["LOGGING_MILL"] = "logging_mill";
  /**
   * Get some candy
   */

  Station["CANDY_FACTORY"] = "candy_factory";
  /**
   * Double strength of next station
   */

  Station["COAL_HOPPER"] = "coal_hopper";
  /**
   * Effect: Cold resist, stench damage
   */

  Station["TOWER_SEWAGE"] = "tower_sewage";
  /**
   * Effect: Spooky resist, sleaze damage
   */

  Station["OIL_REFINERY"] = "oil_refinery";
  /**
   * Effect: Sleaze resist, hot damage
   */

  Station["OIL_BRIDGE"] = "oil_bridge";
  /**
   * Effect: Increased Monster Level
   */

  Station["WATER_BRIDGE"] = "water_bridge";
  /**
   * Get moxie stats
   */

  Station["GROIN_SILO"] = "groin_silo";
  /**
   * Get random booze
   */

  Station["GRAIN_SILO"] = "grain_silo";
  /**
   * Get mys stats
   */

  Station["BRAIN_SILO"] = "brain_silo";
  /**
   * Get muscle stats
   */

  Station["BRAWN_SILO"] = "brawn_silo";
  /**
   * Effect: 50% food drop
   */

  Station["PRAWN_SILO"] = "prawn_silo";
  /**
   * Dupe last food dropped, or gain random food
   */

  Station["TRACKSIDE_DINER"] = "trackside_diner";
  /**
   * Drop random ore, or trapper ore if known
   */

  Station["ORE_HOPPER"] = "ore_hopper";
})(Station || (Station = {}));

var trainsetEffects = new Map([[Station.TOWER_FIZZY, external_kolmafia_.Effect.get("Carbonated")], [Station.TOWER_FROZEN, external_kolmafia_.Effect.get("Frozen")], [Station.SPOOKY_GRAVEYARD, external_kolmafia_.Effect.get("Shivering Spine")], [Station.TOWER_SEWAGE, external_kolmafia_.Effect.get("Hot Soupy Garbage")], [Station.OIL_BRIDGE, external_kolmafia_.Effect.get("Burningly Oiled")], [Station.OIL_REFINERY, external_kolmafia_.Effect.get("Spookily Greasy")], [Station.WATER_BRIDGE, external_kolmafia_.Effect.get("Troubled Waters")], [Station.PRAWN_SILO, external_kolmafia_.Effect.get("Craving Prawns")]]);
var trainsetEffectsDoubled = new Map([[Station.TOWER_FIZZY, external_kolmafia_.Effect.get("Double Carbonated")], [Station.TOWER_FROZEN, external_kolmafia_.Effect.get("Double Frozen")], [Station.SPOOKY_GRAVEYARD, external_kolmafia_.Effect.get("Doubly Shivering Spine")], [Station.TOWER_SEWAGE, external_kolmafia_.Effect.get("Double Hot Soupy Garbage")], [Station.OIL_BRIDGE, external_kolmafia_.Effect.get("Doubly Burningly Oiled")], [Station.OIL_REFINERY, external_kolmafia_.Effect.get("Doubly Spookily Greasy")], [Station.WATER_BRIDGE, external_kolmafia_.Effect.get("Doubly Troubled Waters")], [Station.PRAWN_SILO, external_kolmafia_.Effect.get("Doubly Craving Prawns")]]);
/**
 * Returns an effect--if one exists--for a given train station
 *
 * @param station The train station to check the effect of
 * @returns The effect associated with the given station
 */

function effect(station) {
  var _trainsetEffects$get;

  return (_trainsetEffects$get = trainsetEffects.get(station)) !== null && _trainsetEffects$get !== void 0 ? _trainsetEffects$get : null;
}
/**
 * Returns an effect--if one exists--for a given train station, assuming it's been primed by the coal station
 *
 * @param station The train station to check the doubled effect of
 * @returns The effect associated with given station, under the influence of coal
 */

function doubledEffect(station) {
  var _trainsetEffectsDoubl;

  return (_trainsetEffectsDoubl = trainsetEffectsDoubled.get(station)) !== null && _trainsetEffectsDoubl !== void 0 ? _trainsetEffectsDoubl : null;
}
/**
 * Determines the current configuration of train stations
 *
 * @returns An 8-tuple consisting of the stations currently installed in your Model Train Set; this functions even if the Model Train Set isn't your active workshed
 */

function cycle() {
  return (0,property.get)("trainsetConfiguration").split(",");
}
/**
 * Determines how many turns until you can next configure the Model Train Set
 *
 * @returns How many turns until you can next configure the Model Train Set
 */

function nextConfigurable() {
  return (0,utils/* clamp */.uZ)((0,property.get)("lastTrainsetConfiguration") + 40 - (0,property.get)("trainsetPosition"), 0, 40);
}
/**
 * Determines whether you can currently configure your Model Train Set
 *
 * @returns Whether you can currently configure your Model Train Set
 */

function canConfigure() {
  return TrainSet_installed() && !nextConfigurable();
}
var TrainSet_pieces = [Station.EMPTY, Station.GAIN_MEAT, Station.TOWER_FIZZY, Station.VIEWING_PLATFORM, Station.TOWER_FROZEN, Station.SPOOKY_GRAVEYARD, Station.LOGGING_MILL, Station.CANDY_FACTORY, Station.COAL_HOPPER, Station.TOWER_SEWAGE, Station.UNKNOWN, Station.OIL_REFINERY, Station.OIL_BRIDGE, Station.WATER_BRIDGE, Station.GROIN_SILO, Station.GRAIN_SILO, Station.BRAIN_SILO, Station.BRAWN_SILO, Station.PRAWN_SILO, Station.TRACKSIDE_DINER, Station.ORE_HOPPER];
/**
 * Converts a given station to the integer value KoL associates with them
 *
 * @param station The station in question
 * @returns The integer value KoL assigns the train station in question
 */

function stationToInt(station) {
  return TrainSet_pieces.indexOf(station);
}
/**
 * Sets your model train station to the given configuration, if able
 *
 * @param configuration The cycle to try to set your model train station to
 * @returns Whether your model train station matches the given configuration
 */


function setConfiguration(configuration) {
  if (!canConfigure()) return false;
  (0,external_kolmafia_.visitUrl)("campground.php?action=workshed");
  (0,external_kolmafia_.runChoice)(1, "forceoption=0".concat(configuration.map((station, index) => "&slot[".concat(index, "]=").concat(stationToInt(station))).join("")));
  (0,external_kolmafia_.visitUrl)("main.php");
  var currentConfiguration = cycle();
  return configuration.every((station, index) => station === currentConfiguration[index]);
}
/**
 * Determines the next station you expect to encounter when the Model Train Station is active
 *
 * @returns The next station you expect to encounter when the Model Train Station is active
 */

function next() {
  return cycle()[(0,property.get)("trainsetPosition") % 8];
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2023/AugustScepter.js
var AugustScepter_templateObject, AugustScepter_templateObject2;

function AugustScepter_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





/**
 * @returns Whether you `have` the august scepter
 */

function AugustScepter_have() {
  return (0,lib/* have */.lf)((0,template_string/* $item */.xr)(AugustScepter_templateObject || (AugustScepter_templateObject = AugustScepter_taggedTemplateLiteral(["august scepter"]))));
}
var SKILLS = Object.freeze((0,template_string/* $skills */.nx)(AugustScepter_templateObject2 || (AugustScepter_templateObject2 = AugustScepter_taggedTemplateLiteral(["Aug. 1st: Mountain Climbing Day!, Aug. 2nd: Find an Eleven-Leaf Clover Day, Aug. 3rd: Watermelon Day!, Aug. 4th: Water Balloon Day!, Aug. 5th: Oyster Day!, Aug. 6th: Fresh Breath Day!, Aug. 7th: Lighthouse Day!, Aug. 8th: Cat Day!, Aug. 9th: Hand Holding Day!, Aug. 10th: World Lion Day!, Aug. 11th: Presidential Joke Day!, Aug. 12th: Elephant Day!, Aug. 13th: Left/Off Hander's Day!, Aug. 14th: Financial Awareness  Day!, Aug. 15th: Relaxation Day!, Aug. 16th: Roller Coaster Day!, Aug. 17th: Thriftshop Day!, Aug. 18th: Serendipity Day!, Aug. 19th: Honey Bee Awareness Day!, Aug. 20th: Mosquito Day!, Aug. 21st: Spumoni Day!, Aug. 22nd: Tooth Fairy Day!, Aug. 23rd: Ride the Wind Day!, Aug. 24th: Waffle Day!, Aug. 25th: Banana Split Day!, Aug. 26th: Toilet Paper Day!, Aug. 27th: Just Because Day!, Aug. 28th: Race Your Mouse Day!, Aug. 29th: More Herbs, Less Salt  Day!, Aug. 30th: Beach Day!, Aug. 31st: Cabernet Sauvignon  Day!"], ["Aug. 1st: Mountain Climbing Day!, Aug. 2nd: Find an Eleven-Leaf Clover Day, Aug. 3rd: Watermelon Day!, Aug. 4th: Water Balloon Day!, Aug. 5th: Oyster Day!, Aug. 6th: Fresh Breath Day!, Aug. 7th: Lighthouse Day!, Aug. 8th: Cat Day!, Aug. 9th: Hand Holding Day!, Aug. 10th: World Lion Day!, Aug. 11th: Presidential Joke Day!, Aug. 12th: Elephant Day!, Aug. 13th: Left/Off Hander's Day!, Aug. 14th: Financial Awareness  Day!, Aug. 15th: Relaxation Day!, Aug. 16th: Roller Coaster Day!, Aug. 17th: Thriftshop Day!, Aug. 18th: Serendipity Day!, Aug. 19th: Honey Bee Awareness Day!, Aug. 20th: Mosquito Day!, Aug. 21st: Spumoni Day!, Aug. 22nd: Tooth Fairy Day!, Aug. 23rd: Ride the Wind Day!, Aug. 24th: Waffle Day!, Aug. 25th: Banana Split Day!, Aug. 26th: Toilet Paper Day!, Aug. 27th: Just Because Day!, Aug. 28th: Race Your Mouse Day!, Aug. 29th: More Herbs\\, Less Salt  Day!, Aug. 30th: Beach Day!, Aug. 31st: Cabernet Sauvignon  Day!"]))));
/**
 * @returns Today's august scepter skill
 */

function todaysSkill() {
  return (0,external_kolmafia_.toSkill)(((0,lib/* gameDay */.kv)().getDate() + 7451).toFixed(0));
}
/**
 * @param skillNum the Day of the skill you wish to check
 * @returns Whether we have cast this skill yet today
 */

function getAugustCast(skillNum) {
  return (0,property.get)("_aug".concat(skillNum, "Cast"));
}
/**
 * @returns whether you have cast Today's august scepter skill
 */

function getTodayCast() {
  return (0,property.get)("_augTodayCast");
}
/**
 * @param skillNum the Day of the skill you wish to check
 * @returns Whether we can cast this skill
 */

function canCast(skillNum) {
  return AugustScepter_have() && !(0,property.get)("_aug".concat(skillNum, "Cast")) && ((0,lib/* gameDay */.kv)().getDate() === skillNum && !getTodayCast() || (0,property.get)("_augSkillsCast") < 5);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2023/BurningLeaves.js
var BurningLeaves_templateObject, BurningLeaves_templateObject2, BurningLeaves_templateObject3, BurningLeaves_templateObject4, BurningLeaves_templateObject5, BurningLeaves_templateObject6, BurningLeaves_templateObject7, BurningLeaves_templateObject8, BurningLeaves_templateObject9, BurningLeaves_templateObject10, BurningLeaves_templateObject11, BurningLeaves_templateObject12, BurningLeaves_templateObject13, BurningLeaves_templateObject14, BurningLeaves_templateObject15, BurningLeaves_templateObject16, BurningLeaves_templateObject17, BurningLeaves_templateObject18;

function BurningLeaves_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var BurningLeaves_item = (0,template_string/* $item */.xr)(BurningLeaves_templateObject || (BurningLeaves_templateObject = BurningLeaves_taggedTemplateLiteral(["A Guide to Burning Leaves"])));
var burnFor = new Map([[(0,template_string/* $monster */.O4)(BurningLeaves_templateObject2 || (BurningLeaves_templateObject2 = BurningLeaves_taggedTemplateLiteral(["flaming leaflet"]))), 11], [(0,template_string/* $item */.xr)(BurningLeaves_templateObject3 || (BurningLeaves_templateObject3 = BurningLeaves_taggedTemplateLiteral(["autumnic bomb"]))), 37], [(0,template_string/* $item */.xr)(BurningLeaves_templateObject4 || (BurningLeaves_templateObject4 = BurningLeaves_taggedTemplateLiteral(["impromptu torch"]))), 42], [(0,template_string/* $item */.xr)(BurningLeaves_templateObject5 || (BurningLeaves_templateObject5 = BurningLeaves_taggedTemplateLiteral(["flaming fig leaf"]))), 43], [(0,template_string/* $item */.xr)(BurningLeaves_templateObject6 || (BurningLeaves_templateObject6 = BurningLeaves_taggedTemplateLiteral(["smoldering drape"]))), 44], [(0,template_string/* $item */.xr)(BurningLeaves_templateObject7 || (BurningLeaves_templateObject7 = BurningLeaves_taggedTemplateLiteral(["distilled resin"]))), 50], [(0,template_string/* $item */.xr)(BurningLeaves_templateObject8 || (BurningLeaves_templateObject8 = BurningLeaves_taggedTemplateLiteral(["autumnal aegis"]))), 66], [(0,template_string/* $item */.xr)(BurningLeaves_templateObject9 || (BurningLeaves_templateObject9 = BurningLeaves_taggedTemplateLiteral(["lit leaf lasso"]))), 69], [(0,template_string/* $item */.xr)(BurningLeaves_templateObject10 || (BurningLeaves_templateObject10 = BurningLeaves_taggedTemplateLiteral(["forest canopy bed"]))), 74], [(0,template_string/* $item */.xr)(BurningLeaves_templateObject11 || (BurningLeaves_templateObject11 = BurningLeaves_taggedTemplateLiteral(["autumnic balm"]))), 99], [(0,template_string/* $monster */.O4)(BurningLeaves_templateObject12 || (BurningLeaves_templateObject12 = BurningLeaves_taggedTemplateLiteral(["flaming monstera"]))), 111], [(0,template_string/* $item */.xr)(BurningLeaves_templateObject13 || (BurningLeaves_templateObject13 = BurningLeaves_taggedTemplateLiteral(["day shortener"]))), 222], [(0,template_string/* $monster */.O4)(BurningLeaves_templateObject14 || (BurningLeaves_templateObject14 = BurningLeaves_taggedTemplateLiteral(["leaviathan"]))), 666], [(0,template_string/* $item */.xr)(BurningLeaves_templateObject15 || (BurningLeaves_templateObject15 = BurningLeaves_taggedTemplateLiteral(["coping juice"]))), 1111], [(0,template_string/* $item */.xr)(BurningLeaves_templateObject16 || (BurningLeaves_templateObject16 = BurningLeaves_taggedTemplateLiteral(["smoldering leafcutter ant egg"]))), 6666], [(0,template_string/* $item */.xr)(BurningLeaves_templateObject17 || (BurningLeaves_templateObject17 = BurningLeaves_taggedTemplateLiteral(["super-heated leaf"]))), 11111]]);
/**
 * @returns Whether or not we currently `have` the GuidetoBurningLeaves
 */

function BurningLeaves_have() {
  return (0,lib/* haveInCampground */.sy)(BurningLeaves_item);
}
/**
 * @returns The number of leaves we have remaining
 */

function numberOfLeaves() {
  return (0,external_kolmafia_.itemAmount)((0,template_string/* $item */.xr)(BurningLeaves_templateObject18 || (BurningLeaves_templateObject18 = BurningLeaves_taggedTemplateLiteral(["inflammable leaf"]))));
}
/**
 * @returns Whether or not we can do the requested burn
 * @param leaves determines the number of leaves to burn
 */

function burnSpecialLeaves(leaves) {
  var lea = burnFor.get(leaves);

  if (lea === undefined || lea > numberOfLeaves()) {
    return false;
  }

  return (0,external_kolmafia_.cliExecute)("leaves ".concat(leaves));
}
/**
 * @returns Whether or not we can do the requested burn
 * @param leaves determines the number of leaves to burn
 */

function burnLeaves(leaves) {
  if (leaves > numberOfLeaves()) {
    return false;
  }

  return (0,external_kolmafia_.cliExecute)("leaves ".concat(leaves));
}

function visitLeaves() {
  (0,external_kolmafia_.cliExecute)("leaves");
}
/**
 * Checks whether you can, then Jumps in the Flames
 * @returns Whether or not you jumped in the flames
 */


function jumpInFire() {
  if ((0,property.get)("_leavesJumped")) {
    return false;
  }

  if ((0,property.get)("_leavesBurned") === 0) {
    return false;
  }

  visitLeaves();
  (0,external_kolmafia_.runChoice)(2);
  return (0,property.get)("_leavesJumped");
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2023/CinchoDeMayo.js
var CinchoDeMayo_templateObject, CinchoDeMayo_templateObject2, CinchoDeMayo_templateObject3, CinchoDeMayo_templateObject4, CinchoDeMayo_templateObject5, CinchoDeMayo_templateObject6, CinchoDeMayo_templateObject7;

function CinchoDeMayo_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var cincho = (0,template_string/* $item */.xr)(CinchoDeMayo_templateObject || (CinchoDeMayo_templateObject = CinchoDeMayo_taggedTemplateLiteral(["Cincho de Mayo"])));
/**
 * @returns Whether you `have` the Cincho de Mayo
 */

function CinchoDeMayo_have() {
  return (0,lib/* have */.lf)(cincho);
}
/**
 * @returns Your current cinch
 */

function currentCinch() {
  return CinchoDeMayo_have() ? (0,utils/* clamp */.uZ)(100 - (0,property.get)("_cinchUsed"), 0, 100) : 0;
}
/**
 * @param currentRests The rest number to evaluate
 * @returns The amount of cinch restored by the given rest
 */

function cinchRestoredBy() {
  var currentRests = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,property.get)("_cinchoRests");
  return CinchoDeMayo_have() ? (0,utils/* clamp */.uZ)(50 - currentRests * 5, 5, 30) : 0;
}
/**
 * @returns Your current cinch, plus the total amount if cinch that can be generated through free rests
 */

function totalAvailableCinch() {
  var remainingRests = Math.max(0, (0,external_kolmafia_.totalFreeRests)() - (0,property.get)("timesRested"));
  return CinchoDeMayo_have() ? currentCinch() + (0,utils/* sum */.Sm)(new Array(remainingRests).fill(null).map((_, i) => i + (0,property.get)("_cinchoRests")), restNumber => cinchRestoredBy(restNumber)) : 0;
}
var CinchoDeMayo_skills = {
  SaltAndLime: (0,template_string/* $skill */.tm)(CinchoDeMayo_templateObject2 || (CinchoDeMayo_templateObject2 = CinchoDeMayo_taggedTemplateLiteral(["Cincho: Dispense Salt and Lime"]))),
  PartySoundtrack: (0,template_string/* $skill */.tm)(CinchoDeMayo_templateObject3 || (CinchoDeMayo_templateObject3 = CinchoDeMayo_taggedTemplateLiteral(["Cincho: Party Soundtrack"]))),
  FiestaExit: (0,template_string/* $skill */.tm)(CinchoDeMayo_templateObject4 || (CinchoDeMayo_templateObject4 = CinchoDeMayo_taggedTemplateLiteral(["Cincho: Fiesta Exit"]))),
  ProjectilePiñata: (0,template_string/* $skill */.tm)(CinchoDeMayo_templateObject5 || (CinchoDeMayo_templateObject5 = CinchoDeMayo_taggedTemplateLiteral(["Cincho: Projectile Pi\xF1ata"]))),
  PartyFoul: (0,template_string/* $skill */.tm)(CinchoDeMayo_templateObject6 || (CinchoDeMayo_templateObject6 = CinchoDeMayo_taggedTemplateLiteral(["Cincho: Party Foul"]))),
  ConfettiExtrava: (0,template_string/* $skill */.tm)(CinchoDeMayo_templateObject7 || (CinchoDeMayo_templateObject7 = CinchoDeMayo_taggedTemplateLiteral(["Cincho: Confetti Extravaganza"])))
};
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2023/ClosedCircuitPayphone.js
var ClosedCircuitPayphone_templateObject, ClosedCircuitPayphone_templateObject2, ClosedCircuitPayphone_templateObject3, ClosedCircuitPayphone_templateObject4, ClosedCircuitPayphone_templateObject5, ClosedCircuitPayphone_templateObject6, ClosedCircuitPayphone_templateObject7, ClosedCircuitPayphone_templateObject8, ClosedCircuitPayphone_templateObject9, ClosedCircuitPayphone_templateObject10, ClosedCircuitPayphone_templateObject11, ClosedCircuitPayphone_templateObject12, ClosedCircuitPayphone_templateObject13, ClosedCircuitPayphone_templateObject14;

function ClosedCircuitPayphone_toConsumableArray(arr) { return ClosedCircuitPayphone_arrayWithoutHoles(arr) || ClosedCircuitPayphone_iterableToArray(arr) || ClosedCircuitPayphone_unsupportedIterableToArray(arr) || ClosedCircuitPayphone_nonIterableSpread(); }

function ClosedCircuitPayphone_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function ClosedCircuitPayphone_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ClosedCircuitPayphone_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ClosedCircuitPayphone_arrayLikeToArray(o, minLen); }

function ClosedCircuitPayphone_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function ClosedCircuitPayphone_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return ClosedCircuitPayphone_arrayLikeToArray(arr); }

function ClosedCircuitPayphone_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ClosedCircuitPayphone_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var ClosedCircuitPayphone_item = (0,template_string/* $item */.xr)(ClosedCircuitPayphone_templateObject || (ClosedCircuitPayphone_templateObject = ClosedCircuitPayphone_taggedTemplateLiteral(["closed-circuit pay phone"])));
/**
 * @returns Whether we currently have the closed-circuit pay phone
 */

function ClosedCircuitPayphone_have() {
  return (0,lib/* have */.lf)(ClosedCircuitPayphone_item);
}
/**
 * @returns Rufus's currently expected quest target, if he has one
 */

function rufusTarget() {
  var target = (0,property.get)("rufusQuestTarget");

  switch ((0,property.get)("rufusQuestType")) {
    case "entity":
      return external_kolmafia_.Monster.get(target);

    case "artifact":
    case "items":
      return external_kolmafia_.Item.get(target);

    default:
      return null;
  }
}
var INGRESS_RIFTS = {
  desertbeach: (0,template_string/* $location */.PG)(ClosedCircuitPayphone_templateObject2 || (ClosedCircuitPayphone_templateObject2 = ClosedCircuitPayphone_taggedTemplateLiteral(["Shadow Rift (Desert Beach)"]))),
  forestvillage: (0,template_string/* $location */.PG)(ClosedCircuitPayphone_templateObject3 || (ClosedCircuitPayphone_templateObject3 = ClosedCircuitPayphone_taggedTemplateLiteral(["Shadow Rift (Forest Village)"]))),
  mclargehuge: (0,template_string/* $location */.PG)(ClosedCircuitPayphone_templateObject4 || (ClosedCircuitPayphone_templateObject4 = ClosedCircuitPayphone_taggedTemplateLiteral(["Shadow Rift (Mt. McLargeHuge)"]))),
  beanstalk: (0,template_string/* $location */.PG)(ClosedCircuitPayphone_templateObject5 || (ClosedCircuitPayphone_templateObject5 = ClosedCircuitPayphone_taggedTemplateLiteral(["Shadow Rift (Somewhere Over the Beanstalk)"]))),
  manor3: (0,template_string/* $location */.PG)(ClosedCircuitPayphone_templateObject6 || (ClosedCircuitPayphone_templateObject6 = ClosedCircuitPayphone_taggedTemplateLiteral(["Shadow Rift (Spookyraven Manor Third Floor)"]))),
  "8bit": (0,template_string/* $location */.PG)(ClosedCircuitPayphone_templateObject7 || (ClosedCircuitPayphone_templateObject7 = ClosedCircuitPayphone_taggedTemplateLiteral(["Shadow Rift (The 8-Bit Realm)"]))),
  pyramid: (0,template_string/* $location */.PG)(ClosedCircuitPayphone_templateObject8 || (ClosedCircuitPayphone_templateObject8 = ClosedCircuitPayphone_taggedTemplateLiteral(["Shadow Rift (The Ancient Buried Pyramid)"]))),
  giantcastle: (0,template_string/* $location */.PG)(ClosedCircuitPayphone_templateObject9 || (ClosedCircuitPayphone_templateObject9 = ClosedCircuitPayphone_taggedTemplateLiteral(["Shadow Rift (The Castle in the Clouds in the Sky)"]))),
  woods: (0,template_string/* $location */.PG)(ClosedCircuitPayphone_templateObject10 || (ClosedCircuitPayphone_templateObject10 = ClosedCircuitPayphone_taggedTemplateLiteral(["Shadow Rift (The Distant Woods)"]))),
  hiddencity: (0,template_string/* $location */.PG)(ClosedCircuitPayphone_templateObject11 || (ClosedCircuitPayphone_templateObject11 = ClosedCircuitPayphone_taggedTemplateLiteral(["Shadow Rift (The Hidden City)"]))),
  cemetery: (0,template_string/* $location */.PG)(ClosedCircuitPayphone_templateObject12 || (ClosedCircuitPayphone_templateObject12 = ClosedCircuitPayphone_taggedTemplateLiteral(["Shadow Rift (The Misspelled Cemetary)"]))),
  plains: (0,template_string/* $location */.PG)(ClosedCircuitPayphone_templateObject13 || (ClosedCircuitPayphone_templateObject13 = ClosedCircuitPayphone_taggedTemplateLiteral(["Shadow Rift (The Nearby Plains)"]))),
  town_right: (0,template_string/* $location */.PG)(ClosedCircuitPayphone_templateObject14 || (ClosedCircuitPayphone_templateObject14 = ClosedCircuitPayphone_taggedTemplateLiteral(["Shadow Rift (The Right Side of the Tracks)"])))
};
/**
 * @returns Your current `shadowRiftIngress`; `null` if none is set this ascension
 */

function currentIngress() {
  return (0,property.get)("shadowRiftIngress");
}
/**
 * @returns The current shadow rift that Mafia thinks KoL thinks you're in.
 */

function currentRift() {
  var ingress = currentIngress();
  return ingress ? INGRESS_RIFTS[ingress] : null;
}
var RIFTS = Array.from(Object.values(INGRESS_RIFTS));
/**
 * Choose a shadow rift to suit your needs
 *
 * @param options An object of various requirements you might have for the rift you want
 * @param options.canAdventure Set to `true` if you want to only select a rift that you can currently access
 * @param options.monsters Set to an array of Shadow Monsters you want to be available in the rift
 * @param options.drops Set to an array of item drops you want to come from monsters in the rift
 * @param options.otherFilter Set an optional additional filtering function not covered by the above logic
 * @param options.sortBy Set a function used to compare valid rifts between eachother; bigger numbers are better
 * @returns A rift that meets the criteria you specify, if one exists
 */

function chooseRift(options) {
  var filterFunction = l => {
    var _options$monsters, _options$drops, _options$otherFilter, _options$otherFilter2;

    var monsters = (0,external_kolmafia_.getMonsters)(l);
    if (options.canAdventure && !(0,external_kolmafia_.canAdventure)(l)) return false;
    if ((_options$monsters = options.monsters) !== null && _options$monsters !== void 0 && _options$monsters.some(m => !monsters.includes(m))) return false;
    if ((_options$drops = options.drops) !== null && _options$drops !== void 0 && _options$drops.every(i => !monsters.some(m => i.name in (0,external_kolmafia_.itemDrops)(m)))) return false;
    return (_options$otherFilter = (_options$otherFilter2 = options.otherFilter) === null || _options$otherFilter2 === void 0 ? void 0 : _options$otherFilter2.call(options, l)) !== null && _options$otherFilter !== void 0 ? _options$otherFilter : true;
  };

  var validRifts = ClosedCircuitPayphone_toConsumableArray(RIFTS).filter(filterFunction);

  if (!validRifts.length) return null;
  return options.sortBy ? (0,utils/* maxBy */.UT)(validRifts, options.sortBy) : validRifts[0];
}
/**
 * Choose a quest based on the options available to us
 *
 * @param chooser A function that maps quest-options to a choice
 * @returns Whether we successfully accepted a quest
 */

function chooseQuest(chooser) {
  if ((0,property.get)("questRufus") !== "unstarted") return false;
  if (!ClosedCircuitPayphone_have()) return false;
  (0,property.withChoice)(1497, "", () => {
    var _get;

    (0,lib/* directlyUse */.tg)(ClosedCircuitPayphone_item);
    (0,external_kolmafia_.runChoice)(chooser({
      artifact: (0,external_kolmafia_.toItem)((0,property.get)("rufusDesiredArtifact")),
      entity: (_get = (0,property.get)("rufusDesiredEntity")) !== null && _get !== void 0 ? _get : template_string/* $monster.none */.O4.none,
      items: (0,external_kolmafia_.toItem)((0,property.get)("rufusDesiredItems"))
    }));
  });
  return (0,property.get)("questRufus") !== "unstarted";
}
/**
 * @returns Array containing all shadow rift locations
 */

function rifts() {
  return ClosedCircuitPayphone_toConsumableArray(RIFTS);
}
/**
 * Picks an option based on your current shadow rift ingress
 *
 * @param options An object keyed by shadow rift ingress; it must either contain all possible ingresses, or have a `default` parameter.
 * @param alternateSource An optional alternate way of determining which Ingress to choose by.
 * @returns The option corresponding to your current shadow rift ingress.
 */

var byIngress = (0,utils/* makeByXFunction */.Qg)(currentIngress);
/**
 * Submit your Rufus quest
 *
 * @returns Whether we successfully submitted your Rufus quest
 */

function submitQuest() {
  if ((0,lib/* questStep */.cL)("questRufus") === 1) {
    (0,property.withChoice)(1498, 1, () => (0,external_kolmafia_.use)(ClosedCircuitPayphone_item));
    return (0,lib/* questStep */.cL)("questRufus") === -1;
  }

  return false;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2023/CursedMonkeyPaw.js
var CursedMonkeyPaw_templateObject;

function CursedMonkeyPaw_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }







var CursedMonkeyPaw_item = (0,template_string/* $item */.xr)(CursedMonkeyPaw_templateObject || (CursedMonkeyPaw_templateObject = CursedMonkeyPaw_taggedTemplateLiteral(["cursed monkey's paw"])));
/**
 * @returns Whether or not we currently `have` the cursed monkey's paw
 */

function CursedMonkeyPaw_have() {
  return (0,lib/* have */.lf)(CursedMonkeyPaw_item);
}
/**
 * @returns The number of monkey paw wishes we have remaining
 */

function wishes() {
  return (0,utils/* clamp */.uZ)(5 - (0,property.get)("_monkeyPawWishesUsed"), 0, 5);
}
/**
 * @param filters An optional object optionally consisting of filtering functions to shrink down the pool of wishable items
 * @param filters.location A filtering function to remove locations from the pool of wishable targets.
 * @param filters.monster A filtering function to remove monsters from the pool of wishable targets.
 * @param filters.drop A filtering function to remove item drops from the pool of wishable targets.
 * @returns A set of all items we expect to be able to wish; this doesn't actually constitute all items
 */

function wishableItems() {
  var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return new Set((0,utils/* flat */.$H)(external_kolmafia_.Location.all().filter(l => {
    var _filters$location, _filters$location2;

    return (0,external_kolmafia_.canAdventure)(l) && ((_filters$location = (_filters$location2 = filters.location) === null || _filters$location2 === void 0 ? void 0 : _filters$location2.call(filters, l)) !== null && _filters$location !== void 0 ? _filters$location : true);
  }).map(l => (0,external_kolmafia_.getMonsters)(l).filter(m => {
    var _filters$monster, _filters$monster2;

    return m.copyable && ((_filters$monster = (_filters$monster2 = filters.monster) === null || _filters$monster2 === void 0 ? void 0 : _filters$monster2.call(filters, m)) !== null && _filters$monster !== void 0 ? _filters$monster : true);
  }).map(m => (0,external_kolmafia_.itemDropsArray)(m).filter(_ref => {
    var _filters$drop, _filters$drop2;

    var type = _ref.type,
        rate = _ref.rate,
        drop = _ref.drop;
    return !drop.quest && (type !== "c" || rate >= 1) && ( // Remove random roll drops
    (_filters$drop = (_filters$drop2 = filters.drop) === null || _filters$drop2 === void 0 ? void 0 : _filters$drop2.call(filters, {
      type: type,
      rate: rate,
      drop: drop
    })) !== null && _filters$drop !== void 0 ? _filters$drop : true);
  }).map(_ref2 => {
    var drop = _ref2.drop;
    return drop;
  })))));
}
var INVALID_CHARACTERS = /[^a-z\d -]/g;

var _unwishableEffects;

function unwishableEffects() {
  // This is the set of all names of genie-wishable effects, split into the maximal substrings we can actually submit
  var names = external_kolmafia_.Effect.all().filter(e => !e.attributes.includes("nohookah")).map(e => {
    var name = e.name.toLowerCase();
    return {
      name: name,
      splitName: name.split(INVALID_CHARACTERS)
    };
  });
  return names.filter(_ref3 => {
    var name = _ref3.name,
        splitName = _ref3.splitName;
    return (// Any effect that doesn't contain an INVALID_CHARACTER is fine
      splitName.length > 1 && // To be unwishable, there can't be any substrings that uniquely match a genie-wishable effect
      splitName.every(s => // So we check every maximal substring against every one of our genie-wishable effects, excluding the effect we're currently looking at
      // if one of the substrings matches a substring associated with another effect, we're screwed.
      names.some(_ref4 => {
        var n = _ref4.name;
        return n !== name && n.includes(s);
      }))
    );
  }).map(_ref5 => {
    var name = _ref5.name;
    return (0,external_kolmafia_.toEffect)(name);
  });
}
/**
 * @returns An Array consisting of all genie-wishable Effects that are not Monkey-wishable
 */


function getUnwishableEffects() {
  var _unwishableEffects2;

  return (_unwishableEffects2 = _unwishableEffects) !== null && _unwishableEffects2 !== void 0 ? _unwishableEffects2 : _unwishableEffects = unwishableEffects();
}
/**
 * Decides if we expect that a given Item or Effect can be wished for.
 * May be slow for Effects;
 *
 * @param wish The Item or Effect in question
 * @returns Whether we expect it can be wished for
 */

function isWishable(wish) {
  if (wish instanceof external_kolmafia_.Item) {
    return wishableItems().has(wish);
  } else {
    if (wish.attributes.includes("nohookah")) return false;
    if (!wish.name.match(/[.,']/)) return true;
    return !getUnwishableEffects().includes(wish);
  }
}
/**
 * Wish for a given Item or Effect.
 * If it's an item, will `prepareForAdventure`; if an item is available in multiple locations this will pick the first one.
 *
 * @param wish The Item or Effect to wish for
 * @returns Whether we succeeded in this endeavor
 */

function wishFor(wish) {
  if (wishes() <= 0) return false;
  if (wish instanceof external_kolmafia_.Effect) return (0,external_kolmafia_.monkeyPaw)(wish);
  var locations = external_kolmafia_.Location.all().filter(l => (0,external_kolmafia_.canAdventure)(l) && (0,external_kolmafia_.getMonsters)(l).some(m => m.copyable && (0,external_kolmafia_.itemDropsArray)(m).some(_ref6 => {
    var drop = _ref6.drop;
    return drop === wish;
  })));

  try {
    if (locations.length) {
      (0,external_kolmafia_.cliExecute)("checkpoint");
      (0,external_kolmafia_.prepareForAdventure)(locations[0]);
    }

    var result = (0,external_kolmafia_.monkeyPaw)(wish);

    if (!result) {
      logger/* default.debug */.Z.debug("Failed to monkeyPaw wish for ".concat(wish, "; assumed it was available in locations ").concat(locations.join(", ")));
    }

    return result;
  } finally {
    if (locations.length) (0,external_kolmafia_.cliExecute)("outfit checkpoint");
  }
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2024/AprilingBandHelmet.js
var AprilingBandHelmet_templateObject;

function AprilingBandHelmet_slicedToArray(arr, i) { return AprilingBandHelmet_arrayWithHoles(arr) || AprilingBandHelmet_iterableToArrayLimit(arr, i) || AprilingBandHelmet_unsupportedIterableToArray(arr, i) || AprilingBandHelmet_nonIterableRest(); }

function AprilingBandHelmet_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function AprilingBandHelmet_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return AprilingBandHelmet_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AprilingBandHelmet_arrayLikeToArray(o, minLen); }

function AprilingBandHelmet_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function AprilingBandHelmet_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function AprilingBandHelmet_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function AprilingBandHelmet_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var AprilingBandHelmet_helmet = (0,template_string/* $item */.xr)(AprilingBandHelmet_templateObject || (AprilingBandHelmet_templateObject = AprilingBandHelmet_taggedTemplateLiteral(["Apriling band helmet"])));
/**
 * @returns whether you `have` the Apriling band helmet
 */

function AprilingBandHelmet_have() {
  return (0,lib/* have */.lf)(AprilingBandHelmet_helmet);
}
var MARCHING_SONGS = Object.freeze(["Apriling Band Patrol Beat", "Apriling Band Battle Cadence", "Apriling Band Celebration Bop"]);
var MARCHING_SONG_EFFECTS = Object.freeze(MARCHING_SONGS.map(song => (0,external_kolmafia_.toEffect)(song)));
var INSTRUMENTS = Object.freeze(["Apriling band saxophone", "Apriling band quad tom", "Apriling band tuba", "Apriling band staff", "Apriling band piccolo"]);
var INSTRUMENT_ITEMS = Object.freeze(INSTRUMENTS.map(instrument => (0,external_kolmafia_.toItem)(instrument)));

var visitConduct = () => (0,external_kolmafia_.visitUrl)("inventory.php?pwd&action=apriling");
/**
 * @returns Whether we can currently join a new section of our Apriling band
 */


function canJoinSection() {
  return AprilingBandHelmet_have() && (0,property.get)("_aprilBandInstruments") < 2;
}

function makeConductFunction(mafiaClass, canDo, set, offset) {
  return input => {
    if (!canDo()) return false;

    var _ref = typeof input === "string" ? [input, mafiaClass.get(input)] : [input.name, input],
        _ref2 = AprilingBandHelmet_slicedToArray(_ref, 2),
        name = _ref2[0],
        instance = _ref2[1];

    if ((0,lib/* have */.lf)(instance)) return true;
    var key = set.indexOf(name);
    if (key === -1) return false;
    visitConduct();
    (0,external_kolmafia_.runChoice)(key + offset);
    (0,external_kolmafia_.runChoice)(9);
    return (0,lib/* have */.lf)(instance);
  };
}
/**
 * Joins the given section of your Apriling band, returning whether you successfully obtained its instrument
 *
 * @param section The section of your band to join--either the instrument's name as a string, or the item itself.
 *
 * @returns Whether we have the item, at the end of all things
 */


var joinSection = makeConductFunction(external_kolmafia_.Item, canJoinSection, INSTRUMENTS, 4);
/**
 * @returns Whether we can currently change the marching song of our Apriling Band
 */

function canChangeSong() {
  return AprilingBandHelmet_have() && (0,property.get)("nextAprilBandTurn") <= (0,external_kolmafia_.totalTurnsPlayed)();
}
/**
 * Instructs your Apriling band to play the given song, returning whether it's successfully playing
 *
 * @param song The song for your band to play--either the effect's name or the effect itself.
 *
 * @returns Whether we have the effect, at the end of all things
 */

var changeSong = makeConductFunction(external_kolmafia_.Effect, canChangeSong, MARCHING_SONGS, 1);
/**
 * Conduct your Apriling band helmet
 *
 * @param result The instrument (as an item or string) or song (as an effect or string) you want out of this thing
 * @returns Whether we successfully completed the task
 */

function conduct(result) {
  if (result instanceof external_kolmafia_.Item || (0,utils/* arrayContains */.IA)(result, INSTRUMENTS)) {
    return joinSection(result);
  }

  return changeSong(result);
}
/**
 * Plays a given Apriling band instrument
 *
 * @param instrument The instrument to play
 * @param acquire Whether or not we should obtain the instrument if we don't currently have it
 * @returns Whether we successfully played our instrument
 */

function play(instrument) {
  var acquire = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var item = instrument instanceof external_kolmafia_.Item ? instrument : external_kolmafia_.Item.get(instrument);
  if (!canPlay(instrument, acquire)) return false;
  if (acquire && !(0,lib/* have */.lf)(item)) joinSection(item);
  var currentUsesRemaining = item.dailyusesleft;
  (0,external_kolmafia_.visitUrl)("inventory.php?pwd=".concat((0,external_kolmafia_.myHash)(), "&iid=").concat(item.id, "&action=aprilplay"), false);
  return item.dailyusesleft !== currentUsesRemaining;
}
/**
 * Determine whether you can play an instrument
 * @param instrument The instrument you want to play
 * @param acquire Whether you're willing to obtain an instrument you don't already have
 * @returns Whether you can play that instrument
 */

function canPlay(instrument) {
  var acquire = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  if (!AprilingBandHelmet_have()) return false;
  var item = instrument instanceof external_kolmafia_.Item ? instrument : external_kolmafia_.Item.get(instrument);
  if (!(0,lib/* have */.lf)(item) && (!acquire || !canJoinSection())) return false;
  if (item.dailyusesleft <= 0) return false;
  return true;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2024/ChestMimic.js
var ChestMimic_templateObject, ChestMimic_templateObject2, ChestMimic_templateObject3, ChestMimic_templateObject4, ChestMimic_templateObject5, ChestMimic_templateObject6;

function ChestMimic_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var ChestMimic_familiar = (0,template_string/* $familiar */.HP)(ChestMimic_templateObject || (ChestMimic_templateObject = ChestMimic_taggedTemplateLiteral(["Chest Mimic"])));
/**
 * @returns Whether you `have` the Chest Mimic familiar.
 */

function ChestMimic_have() {
  return (0,lib/* have */.lf)(ChestMimic_familiar);
}

var visitBank = () => (0,external_kolmafia_.visitUrl)("place.php?whichplace=town_right&action=townright_dna", false);

var canDonate = () => (0,lib/* have */.lf)((0,template_string/* $item */.xr)(ChestMimic_templateObject2 || (ChestMimic_templateObject2 = ChestMimic_taggedTemplateLiteral(["mimic egg"])))) && (0,property.get)("_mimicEggsDonated") < 3;

var canReceive = () => ChestMimic_familiar.experience >= 100 && (0,property.get)("_mimicEggsObtained") < 11;

var makeXpath = (selectNumber, disabled) => "//select[@name=\"mid\"][".concat(selectNumber, "]/option[position()>0]").concat(disabled ? "[@disabled]" : "", "/@value");

function getMonsters(selectNumber, page) {
  var total = (0,external_kolmafia_.xpath)(page, makeXpath(selectNumber, false));
  var disabled = new Set((0,external_kolmafia_.xpath)(page, makeXpath(selectNumber, true)));
  return total.filter(m => !disabled.has(m)).map(id => (0,external_kolmafia_.toMonster)(id));
}
/**
 * @returns List of monsters available for donation at this time
 */


function getDonableMonsters() {
  if (!canDonate()) return [];
  var selectNumber = canReceive() ? 2 : 1;

  try {
    var page = visitBank();
    return getMonsters(selectNumber, page);
  } finally {
    (0,external_kolmafia_.visitUrl)("main.php");
  }
}
/**
 * @returns List of monsters available to receive as an egg at this time
 */

function getReceivableMonsters() {
  if (!canReceive()) return [];

  try {
    var page = visitBank();
    return getMonsters(1, page);
  } finally {
    (0,external_kolmafia_.visitUrl)("main.php");
  }
}
/**
 * Donate an egg to the DNA bank
 *
 * @param monster The monster whose egg you want to donate
 * @returns Whether we succeeded in our endeavor
 */

function donate(monster) {
  if (!canDonate()) return false;

  try {
    var selectNumber = canReceive() ? 2 : 1;
    var page = visitBank();
    var available = getMonsters(selectNumber, page);
    if (!available.includes(monster)) return false;
    return (0,external_kolmafia_.runChoice)(1, "mid=".concat(monster.id)).includes("You donate your egg to science.");
  } finally {
    (0,external_kolmafia_.visitUrl)("main.php");
  }
}
/**
 * Receive an egg from the DNA bank
 *
 * @param monster The monster whose egg you want to receive
 * @returns Whether we succeeded in our endeavor
 */

function receive(monster) {
  if (!canReceive()) return false;

  try {
    var page = visitBank();
    var available = getMonsters(1, page);
    if (!available.includes(monster)) return false;
    return (0,external_kolmafia_.runChoice)(2, "mid=".concat(monster.id)).includes("Your mimic pops into a backroom and returns a few moments later with a fresh mimic egg!");
  } finally {
    (0,external_kolmafia_.visitUrl)("main.php");
  }
}
/**
 * Differentiate a Mimic egg into a monster, and fight it!
 *
 * @param monster The monster to differentiate your egg into
 * @param combatParams Any parameters you'd like to pass to `runCombat`
 * @returns Whether we successfully differentiated our egg
 */

function differentiate(monster) {
  var page = (0,lib/* directlyUse */.tg)((0,template_string/* $item */.xr)(ChestMimic_templateObject3 || (ChestMimic_templateObject3 = ChestMimic_taggedTemplateLiteral(["mimic egg"]))));
  var monsters = getMonsters(1, page);

  if (!monsters.includes(monster)) {
    (0,external_kolmafia_.visitUrl)("main.php");
    return false;
  }

  (0,external_kolmafia_.runChoice)(1, "mid=".concat(monster.id));

  for (var _len = arguments.length, combatParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    combatParams[_key - 1] = arguments[_key];
  }

  external_kolmafia_.runCombat.apply(void 0, combatParams);
  return true;
}
/**
 * Check how many of a monster is available to differentiate into
 *
 * @param monster The monster to differentiate your egg into
 * @returns How many of a Monster we can differentiate
 */

function differentiableQuantity(monster) {
  if (!(0,lib/* have */.lf)((0,template_string/* $item */.xr)(ChestMimic_templateObject4 || (ChestMimic_templateObject4 = ChestMimic_taggedTemplateLiteral(["mimic egg"]))))) return 0;
  var regex = new RegExp("<!-- monsterid:".concat(monster.id, " --> \\((\\d+)\\)"));
  var page = (0,lib/* examine */.OH)((0,template_string/* $item */.xr)(ChestMimic_templateObject5 || (ChestMimic_templateObject5 = ChestMimic_taggedTemplateLiteral(["mimic egg"]))));
  var match = page.match(regex);
  if (!(match !== null && match !== void 0 && match[1])) return 0;
  return Math.min(Number(match[1]), (0,external_kolmafia_.itemAmount)((0,template_string/* $item */.xr)(ChestMimic_templateObject6 || (ChestMimic_templateObject6 = ChestMimic_taggedTemplateLiteral(["mimic egg"])))));
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2024/MayamCalendar.js
var MayamCalendar_templateObject, MayamCalendar_templateObject2, MayamCalendar_templateObject3, MayamCalendar_templateObject4, MayamCalendar_templateObject5, MayamCalendar_templateObject6, MayamCalendar_templateObject7, MayamCalendar_templateObject8, MayamCalendar_templateObject9, MayamCalendar_templateObject10, MayamCalendar_templateObject11, MayamCalendar_templateObject12;

function MayamCalendar_slicedToArray(arr, i) { return MayamCalendar_arrayWithHoles(arr) || MayamCalendar_iterableToArrayLimit(arr, i) || MayamCalendar_unsupportedIterableToArray(arr, i) || MayamCalendar_nonIterableRest(); }

function MayamCalendar_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function MayamCalendar_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function MayamCalendar_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function MayamCalendar_toConsumableArray(arr) { return MayamCalendar_arrayWithoutHoles(arr) || MayamCalendar_iterableToArray(arr) || MayamCalendar_unsupportedIterableToArray(arr) || MayamCalendar_nonIterableSpread(); }

function MayamCalendar_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function MayamCalendar_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return MayamCalendar_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return MayamCalendar_arrayLikeToArray(o, minLen); }

function MayamCalendar_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function MayamCalendar_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return MayamCalendar_arrayLikeToArray(arr); }

function MayamCalendar_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function MayamCalendar_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var RINGS = Object.freeze([["yam1", "sword", "eye", "chair", "fur", "vessel"], ["lightning", "bottle", "meat", "wood", "yam2"], ["yam3", "wall", "cheese", "eyepatch"], ["explosion", "clock", "yam4"]]);
/**
 * @returns Whether you `have` the Mayam calendar
 */

function MayamCalendar_have() {
  return (0,lib/* have */.lf)((0,template_string/* $item */.xr)(MayamCalendar_templateObject || (MayamCalendar_templateObject = MayamCalendar_taggedTemplateLiteral(["Mayam Calendar"]))));
}
/**
 * @returns The Mayam calendar symbols you've used so far today.
 */

function symbolsUsed() {
  return (0,property.get)("_mayamSymbolsUsed").split(",");
}
/**
 * Determine whether certain Mayam symbols are available for use today
 *
 * @param {...MayamSymbol[]} symbols The symbols to check
 * @returns Whether or not the given symbols are all available for use
 */

function MayamCalendar_available() {
  for (var _len = arguments.length, symbols = new Array(_len), _key = 0; _key < _len; _key++) {
    symbols[_key] = arguments[_key];
  }

  return symbols.every(symbol => !symbolsUsed().includes(symbol));
}
/**
 * @returns The remaining number of uses you have of your Mayam calendar today
 */

function remainingUses() {
  return RINGS[3].filter(symbol => MayamCalendar_available(symbol)).length;
}
/**
 * Utility function to ensure you're dealing with a `Combination` array.
 * @param combination An array containing a `CombinationString` or a `Combination` array.
 * @returns A `Combination` corresponding to the information passed in.
 */

function toCombination(combination) {
  return combination.length === 1 ? combination[0].split(" ") : combination;
}
/**
 * Utility function to ensure you're dealing with a `CombinationString` string.
 * @param combination An array containing a `CombinationString` or a `Combination` array.
 * @returns A `CombinationSTring` corresponding to the information passed in.
 */

function toCombinationString(combination) {
  return combination.length === 1 ? combination[0] : combination.join(" ");
}
/**
 * Enter a combination in the Mayam calendar
 * @param combination The combination to submit, either as a single string or as a series of symbols
 * @returns Whether we succeeded in our endeavor
 */

function MayamCalendar_submit() {
  for (var _len2 = arguments.length, combination = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    combination[_key2] = arguments[_key2];
  }

  if (!MayamCalendar_available.apply(void 0, MayamCalendar_toConsumableArray(toCombination(combination)))) {
    return false;
  }

  return (0,external_kolmafia_.cliExecute)("mayam rings ".concat(combination.join(" ").replace(/yam\d/g, "yam")));
}
var RESONANCES = Object.freeze({
  "eye yam2 eyepatch yam4": (0,template_string/* $item */.xr)(MayamCalendar_templateObject2 || (MayamCalendar_templateObject2 = MayamCalendar_taggedTemplateLiteral(["Mayam spinach"]))),
  "vessel yam2 cheese explosion": (0,template_string/* $item */.xr)(MayamCalendar_templateObject3 || (MayamCalendar_templateObject3 = MayamCalendar_taggedTemplateLiteral(["stuffed yam stinkbomb"]))),
  "yam1 meat cheese yam4": (0,template_string/* $item */.xr)(MayamCalendar_templateObject4 || (MayamCalendar_templateObject4 = MayamCalendar_taggedTemplateLiteral(["yam and swiss"]))),
  "sword yam2 eyepatch explosion": (0,template_string/* $item */.xr)(MayamCalendar_templateObject5 || (MayamCalendar_templateObject5 = MayamCalendar_taggedTemplateLiteral(["yam cannon"]))),
  "fur lightning eyepatch yam4": (0,template_string/* $item */.xr)(MayamCalendar_templateObject6 || (MayamCalendar_templateObject6 = MayamCalendar_taggedTemplateLiteral(["tiny yam cannon"]))),
  "yam1 lightning yam3 clock": (0,template_string/* $item */.xr)(MayamCalendar_templateObject7 || (MayamCalendar_templateObject7 = MayamCalendar_taggedTemplateLiteral(["yam battery"]))),
  "fur yam2 wall yam4": (0,template_string/* $item */.xr)(MayamCalendar_templateObject8 || (MayamCalendar_templateObject8 = MayamCalendar_taggedTemplateLiteral(["furry yam buckler"]))),
  "yam1 yam2 yam3 explosion": (0,template_string/* $item */.xr)(MayamCalendar_templateObject9 || (MayamCalendar_templateObject9 = MayamCalendar_taggedTemplateLiteral(["thanksgiving bomb"]))),
  "yam1 meat eyepatch yam4": (0,template_string/* $item */.xr)(MayamCalendar_templateObject10 || (MayamCalendar_templateObject10 = MayamCalendar_taggedTemplateLiteral(["yamtility belt"]))),
  "chair yam2 yam3 clock": (0,template_string/* $effect */._G)(MayamCalendar_templateObject11 || (MayamCalendar_templateObject11 = MayamCalendar_taggedTemplateLiteral(["Caught Yam-Handed"]))),
  "yam1 yam2 cheese clock": (0,template_string/* $effect */._G)(MayamCalendar_templateObject12 || (MayamCalendar_templateObject12 = MayamCalendar_taggedTemplateLiteral(["Memories of Cheesier Age"])))
});
var RESONANCE_KEYS = Object.keys(RESONANCES);
/**
 * Find the combination needed to get a particular resonance
 * @param target The Item or Effect granted by the resonance
 * @returns The combination needed, or null if none such exists
 */

function resonanceFor(target) {
  var _find$0$split, _find;

  return (_find$0$split = (_find = MayamCalendar_toConsumableArray(Object.entries(RESONANCES)).find(_ref => {
    var _ref2 = MayamCalendar_slicedToArray(_ref, 2),
        value = _ref2[1];

    return value === target;
  })) === null || _find === void 0 ? void 0 : _find[0].split(" ")) !== null && _find$0$split !== void 0 ? _find$0$split : null;
}
/**
 * Determines whether an item can be obtained via resonance at this moment
 * @param target The target Item or Effect for your resonance
 * @returns Whether or not you can currently use that resonance
 */

function resonanceAvailable(target) {
  var resonance = resonanceFor(target);
  return !!resonance && MayamCalendar_available.apply(void 0, MayamCalendar_toConsumableArray(resonance));
}
/**
 * Determine what Item or Effect results from a particular resonance
 *
 * @param combination The combination to check, either as a single string or a series of symbols
 * @returns The Item or Effect of the resonance, if it is indeed a resonance; `null` otherwise
 */

function getResonanceResult() {
  for (var _len3 = arguments.length, combination = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    combination[_key3] = arguments[_key3];
  }

  var combinationString = combination.length === 1 ? combination[0] : combination.join(" ");
  return combinationString in RESONANCES ? RESONANCES[combinationString] : null;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/putty-likes.js



/**
 * Get total putty-like copies made
 *
 * @returns Total copies made
 */

function getTotalPuttyLikeCopiesMade() {
  return getSpookyPuttySheetCopiesMade() + getRainDohBlackBoxCopiesMade();
}
/**
 * Determine if Rain-Doh black box can be used
 *
 * @returns Whether it can be used
 */

function couldUseRainDohBlackBox() {
  return RainDoh_have() && getRainDohBlackBoxCopiesMade() < 5 && getTotalPuttyLikeCopiesMade() < 6;
}
var RainDohBlackBox = new Copier(() => couldUseRainDohBlackBox(), null, () => couldUseRainDohBlackBox(), () => getRainDohBlackBoxMonster(), () => useRainDohBlackBox());
/**
 * Determines whether you can still use a spooky putty sheet
 *
 * @returns Whether you can still use a spooky putty sheet
 */

function couldUseSpookyPuttySheet() {
  return SpookyPutty_have() && getSpookyPuttySheetCopiesMade() < 5 && getTotalPuttyLikeCopiesMade() < 6;
}
var SpookyPuttySheet = new Copier(() => couldUseSpookyPuttySheet(), () => prepareSpookyPuttySheet(), () => couldUseSpookyPuttySheet(), () => getSpookyPuttySheetMonster(), () => useSpookyPuttySheet());
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2007/CandyHearts.js
var CandyHearts_templateObject, CandyHearts_templateObject2, CandyHearts_templateObject3, CandyHearts_templateObject4, CandyHearts_templateObject5, CandyHearts_templateObject6, CandyHearts_templateObject7;

function CandyHearts_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



var summonSkill = (0,template_string/* $skill */.tm)(CandyHearts_templateObject || (CandyHearts_templateObject = CandyHearts_taggedTemplateLiteral(["Summon Candy Heart"])));
var libramChance = 1.0 / 6;
var libramExpected = new Map([[(0,template_string/* $item */.xr)(CandyHearts_templateObject2 || (CandyHearts_templateObject2 = CandyHearts_taggedTemplateLiteral(["green candy heart"]))), libramChance], [(0,template_string/* $item */.xr)(CandyHearts_templateObject3 || (CandyHearts_templateObject3 = CandyHearts_taggedTemplateLiteral(["lavender candy heart"]))), libramChance], [(0,template_string/* $item */.xr)(CandyHearts_templateObject4 || (CandyHearts_templateObject4 = CandyHearts_taggedTemplateLiteral(["orange candy heart"]))), libramChance], [(0,template_string/* $item */.xr)(CandyHearts_templateObject5 || (CandyHearts_templateObject5 = CandyHearts_taggedTemplateLiteral(["pink candy heart"]))), libramChance], [(0,template_string/* $item */.xr)(CandyHearts_templateObject6 || (CandyHearts_templateObject6 = CandyHearts_taggedTemplateLiteral(["white candy heart"]))), libramChance], [(0,template_string/* $item */.xr)(CandyHearts_templateObject7 || (CandyHearts_templateObject7 = CandyHearts_taggedTemplateLiteral(["yellow candy heart"]))), libramChance]]);
/**
 * @returns true if the player can Summon Candy Heart
 */

function CandyHearts_have() {
  return (0,lib/* have */.lf)(summonSkill);
}
/**
 * @returns map containing the chance of an item to be summoned
 */

function expected() {
  return libramExpected;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2008/DivineFavors.js
var DivineFavors_templateObject, DivineFavors_templateObject2, DivineFavors_templateObject3, DivineFavors_templateObject4, DivineFavors_templateObject5, DivineFavors_templateObject6, DivineFavors_templateObject7;

function DivineFavors_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var DivineFavors_summonSkill = (0,template_string/* $skill */.tm)(DivineFavors_templateObject || (DivineFavors_templateObject = DivineFavors_taggedTemplateLiteral(["Summon Party Favor"])));
/**
 * @returns true if the player can Summon Party Favors
 */

function DivineFavors_have() {
  return (0,lib/* have */.lf)(DivineFavors_summonSkill);
}
/**
 * @returns map containing the chance of an item to be summoned
 */

function DivineFavors_expected() {
  var rareSummons = (0,property.get)("_favorRareSummons");
  var totalRareChance = 1.0 / Math.pow(2, rareSummons + 1);
  var commonChance = (1.0 - totalRareChance) / 3;
  var rareChance = totalRareChance / 3;
  return new Map([[(0,template_string/* $item */.xr)(DivineFavors_templateObject2 || (DivineFavors_templateObject2 = DivineFavors_taggedTemplateLiteral(["divine blowout"]))), commonChance], [(0,template_string/* $item */.xr)(DivineFavors_templateObject3 || (DivineFavors_templateObject3 = DivineFavors_taggedTemplateLiteral(["divine can of silly string"]))), commonChance], [(0,template_string/* $item */.xr)(DivineFavors_templateObject4 || (DivineFavors_templateObject4 = DivineFavors_taggedTemplateLiteral(["divine noisemaker"]))), commonChance], [(0,template_string/* $item */.xr)(DivineFavors_templateObject5 || (DivineFavors_templateObject5 = DivineFavors_taggedTemplateLiteral(["divine champagne flute"]))), rareChance], [(0,template_string/* $item */.xr)(DivineFavors_templateObject6 || (DivineFavors_templateObject6 = DivineFavors_taggedTemplateLiteral(["divine champagne popper"]))), rareChance], [(0,template_string/* $item */.xr)(DivineFavors_templateObject7 || (DivineFavors_templateObject7 = DivineFavors_taggedTemplateLiteral(["divine cracker"]))), rareChance]]);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2009/LoveSongs.js
var LoveSongs_templateObject, LoveSongs_templateObject2, LoveSongs_templateObject3, LoveSongs_templateObject4, LoveSongs_templateObject5, LoveSongs_templateObject6, LoveSongs_templateObject7;

function LoveSongs_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



var LoveSongs_summonSkill = (0,template_string/* $skill */.tm)(LoveSongs_templateObject || (LoveSongs_templateObject = LoveSongs_taggedTemplateLiteral(["Summon Love Song"])));
var LoveSongs_libramChance = 1.0 / 6;
var LoveSongs_libramExpected = new Map([[(0,template_string/* $item */.xr)(LoveSongs_templateObject2 || (LoveSongs_templateObject2 = LoveSongs_taggedTemplateLiteral(["love song of disturbing obsession"]))), LoveSongs_libramChance], [(0,template_string/* $item */.xr)(LoveSongs_templateObject3 || (LoveSongs_templateObject3 = LoveSongs_taggedTemplateLiteral(["love song of icy revenge"]))), LoveSongs_libramChance], [(0,template_string/* $item */.xr)(LoveSongs_templateObject4 || (LoveSongs_templateObject4 = LoveSongs_taggedTemplateLiteral(["love song of naughty innuendo"]))), LoveSongs_libramChance], [(0,template_string/* $item */.xr)(LoveSongs_templateObject5 || (LoveSongs_templateObject5 = LoveSongs_taggedTemplateLiteral(["love song of smoldering passion"]))), LoveSongs_libramChance], [(0,template_string/* $item */.xr)(LoveSongs_templateObject6 || (LoveSongs_templateObject6 = LoveSongs_taggedTemplateLiteral(["love song of sugary cuteness"]))), LoveSongs_libramChance], [(0,template_string/* $item */.xr)(LoveSongs_templateObject7 || (LoveSongs_templateObject7 = LoveSongs_taggedTemplateLiteral(["love song of vague ambiguity"]))), LoveSongs_libramChance]]);
/**
 * @returns true if the player can Summon Love Song
 */

function LoveSongs_have() {
  return (0,lib/* have */.lf)(LoveSongs_summonSkill);
}
/**
 * @returns map containing the chance of an item to be summoned
 */

function LoveSongs_expected() {
  return LoveSongs_libramExpected;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2010/Brickos.js
var Brickos_templateObject, Brickos_templateObject2, Brickos_templateObject3;

function Brickos_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var Brickos_summonSkill = (0,template_string/* $skill */.tm)(Brickos_templateObject || (Brickos_templateObject = Brickos_taggedTemplateLiteral(["Summon BRICKOs"])));
/**
 * @returns true if the player can Summon BRICKOs
 */

function Brickos_have() {
  return (0,lib/* have */.lf)(Brickos_summonSkill);
}
/**
 * @returns map containing the chance of an item to be summoned
 */

function Brickos_expected() {
  var eyeSummons = (0,property.get)("_brickoEyeSummons");
  var eyeChance = eyeSummons === 3 ? 0.0 : eyeSummons === 0 ? 0.5 : 1.0 / 3.0;
  return new Map([[(0,template_string/* $item */.xr)(Brickos_templateObject2 || (Brickos_templateObject2 = Brickos_taggedTemplateLiteral(["BRICKO eye brick"]))), eyeChance], [(0,template_string/* $item */.xr)(Brickos_templateObject3 || (Brickos_templateObject3 = Brickos_taggedTemplateLiteral(["BRICKO brick"]))), 3.0 - eyeChance]]);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2011/Gygaxian.js
var Gygaxian_templateObject, Gygaxian_templateObject2, Gygaxian_templateObject3, Gygaxian_templateObject4, Gygaxian_templateObject5, Gygaxian_templateObject6, Gygaxian_templateObject7;

function Gygaxian_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



var Gygaxian_summonSkill = (0,template_string/* $skill */.tm)(Gygaxian_templateObject || (Gygaxian_templateObject = Gygaxian_taggedTemplateLiteral(["Summon Dice"])));
var Gygaxian_libramChance = 1.0 / 6;
var Gygaxian_libramExpected = new Map([[(0,template_string/* $item */.xr)(Gygaxian_templateObject2 || (Gygaxian_templateObject2 = Gygaxian_taggedTemplateLiteral(["d4"]))), Gygaxian_libramChance], [(0,template_string/* $item */.xr)(Gygaxian_templateObject3 || (Gygaxian_templateObject3 = Gygaxian_taggedTemplateLiteral(["d6"]))), Gygaxian_libramChance], [(0,template_string/* $item */.xr)(Gygaxian_templateObject4 || (Gygaxian_templateObject4 = Gygaxian_taggedTemplateLiteral(["d8"]))), Gygaxian_libramChance], [(0,template_string/* $item */.xr)(Gygaxian_templateObject5 || (Gygaxian_templateObject5 = Gygaxian_taggedTemplateLiteral(["d10"]))), Gygaxian_libramChance], [(0,template_string/* $item */.xr)(Gygaxian_templateObject6 || (Gygaxian_templateObject6 = Gygaxian_taggedTemplateLiteral(["d12"]))), Gygaxian_libramChance], [(0,template_string/* $item */.xr)(Gygaxian_templateObject7 || (Gygaxian_templateObject7 = Gygaxian_taggedTemplateLiteral(["d20"]))), Gygaxian_libramChance]]);
/**
 * @returns true if the player can Summon Dice
 */

function Gygaxian_have() {
  return (0,lib/* have */.lf)(Gygaxian_summonSkill);
}
/**
 * @returns map containing the chance of an item to be summoned
 */

function Gygaxian_expected() {
  return Gygaxian_libramExpected;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2012/Resolutions.js
var Resolutions_templateObject, Resolutions_templateObject2, Resolutions_templateObject3, Resolutions_templateObject4, Resolutions_templateObject5, Resolutions_templateObject6, Resolutions_templateObject7, Resolutions_templateObject8, Resolutions_templateObject9, Resolutions_templateObject10;

function Resolutions_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



var Resolutions_summonSkill = (0,template_string/* $skill */.tm)(Resolutions_templateObject || (Resolutions_templateObject = Resolutions_taggedTemplateLiteral(["Summon Resolutions"])));
var commonChance = 0.98 / 6;
var rareChance = 0.02 / 3;
var Resolutions_libramExpected = new Map([[(0,template_string/* $item */.xr)(Resolutions_templateObject2 || (Resolutions_templateObject2 = Resolutions_taggedTemplateLiteral(["resolution: be feistier"]))), commonChance], [(0,template_string/* $item */.xr)(Resolutions_templateObject3 || (Resolutions_templateObject3 = Resolutions_taggedTemplateLiteral(["resolution: be happier"]))), commonChance], [(0,template_string/* $item */.xr)(Resolutions_templateObject4 || (Resolutions_templateObject4 = Resolutions_taggedTemplateLiteral(["resolution: be sexier"]))), commonChance], [(0,template_string/* $item */.xr)(Resolutions_templateObject5 || (Resolutions_templateObject5 = Resolutions_taggedTemplateLiteral(["resolution: be smarter"]))), commonChance], [(0,template_string/* $item */.xr)(Resolutions_templateObject6 || (Resolutions_templateObject6 = Resolutions_taggedTemplateLiteral(["resolution: be stronger"]))), commonChance], [(0,template_string/* $item */.xr)(Resolutions_templateObject7 || (Resolutions_templateObject7 = Resolutions_taggedTemplateLiteral(["resolution: be wealthier"]))), commonChance], [(0,template_string/* $item */.xr)(Resolutions_templateObject8 || (Resolutions_templateObject8 = Resolutions_taggedTemplateLiteral(["resolution: be kinder"]))), rareChance], [(0,template_string/* $item */.xr)(Resolutions_templateObject9 || (Resolutions_templateObject9 = Resolutions_taggedTemplateLiteral(["resolution: be luckier"]))), rareChance], [(0,template_string/* $item */.xr)(Resolutions_templateObject10 || (Resolutions_templateObject10 = Resolutions_taggedTemplateLiteral(["resolution: be more adventurous"]))), rareChance]]);
/**
 * @returns Whether the player can Summon Resolutions
 */

function Resolutions_have() {
  return (0,lib/* have */.lf)(Resolutions_summonSkill);
}
/**
 * @returns Map containing the chance of an item to be summoned
 */

function Resolutions_expected() {
  return Resolutions_libramExpected;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2013/PulledTaffy.js
var PulledTaffy_templateObject, PulledTaffy_templateObject2, PulledTaffy_templateObject3, PulledTaffy_templateObject4, PulledTaffy_templateObject5, PulledTaffy_templateObject6, PulledTaffy_templateObject7, PulledTaffy_templateObject8;

function PulledTaffy_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var PulledTaffy_summonSkill = (0,template_string/* $skill */.tm)(PulledTaffy_templateObject || (PulledTaffy_templateObject = PulledTaffy_taggedTemplateLiteral(["Summon Taffy"])));
/**
 * @returns true if the player can Summon Taffy
 */

function PulledTaffy_have() {
  return (0,lib/* have */.lf)(PulledTaffy_summonSkill);
}
/**
 * @returns map containing the chance of an item to be summoned
 */

function PulledTaffy_expected() {
  var rareSummons = (0,property.get)("_taffyRareSummons");
  var yellowSummons = (0,property.get)("_taffyYellowSummons");
  var onlyYellow = yellowSummons === 0 && rareSummons === 3;
  var totalRareChance = rareSummons < 4 ? 1.0 / Math.pow(2, rareSummons + 1) : 0.0;
  var commonChance = (1.0 - totalRareChance) / 4;
  var rareChance = onlyYellow ? 0.0 : totalRareChance / (3 - (0,property.get)("_taffyYellowSummons"));
  var yellowChance = yellowSummons === 1 ? 0.0 : onlyYellow ? totalRareChance : rareChance;
  return new Map([[(0,template_string/* $item */.xr)(PulledTaffy_templateObject2 || (PulledTaffy_templateObject2 = PulledTaffy_taggedTemplateLiteral(["pulled blue taffy"]))), commonChance], [(0,template_string/* $item */.xr)(PulledTaffy_templateObject3 || (PulledTaffy_templateObject3 = PulledTaffy_taggedTemplateLiteral(["pulled orange taffy"]))), commonChance], [(0,template_string/* $item */.xr)(PulledTaffy_templateObject4 || (PulledTaffy_templateObject4 = PulledTaffy_taggedTemplateLiteral(["pulled violet taffy"]))), commonChance], [(0,template_string/* $item */.xr)(PulledTaffy_templateObject5 || (PulledTaffy_templateObject5 = PulledTaffy_taggedTemplateLiteral(["pulled red taffy"]))), commonChance], [(0,template_string/* $item */.xr)(PulledTaffy_templateObject6 || (PulledTaffy_templateObject6 = PulledTaffy_taggedTemplateLiteral(["pulled indigo taffy"]))), rareChance], [(0,template_string/* $item */.xr)(PulledTaffy_templateObject7 || (PulledTaffy_templateObject7 = PulledTaffy_taggedTemplateLiteral(["pulled green taffy"]))), rareChance], [(0,template_string/* $item */.xr)(PulledTaffy_templateObject8 || (PulledTaffy_templateObject8 = PulledTaffy_taggedTemplateLiteral(["pulled yellow taffy"]))), yellowChance]]);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/LibramSummon.js
var LibramSummon_templateObject, LibramSummon_templateObject2, LibramSummon_templateObject3, LibramSummon_templateObject4, LibramSummon_templateObject5, LibramSummon_templateObject6, LibramSummon_templateObject7, LibramSummon_templateObject8, LibramSummon_templateObject9, LibramSummon_templateObject10, LibramSummon_templateObject11, LibramSummon_templateObject12, LibramSummon_templateObject13, LibramSummon_templateObject14;

function LibramSummon_slicedToArray(arr, i) { return LibramSummon_arrayWithHoles(arr) || LibramSummon_iterableToArrayLimit(arr, i) || LibramSummon_unsupportedIterableToArray(arr, i) || LibramSummon_nonIterableRest(); }

function LibramSummon_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function LibramSummon_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return LibramSummon_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return LibramSummon_arrayLikeToArray(o, minLen); }

function LibramSummon_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function LibramSummon_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function LibramSummon_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function LibramSummon_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }











/**
 *
 * @param summonSkill The libram summoning skill
 * @returns map containing the chance of an item to be summoned
 */

function expectedLibramSummon(summonSkill) {
  switch (summonSkill) {
    case (0,template_string/* $skill */.tm)(LibramSummon_templateObject || (LibramSummon_templateObject = LibramSummon_taggedTemplateLiteral(["Summon Candy Heart"]))):
      return expected();

    case (0,template_string/* $skill */.tm)(LibramSummon_templateObject2 || (LibramSummon_templateObject2 = LibramSummon_taggedTemplateLiteral(["Summon Party Favor"]))):
      return DivineFavors_expected();

    case (0,template_string/* $skill */.tm)(LibramSummon_templateObject3 || (LibramSummon_templateObject3 = LibramSummon_taggedTemplateLiteral(["Summon Love Song"]))):
      return LoveSongs_expected();

    case (0,template_string/* $skill */.tm)(LibramSummon_templateObject4 || (LibramSummon_templateObject4 = LibramSummon_taggedTemplateLiteral(["Summon BRICKOs"]))):
      return Brickos_expected();

    case (0,template_string/* $skill */.tm)(LibramSummon_templateObject5 || (LibramSummon_templateObject5 = LibramSummon_taggedTemplateLiteral(["Summon Dice"]))):
      return Gygaxian_expected();

    case (0,template_string/* $skill */.tm)(LibramSummon_templateObject6 || (LibramSummon_templateObject6 = LibramSummon_taggedTemplateLiteral(["Summon Resolutions"]))):
      return Resolutions_expected();

    case (0,template_string/* $skill */.tm)(LibramSummon_templateObject7 || (LibramSummon_templateObject7 = LibramSummon_taggedTemplateLiteral(["Summon Taffy"]))):
      return PulledTaffy_expected();
  }

  return new Map();
}
/**
 *
 * @returns map containing the chance of items to be summoned for each libram summoning skill available
 */

function possibleLibramSummons() {
  var results = new Map();

  if (CandyHearts_have()) {
    results.set((0,template_string/* $skill */.tm)(LibramSummon_templateObject8 || (LibramSummon_templateObject8 = LibramSummon_taggedTemplateLiteral(["Summon Candy Heart"]))), expected());
  }

  if (DivineFavors_have()) {
    results.set((0,template_string/* $skill */.tm)(LibramSummon_templateObject9 || (LibramSummon_templateObject9 = LibramSummon_taggedTemplateLiteral(["Summon Party Favor"]))), DivineFavors_expected());
  }

  if (LoveSongs_have()) {
    results.set((0,template_string/* $skill */.tm)(LibramSummon_templateObject10 || (LibramSummon_templateObject10 = LibramSummon_taggedTemplateLiteral(["Summon Love Song"]))), LoveSongs_expected());
  }

  if (Brickos_have()) {
    results.set((0,template_string/* $skill */.tm)(LibramSummon_templateObject11 || (LibramSummon_templateObject11 = LibramSummon_taggedTemplateLiteral(["Summon BRICKOs"]))), Brickos_expected());
  }

  if (Gygaxian_have()) {
    results.set((0,template_string/* $skill */.tm)(LibramSummon_templateObject12 || (LibramSummon_templateObject12 = LibramSummon_taggedTemplateLiteral(["Summon Dice"]))), Gygaxian_expected());
  }

  if (Resolutions_have()) {
    results.set((0,template_string/* $skill */.tm)(LibramSummon_templateObject13 || (LibramSummon_templateObject13 = LibramSummon_taggedTemplateLiteral(["Summon Resolutions"]))), Resolutions_expected());
  }

  if (PulledTaffy_have()) {
    results.set((0,template_string/* $skill */.tm)(LibramSummon_templateObject14 || (LibramSummon_templateObject14 = LibramSummon_taggedTemplateLiteral(["Summon Taffy"]))), PulledTaffy_expected());
  }

  return results;
}
/**
 * Determines the best libram to cast, based on expected meat value in mall
 *
 * @returns The best libram to cast, based on expected meat value in mall
 */

function bestLibramToCast() {
  var arr = Array.from(possibleLibramSummons().entries());
  if (!arr.length) return null;
  return (0,utils/* maxBy */.UT)(arr, _ref => {
    var _ref2 = LibramSummon_slicedToArray(_ref, 2),
        itemMap = _ref2[1];

    return (0,utils/* sum */.Sm)(Array.from(itemMap.entries()), _ref3 => {
      var _ref4 = LibramSummon_slicedToArray(_ref3, 2),
          item = _ref4[0],
          weight = _ref4[1];

      return weight * (0,lib/* getSaleValue */.xI)(item);
    });
  })[0];
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/index.js























































;// CONCATENATED MODULE: ./node_modules/libram/dist/since.js
function since_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function since_createClass(Constructor, protoProps, staticProps) { if (protoProps) since_defineProperties(Constructor.prototype, protoProps); if (staticProps) since_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function since_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function since_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) since_setPrototypeOf(subClass, superClass); }

function since_createSuper(Derived) { var hasNativeReflectConstruct = since_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = since_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = since_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return since_possibleConstructorReturn(this, result); }; }

function since_possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return since_assertThisInitialized(self); }

function since_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, since_getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return since_setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (since_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) since_setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function since_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function since_setPrototypeOf(o, p) { since_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return since_setPrototypeOf(o, p); }

function since_getPrototypeOf(o) { since_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return since_getPrototypeOf(o); }

/**
 * Provides functions for checking KoLmafia's version and revision.
 *
 * @packageDocumentation
 */

/**
 * Represents an exception thrown when the current KoLmafia version does not
 * match an expected condition.
 */

var KolmafiaVersionError = /*#__PURE__*/function (_Error) {
  since_inherits(KolmafiaVersionError, _Error);

  var _super = since_createSuper(KolmafiaVersionError);

  function KolmafiaVersionError(message) {
    var _this;

    since_classCallCheck(this, KolmafiaVersionError);

    _this = _super.call(this, message); // Explicitly set the prototype, so that 'instanceof' still works in Node.js
    // even when the class is transpiled down to ES5
    // See: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
    // Note that this code isn't needed for Rhino.

    Object.setPrototypeOf(since_assertThisInitialized(_this), KolmafiaVersionError.prototype);
    return _this;
  }

  return since_createClass(KolmafiaVersionError);
}( /*#__PURE__*/_wrapNativeSuper(Error)); // Manually set class name, so that the stack trace shows proper name in Rhino

KolmafiaVersionError.prototype.name = "KolmafiaVersionError";
/**
 * Returns the currently executing script name, suitable for embedding in an
 * error message.
 *
 * @returns Path of the main script wrapped in single-quotes, or `"This script"`
 *    if the path cannot be determined
 */

function getScriptName() {
  var _require$main;

  // In Rhino, the current script name is available in require.main.id
  var scriptName = (_require$main = require.main) === null || _require$main === void 0 ? void 0 : _require$main.id;
  return scriptName ? "'".concat(scriptName, "'") : "This script";
}
/**
 * If KoLmafia's revision number is less than `revision`, throws an exception.
 * Otherwise, does nothing.
 *
 * This behaves like the `since rXXX;` statement in ASH.
 *
 * @param revision Revision number
 * @throws {KolmafiaVersionError}
 *    If KoLmafia's revision number is less than `revision`.
 * @throws {TypeError} If `revision` is not an integer
 * @example
 * ```ts
 * // Throws if KoLmafia revision is less than r20500
 * sinceKolmafiaRevision(20500);
 * ```
 */


function sinceKolmafiaRevision(revision) {
  if (!Number.isInteger(revision)) {
    throw new TypeError("Invalid revision number ".concat(revision, " (must be an integer)"));
  } // Based on net.sourceforge.kolmafia.textui.Parser.sinceException()


  var currentRevision = (0,external_kolmafia_.getRevision)();

  if (currentRevision > 0 && currentRevision < revision) {
    throw new KolmafiaVersionError("".concat(getScriptName(), " requires revision r").concat(revision, " of kolmafia or higher (current: ").concat((0,external_kolmafia_.getRevision)(), "). Up-to-date builds can be found at https://ci.kolmafia.us/."));
  }
}
/**
 * If KoLmafia's version is less than `majorVersion.minorVersion`, throws an
 * exception.
 * Otherwise, does nothing.
 *
 * This behaves like the `since X.Y;` statement in ASH.
 *
 * @param majorVersion Major version number
 * @param minorVersion Minor version number
 * @deprecated Point versions are no longer released by KoLmafia
 * @throws {KolmafiaVersionError}
 *    If KoLmafia's major version is less than `majorVersion`, or if the major
 *    versions are equal but the minor version is less than `minorVersion`
 * @throws {TypeError}
 *    If either `majorVersion` or `minorVersion` are not integers
 * @example
 * ```ts
 * // Throws if KoLmafia version is less than 20.7
 * sinceKolmafiaVersion(20, 7);
 * ```
 */

function sinceKolmafiaVersion(majorVersion, minorVersion) {
  if ((0,external_kolmafia_.getRevision)() >= 25720) {
    return;
  }

  if (!Number.isInteger(majorVersion)) {
    throw new TypeError("Invalid major version number ".concat(majorVersion, " (must be an integer)"));
  }

  if (!Number.isInteger(minorVersion)) {
    throw new TypeError("Invalid minor version number ".concat(minorVersion, " (must be an integer)"));
  }

  if (majorVersion > 21 || majorVersion === 20 && minorVersion > 9) {
    throw new Error("There were no versions released after 21.09. This command will always fail");
  }

  var versionStr = (0,external_kolmafia_.getVersion)();
  var versionStrMatch = /v(\d+)\.(\d+)/.exec(versionStr);

  if (!versionStrMatch) {
    // This is not something the user should handle
    throw new Error("Unexpected KoLmafia version string: \"".concat(versionStr, "\". You may need to update the script."));
  }

  var currentMajorVersion = Number(versionStrMatch[1]);
  var currentMinorVersion = Number(versionStrMatch[2]); // Based on net.sourceforge.kolmafia.textui.Parser.sinceException()

  if (currentMajorVersion < majorVersion || currentMajorVersion === majorVersion && currentMinorVersion < minorVersion) {
    throw new KolmafiaVersionError("".concat(getScriptName(), " requires version ").concat(majorVersion, ".").concat(minorVersion, " of kolmafia or higher (current: ").concat(currentMajorVersion, ".").concat(currentMinorVersion, "). Up-to-date builds can be found at https://ci.kolmafia.us/."));
  }
}
// EXTERNAL MODULE: ./node_modules/libram/dist/Kmail.js + 1 modules
var Kmail = __webpack_require__(479);
;// CONCATENATED MODULE: ./node_modules/libram/dist/console.js


var logColor = color => function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var output = args.map(x => x.toString()).join(" ");

  if (color) {
    (0,external_kolmafia_.print)(output, color);
  } else {
    (0,external_kolmafia_.print)(output);
  }
};

var log = logColor();
var info = logColor("blue");
var warn = logColor("red");
var error = logColor("red");
// EXTERNAL MODULE: ./node_modules/libram/dist/propertyTypes.js
var propertyTypes = __webpack_require__(902);
// EXTERNAL MODULE: ./node_modules/libram/dist/session.js
var session = __webpack_require__(352);
;// CONCATENATED MODULE: ./node_modules/libram/dist/index.js































/***/ }),

/***/ 71:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$c": () => (/* binding */ getBanishedMonsters),
/* harmony export */   "A5": () => (/* binding */ getAverage),
/* harmony export */   "Ao": () => (/* binding */ canVisitUrl),
/* harmony export */   "Dx": () => (/* binding */ lgrCurrencies),
/* harmony export */   "EO": () => (/* binding */ canUse),
/* harmony export */   "Eg": () => (/* binding */ byClass),
/* harmony export */   "Ft": () => (/* binding */ unequip),
/* harmony export */   "Fx": () => (/* binding */ extractItems),
/* harmony export */   "I": () => (/* binding */ getPlayerNameFromId),
/* harmony export */   "Ib": () => (/* binding */ setCombatFlags),
/* harmony export */   "Ie": () => (/* binding */ Wanderer),
/* harmony export */   "J1": () => (/* binding */ noneToNull),
/* harmony export */   "KN": () => (/* binding */ getSongLimit),
/* harmony export */   "Lo": () => (/* binding */ uneffect),
/* harmony export */   "N": () => (/* binding */ getAverageAdventures),
/* harmony export */   "Nw": () => (/* binding */ holidayWanderers),
/* harmony export */   "OH": () => (/* binding */ examine),
/* harmony export */   "Pr": () => (/* binding */ canRememberSong),
/* harmony export */   "Qq": () => (/* binding */ getPlayerFromIdOrName),
/* harmony export */   "Qr": () => (/* binding */ EnsureError),
/* harmony export */   "RD": () => (/* binding */ getWandererChance),
/* harmony export */   "TR": () => (/* binding */ haveIntrinsic),
/* harmony export */   "Tx": () => (/* binding */ realmCurrency),
/* harmony export */   "UL": () => (/* binding */ getTodaysHolidayWanderers),
/* harmony export */   "UR": () => (/* binding */ isVoteWandererNow),
/* harmony export */   "Ul": () => (/* binding */ isWandererNow),
/* harmony export */   "Z2": () => (/* binding */ haveCounter),
/* harmony export */   "ZJ": () => (/* binding */ getZapGroup),
/* harmony export */   "_D": () => (/* binding */ getFoldGroup),
/* harmony export */   "__": () => (/* binding */ telescope),
/* harmony export */   "aJ": () => (/* binding */ getRemainingSpleen),
/* harmony export */   "aY": () => (/* binding */ haveWandererCounter),
/* harmony export */   "b_": () => (/* binding */ getActiveSongs),
/* harmony export */   "bf": () => (/* binding */ getRemainingLiver),
/* harmony export */   "cL": () => (/* binding */ questStep),
/* harmony export */   "e6": () => (/* binding */ realmAvailable),
/* harmony export */   "ex": () => (/* binding */ getRemainingStomach),
/* harmony export */   "gK": () => (/* binding */ findFairyMultiplier),
/* harmony export */   "ic": () => (/* binding */ isCurrentFamiliar),
/* harmony export */   "jC": () => (/* binding */ getActiveEffects),
/* harmony export */   "kv": () => (/* binding */ gameDay),
/* harmony export */   "lf": () => (/* binding */ have),
/* harmony export */   "lp": () => (/* binding */ withCombatFlags),
/* harmony export */   "mQ": () => (/* binding */ damageTakenByElement),
/* harmony export */   "pq": () => (/* binding */ ensureEffect),
/* harmony export */   "q$": () => (/* binding */ findLeprechaunMultiplier),
/* harmony export */   "qA": () => (/* binding */ Environment),
/* harmony export */   "qT": () => (/* binding */ getMonsterLocations),
/* harmony export */   "r1": () => (/* binding */ getFamiliarWandererChance),
/* harmony export */   "rU": () => (/* binding */ isSong),
/* harmony export */   "sN": () => (/* binding */ byStat),
/* harmony export */   "sy": () => (/* binding */ haveInCampground),
/* harmony export */   "tg": () => (/* binding */ directlyUse),
/* harmony export */   "uG": () => (/* binding */ getSongCount),
/* harmony export */   "uo": () => (/* binding */ freeCrafts),
/* harmony export */   "v$": () => (/* binding */ getPlayerIdFromName),
/* harmony export */   "ve": () => (/* binding */ getKramcoWandererChance),
/* harmony export */   "wi": () => (/* binding */ realmTypes),
/* harmony export */   "xI": () => (/* binding */ getSaleValue),
/* harmony export */   "ye": () => (/* binding */ getCombatFlags)
/* harmony export */ });
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(167);
/* harmony import */ var _property_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(785);
/* harmony import */ var _template_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(328);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(130);
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38, _templateObject39, _templateObject40, _templateObject41, _templateObject42, _templateObject43, _templateObject44, _templateObject45;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/** @module GeneralLibrary */





/**
 * Determines the current maximum Accordion Thief songs the player can have in their head
 *
 * @category General
 * @returns Maximum number of songs for player
 */

function getSongLimit() {
  return 3 + ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.booleanModifier)("Four Songs") ? 1 : 0) + (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.numericModifier)("Additional Song");
}
/**
 * Determine whether the Skill or Effect provided is an Accordion Thief song
 *
 * @category General
 * @param skillOrEffect The Skill or Effect
 * @returns Whether it's a song
 */

function isSong(skillOrEffect) {
  if (skillOrEffect instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Effect && skillOrEffect.attributes.includes("song")) {
    return true;
  } else {
    var skill = skillOrEffect instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Effect ? (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toSkill)(skillOrEffect) : skillOrEffect;
    return skill.class === (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$class */ ._$)(_templateObject || (_templateObject = _taggedTemplateLiteral(["Accordion Thief"]))) && skill.buff;
  }
}
/**
 * List all active Effects
 *
 * @category General
 * @returns List of Effects
 */

function getActiveEffects() {
  return Object.keys((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myEffects)()).map(e => kolmafia__WEBPACK_IMPORTED_MODULE_0__.Effect.get(e));
}
/**
 * List currently active Accordion Thief songs
 *
 * @category General
 * @returns List of song Effects
 */

function getActiveSongs() {
  return getActiveEffects().filter(isSong);
}
/**
 * List number of active Accordion Thief songs
 *
 * @category General
 * @returns Number of songs
 */

function getSongCount() {
  return getActiveSongs().length;
}
/**
 * Determine whether player can remember another Accordion Thief song
 *
 * @category General
 * @param quantity Number of songs to test the space for
 * @returns Whether player can remember another song
 */

function canRememberSong() {
  var quantity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  return getSongLimit() - getSongCount() >= quantity;
}
/**
 * Determine the locations in which the given monster can be encountered naturally
 *
 * @category General
 * @param monster Monster to find
 * @returns Locations for monster
 */

function getMonsterLocations(monster) {
  return kolmafia__WEBPACK_IMPORTED_MODULE_0__.Location.all().filter(location => monster.name in (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.appearanceRates)(location));
}
/**
 * Determine the player's remaining liver space
 *
 * @category General
 * @returns Remaining liver space
 */

function getRemainingLiver() {
  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.inebrietyLimit)() - (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myInebriety)();
}
/**
 * Determine the player's remaining stomach space
 *
 * @category General
 * @returns Remaining stomach space
 */

function getRemainingStomach() {
  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.fullnessLimit)() - (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myFullness)();
}
/**
 * Determine the player's remaining spleen space
 *
 * @category General
 * @returns Remaining spleen space
 */

function getRemainingSpleen() {
  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.spleenLimit)() - (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.mySpleenUse)();
}
/**
 * Determine whether the player "has" any entity which one could feasibly "have".
 *
 * @category General
 * @param thing Thing to check
 * @param quantity Minimum quantity the player must have to pass
 * @returns Whether the player meets the requirements of owning the supplied thing
 */

function have(thing) {
  var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  if (thing instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Effect) {
    return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveEffect)(thing) >= quantity;
  }

  if (thing instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Familiar) {
    return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveFamiliar)(thing);
  }

  if (thing instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item) {
    return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(thing) >= quantity;
  }

  if (thing instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Servant) {
    return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveServant)(thing);
  }

  if (thing instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill) {
    return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveSkill)(thing);
  }

  if (thing instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Thrall) {
    var thrall = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myThrall)();
    return thrall.id === thing.id && thrall.level >= quantity;
  }

  return false;
}
/**
 * Determine whether a given item is in the player's campground
 *
 * @category General
 * @param item The Item KoLmafia uses to represent the campground item
 * @returns Whether the item is in the campground
 */

function haveInCampground(item) {
  return Object.keys((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getCampground)()).map(i => kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get(i)).includes(item);
}
var Wanderer;

(function (Wanderer) {
  Wanderer["Digitize"] = "Digitize Monster";
  Wanderer["Enamorang"] = "Enamorang Monster";
  Wanderer["Familiar"] = "Familiar";
  Wanderer["Holiday"] = "Holiday Monster";
  Wanderer["Kramco"] = "Kramco";
  Wanderer["Nemesis"] = "Nemesis Assassin";
  Wanderer["Portscan"] = "portscan.edu";
  Wanderer["Romantic"] = "Romantic Monster";
  Wanderer["Vote"] = "Vote Monster";
})(Wanderer || (Wanderer = {}));

var deterministicWanderers = [Wanderer.Digitize, Wanderer.Portscan];
/**
 * Determine whether the player has the specified counter
 *
 * @param counterName Name of the counter
 * @param minTurns Minimum turns the counter is set to
 * @param maxTurns Maximum turns the counter is set to
 * @category General
 * @returns Whether player has the counter
 */

function haveCounter(counterName) {
  var minTurns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var maxTurns = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500;
  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getCounters)(counterName, minTurns, maxTurns) === counterName;
}
/**
 * Determine whether the player has the specified wanderer's counter
 *
 * @param wanderer Wanderer to check
 * @category Wanderers
 * @returns Whether player has the wanderer counter
 */

function haveWandererCounter(wanderer) {
  if (deterministicWanderers.includes(wanderer)) {
    return haveCounter(wanderer);
  }

  var begin = wanderer + " window begin";
  var end = wanderer + " window end";
  return haveCounter(begin) || haveCounter(end);
}
/**
 * Determine whether the player will encounter a vote wanderer on the next turn,
 * providing an "I Voted!" sticker is equipped.
 *
 * @category Wanderers
 * @returns Whether the vote wanderer is due
 */

function isVoteWandererNow() {
  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.totalTurnsPlayed)() % 11 === 1 && (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("lastVoteMonsterTurn") < (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.totalTurnsPlayed)();
}
/**
 * Tells us whether we can expect a given wanderer now. Behaves differently
 * for different types of wanderer.
 *
 * - For deterministic wanderers, return whether the player will encounter
 *   the queried wanderer on the next turn
 *
 * - For variable wanderers (window), return whether the player is within
 *   an encounter window for the queried wanderer
 *
 * - For variable wanderers (chance per turn), returns true unless the player
 *   has exhausted the number of wanderers possible
 *
 * @category Wanderers
 * @param wanderer Wanderer to check
 * @returns Whether the wanderer is due
 */

function isWandererNow(wanderer) {
  if (deterministicWanderers.includes(wanderer)) {
    return haveCounter(wanderer, 0, 0);
  }

  if (wanderer === Wanderer.Kramco) {
    return true;
  }

  if (wanderer === Wanderer.Vote) {
    return isVoteWandererNow();
  }

  if (wanderer === Wanderer.Familiar) {
    return (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("_hipsterAdv") < 7;
  }

  var begin = wanderer + " window begin";
  var end = wanderer + " window end";
  return !haveCounter(begin, 1) && haveCounter(end);
}
/**
 * Determines the chance the player will encounter a sausage goblin on the
 * next turn, providing the Kramco Sausage-o-Matic is equipped.
 *
 * @category Wanderers
 * @returns Chance that the sausage goblin is due (as a number between 0 and 1)
 */

function getKramcoWandererChance() {
  var fights = (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("_sausageFights");
  var lastFight = (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("_lastSausageMonsterTurn");
  var totalTurns = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.totalTurnsPlayed)();

  if (fights < 1) {
    return lastFight === totalTurns && (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myTurncount)() < 1 ? 0.5 : 1.0;
  }

  var turnsSinceLastFight = totalTurns - lastFight;
  return Math.min(1.0, (turnsSinceLastFight + 1) / (5 + fights * 3 + Math.pow(Math.max(0, fights - 5), 3)));
}
/**
 * Determines the chance the player will encounter an Artistic Goth Kid or
 * Mini-Hipster wanderer on the next turn, providing a familiar is equipped.
 *
 * NOTE: You must complete one combat with the Artistic Goth Kid before you
 * can encounter any wanderers. Consequently,ƒ the first combat with the
 * Artist Goth Kid is effectively 0% chance to encounter a wanderer.
 *
 * @category Wanderers
 * @returns Chance that the familiar wanderer is due (as a number between 0 and 1)
 */

function getFamiliarWandererChance() {
  var totalFights = (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("_hipsterAdv");
  var probability = [0.5, 0.4, 0.3, 0.2];

  if (totalFights < 4) {
    return probability[totalFights];
  }

  return totalFights > 7 ? 0.0 : 0.1;
}
/**
 * Determines the chance the player will encounter the specified wanderer
 * on the next turn.
 *
 * @category Wanderers
 * @param wanderer Wanderer to check
 * @returns Chance that the specified wanderer is due (as a number between 0 and 1)
 */

function getWandererChance(wanderer) {
  if (deterministicWanderers.includes(wanderer)) {
    return haveCounter(wanderer, 0, 0) ? 1.0 : 0.0;
  }

  if (wanderer === Wanderer.Kramco) {
    getKramcoWandererChance();
  }

  if (wanderer === Wanderer.Vote) {
    return isVoteWandererNow() ? 1.0 : 0.0;
  }

  if (wanderer === Wanderer.Familiar) {
    getFamiliarWandererChance();
  }

  var begin = wanderer + " window begin";
  var end = wanderer + " window end";

  if (haveCounter(begin, 1, 100)) {
    return 0.0;
  }

  var counters = (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("relayCounters");
  var re = new RegExp("(\\d+):" + end);
  var matches = counters.match(re);

  if (matches && matches.length === 2) {
    var window = Number.parseInt(matches[1]) - (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myTurncount)();
    return 1.0 / window;
  }

  return 0.0;
}
/**
 * Determines whether the player's current familiar is equal to the one supplied
 *
 * @category General
 * @param familiar Familiar to check
 * @returns Whether it is the player's current familiar
 */

function isCurrentFamiliar(familiar) {
  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myFamiliar)() === familiar;
}
/**
 * Determines the fold group (if any) of which the given item is a part
 *
 * @category General
 * @param item Item that is part of the required fold group
 * @returns List of items in the fold group
 */

function getFoldGroup(item) {
  return Object.entries((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getRelated)(item, "fold")).sort((_ref, _ref2) => {
    var _ref3 = _slicedToArray(_ref, 2),
        a = _ref3[1];

    var _ref4 = _slicedToArray(_ref2, 2),
        b = _ref4[1];

    return a - b;
  }).map(_ref5 => {
    var _ref6 = _slicedToArray(_ref5, 1),
        i = _ref6[0];

    return kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get(i);
  });
}
/**
 * Determines the zap group (if any) of which the given item is a part
 *
 * @category General
 * @param item Item that is part of the required zap group
 * @returns List of items in the zap group
 */

function getZapGroup(item) {
  return Object.keys((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getRelated)(item, "zap")).map(i => kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get(i));
}
/**
 * Get a map of banished monsters keyed by what banished them
 *
 * @category General
 * @returns Map of banished monsters
 */

function getBanishedMonsters() {
  var banishes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__/* .chunk */ .yo)((0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("banishedMonsters").split(":"), 3);
  var result = new Map();

  var _iterator = _createForOfIteratorHelper(banishes),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
          foe = _step$value[0],
          banisher = _step$value[1];

      if (foe === undefined || banisher === undefined) break; // toItem doesn"t error if the item doesn"t exist, so we have to use that.

      var banisherItem = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toItem)(banisher);

      if (banisher.toLowerCase() === "saber force") {
        result.set((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$skill */ .tm)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Use the Force"]))), kolmafia__WEBPACK_IMPORTED_MODULE_0__.Monster.get(foe));
      } else if (banisher.toLowerCase() === "nanorhino") {
        result.set((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$skill */ .tm)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Unleash Nanites"]))), kolmafia__WEBPACK_IMPORTED_MODULE_0__.Monster.get(foe));
      } else if ([kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.none, kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("training scroll:  Snokebomb"), kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("tomayohawk-style reflex hammer"), null].includes(banisherItem)) {
        if (kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get(banisher) === _template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$skill.none */ .tm.none) {
          break;
        } else {
          result.set(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get(banisher), kolmafia__WEBPACK_IMPORTED_MODULE_0__.Monster.get(foe));
        }
      } else {
        result.set(banisherItem, kolmafia__WEBPACK_IMPORTED_MODULE_0__.Monster.get(foe));
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return result;
}
/**
 * Determines whether the item is usable
 *
 * This function will be an ongoing work in progress
 *
 * @param item Item to check
 * @returns Whether item is usable
 */

function canUse(item) {
  var path = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myPath)();

  if (path !== kolmafia__WEBPACK_IMPORTED_MODULE_0__.Path.get("Nuclear Autumn")) {
    if ((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$items */ .vS)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Shrieking Weasel holo-record, Power-Guy 2000 holo-record, Lucky Strikes holo-record, EMD holo-record, Superdrifter holo-record, The Pigs holo-record, Drunk Uncles holo-record"]))).includes(item)) {
      return false;
    }
  }

  if (path === kolmafia__WEBPACK_IMPORTED_MODULE_0__.Path.get("G-Lover")) {
    if (!item.name.toLowerCase().includes("g")) return false;
  }

  if (path === kolmafia__WEBPACK_IMPORTED_MODULE_0__.Path.get("Bees Hate You")) {
    if (item.name.toLowerCase().includes("b")) return false;
  }

  return true;
}
/**
 * Turn KoLmafia `none`s to JavaScript `null`s
 *
 * @param thing Thing that can have a mafia "none" value
 * @returns The thing specified or `null`
 */

function noneToNull(thing) {
  if (thing instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Effect) {
    return thing === kolmafia__WEBPACK_IMPORTED_MODULE_0__.Effect.none ? null : thing;
  }

  if (thing instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Familiar) {
    return thing === kolmafia__WEBPACK_IMPORTED_MODULE_0__.Familiar.none ? null : thing;
  }

  if (thing instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item) {
    return thing === kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.none ? null : thing;
  }

  return thing;
}
/**
 * Determine the average value from the sort of range that KoLmafia encodes as a string
 *
 * @param range KoLmafia-style range string
 * @returns Average value fo range
 */

function getAverage(range) {
  var _range$match;

  if (range.indexOf("-") < 0) return Number(range);

  var _ref7 = (_range$match = range.match(/(-?[0-9]+)-(-?[0-9]+)/)) !== null && _range$match !== void 0 ? _range$match : ["0", "0", "0"],
      _ref8 = _slicedToArray(_ref7, 3),
      lower = _ref8[1],
      upper = _ref8[2];

  return (Number(lower) + Number(upper)) / 2;
}
/**
 * Deternube tge average adventures expected from consuming an Item
 *
 * If item is not a consumable, will just return "0".
 *
 * @param item Consumable item
 * @returns Average aventures from consumable
 */

function getAverageAdventures(item) {
  return getAverage(item.adventures);
}
/**
 * Remove an effect
 *
 * @category General
 * @param effect Effect to remove
 * @returns Success
 */

function uneffect(effect) {
  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("uneffect ".concat(effect.name));
}
/**
 * Get the player id from a player name (if it exists)
 * @param name the name of the player
 * @param onMissing Pass "throw" to throw an error if the player is not found, or "return-null" to return null
 * @returns the player id if the player exists, or handles according to onMissing
 */

function getPlayerIdFromName(name) {
  var onMissing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "throw";
  var playerId = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getPlayerId)(name); // KoLmafia returns the input when not found

  if (playerId === name) {
    if (onMissing === "throw") {
      throw new Error("Player not found: ".concat(name));
    }

    return null;
  }

  return parseInt(playerId);
}
/**
 * Get the player id from a player name (if it exists)
 * @param id the id of the player
 * @param onMissing Pass "throw" to throw an error if the player is not found, or "return-null" to return null
 * @returns the player id if the player exists, or handles according to onMissing
 */

function getPlayerNameFromId(id) {
  var onMissing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "throw";
  var playerName = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getPlayerName)(id); // KoLmafia returns the input when not found

  if (playerName === id.toString()) {
    if (onMissing === "throw") {
      throw new Error("Player not found: ".concat(playerName));
    }

    return null;
  }

  return playerName;
}
/**
 * Get both the name and id of a player from either their name or id
 *
 * @param idOrName Id or name of player
 * @param onMissing Pass "throw" to throw an error if the player is not found, or "return-null" to return null
 * @returns Object containing id and name of player if it exists, or handles according to onMissing
 */

function getPlayerFromIdOrName(idOrName) {
  var onMissing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "throw";

  if (typeof idOrName === "number") {
    var name = getPlayerNameFromId(idOrName, onMissing);
    if (name === null) return null;
    return {
      name: name,
      id: idOrName
    };
  } else {
    var id = getPlayerIdFromName(idOrName, onMissing);
    if (id === null) return null; // load from KoLmafia to get the right capitalization

    var _name = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getPlayerName)(id);

    return {
      name: _name,
      id: id
    };
  }
}
/**
 * Determine the step as a number for a given quest property.
 *
 * @param questName Name of quest property to check.
 * @returns Quest step
 */

function questStep(questName) {
  var stringStep = (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)(questName);
  if (stringStep === "unstarted") return -1;else if (stringStep === "started") return 0;else if (stringStep === "finished" || stringStep === "") return 999;else {
    if (stringStep.substring(0, 4) !== "step") {
      throw new Error("Quest state parsing error.");
    }

    return parseInt(stringStep.substring(4), 10);
  }
}
var EnsureError = /*#__PURE__*/function (_Error) {
  _inherits(EnsureError, _Error);

  var _super = _createSuper(EnsureError);

  function EnsureError(cause, reason) {
    var _this;

    _classCallCheck(this, EnsureError);

    _this = _super.call(this, "Failed to ensure ".concat(cause.name, "!").concat(reason ? " ".concat(reason) : ""));
    _this.name = "Ensure Error";
    return _this;
  }

  return _createClass(EnsureError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Tries to get an effect using the default method
 *
 * @param ef effect to try to get
 * @param turns turns to aim for; default of 1
 * @throws {EnsureError} Throws an error if the effect cannot be guaranteed
 */

function ensureEffect(ef) {
  var turns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveEffect)(ef) < turns) {
    if (ef.default === null) {
      throw new EnsureError(ef, "No default action");
    }

    if (!(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)(ef.default) || (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveEffect)(ef) === 0) {
      throw new EnsureError(ef);
    }
  }
}
var valueMap = new Map();
var MALL_VALUE_MODIFIER = 0.9;
/**
 * Determiens the average value (based on mallprice and autosell) of a collection of items
 *
 * @param items items whose value you care about
 * @returns Average value of items
 */

function getSaleValue() {
  for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
    items[_key] = arguments[_key];
  }

  return items.map(item => {
    if (valueMap.has(item)) return valueMap.get(item) || 0;

    if (item.discardable) {
      valueMap.set(item, (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.mallPrice)(item) > Math.max(2 * (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.autosellPrice)(item), 100) ? MALL_VALUE_MODIFIER * (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.mallPrice)(item) : (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.autosellPrice)(item));
    } else {
      valueMap.set(item, (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.mallPrice)(item) > 100 ? MALL_VALUE_MODIFIER * (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.mallPrice)(item) : 0);
    }

    return valueMap.get(item) || 0;
  }).reduce((s, price) => s + price, 0) / items.length;
}
var Environment = {
  Outdoor: "outdoor",
  Indoor: "indoor",
  Underground: "underground",
  Underwater: "underwater"
};
/**
 * Determines the weight-coefficient of any leprechaunning that this familiar may find itself doing
 * Assumes the familiar is nude and thus fails for hatrack & pantsrack
 * For the Mutant Cactus Bud, returns the efficacy-multiplier instead
 *
 * @param familiar The familiar whose leprechaun multiplier you're interested in
 * @returns Weight-coefficient
 */

function findLeprechaunMultiplier(familiar) {
  if (familiar === (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$familiar */ .HP)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Mutant Cactus Bud"])))) {
    return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.numericModifier)(familiar, "Leprechaun Effectiveness", 1, _template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item.none */ .xr.none);
  }

  if (familiar === (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$familiar */ .HP)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Reanimated Reanimator"])))) return 0;
  var meatBonus = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.numericModifier)(familiar, "Meat Drop", 1, _template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item.none */ .xr.none);
  if (meatBonus === 0) return 0;
  return Math.pow(Math.sqrt(meatBonus / 2 + 55 / 4 + 3) - Math.sqrt(55) / 2, 2);
}
/**
 * Determines the weight-coefficient of any baby gravy fairying that this familiar may find itself doing
 * Assumes the familiar is nude and thus fails for hatrack & pantsrack
 * For the Mutant Fire Ant, returns the efficacy-multiplier instead
 *
 * @param familiar The familiar whose fairy multiplier you're interested in
 * @returns Weight-coefficient
 */

function findFairyMultiplier(familiar) {
  if (familiar === (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$familiar */ .HP)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Mutant Fire Ant"])))) {
    return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.numericModifier)(familiar, "Fairy Effectiveness", 1, _template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item.none */ .xr.none);
  }

  if (familiar === (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$familiar */ .HP)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Reanimated Reanimator"])))) return 0;
  var itemBonus = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.numericModifier)(familiar, "Item Drop", 1, _template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item.none */ .xr.none);
  if (itemBonus === 0) return 0;
  return Math.pow(Math.sqrt(itemBonus + 55 / 4 + 3) - Math.sqrt(55) / 2, 2);
}
var holidayWanderers = new Map([["El Dia De Los Muertos Borrachos", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$monsters */ .fr)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Novia Cad\xE1ver, Novio Cad\xE1ver, Padre Cad\xE1ver, Persona Inocente Cad\xE1ver"])))], ["Feast of Boris", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$monsters */ .fr)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["Candied Yam Golem, Malevolent Tofurkey, Possessed Can of Cranberry Sauce, Stuffing Golem"])))], ["Talk Like a Pirate Day", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$monsters */ .fr)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["ambulatory pirate, migratory pirate, peripatetic pirate"])))]]);
/**
 * Get today's holiday wanderers
 *
 * @returns List of holiday wanderer Monsters
 */

function getTodaysHolidayWanderers() {
  return (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__/* .flat */ .$H)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.holiday)().split("/").map(holiday => {
    var _holidayWanderers$get;

    return (_holidayWanderers$get = holidayWanderers.get(holiday)) !== null && _holidayWanderers$get !== void 0 ? _holidayWanderers$get : [];
  }));
}
/**
 * Determines whether or not we can safely call visitUrl(), based on whether we're in a fight, multi-fight, choice, etc
 *
 * @returns Whether urls can be safely visited
 */

function canVisitUrl() {
  if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.currentRound)()) {
    _logger_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].debug */ .Z.debug("Current round is ".concat((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.currentRound)(), "; you're in combat."));
    return false;
  }

  if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.inMultiFight)()) {
    _logger_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].debug */ .Z.debug("You're in a multifight.");
    return false;
  }

  if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.choiceFollowsFight)()) {
    _logger_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].debug */ .Z.debug("A choice follows this fight.");
    return false;
  }

  if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.handlingChoice)()) {
    _logger_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].debug */ .Z.debug("You're currently in a choice adventure");
    return false;
  }

  return true;
}
/**
 * Calculate damage taken from a specific element after factoring in resistance
 *
 * @param baseDamage Base damage
 * @param element Element
 * @returns damage after factoring in resistances
 */

function damageTakenByElement(baseDamage, element) {
  if (baseDamage < 0) return 1;
  var res = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.elementalResistance)(element);
  return Math.max(1, Math.ceil(baseDamage - baseDamage * res / 100));
}
var telescopeStats = new Map([["standing around flexing their muscles and using grip exercisers", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$stat */ .Ri)(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["Muscle"])))], ["sitting around playing chess and solving complicated-looking logic puzzles", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$stat */ .Ri)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["Mysticality"])))], ["all wearing sunglasses and dancing", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$stat */ .Ri)(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["Moxie"])))]]);
var telescopeElements = new Map([["people, all of whom appear to be on fire", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["hot"])))], ["people, surrounded by a cloud of eldritch mist", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["spooky"])))], ["greasy-looking people furtively skulking around", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["sleaze"])))], ["people, surrounded by garbage and clouds of flies", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["stench"])))], ["people, clustered around a group of igloos", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["cold"])))]]);
var hedgeTrap1 = new Map([["smoldering bushes on the outskirts of a hedge maze", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["hot"])))], ["creepy-looking black bushes on the outskirts of a hedge maze", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["spooky"])))], ["purplish, greasy-looking hedges", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["sleaze"])))], ["nasty-looking, dripping green bushes on the outskirts of a hedge maze", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["stench"])))], ["frost-rimed bushes on the outskirts of a hedge maze", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["cold"])))]]);
var hedgeTrap2 = new Map([["smoke rising from deeper within the maze", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["hot"])))], ["a miasma of eldritch vapors rising from deeper within the maze", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["spooky"])))], ["a greasy purple cloud hanging over the center of the maze", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["sleaze"])))], ["a cloud of green gas hovering over the maze", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["stench"])))], ["wintry mists rising from deeper within the maze", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["cold"])))]]);
var hedgeTrap3 = new Map([["with lava slowly oozing out of it", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["hot"])))], ["surrounded by creepy black mist", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["spooky"])))], ["that occasionally vomits out a greasy ball of hair", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["sleaze"])))], ["disgorging a really surprising amount of sewage", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["stench"])))], ["occasionally disgorging a bunch of ice cubes", (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$element */ .SS)(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["cold"])))]]);
/**
 * Get information from telescope
 *
 * @returns An object with all information the telescope gives you about the sorceress's contests and maze
 */

function telescope() {
  return Object.fromEntries(Object.entries({
    statContest: telescopeStats.get((0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("telescope1")),
    elementContest: telescopeElements.get((0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("telescope2")),
    hedge1: hedgeTrap1.get((0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("telescope3")),
    hedge2: hedgeTrap2.get((0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("telescope4")),
    hedge3: hedgeTrap3.get((0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("telescope5"))
  }).filter(_ref9 => {
    var _ref10 = _slicedToArray(_ref9, 2),
        value = _ref10[1];

    return value;
  }));
}
/**
 * Visit the desc_x.php page for a given thing
 *
 * @param thing Thing to examine
 * @returns Contents of desc_x.php page
 */

function examine(thing) {
  var url = thing instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item ? "desc_item.php?whichitem=".concat(thing.descid) : thing instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Familiar ? "desc_familiar.php?which=".concat(thing.id) : thing instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Effect ? "desc_effect.php?whicheffect=".concat(thing.descid) : "desc_skill.php?whichskill=".concat(thing.id);
  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)(url);
}
/**
 * Picks an option based on your primestat
 *
 * @param options An object keyed by stat; it must either contain all stats, or have a `default` parameter.
 * @param alternateSource An optional alternate way of determining which Stat to choose by.
 * @returns The option corresponding to your primestat.
 */

var byStat = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__/* .makeByXFunction */ .Qg)(() => (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myPrimestat)().toString());
/**
 * Picks an option based on your player class
 *
 * @param options An object keyed by player class; it must either contain all classes, or have a `default` parameter.
 * @param alternateSource An optional anternate way of determining which Class to choose by.
 * @returns The option corresponding to your player class.
 */

var byClass = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__/* .makeByXFunction */ .Qg)(() => (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myClass)().toString());
/**
 * Use an item with visitUrl instead of `use`; this is sometimes useful
 *
 * @param item The item you want to use
 * @returns The html of the resulting page
 */

function directlyUse(item) {
  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("inv_use.php?which=3&whichitem=".concat(item.id, "&pwd"));
}
/**
 * Empty a slot, or unequip all instances of a given equipped item
 *
 * @param thing The slot or item in question
 * @returns Whether we succeeded completely--`false` if we unequip some but not all instances of the item.
 */

function unequip(thing) {
  if (thing instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Slot) return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equip)(thing, _template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item.none */ .xr.none);
  var failedSlots = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Slot.all().filter(s => {
    // Filter the slot out if it doesn't contain the relevant item
    if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equippedItem)(s) !== thing) return false; // Filter the slot out if we succeed at unequipping it

    return !unequip(thing); // This leaves only slots that do contain the item but that we failed to unequip
  });
  if (failedSlots.length) _logger_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"].debug */ .Z.debug("Failed to unequip ".concat(thing, " from slots ").concat(failedSlots.join(", ")));
  return failedSlots.length === 0;
}
/**
 * @returns a Date object corresponding to the current in-game day, at midnight
 */

function gameDay() {
  var _todayToString$match;

  var _map = ((_todayToString$match = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.todayToString)().match(/(\d{4})(\d{2})(\d{2})/)) !== null && _todayToString$match !== void 0 ? _todayToString$match : []).map(Number),
      _map2 = _slicedToArray(_map, 4),
      year = _map2[1],
      month = _map2[2],
      day = _map2[3];

  return new Date(year, month - 1, day, 0, 0, 0);
}
/**
 * @param [type="all"] the type of crafting to check for free crafts
 * @returns the number of free crafts available of that type
 */

function freeCrafts() {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "all";

  var effectCrafts = effect => Math.floor((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveEffect)(effect) / 5);

  var all = (have((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$skill */ .tm)(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral(["Rapid Prototyping"])))) ? 5 - (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("_rapidPrototypingUsed") : 0) + (have((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$skill */ .tm)(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral(["Expert Corner-Cutter"])))) ? 5 - (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("_expertCornerCutterUsed") : 0) + effectCrafts((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$effect */ ._G)(_templateObject37 || (_templateObject37 = _taggedTemplateLiteral(["Inigo's Incantation of Inspiration"])))) + effectCrafts((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$effect */ ._G)(_templateObject38 || (_templateObject38 = _taggedTemplateLiteral(["Craft Tea"])))) + // eslint-disable-next-line libram/verify-constants
  effectCrafts((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$effect */ ._G)(_templateObject39 || (_templateObject39 = _taggedTemplateLiteral(["Cooking Concentrate"]))));
  var food = type === "food" ? 5 - (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("_cookbookbatCrafting") : 0;
  var smith = type === "smith" ? 5 - (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("_thorsPliersCrafting") : 0;
  var booze = 0; // currently there is no booze specific free crafting skill

  return all + food + smith + booze;
}
var realmTypes = ["spooky", "stench", "hot", "cold", "sleaze", "fantasy", "pirate"];
/**
 * @param identifier which realm to check for
 * @returns if that realm is available
 */

function realmAvailable(identifier) {
  if (identifier === "fantasy") {
    return (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("_frToday") || (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("frAlways");
  } else if (identifier === "pirate") {
    return (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("_prToday") || (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("prAlways");
  }

  return (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("_".concat(identifier, "AirportToday")) || (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("".concat(identifier, "AirportAlways"));
}
/**
 * Compute the currently available Lucky Gold Ring Currencies
 * @param realm the realm type to consider
 * @returns The currency for the given zone
 */

function realmCurrency(realm) {
  switch (realm) {
    case "sleaze":
      return (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject40 || (_templateObject40 = _taggedTemplateLiteral(["Beach Buck"])));

    case "spooky":
      return (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject41 || (_templateObject41 = _taggedTemplateLiteral(["Coinspiracy"])));

    case "stench":
      return (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject42 || (_templateObject42 = _taggedTemplateLiteral(["FunFunds\u2122"])));

    case "cold":
      return (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject43 || (_templateObject43 = _taggedTemplateLiteral(["Wal-Mart gift certificate"])));

    case "hot":
      return (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject44 || (_templateObject44 = _taggedTemplateLiteral(["Volcoino"])));

    case "fantasy":
      return (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject45 || (_templateObject45 = _taggedTemplateLiteral(["Rubee\u2122"])));

    default:
      return null;
  }
}
/**
 * Compute which Lucky Gold Ring currencies are currently available
 * @returns a list of currently available currencies
 */

function lgrCurrencies() {
  return realmTypes.filter(realm => realmAvailable(realm) && !(realm === "hot" && (0,_property_js__WEBPACK_IMPORTED_MODULE_2__.get)("_luckyGoldRingVolcoino"))).map(realmCurrency).filter(_utils_js__WEBPACK_IMPORTED_MODULE_3__/* .notNull */ .Nf);
}
var ACCOUNT_COMBAT_FLAGS = ["aabosses", "wowbar", "bothcombatinterf", "compactmanuel", "eternalmrj", "disablelovebugs", "boringdarts"];
/**
 * Get the current value of all of your account's combat setting flags
 * @param flags An array of the flags you want to get, defaults to all of them
 * @returns An array of objects that contain the flags and their values as booleans
 */

function getCombatFlags() {
  var flags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [].concat(ACCOUNT_COMBAT_FLAGS);
  var accountPage = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("account.php?tab=combat");
  return flags.map(flag => ({
    flag: flag,
    value: (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.xpath)(accountPage, "//*[@id=\"opt_flag_".concat(flag, "\"]/label/input[@type='checkbox']@checked"))[0] === "checked"
  }));
}
/**
 * Sets the given combat setting flags on your account
 *
 * @param flags A spread array of objects that contain a flag and its desired value; these look like the return value of `getCombatFlags`
 * @returns the result of the associated `visitUrl` call
 */

function setCombatFlags() {
  for (var _len2 = arguments.length, flags = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    flags[_key2] = arguments[_key2];
  }

  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("account.php?".concat(([].concat(_toConsumableArray((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__/* .flat */ .$H)(flags.map(_ref11 => {
    var flag = _ref11.flag,
        value = _ref11.value;
    return ["actions[]=flag_".concat(flag), "flag_".concat(flag, "=").concat(Number(value))];
  }))), ["action=Update", "am=1", "ajax=1"]).join("&"), true)));
}
/**
 * Perform a given action with certain combat setting flags set, returning them to their initial values if possible
 *
 * @param action The action you want to do with the given combat setting flags
 * @param flags A spread array of objects that contain a combat setting flag and its desired value; these look like the return value of `getCombatFlags`
 * @returns The result of the action
 */

function withCombatFlags(action) {
  for (var _len3 = arguments.length, flags = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    flags[_key3 - 1] = arguments[_key3];
  }

  var initialValues = getCombatFlags(flags.map(_ref12 => {
    var flag = _ref12.flag;
    return flag;
  }));

  try {
    return action();
  } finally {
    setCombatFlags.apply(void 0, _toConsumableArray(initialValues));
  }
}
/**
 * Determines whether you currently have an effect intrinsically
 * @param effect The effect in question
 * @returns Whether you have that effect as an intrinsic. Alternately you could just have over 2147483647 turns of that effect, but that seems unlikely.
 */

function haveIntrinsic(effect) {
  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveEffect)(effect) >= 2147483647;
}
/**
 * Extracts a map of gained items from a string, for example from the result
 * of a combat.
 *
 * NOTE: Make sure you trust the source of that text.
 *
 * @param text The text to extract items from
 * @returns A map of items and their quantities
 */

function extractItems(text) {
  return new Map(Object.entries((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.extractItems)(text)).map(_ref13 => {
    var _ref14 = _slicedToArray(_ref13, 2),
        itemName = _ref14[0],
        quantity = _ref14[1];

    return [kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get(itemName), quantity];
  }));
}

/***/ }),

/***/ 167:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* unused harmony export LogLevels */
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
var _defaultHandlers;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


var LogLevels;

(function (LogLevels) {
  LogLevels[LogLevels["NONE"] = 0] = "NONE";
  LogLevels[LogLevels["ERROR"] = 1] = "ERROR";
  LogLevels[LogLevels["WARNING"] = 2] = "WARNING";
  LogLevels[LogLevels["INFO"] = 3] = "INFO";
  LogLevels[LogLevels["DEBUG"] = 4] = "DEBUG";
})(LogLevels || (LogLevels = {}));

var defaultHandlers = (_defaultHandlers = {}, _defineProperty(_defaultHandlers, LogLevels.INFO, message => {
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.printHtml)("<b>[Libram Info]</b> ".concat(message));
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.logprint)("[Libram] ".concat(message));
  return;
}), _defineProperty(_defaultHandlers, LogLevels.WARNING, message => {
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.printHtml)("<span style=\"background: orange; color: white;\"><b>[Libram Warning]</b> ".concat(message, "</span>"));
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.logprint)("[Libram] ".concat(message));
  return;
}), _defineProperty(_defaultHandlers, LogLevels.ERROR, error => {
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.printHtml)("<span style=\"background: red; color: white;\"><b>[Libram Error]</b> ".concat(error.toString(), "</span>"));
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.logprint)("[Libram] ".concat(error));
  return;
}), _defineProperty(_defaultHandlers, LogLevels.DEBUG, message => {
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.printHtml)("<span style=\"background: red; color: white;\"><b>[Libram Debug]</b> ".concat(message, "</span>"));
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.logprint)("[Libram] ".concat(message));
  return;
}), _defaultHandlers);

var Logger = /*#__PURE__*/function () {
  function Logger() {
    _classCallCheck(this, Logger);

    _defineProperty(this, "handlers", defaultHandlers);
  }

  _createClass(Logger, [{
    key: "level",
    get: function get() {
      return Logger.currentLevel;
    }
  }, {
    key: "setLevel",
    value: function setLevel(level) {
      Logger.currentLevel = level;
    }
  }, {
    key: "setHandler",
    value: function setHandler(level, callback) {
      this.handlers[level] = callback;
    } // eslint-disable-next-line @typescript-eslint/no-explicit-any

  }, {
    key: "log",
    value: function log(level, message) {
      if (this.level >= level) this.handlers[level](message);
    }
  }, {
    key: "info",
    value: function info(message) {
      this.log(LogLevels.INFO, message);
    }
  }, {
    key: "warning",
    value: function warning(message) {
      this.log(LogLevels.WARNING, message);
    }
  }, {
    key: "error",
    value: function error(message) {
      this.log(LogLevels.ERROR, message);
    }
  }, {
    key: "debug",
    value: function debug(message) {
      this.log(LogLevels.DEBUG, message);
    }
  }]);

  return Logger;
}();

_defineProperty(Logger, "currentLevel", LogLevels.ERROR);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Logger());

/***/ }),

/***/ 627:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Gh": () => (/* binding */ getCurrentModes),
/* harmony export */   "Rv": () => (/* binding */ modeableState),
/* harmony export */   "_C": () => (/* binding */ setDefaultMaximizeOptions),
/* harmony export */   "kB": () => (/* binding */ maximizeCached),
/* harmony export */   "kx": () => (/* binding */ clearMaximizerCache),
/* harmony export */   "ls": () => (/* binding */ applyModes),
/* harmony export */   "mD": () => (/* binding */ modeableItems),
/* harmony export */   "nb": () => (/* binding */ Requirement),
/* harmony export */   "zj": () => (/* binding */ mergeMaximizeOptions)
/* harmony export */ });
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(71);
/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(167);
/* harmony import */ var _template_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(328);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(130);
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38, _templateObject39, _templateObject40, _templateObject41, _templateObject42, _templateObject43, _templateObject44, _templateObject45, _templateObject46, _templateObject47, _templateObject48, _templateObject49, _templateObject50;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }







function toMaximizerName(_ref) {
  var name = _ref.name,
      id = _ref.id;
  return name.includes(";") ? "\xB6".concat(id) : name;
}
/**
 * Merges a partial set of maximizer options onto a full set maximizer options. We merge via overriding for all boolean properties and for onlySlot, and concat all other array properties.
 *
 * @param defaultOptions MaximizeOptions to use as a "base."
 * @param addendums Options to attempt to merge onto defaultOptions.
 * @returns Merged maximizer options
 */


function mergeMaximizeOptions(defaultOptions, addendums) {
  var _addendums$updateOnFa, _addendums$updateOnCa, _addendums$useOutfitC, _addendums$forceEquip, _addendums$preventEqu, _addendums$bonusEquip, _addendums$onlySlot, _addendums$preventSlo, _addendums$forceUpdat, _addendums$modes;

  return {
    updateOnFamiliarChange: (_addendums$updateOnFa = addendums.updateOnFamiliarChange) !== null && _addendums$updateOnFa !== void 0 ? _addendums$updateOnFa : defaultOptions.updateOnFamiliarChange,
    updateOnCanEquipChanged: (_addendums$updateOnCa = addendums.updateOnCanEquipChanged) !== null && _addendums$updateOnCa !== void 0 ? _addendums$updateOnCa : defaultOptions.updateOnCanEquipChanged,
    useOutfitCaching: (_addendums$useOutfitC = addendums.useOutfitCaching) !== null && _addendums$useOutfitC !== void 0 ? _addendums$useOutfitC : defaultOptions.useOutfitCaching,
    forceEquip: [].concat(_toConsumableArray(defaultOptions.forceEquip), _toConsumableArray((_addendums$forceEquip = addendums.forceEquip) !== null && _addendums$forceEquip !== void 0 ? _addendums$forceEquip : [])),
    preventEquip: [].concat(_toConsumableArray(defaultOptions.preventEquip), _toConsumableArray((_addendums$preventEqu = addendums.preventEquip) !== null && _addendums$preventEqu !== void 0 ? _addendums$preventEqu : [])).filter(item => {
      var _addendums$forceEquip2;

      return !defaultOptions.forceEquip.includes(item) && !((_addendums$forceEquip2 = addendums.forceEquip) !== null && _addendums$forceEquip2 !== void 0 && _addendums$forceEquip2.includes(item));
    }),
    bonusEquip: new Map([].concat(_toConsumableArray(defaultOptions.bonusEquip), _toConsumableArray((_addendums$bonusEquip = addendums.bonusEquip) !== null && _addendums$bonusEquip !== void 0 ? _addendums$bonusEquip : []))),
    onlySlot: (_addendums$onlySlot = addendums.onlySlot) !== null && _addendums$onlySlot !== void 0 ? _addendums$onlySlot : defaultOptions.onlySlot,
    preventSlot: [].concat(_toConsumableArray(defaultOptions.preventSlot), _toConsumableArray((_addendums$preventSlo = addendums.preventSlot) !== null && _addendums$preventSlo !== void 0 ? _addendums$preventSlo : [])),
    forceUpdate: (_addendums$forceUpdat = addendums.forceUpdate) !== null && _addendums$forceUpdat !== void 0 ? _addendums$forceUpdat : defaultOptions.forceUpdate,
    modes: _objectSpread(_objectSpread({}, defaultOptions.modes), (_addendums$modes = addendums.modes) !== null && _addendums$modes !== void 0 ? _addendums$modes : {})
  };
}
var defaultMaximizeOptions = {
  updateOnFamiliarChange: true,
  updateOnCanEquipChanged: true,
  useOutfitCaching: true,
  forceEquip: [],
  preventEquip: [],
  bonusEquip: new Map(),
  onlySlot: [],
  preventSlot: [],
  forceUpdate: false,
  modes: {}
};
/**
 *
 * @param options Default options for each maximizer run.
 * @param options.updateOnFamiliarChange Re-run the maximizer if familiar has changed. Default true.
 * @param options.updateOnCanEquipChanged Re-run the maximizer if stats have changed what can be equipped. Default true.
 * @param options.forceEquip Equipment to force-equip ("equip X").
 * @param options.preventEquip Equipment to prevent equipping ("-equip X").
 * @param options.bonusEquip Equipment to apply a bonus to ("200 bonus X").
 */

function setDefaultMaximizeOptions(options) {
  Object.assign(defaultMaximizeOptions, options);
}
var modeableCommands = ["backupcamera", "umbrella", "snowsuit", "edpiece", "retrocape", "parka", "jillcandle"];
var modeableItems = {
  backupcamera: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject || (_templateObject = _taggedTemplateLiteral(["backup camera"]))),
  umbrella: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["unbreakable umbrella"]))),
  snowsuit: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Snow Suit"]))),
  edpiece: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["The Crown of Ed the Undying"]))),
  retrocape: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["unwrapped knock-off retro superhero cape"]))),
  parka: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Jurassic Parka"]))),
  jillcandle: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["LED candle"])))
};
var modeableState = {
  backupcamera: () => (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("backupCameraMode"),
  umbrella: () => (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("umbrellaState"),
  snowsuit: () => (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("snowsuit"),
  edpiece: () => (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("edPiece"),
  retrocape: () => (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("retroCapeSuperhero") + " " + (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("retroCapeWashingInstructions"),
  parka: () => (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("parkaMode"),
  jillcandle: () => (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("ledCandleMode")
};
/**
 * Get set of current modes for modeables
 *
 * @returns Set of modes
 */

function getCurrentModes() {
  var modes = {};

  var _iterator = _createForOfIteratorHelper(modeableCommands),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var key = _step.value;

      if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveEquipped)(modeableItems[key])) {
        modes[key] = modeableState[key]();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return modes;
}
/**
 * Apply set of modes
 *
 * @param modes Modes to apply
 */

function applyModes(modes) {
  var _iterator2 = _createForOfIteratorHelper(modeableCommands),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var command = _step2.value;

      if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveEquipped)(modeableItems[command]) && modes[command] !== undefined) {
        if (modeableState[command]() !== modes[command]) {
          (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)(command + " " + modes[command]);
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
} // Subset of slots that are valid for caching.

var cachedSlots = (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slots */ .ei)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["hat, weapon, off-hand, back, shirt, pants, acc1, acc2, acc3, familiar"])));

var CacheEntry = /*#__PURE__*/_createClass(function CacheEntry(equipment, rider, familiar, canEquipItemCount, modes) {
  _classCallCheck(this, CacheEntry);

  _defineProperty(this, "equipment", void 0);

  _defineProperty(this, "rider", void 0);

  _defineProperty(this, "familiar", void 0);

  _defineProperty(this, "canEquipItemCount", void 0);

  _defineProperty(this, "modes", void 0);

  this.equipment = equipment;
  this.rider = rider;
  this.familiar = familiar;
  this.canEquipItemCount = canEquipItemCount;
  this.modes = modes;
});

var _outfitSlots = /*#__PURE__*/new WeakMap();

var _useHistory = /*#__PURE__*/new WeakMap();

var _maxSize = /*#__PURE__*/new WeakMap();

var OutfitLRUCache = /*#__PURE__*/function () {
  // Current outfits allocated
  // Array of indices into #outfitSlots in order of use. Most recent at the front.
  function OutfitLRUCache(maxSize) {
    _classCallCheck(this, OutfitLRUCache);

    _classPrivateFieldInitSpec(this, _outfitSlots, {
      writable: true,
      value: []
    });

    _classPrivateFieldInitSpec(this, _useHistory, {
      writable: true,
      value: []
    });

    _classPrivateFieldInitSpec(this, _maxSize, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _maxSize, maxSize);
  }

  _createClass(OutfitLRUCache, [{
    key: "checkConsistent",
    value: function checkConsistent() {
      if (_classPrivateFieldGet(this, _useHistory).length !== _classPrivateFieldGet(this, _outfitSlots).length || !_toConsumableArray(_classPrivateFieldGet(this, _useHistory)).sort().every((value, index) => value === index)) {
        throw new Error("Outfit cache consistency failed.");
      }
    }
  }, {
    key: "promote",
    value: function promote(index) {
      _classPrivateFieldSet(this, _useHistory, [index].concat(_toConsumableArray(_classPrivateFieldGet(this, _useHistory).filter(i => i !== index))));

      this.checkConsistent();
    }
  }, {
    key: "get",
    value: function get(key) {
      var index = _classPrivateFieldGet(this, _outfitSlots).indexOf(key);

      if (index < 0) return undefined;
      this.promote(index);
      return "".concat(OutfitLRUCache.OUTFIT_PREFIX, " ").concat(index);
    }
  }, {
    key: "insert",
    value: function insert(key) {
      var lastUseIndex = undefined;

      if (_classPrivateFieldGet(this, _outfitSlots).length >= _classPrivateFieldGet(this, _maxSize)) {
        lastUseIndex = _classPrivateFieldGet(this, _useHistory).pop();

        if (lastUseIndex === undefined) {
          throw new Error("Outfit cache consistency failed.");
        }

        _classPrivateFieldGet(this, _useHistory).splice(0, 0, lastUseIndex);

        _classPrivateFieldGet(this, _outfitSlots)[lastUseIndex] = key;
        this.checkConsistent();
        return "".concat(OutfitLRUCache.OUTFIT_PREFIX, " ").concat(lastUseIndex);
      } else {
        var index = _classPrivateFieldGet(this, _outfitSlots).push(key) - 1;

        _classPrivateFieldGet(this, _useHistory).splice(0, 0, index);

        this.checkConsistent();
        return "".concat(OutfitLRUCache.OUTFIT_PREFIX, " ").concat(index);
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      _classPrivateFieldSet(this, _outfitSlots, []);

      _classPrivateFieldSet(this, _useHistory, []);
    }
  }]);

  return OutfitLRUCache;
}();
/**
 * Save current equipment as KoL-native outfit.
 *
 * @param name Name of new outfit.
 */


_defineProperty(OutfitLRUCache, "OUTFIT_PREFIX", "Script Outfit");

function saveOutfit(name) {
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("outfit save ".concat(name));
} // Objective cache entries.


var cachedObjectives = {}; // Outfit cache entries. Keep 6 by default to avoid cluttering list.

var outfitCache = new OutfitLRUCache(6); // Cache to prevent rescanning all items unnecessarily

var cachedStats = [0, 0, 0];
var cachedCanEquipItemCount = 0;
/**
 * Count the number of unique items that can be equipped.
 *
 * @returns The count of unique items.
 */

function canEquipItemCount() {
  var stats = (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$stats */ .gw)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Muscle, Mysticality, Moxie"]))).map(stat => Math.min((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myBasestat)(stat), 300));

  if (stats.every((value, index) => value === cachedStats[index])) {
    return cachedCanEquipItemCount;
  }

  cachedStats = stats;
  cachedCanEquipItemCount = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.all().filter(item => (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.canEquip)(item)).length;
  return cachedCanEquipItemCount;
}
/**
 * Checks the objective cache for a valid entry.
 *
 * @param cacheKey The cache key to check.
 * @param options Set of maximizer options
 * @returns A valid CacheEntry or null.
 */


function checkCache(cacheKey, options) {
  var entry = cachedObjectives[cacheKey];

  if (!entry) {
    return null;
  }

  if (options.updateOnFamiliarChange && (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myFamiliar)() !== entry.familiar) {
    _logger_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].warning */ .Z.warning("Equipment found in maximize cache but familiar is different.");
    return null;
  }

  if (options.updateOnCanEquipChanged && entry.canEquipItemCount !== canEquipItemCount()) {
    _logger_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].warning */ .Z.warning("Equipment found in maximize cache but equippable item list is out of date.");
    return null;
  }

  return entry;
}
/**
 * Applies equipment that was found in the cache.
 *
 * @param entry The CacheEntry to apply
 * @param options Set of maximizer options
 */


function applyCached(entry, options) {
  var outfitName = options.useOutfitCaching ? outfitCache.get(entry) : undefined;

  if (outfitName) {
    if (!(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.isWearingOutfit)(outfitName)) {
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.outfit)(outfitName);
    }

    var familiarEquip = entry.equipment.get((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slot */ .Jh)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["familiar"]))));
    if (familiarEquip) (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equip)((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slot */ .Jh)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["familiar"]))), familiarEquip);
  } else {
    var _iterator3 = _createForOfIteratorHelper(entry.equipment),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _step3$value = _slicedToArray(_step3.value, 2),
            slot = _step3$value[0],
            item = _step3$value[1];

        if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equippedItem)(slot) !== item && (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(item) > 0) {
          (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equip)(slot, item);
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    if (verifyCached(entry) && options.useOutfitCaching) {
      var _outfitName = outfitCache.insert(entry);

      _logger_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].info */ .Z.info("Saving equipment to outfit ".concat(_outfitName, "."));
      saveOutfit(_outfitName);
    }
  }

  if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equippedAmount)((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["Crown of Thrones"])))) > 0 && entry.rider.get((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["Crown of Thrones"]))))) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.enthroneFamiliar)(entry.rider.get((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["Crown of Thrones"])))) || _template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$familiar.none */ .HP.none);
  }

  if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equippedAmount)((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["Buddy Bjorn"])))) > 0 && entry.rider.get((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["Buddy Bjorn"]))))) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.bjornifyFamiliar)(entry.rider.get((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["Buddy Bjorn"])))) || _template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$familiar.none */ .HP.none);
  }

  applyModes(_objectSpread(_objectSpread({}, entry.modes), options.modes));
}

var slotStructure = [(0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slots */ .ei)(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["hat"]))), (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slots */ .ei)(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["back"]))), (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slots */ .ei)(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["shirt"]))), (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slots */ .ei)(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["weapon, off-hand"]))), (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slots */ .ei)(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["pants"]))), (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slots */ .ei)(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["acc1, acc2, acc3"]))), (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slots */ .ei)(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["familiar"])))];
/**
 * Verifies that a CacheEntry was applied successfully.
 *
 * @param entry The CacheEntry to verify
 * @param warn Whether to warn if the cache could not be applied
 * @returns If all desired equipment was appliedn in the correct slots.
 */

function verifyCached(entry) {
  var warn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var success = true;

  var _iterator4 = _createForOfIteratorHelper(slotStructure),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var slotGroup = _step4.value;
      var desiredSlots = slotGroup.map(slot => {
        var _entry$equipment$get;

        return [slot, (_entry$equipment$get = entry.equipment.get(slot)) !== null && _entry$equipment$get !== void 0 ? _entry$equipment$get : null];
      }).filter(_ref2 => {
        var _ref3 = _slicedToArray(_ref2, 2),
            item = _ref3[1];

        return item !== null;
      });
      var desiredSet = desiredSlots.map(_ref4 => {
        var _ref5 = _slicedToArray(_ref4, 2),
            item = _ref5[1];

        return item;
      });
      var equippedSet = desiredSlots.map(_ref6 => {
        var _ref7 = _slicedToArray(_ref6, 1),
            slot = _ref7[0];

        return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equippedItem)(slot);
      });

      if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__/* .setEqual */ .$x)(desiredSet, equippedSet)) {
        if (warn) {
          _logger_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].warning */ .Z.warning("Failed to apply cached ".concat(desiredSet.join(", "), " in ").concat(slotGroup.join(", "), "."));
        }

        success = false;
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equippedAmount)((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["Crown of Thrones"])))) > 0 && entry.rider.get((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["Crown of Thrones"]))))) {
    if (entry.rider.get((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["Crown of Thrones"])))) !== (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myEnthronedFamiliar)()) {
      if (warn) {
        _logger_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].warning */ .Z.warning("Failed to apply ".concat(entry.rider.get((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["Crown of Thrones"])))), " in ").concat((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["Crown of Thrones"]))), "."));
      }

      success = false;
    }
  }

  if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equippedAmount)((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["Buddy Bjorn"])))) > 0 && entry.rider.get((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["Buddy Bjorn"]))))) {
    if (entry.rider.get((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["Buddy Bjorn"])))) !== (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myBjornedFamiliar)()) {
      if (warn) {
        _logger_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].warning */ .Z.warning("Failed to apply".concat(entry.rider.get((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["Buddy Bjorn"])))), " in ").concat((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["Buddy Bjorn"]))), "."));
      }

      success = false;
    }
  }

  return success;
}
/**
 * Save current equipment to the objective cache.
 *
 * @param cacheKey The cache key to save.
 * @param options Set of maximizer options
 */


function saveCached(cacheKey, options) {
  var equipment = new Map();
  var rider = new Map();

  var _iterator5 = _createForOfIteratorHelper(cachedSlots),
      _step5;

  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var _slot2 = _step5.value;
      equipment.set(_slot2, (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equippedItem)(_slot2));
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }

  if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equippedAmount)((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral(["card sleeve"])))) > 0) {
    equipment.set((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slot */ .Jh)(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral(["card-sleeve"]))), (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equippedItem)((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slot */ .Jh)(_templateObject37 || (_templateObject37 = _taggedTemplateLiteral(["card-sleeve"])))));
  }

  if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equippedAmount)((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject38 || (_templateObject38 = _taggedTemplateLiteral(["Crown of Thrones"])))) > 0) {
    rider.set((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject39 || (_templateObject39 = _taggedTemplateLiteral(["Crown of Thrones"]))), (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myEnthronedFamiliar)());
  }

  if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equippedAmount)((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject40 || (_templateObject40 = _taggedTemplateLiteral(["Buddy Bjorn"])))) > 0) {
    rider.set((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject41 || (_templateObject41 = _taggedTemplateLiteral(["Buddy Bjorn"]))), (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myBjornedFamiliar)());
  }

  if (options.preventSlot && options.preventSlot.length > 0) {
    var _iterator6 = _createForOfIteratorHelper(options.preventSlot),
        _step6;

    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var slot = _step6.value;
        equipment.delete(slot);
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }

    if (options.preventSlot.includes((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slot */ .Jh)(_templateObject42 || (_templateObject42 = _taggedTemplateLiteral(["buddy-bjorn"]))))) {
      rider.delete((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject43 || (_templateObject43 = _taggedTemplateLiteral(["Buddy Bjorn"]))));
    }

    if (options.preventSlot.includes((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slot */ .Jh)(_templateObject44 || (_templateObject44 = _taggedTemplateLiteral(["crown-of-thrones"]))))) {
      rider.delete((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject45 || (_templateObject45 = _taggedTemplateLiteral(["Crown of Thrones"]))));
    }
  }

  if (options.onlySlot && options.onlySlot.length > 0) {
    var _iterator7 = _createForOfIteratorHelper(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Slot.all()),
        _step7;

    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var _slot = _step7.value;

        if (!options.onlySlot.includes(_slot)) {
          equipment.delete(_slot);
        }
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }

    if (!options.onlySlot.includes((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slot */ .Jh)(_templateObject46 || (_templateObject46 = _taggedTemplateLiteral(["buddy-bjorn"]))))) {
      rider.delete((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject47 || (_templateObject47 = _taggedTemplateLiteral(["Buddy Bjorn"]))));
    }

    if (!options.onlySlot.includes((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$slot */ .Jh)(_templateObject48 || (_templateObject48 = _taggedTemplateLiteral(["crown-of-thrones"]))))) {
      rider.delete((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject49 || (_templateObject49 = _taggedTemplateLiteral(["Crown of Thrones"]))));
    }
  }

  var entry = new CacheEntry(equipment, rider, (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myFamiliar)(), canEquipItemCount(), _objectSpread(_objectSpread({}, getCurrentModes()), options.modes));
  cachedObjectives[cacheKey] = entry;

  if (options.useOutfitCaching) {
    var outfitName = outfitCache.insert(entry);
    _logger_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].info */ .Z.info("Saving equipment to outfit ".concat(outfitName, "."));
    saveOutfit(outfitName);
  }
}
/**
 * Run the maximizer, but only if the objective and certain pieces of game state haven't changed since it was last run.
 *
 * @param objectives Objectives to maximize for.
 * @param options Options for this run of the maximizer.
 * @param options.updateOnFamiliarChange Re-run the maximizer if familiar has changed. Default true.
 * @param options.updateOnCanEquipChanged Re-run the maximizer if stats have changed what can be equipped. Default true.
 * @param options.forceEquip Equipment to force-equip ("equip X").
 * @param options.preventEquip Equipment to prevent equipping ("-equip X").
 * @param options.bonusEquip Equipment to apply a bonus to ("200 bonus X").
 * @returns Whether the maximize call succeeded.
 */


function maximizeCached(objectives) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var fullOptions = mergeMaximizeOptions(defaultMaximizeOptions, options);
  var forceEquip = fullOptions.forceEquip,
      preventEquip = fullOptions.preventEquip,
      bonusEquip = fullOptions.bonusEquip,
      onlySlot = fullOptions.onlySlot,
      preventSlot = fullOptions.preventSlot,
      forceUpdate = fullOptions.forceUpdate; // Sort each group in objective to ensure consistent ordering in string

  var objective = _toConsumableArray(new Set([].concat(_toConsumableArray(objectives.sort()), _toConsumableArray(forceEquip.map(item => "\"equip ".concat(toMaximizerName(item), "\"")).sort()), _toConsumableArray(preventEquip.map(item => "-\"equip ".concat(toMaximizerName(item), "\"")).sort()), _toConsumableArray(onlySlot.map(slot => "".concat(slot)).sort()), _toConsumableArray(preventSlot.map(slot => "-".concat(slot)).sort()), _toConsumableArray(Array.from(bonusEquip.entries()).filter(_ref8 => {
    var _ref9 = _slicedToArray(_ref8, 2),
        bonus = _ref9[1];

    return bonus !== 0;
  }).map(_ref10 => {
    var _ref11 = _slicedToArray(_ref10, 2),
        item = _ref11[0],
        bonus = _ref11[1];

    return "".concat(Math.round(bonus * 100) / 100, " \"bonus ").concat(toMaximizerName(item), "\"");
  }).sort())))).join(", "); // Items equipped in slots not touched by the maximizer must be in the cache key


  var untouchedSlots = cachedSlots.filter(slot => preventSlot.includes(slot) || onlySlot.length > 0 && !onlySlot.includes(slot));
  var cacheKey = [objective].concat(_toConsumableArray(untouchedSlots.map(slot => "".concat(slot, ":").concat((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.equippedItem)(slot))).sort()), [(0,_lib_js__WEBPACK_IMPORTED_MODULE_4__/* .have */ .lf)((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$effect */ ._G)(_templateObject50 || (_templateObject50 = _taggedTemplateLiteral(["Offhand Remarkable"]))))]).join("; ");
  var cacheEntry = checkCache(cacheKey, fullOptions);

  if (cacheEntry && !forceUpdate) {
    if (verifyCached(cacheEntry, false)) return true;
    _logger_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].info */ .Z.info("Equipment found in maximize cache, equipping...");
    applyCached(cacheEntry, fullOptions);

    if (verifyCached(cacheEntry)) {
      _logger_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].info */ .Z.info("Equipped cached ".concat(cacheKey));
      return true;
    }

    _logger_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"].warning */ .Z.warning("Maximize cache application failed, maximizing...");
  }

  var result = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.maximize)(objective, false);
  saveCached(cacheKey, fullOptions);
  return result;
}

function mergeOptionalOptions(optionsA, optionsB) {
  for (var _len = arguments.length, keys = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    keys[_key - 2] = arguments[_key];
  }

  return keys.reduce((current, key) => _objectSpread(_objectSpread({}, current), (optionsA[key] || optionsB[key]) === undefined ? {} : _defineProperty({}, key, optionsA[key] || optionsB[key])), {});
}

var _maximizeParameters = /*#__PURE__*/new WeakMap();

var _maximizeOptions = /*#__PURE__*/new WeakMap();

var Requirement = /*#__PURE__*/function () {
  /**
   * A convenient way of combining maximization parameters and options
   *
   * @param maximizeParameters Parameters you're attempting to maximize
   * @param maximizeOptions Object potentially containing forceEquips, bonusEquips, preventEquips, and preventSlots
   */
  function Requirement(maximizeParameters, maximizeOptions) {
    _classCallCheck(this, Requirement);

    _classPrivateFieldInitSpec(this, _maximizeParameters, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _maximizeOptions, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _maximizeParameters, maximizeParameters);

    _classPrivateFieldSet(this, _maximizeOptions, maximizeOptions);
  }

  _createClass(Requirement, [{
    key: "maximizeParameters",
    get: function get() {
      return _classPrivateFieldGet(this, _maximizeParameters);
    }
  }, {
    key: "maximizeOptions",
    get: function get() {
      return _classPrivateFieldGet(this, _maximizeOptions);
    }
    /**
     * Merges two requirements, concanating relevant arrays. Typically used in static form.
     *
     * @param other Requirement to merge with.
     * @returns A new merged Requirement
     */

  }, {
    key: "merge",
    value: function merge(other) {
      var _optionsA$forceEquip, _other$maximizeOption, _optionsA$preventEqui, _other$maximizeOption3, _optionsA$bonusEquip$, _optionsA$bonusEquip, _optionsB$bonusEquip$, _optionsB$bonusEquip, _optionsA$onlySlot, _optionsB$onlySlot, _optionsA$preventSlot, _optionsB$preventSlot;

      var optionsA = this.maximizeOptions;
      var optionsB = other.maximizeOptions;
      var optionalBooleans = mergeOptionalOptions(optionsA, optionsB, "updateOnFamiliarChange", "updateOnCanEquipChanged", "forceUpdate");
      return new Requirement([].concat(_toConsumableArray(this.maximizeParameters), _toConsumableArray(other.maximizeParameters)), _objectSpread(_objectSpread({}, optionalBooleans), {}, {
        forceEquip: [].concat(_toConsumableArray((_optionsA$forceEquip = optionsA.forceEquip) !== null && _optionsA$forceEquip !== void 0 ? _optionsA$forceEquip : []), _toConsumableArray((_other$maximizeOption = other.maximizeOptions.forceEquip) !== null && _other$maximizeOption !== void 0 ? _other$maximizeOption : [])).filter(x => {
          var _other$maximizeOption2;

          return !((_other$maximizeOption2 = other.maximizeOptions.preventEquip) !== null && _other$maximizeOption2 !== void 0 && _other$maximizeOption2.includes(x));
        }),
        preventEquip: [].concat(_toConsumableArray((_optionsA$preventEqui = optionsA.preventEquip) !== null && _optionsA$preventEqui !== void 0 ? _optionsA$preventEqui : []), _toConsumableArray((_other$maximizeOption3 = other.maximizeOptions.preventEquip) !== null && _other$maximizeOption3 !== void 0 ? _other$maximizeOption3 : [])).filter(x => {
          var _other$maximizeOption4;

          return !((_other$maximizeOption4 = other.maximizeOptions.forceEquip) !== null && _other$maximizeOption4 !== void 0 && _other$maximizeOption4.includes(x));
        }),
        bonusEquip: new Map([].concat(_toConsumableArray((_optionsA$bonusEquip$ = (_optionsA$bonusEquip = optionsA.bonusEquip) === null || _optionsA$bonusEquip === void 0 ? void 0 : _optionsA$bonusEquip.entries()) !== null && _optionsA$bonusEquip$ !== void 0 ? _optionsA$bonusEquip$ : []), _toConsumableArray((_optionsB$bonusEquip$ = (_optionsB$bonusEquip = optionsB.bonusEquip) === null || _optionsB$bonusEquip === void 0 ? void 0 : _optionsB$bonusEquip.entries()) !== null && _optionsB$bonusEquip$ !== void 0 ? _optionsB$bonusEquip$ : []))),
        onlySlot: [].concat(_toConsumableArray((_optionsA$onlySlot = optionsA.onlySlot) !== null && _optionsA$onlySlot !== void 0 ? _optionsA$onlySlot : []), _toConsumableArray((_optionsB$onlySlot = optionsB.onlySlot) !== null && _optionsB$onlySlot !== void 0 ? _optionsB$onlySlot : [])),
        preventSlot: [].concat(_toConsumableArray((_optionsA$preventSlot = optionsA.preventSlot) !== null && _optionsA$preventSlot !== void 0 ? _optionsA$preventSlot : []), _toConsumableArray((_optionsB$preventSlot = optionsB.preventSlot) !== null && _optionsB$preventSlot !== void 0 ? _optionsB$preventSlot : []))
      }));
    }
    /**
     * Merges a set of requirements together, starting with an empty requirement.
     *
     * @param allRequirements Requirements to merge
     * @returns Merged requirements
     */

  }, {
    key: "maximize",
    value:
    /**
     * Runs maximizeCached, using the maximizeParameters and maximizeOptions contained by this requirement.
     *
     * @returns Whether the maximize call succeeded.
     */
    function maximize() {
      return maximizeCached(this.maximizeParameters, this.maximizeOptions);
    }
    /**
     * Merges requirements, and then runs maximizeCached on the combined requirement.
     *
     * @param requirements Requirements to maximize on
     */

  }], [{
    key: "merge",
    value: function merge(allRequirements) {
      return allRequirements.reduce((x, y) => x.merge(y), new Requirement([], {}));
    }
  }, {
    key: "maximize",
    value: function maximize() {
      for (var _len2 = arguments.length, requirements = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        requirements[_key2] = arguments[_key2];
      }

      Requirement.merge(requirements).maximize();
    }
  }]);

  return Requirement;
}();
/**
 * Clear all outfits cached by the maximizer.
 */

function clearMaximizerCache() {
  outfitCache.clear();

  for (var member in cachedObjectives) {
    delete cachedObjectives[member];
  }
}

/***/ }),

/***/ 186:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "r": () => (/* binding */ signIdToName),
/* harmony export */   "u": () => (/* binding */ signNameToId)
/* harmony export */ });
var MoonSigns = ["Mongoose", "Wallaby", "Vole", "Platypus", "Opossum", "Marmot", "Wombat", "Blender", "Packrat"];
/**
 * @param moon Moon sign name
 * @returns Moon sign id else 0
 */

function signNameToId(moon) {
  return MoonSigns.indexOf(moon) + 1;
}
/**
 * @param id Moon sign id
 * @returns Name of moon sign else "None"
 */

function signIdToName(id) {
  return MoonSigns[id - 1] || "None";
}

/***/ }),

/***/ 785:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PropertiesManager": () => (/* binding */ PropertiesManager),
/* harmony export */   "decrement": () => (/* binding */ decrement),
/* harmony export */   "get": () => (/* binding */ get),
/* harmony export */   "getBoolean": () => (/* binding */ getBoolean),
/* harmony export */   "getBounty": () => (/* binding */ getBounty),
/* harmony export */   "getClass": () => (/* binding */ getClass),
/* harmony export */   "getCoinmaster": () => (/* binding */ getCoinmaster),
/* harmony export */   "getCommaSeparated": () => (/* binding */ getCommaSeparated),
/* harmony export */   "getEffect": () => (/* binding */ getEffect),
/* harmony export */   "getElement": () => (/* binding */ getElement),
/* harmony export */   "getFamiliar": () => (/* binding */ getFamiliar),
/* harmony export */   "getItem": () => (/* binding */ getItem),
/* harmony export */   "getLocation": () => (/* binding */ getLocation),
/* harmony export */   "getMonster": () => (/* binding */ getMonster),
/* harmony export */   "getNumber": () => (/* binding */ getNumber),
/* harmony export */   "getPhylum": () => (/* binding */ getPhylum),
/* harmony export */   "getServant": () => (/* binding */ getServant),
/* harmony export */   "getSkill": () => (/* binding */ getSkill),
/* harmony export */   "getSlot": () => (/* binding */ getSlot),
/* harmony export */   "getStat": () => (/* binding */ getStat),
/* harmony export */   "getString": () => (/* binding */ getString),
/* harmony export */   "getThrall": () => (/* binding */ getThrall),
/* harmony export */   "increment": () => (/* binding */ increment),
/* harmony export */   "set": () => (/* binding */ _set),
/* harmony export */   "setProperties": () => (/* binding */ setProperties),
/* harmony export */   "withChoice": () => (/* binding */ withChoice),
/* harmony export */   "withChoices": () => (/* binding */ withChoices),
/* harmony export */   "withProperties": () => (/* binding */ withProperties),
/* harmony export */   "withProperty": () => (/* binding */ withProperty)
/* harmony export */ });
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var _propertyTyping_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(137);
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }




var createPropertyGetter = transform => (property, default_) => {
  var value = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(property);

  if (default_ !== undefined && value === "") {
    return default_;
  }

  return transform(value, property);
};

var createMafiaClassPropertyGetter = (Type, toType) => createPropertyGetter(value => {
  if (value === "") return null;
  var v = toType(value);
  return v === Type.none ? null : v;
});

var getString = createPropertyGetter(value => value);
var getCommaSeparated = createPropertyGetter(value => value.split(/, ?/));
var getBoolean = createPropertyGetter(value => value === "true");
var getNumber = createPropertyGetter(value => Number(value));
var getBounty = createMafiaClassPropertyGetter(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Bounty, kolmafia__WEBPACK_IMPORTED_MODULE_0__.toBounty);
var getClass = createMafiaClassPropertyGetter(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Class, kolmafia__WEBPACK_IMPORTED_MODULE_0__.toClass);
var getCoinmaster = createMafiaClassPropertyGetter(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Coinmaster, kolmafia__WEBPACK_IMPORTED_MODULE_0__.toCoinmaster);
var getEffect = createMafiaClassPropertyGetter(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Effect, kolmafia__WEBPACK_IMPORTED_MODULE_0__.toEffect);
var getElement = createMafiaClassPropertyGetter(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Element, kolmafia__WEBPACK_IMPORTED_MODULE_0__.toElement);
var getFamiliar = createMafiaClassPropertyGetter(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Familiar, kolmafia__WEBPACK_IMPORTED_MODULE_0__.toFamiliar);
var getItem = createMafiaClassPropertyGetter(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item, kolmafia__WEBPACK_IMPORTED_MODULE_0__.toItem);
var getLocation = createMafiaClassPropertyGetter(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Location, kolmafia__WEBPACK_IMPORTED_MODULE_0__.toLocation);
var getMonster = createMafiaClassPropertyGetter(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Monster, kolmafia__WEBPACK_IMPORTED_MODULE_0__.toMonster);
var getPhylum = createMafiaClassPropertyGetter(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Phylum, kolmafia__WEBPACK_IMPORTED_MODULE_0__.toPhylum);
var getServant = createMafiaClassPropertyGetter(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Servant, kolmafia__WEBPACK_IMPORTED_MODULE_0__.toServant);
var getSkill = createMafiaClassPropertyGetter(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill, kolmafia__WEBPACK_IMPORTED_MODULE_0__.toSkill);
var getSlot = createMafiaClassPropertyGetter(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Slot, kolmafia__WEBPACK_IMPORTED_MODULE_0__.toSlot);
var getStat = createMafiaClassPropertyGetter(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Stat, kolmafia__WEBPACK_IMPORTED_MODULE_0__.toStat);
var getThrall = createMafiaClassPropertyGetter(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Thrall, kolmafia__WEBPACK_IMPORTED_MODULE_0__.toThrall);
/**
 * Gets the value of a mafia property, either built in or custom
 *
 * @param property Name of the property
 * @param _default Default value for the property to take if not set
 * @returns Value of the mafia property
 */

function get(property, _default) {
  var value = getString(property); // Handle known properties.

  if ((0,_propertyTyping_js__WEBPACK_IMPORTED_MODULE_1__/* .isBooleanProperty */ .j1)(property)) {
    var _getBoolean;

    return (_getBoolean = getBoolean(property, _default)) !== null && _getBoolean !== void 0 ? _getBoolean : false;
  } else if ((0,_propertyTyping_js__WEBPACK_IMPORTED_MODULE_1__/* .isNumericProperty */ .OY)(property)) {
    var _getNumber;

    return (_getNumber = getNumber(property, _default)) !== null && _getNumber !== void 0 ? _getNumber : 0;
  } else if ((0,_propertyTyping_js__WEBPACK_IMPORTED_MODULE_1__/* .isNumericOrStringProperty */ .jc)(property)) {
    return value.match(/^\d+$/) ? parseInt(value) : value;
  } else if ((0,_propertyTyping_js__WEBPACK_IMPORTED_MODULE_1__/* .isLocationProperty */ .Ph)(property)) {
    return getLocation(property, _default);
  } else if ((0,_propertyTyping_js__WEBPACK_IMPORTED_MODULE_1__/* .isMonsterProperty */ .M1)(property)) {
    return getMonster(property, _default);
  } else if ((0,_propertyTyping_js__WEBPACK_IMPORTED_MODULE_1__/* .isFamiliarProperty */ .mP)(property)) {
    return getFamiliar(property, _default);
  } else if ((0,_propertyTyping_js__WEBPACK_IMPORTED_MODULE_1__/* .isStatProperty */ .AM)(property)) {
    return getStat(property, _default);
  } else if ((0,_propertyTyping_js__WEBPACK_IMPORTED_MODULE_1__/* .isPhylumProperty */ .eI)(property)) {
    return getPhylum(property, _default);
  } else if ((0,_propertyTyping_js__WEBPACK_IMPORTED_MODULE_1__/* .isStringProperty */ .Oz)(property)) {
    return value;
  } // Not a KnownProperty from here on out.


  if (_default instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Location) {
    return getLocation(property, _default);
  } else if (_default instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Monster) {
    return getMonster(property, _default);
  } else if (_default instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Familiar) {
    return getFamiliar(property, _default);
  } else if (_default instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Stat) {
    return getStat(property, _default);
  } else if (_default instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Phylum) {
    return getPhylum(property, _default);
  } else if (typeof _default === "boolean") {
    return value === "true" ? true : value === "false" ? false : _default;
  } else if (typeof _default === "number") {
    return value === "" ? _default : parseInt(value);
  } else if (value === "") {
    return _default === undefined ? "" : _default;
  } else {
    return value;
  }
}
/**
 * Sets the value of a mafia property, either built in or custom
 *
 * @param property Name of the property
 * @param value Value to give the property
 * @returns Value that was set
 */

function _set(property, value) {
  var stringValue = value === null ? "" : value.toString();
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.setProperty)(property, stringValue);
  return value;
}
/**
 * Increment a property
 *
 * @param property Numeric property to increment
 * @param delta Number by which to increment
 * @param max Maximum value to set
 * @returns New value
 */



function increment(property) {
  var delta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
  var value = get(property);
  if (!(0,_propertyTyping_js__WEBPACK_IMPORTED_MODULE_1__/* .isNumericProperty */ .OY)(property)) return value;
  var nextValue = Math.min(max, value + delta);
  return _set(property, nextValue);
}
/**
 * Decrement a property
 *
 * @param property Numeric property to decrement
 * @param delta Number by which to decrement
 * @param min Maximum value to set
 * @returns New value
 */

function decrement(property) {
  var delta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var min = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
  var value = get(property);
  if (!(0,_propertyTyping_js__WEBPACK_IMPORTED_MODULE_1__/* .isNumericProperty */ .OY)(property)) return value;
  var nextValue = Math.max(min, value - delta);
  return _set(property, nextValue);
}
/**
 * Sets the value of a set of mafia properties
 *
 * @param properties Set of properties
 */

function setProperties(properties) {
  for (var _i = 0, _Object$entries = Object.entries(properties); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        prop = _Object$entries$_i[0],
        value = _Object$entries$_i[1];

    _set(prop, value);
  }
}
/**
 * Carries out a callback during which a set of properties will be set as supplied
 *
 * @param properties Properties to set during callback
 * @param callback Callback to execute with set properties
 * @returns Return value of the supplied callback
 */

function withProperties(properties, callback) {
  var propertiesBackup = Object.fromEntries(Object.entries(properties).map(_ref => {
    var _ref2 = _slicedToArray(_ref, 1),
        prop = _ref2[0];

    return [prop, get(prop)];
  }));
  setProperties(properties);

  try {
    return callback();
  } finally {
    setProperties(propertiesBackup);
  }
}
/**
 * Carries out a callback during which a property will be set as supplied
 *
 * @param property Property to set during callback
 * @param value Value to set property during callback
 * @param callback Callback to execute with set properties
 * @returns Return value of the supplied callback
 */

function withProperty(property, value, callback) {
  return withProperties(_defineProperty({}, property, value), callback);
}
/**
 * Carries out a callback during which a set of choices will be handled as supplied
 *
 * @param choices Choices to set during callback
 * @param callback Callback to execute with set choices
 * @returns Return value of the supplied callback
 */

function withChoices(choices, callback) {
  var properties = Object.fromEntries(Object.entries(choices).map(_ref3 => {
    var _ref4 = _slicedToArray(_ref3, 2),
        choice = _ref4[0],
        option = _ref4[1];

    return ["choiceAdventure".concat(choice), option];
  }));
  return withProperties(properties, callback);
}
/**
 * Carries out a callback during which a choice will be handled as supplied
 *
 * @param choice Choice to set during callback
 * @param value How to handle choice during callback
 * @param callback Callback to execute with set properties
 * @returns Return value of the supplied callback
 */

function withChoice(choice, value, callback) {
  return withChoices(_defineProperty({}, choice, value), callback);
}
var PropertiesManager = /*#__PURE__*/function () {
  function PropertiesManager() {
    _classCallCheck(this, PropertiesManager);

    _defineProperty(this, "properties", {});
  }

  _createClass(PropertiesManager, [{
    key: "storedValues",
    get: function get() {
      return this.properties;
    }
    /**
     * Sets a collection of properties to the given values, storing the old values.
     *
     * @param propertiesToSet A Properties object, keyed by property name.
     */

  }, {
    key: "set",
    value: function set(propertiesToSet) {
      for (var _i2 = 0, _Object$entries2 = Object.entries(propertiesToSet); _i2 < _Object$entries2.length; _i2++) {
        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
            propertyName = _Object$entries2$_i[0],
            propertyValue = _Object$entries2$_i[1];

        if (!(propertyName in this.properties)) {
          this.properties[propertyName] = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.propertyExists)(propertyName) ? get(propertyName) : PropertiesManager.EMPTY_PREFERENCE;
        }

        _set(propertyName, propertyValue);
      }
    }
    /**
     * Sets a collection of choice adventure properties to the given values, storing the old values.
     *
     * @param choicesToSet An object keyed by choice adventure number.
     */

  }, {
    key: "setChoices",
    value: function setChoices(choicesToSet) {
      this.set(Object.fromEntries(Object.entries(choicesToSet).map(_ref5 => {
        var _ref6 = _slicedToArray(_ref5, 2),
            choiceNumber = _ref6[0],
            choiceValue = _ref6[1];

        return ["choiceAdventure".concat(choiceNumber), choiceValue];
      })));
    }
    /**
     * Sets a single choice adventure property to the given value, storing the old value.
     *
     * @param choiceToSet The number of the choice adventure to set the property for.
     * @param value The value to assign to that choice adventure.
     */

  }, {
    key: "setChoice",
    value: function setChoice(choiceToSet, value) {
      this.setChoices(_defineProperty({}, choiceToSet, value));
    }
    /**
     * Resets the given properties to their original stored value. Does not delete entries from the manager.
     *
     * @param properties Collection of properties to reset.
     */

  }, {
    key: "reset",
    value: function reset() {
      for (var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++) {
        properties[_key] = arguments[_key];
      }

      for (var _i3 = 0, _properties = properties; _i3 < _properties.length; _i3++) {
        var property = _properties[_i3];
        if (!(property in this.properties)) continue;
        var value = this.properties[property];

        if (value === PropertiesManager.EMPTY_PREFERENCE) {
          (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.removeProperty)(property);
        } else if (value) {
          _set(property, value);
        } else {
          _set(property, "");
        }
      }
    }
    /**
     * Iterates over all stored values, setting each property back to its original stored value. Does not delete entries from the manager.
     */

  }, {
    key: "resetAll",
    value: function resetAll() {
      setProperties(this.properties);
    }
    /**
     * Stops storing the original values of inputted properties.
     *
     * @param properties Properties for the manager to forget.
     */

  }, {
    key: "clear",
    value: function clear() {
      for (var _len2 = arguments.length, properties = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        properties[_key2] = arguments[_key2];
      }

      for (var _i4 = 0, _properties2 = properties; _i4 < _properties2.length; _i4++) {
        var property = _properties2[_i4];

        if (this.properties[property]) {
          delete this.properties[property];
        }
      }
    }
    /**
     * Clears all properties.
     */

  }, {
    key: "clearAll",
    value: function clearAll() {
      this.properties = {};
    }
    /**
     * Increases a numeric property to the given value if necessary.
     *
     * @param property The numeric property we want to potentially raise.
     * @param value The minimum value we want that property to have.
     * @returns Whether we needed to change the property.
     */

  }, {
    key: "setMinimumValue",
    value: function setMinimumValue(property, value) {
      if (get(property, 0) < value) {
        this.set(_defineProperty({}, property, value));
        return true;
      }

      return false;
    }
    /**
     * Decrease a numeric property to the given value if necessary.
     *
     * @param property The numeric property we want to potentially lower.
     * @param value The maximum value we want that property to have.
     * @returns Whether we needed to change the property.
     */

  }, {
    key: "setMaximumValue",
    value: function setMaximumValue(property, value) {
      if (get(property, 0) > value) {
        this.set(_defineProperty({}, property, value));
        return true;
      }

      return false;
    }
    /**
     * Creates a new PropertiesManager with identical stored values to this one.
     *
     * @returns A new PropertiesManager, with identical stored values to this one.
     */

  }, {
    key: "clone",
    value: function clone() {
      var newGuy = new PropertiesManager();
      newGuy.properties = this.storedValues;
      return newGuy;
    }
    /**
     * Clamps a numeric property, modulating it up or down to fit within a specified range
     *
     * @param property The numeric property to clamp
     * @param min The lower bound for what we want the property to be allowed to be.
     * @param max The upper bound for what we want the property to be allowed to be.
     * @returns Whether we ended up changing the property or not.
     */

  }, {
    key: "clamp",
    value: function clamp(property, min, max) {
      if (max < min) return false;
      var start = get(property);
      this.setMinimumValue(property, min);
      this.setMaximumValue(property, max);
      return start !== get(property);
    }
    /**
     * Determines whether this PropertiesManager has identical stored values to another.
     *
     * @param other The PropertiesManager to compare to this one.
     * @returns Whether their StoredValues are identical.
     */

  }, {
    key: "equals",
    value: function equals(other) {
      var thisProps = Object.entries(this.storedValues);
      var otherProps = new Map(Object.entries(other.storedValues));
      if (thisProps.length !== otherProps.size) return false;

      for (var _i5 = 0, _thisProps = thisProps; _i5 < _thisProps.length; _i5++) {
        var _thisProps$_i = _slicedToArray(_thisProps[_i5], 2),
            propertyName = _thisProps$_i[0],
            propertyValue = _thisProps$_i[1];

        if (otherProps.get(propertyName) === propertyValue) return false;
      }

      return true;
    }
    /**
     * Merges a PropertiesManager onto this one, letting the input win in the event that both PropertiesManagers have a value stored.
     *
     * @param other The PropertiesManager to be merged onto this one.
     * @returns A new PropertiesManager with stored values from both its parents.
     */

  }, {
    key: "merge",
    value: function merge(other) {
      var newGuy = new PropertiesManager();
      newGuy.properties = _objectSpread(_objectSpread({}, this.properties), other.properties);
      return newGuy;
    }
    /**
     * Merges an arbitrary collection of PropertiesManagers, letting the rightmost PropertiesManager win in the event of verlap.
     *
     * @param mergees The PropertiesManagers to merge together.
     * @returns A PropertiesManager that is just an amalgam of all the constituents.
     */

  }], [{
    key: "merge",
    value: function merge() {
      for (var _len3 = arguments.length, mergees = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        mergees[_key3] = arguments[_key3];
      }

      if (mergees.length === 0) return new PropertiesManager();
      return mergees.reduce((a, b) => a.merge(b));
    }
  }]);

  return PropertiesManager;
}();

_defineProperty(PropertiesManager, "EMPTY_PREFERENCE", Symbol("empty preference"));

/***/ }),

/***/ 902:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "booleanProperties": () => (/* binding */ booleanProperties),
/* harmony export */   "familiarProperties": () => (/* binding */ familiarProperties),
/* harmony export */   "locationProperties": () => (/* binding */ locationProperties),
/* harmony export */   "monsterProperties": () => (/* binding */ monsterProperties),
/* harmony export */   "numericOrStringProperties": () => (/* binding */ numericOrStringProperties),
/* harmony export */   "numericProperties": () => (/* binding */ numericProperties),
/* harmony export */   "phylumProperties": () => (/* binding */ phylumProperties),
/* harmony export */   "statProperties": () => (/* binding */ statProperties),
/* harmony export */   "stringProperties": () => (/* binding */ stringProperties)
/* harmony export */ });
/** THIS FILE IS AUTOMATICALLY GENERATED. See tools/parseDefaultProperties.ts for more information */
var booleanProperties = ["abortOnChoiceWhenNotInChoice", "addChatCommandLine", "addCreationQueue", "addStatusBarToFrames", "allowCloseableDesktopTabs", "allowNegativeTally", "allowNonMoodBurning", "allowSummonBurning", "autoHighlightOnFocus", "broadcastEvents", "cacheMallSearches", "chatBeep", "chatLinksUseRelay", "compactChessboard", "copyAsHTML", "customizedTabs", "debugBuy", "debugConsequences", "debugFoxtrotRemoval", "debugPathnames", "debugTopMenuStyle", "gapProtection", "gitInstallDependencies", "gitShowCommitMessages", "gitUpdateOnLogin", "greenScreenProtection", "guiUsesOneWindow", "hideServerDebugText", "logAcquiredItems", "logBattleAction", "logBrowserInteractions", "logChatMessages", "logChatRequests", "logCleanedHTML", "logDecoratedResponses", "logFamiliarActions", "logGainMessages", "logReadableHTML", "logPreferenceChange", "logMonsterHealth", "logReverseOrder", "logStatGains", "logStatusEffects", "logStatusOnLogin", "macroDebug", "macroLens", "mementoListActive", "mergeHobopolisChat", "pingLogin", "pingStealthyTimein", "printStackOnAbort", "proxySet", "relayAddSounds", "relayAddsCustomCombat", "relayAddsDiscoHelper", "relayAddsGraphicalCLI", "relayAddsQuickScripts", "relayAddsRestoreLinks", "relayAddsUpArrowLinks", "relayAddsUseLinks", "relayAddsWikiLinks", "relayAllowRemoteAccess", "relayBrowserOnly", "relayCacheUncacheable", "relayFormatsChatText", "relayHidesJunkMallItems", "relayMaintainsEffects", "relayMaintainsHealth", "relayMaintainsMana", "relayOverridesImages", "relayRunsAfterAdventureScript", "relayRunsBeforeBattleScript", "relayRunsBeforePVPScript", "relayScriptButtonFirst", "relayTextualizesEffects", "relayTrimsZapList", "relayUsesInlineLinks", "relayUsesIntegratedChat", "relayWarnOnRecoverFailure", "removeMalignantEffects", "saveSettingsOnSet", "sharePriceData", "showAllRequests", "showExceptionalRequests", "stealthLogin", "svnAlwaysAdd", "svnAlwaysOverwrite", "svnInstallDependencies", "svnShowCommitMessages", "svnUpdateOnLogin", "switchEquipmentForBuffs", "syncAfterSvnUpdate", "useChatToolbar", "useContactsFrame", "useDevServer", "useDockIconBadge", "useHugglerChannel", "useImageCache", "useLastUserAgent", "useSystemTrayIcon", "useTabbedChatFrame", "useToolbars", "useCachedVolcanoMaps", "useZoneComboBox", "verboseSpeakeasy", "verboseFloundry", "wrapLongLines", "_gitUpdated", "_svnRepoFileFetched", "_svnUpdated", "antagonisticSnowmanKitAvailable", "arcadeGameHints", "armoryUnlocked", "autoForbidIgnoringStores", "autoCraft", "autoQuest", "autoEntangle", "autoGarish", "autoManaRestore", "autoFillMayoMinder", "autoPinkyRing", "autoPlantHardcore", "autoPlantSoftcore", "autoPotionID", "autoRepairBoxServants", "autoSatisfyWithCloset", "autoSatisfyWithCoinmasters", "autoSatisfyWithMall", "autoSatisfyWithNPCs", "autoSatisfyWithStash", "autoSatisfyWithStorage", "autoSetConditions", "autoSteal", "autoTuxedo", "backupCameraReverserEnabled", "badMoonEncounter01", "badMoonEncounter02", "badMoonEncounter03", "badMoonEncounter04", "badMoonEncounter05", "badMoonEncounter06", "badMoonEncounter07", "badMoonEncounter08", "badMoonEncounter09", "badMoonEncounter10", "badMoonEncounter11", "badMoonEncounter12", "badMoonEncounter13", "badMoonEncounter14", "badMoonEncounter15", "badMoonEncounter16", "badMoonEncounter17", "badMoonEncounter18", "badMoonEncounter19", "badMoonEncounter20", "badMoonEncounter21", "badMoonEncounter22", "badMoonEncounter23", "badMoonEncounter24", "badMoonEncounter25", "badMoonEncounter26", "badMoonEncounter27", "badMoonEncounter28", "badMoonEncounter29", "badMoonEncounter30", "badMoonEncounter31", "badMoonEncounter32", "badMoonEncounter33", "badMoonEncounter34", "badMoonEncounter35", "badMoonEncounter36", "badMoonEncounter37", "badMoonEncounter38", "badMoonEncounter39", "badMoonEncounter40", "badMoonEncounter41", "badMoonEncounter42", "badMoonEncounter43", "badMoonEncounter44", "badMoonEncounter45", "badMoonEncounter46", "badMoonEncounter47", "badMoonEncounter48", "barrelShrineUnlocked", "bigBrotherRescued", "blackBartsBootyAvailable", "bondAdv", "bondBeach", "bondBeat", "bondBooze", "bondBridge", "bondDesert", "bondDR", "bondDrunk1", "bondDrunk2", "bondHoney", "bondHP", "bondInit", "bondItem1", "bondItem2", "bondItem3", "bondJetpack", "bondMartiniDelivery", "bondMartiniPlus", "bondMartiniTurn", "bondMeat", "bondMox1", "bondMox2", "bondMPregen", "bondMus1", "bondMus2", "bondMys1", "bondMys2", "bondSpleen", "bondStat", "bondStat2", "bondStealth", "bondStealth2", "bondSymbols", "bondWar", "bondWeapon2", "bondWpn", "booPeakLit", "bootsCharged", "breakfastCompleted", "burrowgrubHiveUsed", "calzoneOfLegendEaten", "candyCaneSwordApartmentBuilding", "candyCaneSwordBlackForest", "candyCaneSwordBowlingAlley", "candyCaneSwordCopperheadClub", "candyCaneSwordDailyDungeon", "candyCaneSwordDefiledCranny", "candyCaneSwordFunHouse", "candyCaneSwordShore", "candyCaneSwordWarFratRoom", "candyCaneSwordWarFratZetas", "candyCaneSwordWarHippyBait", "candyCaneSwordWarHippyLine", "canteenUnlocked", "chaosButterflyThrown", "chatbotScriptExecuted", "chateauAvailable", "chatLiterate", "chatServesUpdates", "checkJackassHardcore", "checkJackassSoftcore", "clanAttacksEnabled", "coldAirportAlways", "considerShadowNoodles", "controlRoomUnlock", "concertVisited", "controlPanel1", "controlPanel2", "controlPanel3", "controlPanel4", "controlPanel5", "controlPanel6", "controlPanel7", "controlPanel8", "controlPanel9", "corralUnlocked", "crimbo23ArmoryAtWar", "crimbo23BarAtWar", "crimbo23CafeAtWar", "crimbo23CottageAtWar", "crimbo23FoundryAtWar", "dailyDungeonDone", "dampOldBootPurchased", "daycareOpen", "deepDishOfLegendEaten", "demonSummoned", "dinseyAudienceEngagement", "dinseyGarbagePirate", "dinseyRapidPassEnabled", "dinseyRollercoasterNext", "dinseySafetyProtocolsLoose", "doghouseBoarded", "dontStopForCounters", "drippingHallUnlocked", "drippyShieldUnlocked", "edUsedLash", "eldritchFissureAvailable", "eldritchHorrorAvailable", "errorOnAmbiguousFold", "essenceOfAnnoyanceAvailable", "essenceOfBearAvailable", "expressCardUsed", "falloutShelterChronoUsed", "falloutShelterCoolingTankUsed", "fireExtinguisherBatHoleUsed", "fireExtinguisherChasmUsed", "fireExtinguisherCyrptUsed", "fireExtinguisherDesertUsed", "fireExtinguisherHaremUsed", "fistTeachingsHaikuDungeon", "fistTeachingsPokerRoom", "fistTeachingsBarroomBrawl", "fistTeachingsConservatory", "fistTeachingsBatHole", "fistTeachingsFunHouse", "fistTeachingsMenagerie", "fistTeachingsSlums", "fistTeachingsFratHouse", "fistTeachingsRoad", "fistTeachingsNinjaSnowmen", "flickeringPixel1", "flickeringPixel2", "flickeringPixel3", "flickeringPixel4", "flickeringPixel5", "flickeringPixel6", "flickeringPixel7", "flickeringPixel8", "floristFriarAvailable", "floristFriarChecked", "frAlways", "frCemetaryUnlocked", "friarsBlessingReceived", "frMountainsUnlocked", "frSwampUnlocked", "frVillageUnlocked", "frWoodUnlocked", "getawayCampsiteUnlocked", "ghostPencil1", "ghostPencil2", "ghostPencil3", "ghostPencil4", "ghostPencil5", "ghostPencil6", "ghostPencil7", "ghostPencil8", "ghostPencil9", "gingerAdvanceClockUnlocked", "gingerBlackmailAccomplished", "gingerbreadCityAvailable", "gingerExtraAdventures", "gingerNegativesDropped", "gingerSewersUnlocked", "gingerSubwayLineUnlocked", "gingerRetailUnlocked", "glitchItemAvailable", "grabCloversHardcore", "grabCloversSoftcore", "guideToSafariAvailable", "guyMadeOfBeesDefeated", "hallowienerDefiledNook", "hallowienerGuanoJunction", "hallowienerKnollGym", "hallowienerMadnessBakery", "hallowienerMiddleChamber", "hallowienerOvergrownLot", "hallowienerSkeletonStore", "hallowienerSmutOrcs", "hallowienerSonofaBeach", "hallowienerVolcoino", "hardcorePVPWarning", "harvestBatteriesHardcore", "harvestBatteriesSoftcore", "hasAutumnaton", "hasBartender", "hasChef", "hasCocktailKit", "hasCosmicBowlingBall", "hasDetectiveSchool", "hasMaydayContract", "hasOven", "hasRange", "hasShaker", "hasSushiMat", "hasTwinkleVision", "haveBoxingDaydreamHardcore", "haveBoxingDaydreamSoftcore", "hermitHax0red", "holidayHalsBookAvailable", "horseryAvailable", "hotAirportAlways", "implementGlitchItem", "intenseCurrents", "itemBoughtPerAscension637", "itemBoughtPerAscension8266", "itemBoughtPerAscension10790", "itemBoughtPerAscension10794", "itemBoughtPerAscension10795", "itemBoughtPerCharacter6423", "itemBoughtPerCharacter6428", "itemBoughtPerCharacter6429", "kingLiberated", "lastPirateInsult1", "lastPirateInsult2", "lastPirateInsult3", "lastPirateInsult4", "lastPirateInsult5", "lastPirateInsult6", "lastPirateInsult7", "lastPirateInsult8", "lawOfAveragesAvailable", "leafletCompleted", "ledCandleDropped", "libraryCardUsed", "lockPicked", "logBastilleBattalionBattles", "loginRecoveryHardcore", "loginRecoverySoftcore", "lovebugsUnlocked", "loveTunnelAvailable", "lowerChamberUnlock", "madnessBakeryAvailable", "makePocketWishesHardcore", "makePocketWishesSoftcore", "manualOfNumberologyAvailable", "mappingMonsters", "mapToAnemoneMinePurchased", "mapToKokomoAvailable", "mapToMadnessReefPurchased", "mapToTheDiveBarPurchased", "mapToTheMarinaraTrenchPurchased", "mapToTheSkateParkPurchased", "maraisBeaverUnlock", "maraisCorpseUnlock", "maraisDarkUnlock", "maraisVillageUnlock", "maraisWildlifeUnlock", "maraisWizardUnlock", "maximizerAlwaysCurrent", "maximizerCreateOnHand", "maximizerCurrentMallPrices", "maximizerFoldables", "maximizerIncludeAll", "maximizerNoAdventures", "middleChamberUnlock", "milkOfMagnesiumActive", "moonTuned", "neverendingPartyAlways", "noncombatForcerActive", "oasisAvailable", "odeBuffbotCheck", "oilPeakLit", "oscusSodaUsed", "outrageousSombreroUsed", "overgrownLotAvailable", "ownsFloristFriar", "ownsSpeakeasy", "pathedSummonsHardcore", "pathedSummonsSoftcore", "pizzaOfLegendEaten", "popularTartUnlocked", "potatoAlarmClockUsed", "prAlways", "prayedForGlamour", "prayedForProtection", "prayedForVigor", "primaryLabCheerCoreGrabbed", "pyramidBombUsed", "rageGlandVented", "readManualHardcore", "readManualSoftcore", "relayShowSpoilers", "relayShowWarnings", "rememberDesktopSize", "replicaChateauAvailable", "replicaNeverendingPartyAlways", "replicaWitchessSetAvailable", "requireBoxServants", "requireSewerTestItems", "restUsingCampAwayTent", "restUsingChateau", "ROMOfOptimalityAvailable", "safePickpocket", "schoolOfHardKnocksDiplomaAvailable", "scriptCascadingMenus", "serverAddsCustomCombat", "SHAWARMAInitiativeUnlocked", "showForbiddenStores", "showGainsPerUnit", "showIgnoringStorePrices", "showNoSummonOnly", "showTurnFreeOnly", "skeletonStoreAvailable", "sleazeAirportAlways", "snojoAvailable", "sortByEffect", "sortByRoom", "spacegateAlways", "spacegateVaccine1", "spacegateVaccine2", "spacegateVaccine3", "spaceInvaderDefeated", "spelunkyHints", "spiceMelangeUsed", "spookyAirportAlways", "stenchAirportAlways", "stopForFixedWanderer", "stopForUltraRare", "styxPixieVisited", "superconductorDefeated", "suppressInappropriateNags", "suppressPowerPixellation", "suppressMallPriceCacheMessages", "telegraphOfficeAvailable", "telescopeLookedHigh", "timeTowerAvailable", "trackLightsOut", "uneffectWithHotTub", "universalSeasoningActive", "universalSeasoningAvailable", "useBookOfEverySkillHardcore", "useBookOfEverySkillSoftcore", "useCrimboToysHardcore", "useCrimboToysSoftcore", "verboseMaximizer", "visitLoungeHardcore", "visitLoungeSoftcore", "visitRumpusHardcore", "visitRumpusSoftcore", "voteAlways", "wildfireBarrelCaulked", "wildfireDusted", "wildfireFracked", "wildfirePumpGreased", "wildfireSprinkled", "yearbookCameraPending", "youRobotScavenged", "_2002MrStoreCreditsCollected", "_affirmationCookieEaten", "_affirmationHateUsed", "_airFryerUsed", "_akgyxothUsed", "_alienAnimalMilkUsed", "_alienPlantPodUsed", "_allYearSucker", "_aprilShower", "_armyToddlerCast", "_aug1Cast", "_aug2Cast", "_aug3Cast", "_aug4Cast", "_aug5Cast", "_aug6Cast", "_aug7Cast", "_aug8Cast", "_aug9Cast", "_aug10Cast", "_aug11Cast", "_aug12Cast", "_aug13Cast", "_aug14Cast", "_aug15Cast", "_aug16Cast", "_aug17Cast", "_aug18Cast", "_aug19Cast", "_aug20Cast", "_aug21Cast", "_aug22Cast", "_aug23Cast", "_aug24Cast", "_aug25Cast", "_aug26Cast", "_aug27Cast", "_aug28Cast", "_aug29Cast", "_aug30Cast", "_aug31Cast", "_augTodayCast", "_authorsInkUsed", "_baconMachineUsed", "_bagOfCandy", "_bagOfCandyUsed", "_bagOTricksUsed", "_ballastTurtleUsed", "_ballInACupUsed", "_ballpit", "_barrelPrayer", "_bastilleLastBattleWon", "_beachCombing", "_bendHellUsed", "_blackMonolithUsed", "_blankoutUsed", "_bonersSummoned", "_bookOfEverySkillUsed", "_borrowedTimeUsed", "_bowleggedSwaggerUsed", "_bowlFullOfJellyUsed", "_boxOfHammersUsed", "_brainPreservationFluidUsed", "_brassDreadFlaskUsed", "_cameraUsed", "_canSeekBirds", "_candyCaneSwordBackAlley", "_candyCaneSwordHauntedBedroom", "_candyCaneSwordHauntedLibrary", "_candyCaneSwordLyle", "_candyCaneSwordMadnessBakery", "_candyCaneSwordOvergrownLot", "_candyCaneSwordOvergrownShrine", "_candyCaneSwordPalindome", "_candyCaneSwordSouthOfTheBorder", "_candyCaneSwordSpookyForest", "_carboLoaded", "_cargoPocketEmptied", "_ceciHatUsed", "_chateauDeskHarvested", "_chateauMonsterFought", "_chibiChanged", "_chronerCrossUsed", "_chronerTriggerUsed", "_chubbyAndPlumpUsed", "_circadianRhythmsRecalled", "_circleDrumUsed", "_clanFortuneBuffUsed", "_claraBellUsed", "_coalPaperweightUsed", "_cocoaDispenserUsed", "_cocktailShakerUsed", "_coldAirportToday", "_coldOne", "_communismUsed", "_confusingLEDClockUsed", "_controlPanelUsed", "_cookbookbatRecipeDrops", "_corruptedStardustUsed", "_cosmicSixPackConjured", "_crappyCameraUsed", "_creepyVoodooDollUsed", "_crimboTraining", "_crimboTree", "_cursedKegUsed", "_cursedMicrowaveUsed", "_dailyDungeonMalwareUsed", "_darkChocolateHeart", "_daycareFights", "_daycareNap", "_daycareSpa", "_daycareToday", "_defectiveTokenChecked", "_defectiveTokenUsed", "_dinseyGarbageDisposed", "_discoKnife", "_distentionPillUsed", "_dnaHybrid", "_docClocksThymeCocktailDrunk", "_drippingHallDoor1", "_drippingHallDoor2", "_drippingHallDoor3", "_drippingHallDoor4", "_drippyCaviarUsed", "_drippyNuggetUsed", "_drippyPilsnerUsed", "_drippyPlumUsed", "_drippyWineUsed", "_eldritchHorrorEvoked", "_eldritchTentacleFought", "_entauntaunedToday", "_envyfishEggUsed", "_epicMcTwistUsed", "_essentialTofuUsed", "_etchedHourglassUsed", "_eternalCarBatteryUsed", "_everfullGlassUsed", "_extraGreasySliderEaten", "_eyeAndATwistUsed", "_fancyChessSetUsed", "_falloutShelterSpaUsed", "_fancyHotDogEaten", "_farmerItemsCollected", "_favoriteBirdVisited", "_firedJokestersGun", "_fireExtinguisherRefilled", "_fireStartingKitUsed", "_fireworksShop", "_fireworksShopHatBought", "_fireworksShopEquipmentBought", "_fireworkUsed", "_fishyPipeUsed", "_floundryItemCreated", "_floundryItemUsed", "_freePillKeeperUsed", "_frToday", "_frostyMugUsed", "_fudgeSporkUsed", "_garbageItemChanged", "_gingerBiggerAlligators", "_gingerbreadCityToday", "_gingerbreadClockAdvanced", "_gingerbreadClockVisited", "_gingerbreadColumnDestroyed", "_gingerbreadMobHitUsed", "_glennGoldenDiceUsed", "_glitchItemImplemented", "_gnollEyeUsed", "_governmentPerDiemUsed", "_grimBuff", "_guildManualUsed", "_guzzlrQuestAbandoned", "_hardKnocksDiplomaUsed", "_hippyMeatCollected", "_hobbyHorseUsed", "_hodgmansBlanketDrunk", "_holidayFunUsed", "_holoWristCrystal", "_hotAirportToday", "_hungerSauceUsed", "_hyperinflatedSealLungUsed", "_iceHotelRoomsRaided", "_iceSculptureUsed", "_incredibleSelfEsteemCast", "_infernoDiscoVisited", "_internetDailyDungeonMalwareBought", "_internetGallonOfMilkBought", "_internetPlusOneBought", "_internetPrintScreenButtonBought", "_internetViralVideoBought", "_interviewIsabella", "_interviewMasquerade", "_interviewVlad", "_inquisitorsUnidentifiableObjectUsed", "_ironicMoustache", "_jackassPlumberGame", "_jarlsCheeseSummoned", "_jarlsCreamSummoned", "_jarlsDoughSummoned", "_jarlsEggsSummoned", "_jarlsFruitSummoned", "_jarlsMeatSummoned", "_jarlsPotatoSummoned", "_jarlsVeggiesSummoned", "_jingleBellUsed", "_jukebox", "_kgbFlywheelCharged", "_kgbLeftDrawerUsed", "_kgbOpened", "_kgbRightDrawerUsed", "_kolConSixPackUsed", "_kolhsCutButNotDried", "_kolhsIsskayLikeAnAshtray", "_kolhsPoeticallyLicenced", "_kolhsSchoolSpirited", "_kudzuSaladEaten", "_lastCombatLost", "_lastCombatWon", "_latteBanishUsed", "_latteCopyUsed", "_latteDrinkUsed", "_leafAntEggCrafted", "_leafDayShortenerCrafted", "_leafTattooCrafted", "_leavesJumped", "_legendaryBeat", "_licenseToChillUsed", "_lodestoneUsed", "_lookingGlass", "_loveTunnelToday", "_loveTunnelUsed", "_luckyGoldRingVolcoino", "_lunchBreak", "_lupineHormonesUsed", "_lyleFavored", "_madLiquorDrunk", "_madTeaParty", "_mafiaMiddleFingerRingUsed", "_managerialManipulationUsed", "_mansquitoSerumUsed", "_mapToACandyRichBlockUsed", "_maydayDropped", "_mayoDeviceRented", "_mayoTankSoaked", "_meatballMachineUsed", "_meatifyMatterUsed", "_milkOfMagnesiumUsed", "_mimeArmyShotglassUsed", "_miniKiwiIntoxicatingSpiritsBought", "_missGravesVermouthDrunk", "_missileLauncherUsed", "_molehillMountainUsed", "_momFoodReceived", "_mrBurnsgerEaten", "_muffinOrderedToday", "_mulliganStewEaten", "_mushroomGardenVisited", "_neverendingPartyToday", "_newYouQuestCompleted", "_olympicSwimmingPool", "_olympicSwimmingPoolItemFound", "_overflowingGiftBasketUsed", "_partyHard", "_pastaAdditive", "_perfectFreezeUsed", "_perfectlyFairCoinUsed", "_petePartyThrown", "_peteRiotIncited", "_photocopyUsed", "_pickyTweezersUsed", "_pickleJuiceDrunk", "_pingPongGame", "_pirateBellowUsed", "_pirateForkUsed", "_pixelOrbUsed", "_plumbersMushroomStewEaten", "_pneumaticityPotionUsed", "_portableSteamUnitUsed", "_pottedTeaTreeUsed", "_prToday", "_psychoJarFilled", "_psychoJarUsed", "_psychokineticHugUsed", "_punchingMirrorUsed", "_rainStickUsed", "_redwoodRainStickUsed", "_replicaSnowconeTomeUsed", "_replicaResolutionLibramUsed", "_replicaSmithsTomeUsed", "_requestSandwichSucceeded", "_rhinestonesAcquired", "_saladForkUsed", "_seaJellyHarvested", "_setOfJacksUsed", "_sewingKitUsed", "_sexChanged", "_shadowAffinityToday", "_shadowForestLooted", "_shrubDecorated", "_silverDreadFlaskUsed", "_sitCourseCompleted", "_skateBuff1", "_skateBuff2", "_skateBuff3", "_skateBuff4", "_skateBuff5", "_sleazeAirportToday", "_snowballFactoryUsed", "_sobrieTeaUsed", "_softwareGlitchTurnReceived", "_sotParcelReturned", "_spacegateMurderbot", "_spacegateRuins", "_spacegateSpant", "_spacegateToday", "_spacegateVaccine", "_spaghettiBreakfast", "_spaghettiBreakfastEaten", "_spinmasterLatheVisited", "_spinningWheel", "_spookyAirportToday", "_stabonicScrollUsed", "_steelyEyedSquintUsed", "_stenchAirportToday", "_stinkyCheeseBanisherUsed", "_strangeStalagmiteUsed", "_streamsCrossed", "_stuffedPocketwatchUsed", "_styxSprayUsed", "_summonAnnoyanceUsed", "_summonCarrotUsed", "_summonResortPassUsed", "_sweetToothUsed", "_syntheticDogHairPillUsed", "_tacoFlierUsed", "_telegraphOfficeToday", "_templeHiddenPower", "_tempuraAirUsed", "_thesisDelivered", "_tiedUpFlamingLeafletFought", "_tiedUpFlamingMonsteraFought", "_tiedUpLeaviathanFought", "_timeSpinnerReplicatorUsed", "_toastSummoned", "_tonicDjinn", "_treasuryEliteMeatCollected", "_treasuryHaremMeatCollected", "_trivialAvocationsGame", "_tryptophanDartUsed", "_turtlePowerCast", "_twelveNightEnergyUsed", "_ultraMegaSourBallUsed", "_victorSpoilsUsed", "_villainLairCanLidUsed", "_villainLairColorChoiceUsed", "_villainLairDoorChoiceUsed", "_villainLairFirecrackerUsed", "_villainLairSymbologyChoiceUsed", "_villainLairWebUsed", "_vmaskBanisherUsed", "_voraciTeaUsed", "_volcanoItemRedeemed", "_volcanoSuperduperheatedMetal", "_voodooSnuffUsed", "_voteToday", "_VYKEACafeteriaRaided", "_VYKEALoungeRaided", "_walfordQuestStartedToday", "_warbearBankUsed", "_warbearBreakfastMachineUsed", "_warbearGyrocopterUsed", "_warbearSodaMachineUsed", "_wildfireBarrelHarvested", "_witchessBuff", "_workshedItemUsed", "_yamBatteryUsed", "_zombieClover", "_preventScurvy", "lockedItem4637", "lockedItem4638", "lockedItem4639", "lockedItem4646", "lockedItem4647", "unknownRecipe3542", "unknownRecipe3543", "unknownRecipe3544", "unknownRecipe3545", "unknownRecipe3546", "unknownRecipe3547", "unknownRecipe3548", "unknownRecipe3749", "unknownRecipe3751", "unknownRecipe4172", "unknownRecipe4173", "unknownRecipe4174", "unknownRecipe5060", "unknownRecipe5061", "unknownRecipe5062", "unknownRecipe5063", "unknownRecipe5064", "unknownRecipe5066", "unknownRecipe5067", "unknownRecipe5069", "unknownRecipe5070", "unknownRecipe5072", "unknownRecipe5073", "unknownRecipe5670", "unknownRecipe5671", "unknownRecipe6501", "unknownRecipe6564", "unknownRecipe6565", "unknownRecipe6566", "unknownRecipe6567", "unknownRecipe6568", "unknownRecipe6569", "unknownRecipe6570", "unknownRecipe6571", "unknownRecipe6572", "unknownRecipe6573", "unknownRecipe6574", "unknownRecipe6575", "unknownRecipe6576", "unknownRecipe6577", "unknownRecipe6578", "unknownRecipe7752", "unknownRecipe7753", "unknownRecipe7754", "unknownRecipe7755", "unknownRecipe7756", "unknownRecipe7757", "unknownRecipe7758", "unknownRecipe10970", "unknownRecipe10971", "unknownRecipe10972", "unknownRecipe10973", "unknownRecipe10974", "unknownRecipe10975", "unknownRecipe10976", "unknownRecipe10977", "unknownRecipe10978", "unknownRecipe10988", "unknownRecipe10989", "unknownRecipe10990", "unknownRecipe10991", "unknownRecipe10992", "unknownRecipe11000"];
var numericProperties = ["coinMasterIndex", "dailyDeedsVersion", "defaultDropdown1", "defaultDropdown2", "defaultDropdownSplit", "defaultLimit", "fixedThreadPoolSize", "itemManagerIndex", "lastBuffRequestType", "lastGlobalCounterDay", "lastImageCacheClear", "pingDefaultTestPings", "pingLoginCount", "pingLoginGoal", "pingLoginThreshold", "pingTestPings", "previousUpdateRevision", "relayDelayForSVN", "relaySkillButtonCount", "scriptButtonPosition", "statusDropdown", "svnThreadPoolSize", "toolbarPosition", "_beachTides", "_g9Effect", "8BitBonusTurns", "8BitScore", "addingScrolls", "affirmationCookiesEaten", "aminoAcidsUsed", "antagonisticSnowmanKitCost", "ascensionsToday", "asolDeferredPoints", "asolPointsPigSkinner", "asolPointsCheeseWizard", "asolPointsJazzAgent", "autoAbortThreshold", "autoAntidote", "autoBuyPriceLimit", "autumnatonQuestTurn", "availableCandyCredits", "availableDimes", "availableFunPoints", "availableMrStore2002Credits", "availableQuarters", "availableStoreCredits", "availableSwagger", "averageSwagger", "awolMedicine", "awolPointsBeanslinger", "awolPointsCowpuncher", "awolPointsSnakeoiler", "awolDeferredPointsBeanslinger", "awolDeferredPointsCowpuncher", "awolDeferredPointsSnakeoiler", "awolVenom", "bagOTricksCharges", "ballpitBonus", "bankedKarma", "bartenderTurnsUsed", "basementMallPrices", "basementSafetyMargin", "batmanFundsAvailable", "batmanBonusInitialFunds", "batmanTimeLeft", "bearSwagger", "beeCounter", "beGregariousCharges", "beGregariousFightsLeft", "birdformCold", "birdformHot", "birdformRoc", "birdformSleaze", "birdformSpooky", "birdformStench", "blackBartsBootyCost", "blackPuddingsDefeated", "blackForestProgress", "blankOutUsed", "bloodweiserDrunk", "bondPoints", "bondVillainsDefeated", "boneAbacusVictories", "bookOfFactsGummi", "bookOfFactsPinata", "booPeakProgress", "borisPoints", "breakableHandling", "breakableHandling1964", "breakableHandling9691", "breakableHandling9692", "breakableHandling9699", "breathitinCharges", "brodenBacteria", "brodenSprinkles", "buffBotMessageDisposal", "buffBotPhilanthropyType", "buffJimmyIngredients", "burnoutsDefeated", "burrowgrubSummonsRemaining", "camelSpit", "camerasUsed", "campAwayDecoration", "candyWitchTurnsUsed", "candyWitchCandyTotal", "carboLoading", "catBurglarBankHeists", "cellarLayout", "charitableDonations", "chasmBridgeProgress", "chefTurnsUsed", "chessboardsCleared", "chibiAlignment", "chibiBirthday", "chibiFitness", "chibiIntelligence", "chibiLastVisit", "chibiSocialization", "chilledToTheBone", "cinchoSaltAndLime", "cinderellaMinutesToMidnight", "cinderellaScore", "cocktailSummons", "commerceGhostCombats", "controlPanelOmega", "cornucopiasOpened", "cosmicBowlingBallReturnCombats", "cozyCounter6332", "cozyCounter6333", "cozyCounter6334", "craftingClay", "craftingLeather", "craftingStraw", "crimbo16BeardChakraCleanliness", "crimbo16BootsChakraCleanliness", "crimbo16BungChakraCleanliness", "crimbo16CrimboHatChakraCleanliness", "crimbo16GutsChakraCleanliness", "crimbo16HatChakraCleanliness", "crimbo16JellyChakraCleanliness", "crimbo16LiverChakraCleanliness", "crimbo16NippleChakraCleanliness", "crimbo16NoseChakraCleanliness", "crimbo16ReindeerChakraCleanliness", "crimbo16SackChakraCleanliness", "crimboTrainingSkill", "crimboTreeDays", "cubelingProgress", "currentExtremity", "currentHedgeMazeRoom", "currentMojoFilters", "currentNunneryMeat", "currentPortalEnergy", "currentReplicaStoreYear", "cursedMagnifyingGlassCount", "cyrptAlcoveEvilness", "cyrptCrannyEvilness", "cyrptNicheEvilness", "cyrptNookEvilness", "cyrptTotalEvilness", "darkGyfftePoints", "dartsThrown", "daycareEquipment", "daycareInstructors", "daycareLastScavenge", "daycareToddlers", "dbNemesisSkill1", "dbNemesisSkill2", "dbNemesisSkill3", "desertExploration", "desktopHeight", "desktopWidth", "dinseyFilthLevel", "dinseyFunProgress", "dinseyNastyBearsDefeated", "dinseySocialJusticeIProgress", "dinseySocialJusticeIIProgress", "dinseyTouristsFed", "dinseyToxicMultiplier", "doctorBagQuestLights", "doctorBagUpgrades", "dreadScroll1", "dreadScroll2", "dreadScroll3", "dreadScroll4", "dreadScroll5", "dreadScroll6", "dreadScroll7", "dreadScroll8", "dripAdventuresSinceAscension", "drippingHallAdventuresSinceAscension", "drippingTreesAdventuresSinceAscension", "drippyBatsUnlocked", "drippyJuice", "drippyOrbsClaimed", "drunkenSwagger", "edDefeatAbort", "edPoints", "eldritchTentaclesFought", "electricKoolAidEaten", "elfGratitude", "encountersUntilDMTChoice", "encountersUntilYachtzeeChoice", "encountersUntilNEPChoice", "encountersUntilSRChoice", "ensorceleeLevel", "entauntaunedColdRes", "essenceOfAnnoyanceCost", "essenceOfBearCost", "extraRolloverAdventures", "falloutShelterLevel", "familiarSweat", "fingernailsClipped", "fistSkillsKnown", "flyeredML", "fossilB", "fossilD", "fossilN", "fossilP", "fossilS", "fossilW", "fratboysDefeated", "frenchGuardTurtlesFreed", "funGuyMansionKills", "garbageChampagneCharge", "garbageFireProgress", "garbageShirtCharge", "garbageTreeCharge", "garlandUpgrades", "getsYouDrunkTurnsLeft", "ghostPepperTurnsLeft", "gingerDigCount", "gingerLawChoice", "gingerMuscleChoice", "gingerTrainScheduleStudies", "gladiatorBallMovesKnown", "gladiatorBladeMovesKnown", "gladiatorNetMovesKnown", "glitchItemCost", "glitchItemImplementationCount", "glitchItemImplementationLevel", "glitchSwagger", "gloverPoints", "gnasirProgress", "goldenMrAccessories", "gongPath", "gooseDronesRemaining", "goreCollected", "gourdItemCount", "greyYouPoints", "grimoire1Summons", "grimoire2Summons", "grimoire3Summons", "grimstoneCharge", "guardTurtlesFreed", "guideToSafariCost", "guyMadeOfBeesCount", "guzzlrBronzeDeliveries", "guzzlrDeliveryProgress", "guzzlrGoldDeliveries", "guzzlrPlatinumDeliveries", "haciendaLayout", "hallowiener8BitRealm", "hallowienerCoinspiracy", "hareMillisecondsSaved", "hareTurnsUsed", "heavyRainsStartingThunder", "heavyRainsStartingRain", "heavyRainsStartingLightning", "heroDonationBoris", "heroDonationJarlsberg", "heroDonationSneakyPete", "hiddenApartmentProgress", "hiddenBowlingAlleyProgress", "hiddenHospitalProgress", "hiddenOfficeProgress", "hiddenTavernUnlock", "highTopPumped", "hippiesDefeated", "holidayHalsBookCost", "holidaySwagger", "homemadeRobotUpgrades", "homebodylCharges", "hpAutoRecovery", "hpAutoRecoveryTarget", "iceSwagger", "jarlsbergPoints", "jungCharge", "junglePuns", "knownAscensions", "kolhsTotalSchoolSpirited", "lastAnticheeseDay", "lastArcadeAscension", "lastBadMoonReset", "lastBangPotionReset", "lastBattlefieldReset", "lastBeardBuff", "lastBreakfast", "lastCartographyBooPeak", "lastCartographyCastleTop", "lastCartographyDarkNeck", "lastCartographyDefiledNook", "lastCartographyFratHouse", "lastCartographyFratHouseVerge", "lastCartographyGuanoJunction", "lastCartographyHauntedBilliards", "lastCartographyHippyCampVerge", "lastCartographyZeppelinProtesters", "lastCastleGroundUnlock", "lastCastleTopUnlock", "lastCellarReset", "lastChanceThreshold", "lastChasmReset", "lastColosseumRoundWon", "lastCouncilVisit", "lastCounterDay", "lastDesertUnlock", "lastDispensaryOpen", "lastDMTDuplication", "lastDwarfFactoryReset", "lastEVHelmetValue", "lastEVHelmetReset", "lastEmptiedStorage", "lastFilthClearance", "lastGoofballBuy", "lastGuildStoreOpen", "lastGuyMadeOfBeesReset", "lastFratboyCall", "lastFriarCeremonyAscension", "lastFriarsElbowNC", "lastFriarsHeartNC", "lastFriarsNeckNC", "lastHippyCall", "lastIslandUnlock", "lastKeyotronUse", "lastKingLiberation", "lastLightsOutTurn", "lastMushroomPlot", "lastMiningReset", "lastNemesisReset", "lastPaperStripReset", "lastPirateEphemeraReset", "lastPirateInsultReset", "lastPlusSignUnlock", "lastQuartetAscension", "lastQuartetRequest", "lastSecondFloorUnlock", "lastShadowForgeUnlockAdventure", "lastSkateParkReset", "lastStillBeatingSpleen", "lastTavernAscension", "lastTavernSquare", "lastTelescopeReset", "lastTempleAdventures", "lastTempleButtonsUnlock", "lastTempleUnlock", "lastThingWithNoNameDefeated", "lastTowelAscension", "lastTr4pz0rQuest", "lastTrainsetConfiguration", "lastVioletFogMap", "lastVoteMonsterTurn", "lastWartDinseyDefeated", "lastWuTangDefeated", "lastYearbookCameraAscension", "lastZapperWand", "lastZapperWandExplosionDay", "lawOfAveragesCost", "legacyPoints", "libramSummons", "lightsOutAutomation", "louvreDesiredGoal", "louvreGoal", "lovebugsAridDesert", "lovebugsBeachBuck", "lovebugsBooze", "lovebugsChroner", "lovebugsCoinspiracy", "lovebugsCyrpt", "lovebugsFreddy", "lovebugsFunFunds", "lovebugsHoboNickel", "lovebugsItemDrop", "lovebugsMeat", "lovebugsMeatDrop", "lovebugsMoxie", "lovebugsMuscle", "lovebugsMysticality", "lovebugsOilPeak", "lovebugsOrcChasm", "lovebugsPowder", "lovebugsWalmart", "lttQuestDifficulty", "lttQuestStageCount", "manaBurnSummonThreshold", "manaBurningThreshold", "manaBurningTrigger", "manorDrawerCount", "manualOfNumberologyCost", "mapToKokomoCost", "masksUnlocked", "maximizerMRUSize", "maximizerCombinationLimit", "maximizerEquipmentLevel", "maximizerEquipmentScope", "maximizerMaxPrice", "maximizerPriceLevel", "maxManaBurn", "mayflyExperience", "mayoLevel", "meansuckerPrice", "merkinVocabularyMastery", "miniAdvClass", "miniMartinisDrunk", "moleTunnelLevel", "mothershipProgress", "mpAutoRecovery", "mpAutoRecoveryTarget", "munchiesPillsUsed", "mushroomGardenCropLevel", "nextAprilBandTurn", "nextParanormalActivity", "nextQuantumFamiliarOwnerId", "nextQuantumFamiliarTurn", "noobPoints", "noobDeferredPoints", "noodleSummons", "nsContestants1", "nsContestants2", "nsContestants3", "nuclearAutumnPoints", "numericSwagger", "nunsVisits", "oilPeakProgress", "optimalSwagger", "optimisticCandleProgress", "palindomeDudesDefeated", "parasolUsed", "pendingMapReflections", "pingpongSkill", "pirateSwagger", "plantingDay", "plumberBadgeCost", "plumberCostumeCost", "plumberPoints", "poolSharkCount", "poolSkill", "primaryLabGooIntensity", "prismaticSummons", "procrastinatorLanguageFluency", "promptAboutCrafting", "puzzleChampBonus", "pyramidPosition", "quantumPoints", "reagentSummons", "reanimatorArms", "reanimatorLegs", "reanimatorSkulls", "reanimatorWeirdParts", "reanimatorWings", "recentLocations", "redSnapperProgress", "relayPort", "relocatePygmyJanitor", "relocatePygmyLawyer", "rockinRobinProgress", "romanCandelabraRedCasts", "romanCandelabraBlueCasts", "romanCandelabraYellowCasts", "romanCandelabraGreenCasts", "romanCandelabraPurpleCasts", "ROMOfOptimalityCost", "rumpelstiltskinKidsRescued", "rumpelstiltskinTurnsUsed", "rwbMonsterCount", "safariSwagger", "sausageGrinderUnits", "schoolOfHardKnocksDiplomaCost", "schoolSwagger", "scrapbookCharges", "screechCombats", "scriptMRULength", "seaodesFound", "SeasoningSwagger", "sexChanges", "shenInitiationDay", "shockingLickCharges", "singleFamiliarRun", "skillBurn3", "skillBurn90", "skillBurn153", "skillBurn154", "skillBurn155", "skillBurn1019", "skillBurn5017", "skillBurn6014", "skillBurn6015", "skillBurn6016", "skillBurn6020", "skillBurn6021", "skillBurn6022", "skillBurn6023", "skillBurn6024", "skillBurn6026", "skillBurn6028", "skillBurn7323", "skillBurn14008", "skillBurn14028", "skillBurn14038", "skillBurn15011", "skillBurn15028", "skillBurn17005", "skillBurn22034", "skillBurn22035", "skillBurn23301", "skillBurn23302", "skillBurn23303", "skillBurn23304", "skillBurn23305", "skillBurn23306", "skillLevel46", "skillLevel47", "skillLevel48", "skillLevel117", "skillLevel118", "skillLevel121", "skillLevel128", "skillLevel134", "skillLevel135", "skillLevel144", "skillLevel180", "skillLevel188", "skillLevel227", "skillLevel7254", "slimelingFullness", "slimelingStacksDropped", "slimelingStacksDue", "smoresEaten", "smutOrcNoncombatProgress", "sneakyPetePoints", "snojoMoxieWins", "snojoMuscleWins", "snojoMysticalityWins", "sourceAgentsDefeated", "sourceEnlightenment", "sourceInterval", "sourcePoints", "sourceTerminalGram", "sourceTerminalPram", "sourceTerminalSpam", "spaceBabyLanguageFluency", "spacePirateLanguageFluency", "spelunkyNextNoncombat", "spelunkySacrifices", "spelunkyWinCount", "spookyPuttyCopiesMade", "spookyVHSTapeMonsterTurn", "statbotUses", "sugarCounter4178", "sugarCounter4179", "sugarCounter4180", "sugarCounter4181", "sugarCounter4182", "sugarCounter4183", "sugarCounter4191", "summonAnnoyanceCost", "sweat", "tacoDanCocktailSauce", "tacoDanFishMeat", "tavernLayout", "telescopeUpgrades", "tempuraSummons", "timeSpinnerMedals", "timesRested", "tomeSummons", "totalCharitableDonations", "trainsetPosition", "turtleBlessingTurns", "twinPeakProgress", "twoCRSPoints", "unicornHornInflation", "universalSeasoningCost", "usable1HWeapons", "usable1xAccs", "usable2HWeapons", "usable3HWeapons", "usableAccessories", "usableHats", "usableOffhands", "usableOther", "usablePants", "usableShirts", "valueOfAdventure", "valueOfInventory", "valueOfStill", "valueOfTome", "vintnerCharge", "vintnerWineLevel", "violetFogGoal", "walfordBucketProgress", "warehouseProgress", "welcomeBackAdv", "wereProfessorBite", "wereProfessorKick", "wereProfessorLiver", "wereProfessorPoints", "wereProfessorRend", "wereProfessorResearchPoints", "wereProfessorStomach", "wereProfessorTransformTurns", "whetstonesUsed", "wolfPigsEvicted", "wolfTurnsUsed", "writingDesksDefeated", "xoSkeleltonXProgress", "xoSkeleltonOProgress", "yearbookCameraAscensions", "yearbookCameraUpgrades", "youRobotBody", "youRobotBottom", "youRobotLeft", "youRobotPoints", "youRobotRight", "youRobotTop", "zeppelinProtestors", "zigguratLianas", "zombiePoints", "_absintheDrops", "_abstractionDropsCrown", "_aguaDrops", "_xenomorphCharge", "_ancestralRecallCasts", "_antihangoverBonus", "_aprilBandInstruments", "_aprilBandSaxophoneUses", "_aprilBandTomUses", "_aprilBandTubaUses", "_aprilBandStaffUses", "_aprilBandPiccoloUses", "_astralDrops", "_augSkillsCast", "_automatedFutureManufactures", "_autumnatonQuests", "_backUpUses", "_badlyRomanticArrows", "_badgerCharge", "_balefulHowlUses", "_banderRunaways", "_bastilleCheese", "_bastilleGames", "_bastilleGameTurn", "_bastilleLastCheese", "_beanCannonUses", "_bearHugs", "_beerLensDrops", "_bellydancerPickpockets", "_benettonsCasts", "_birdsSoughtToday", "_bookOfFactsWishes", "_bookOfFactsTatters", "_boomBoxFights", "_boomBoxSongsLeft", "_bootStomps", "_boxingGloveArrows", "_brickoEyeSummons", "_brickoFights", "_campAwayCloudBuffs", "_campAwaySmileBuffs", "_candySummons", "_captainHagnkUsed", "_carnieCandyDrops", "_carnivorousPottedPlantWins", "_carrotNoseDrops", "_catBurglarCharge", "_catBurglarHeistsComplete", "_cheerleaderSteam", "_chestXRayUsed", "_chibiAdventures", "_chipBags", "_chocolateCigarsUsed", "_chocolateCoveredPingPongBallsUsed", "_chocolateSculpturesUsed", "_chocolatesUsed", "_chronolithActivations", "_chronolithNextCost", "_cinchUsed", "_cinchoRests", "_circadianRhythmsAdventures", "_clanFortuneConsultUses", "_clipartSummons", "_cloversPurchased", "_coldMedicineConsults", "_coldMedicineEquipmentTaken", "_companionshipCasts", "_cookbookbatCrafting", "_cosmicBowlingSkillsUsed", "_crimbo21ColdResistance", "_dailySpecialPrice", "_dartsLeft", "_daycareGymScavenges", "_daycareRecruits", "_deckCardsDrawn", "_deluxeKlawSummons", "_demandSandwich", "_detectiveCasesCompleted", "_disavowed", "_dnaPotionsMade", "_donhosCasts", "_douseFoeUses", "_dreamJarDrops", "_drunkPygmyBanishes", "_edDefeats", "_edLashCount", "_elronsCasts", "_enamorangs", "_energyCollected", "_expertCornerCutterUsed", "_extraTimeUsed", "_favorRareSummons", "_feastUsed", "_feelinTheRhythm", "_feelPrideUsed", "_feelExcitementUsed", "_feelHatredUsed", "_feelLonelyUsed", "_feelNervousUsed", "_feelEnvyUsed", "_feelDisappointedUsed", "_feelSuperiorUsed", "_feelLostUsed", "_feelNostalgicUsed", "_feelPeacefulUsed", "_fingertrapArrows", "_fireExtinguisherCharge", "_fragrantHerbsUsed", "_freeBeachWalksUsed", "_frButtonsPressed", "_fudgeWaspFights", "_gapBuffs", "_garbageFireDrops", "_garbageFireDropsCrown", "_genieFightsUsed", "_genieWishesUsed", "_gibbererAdv", "_gibbererCharge", "_gingerbreadCityTurns", "_glarkCableUses", "_glitchMonsterFights", "_gnomeAdv", "_godLobsterFights", "_goldenMoneyCharge", "_gongDrops", "_gothKidCharge", "_gothKidFights", "_greyYouAdventures", "_grimBrotherCharge", "_grimFairyTaleDrops", "_grimFairyTaleDropsCrown", "_grimoireConfiscatorSummons", "_grimoireGeekySummons", "_grimstoneMaskDrops", "_grimstoneMaskDropsCrown", "_grooseCharge", "_grooseDrops", "_grubbyWoolDrops", "_guzzlrDeliveries", "_guzzlrGoldDeliveries", "_guzzlrPlatinumDeliveries", "_hareAdv", "_hareCharge", "_highTopPumps", "_hipsterAdv", "_hoardedCandyDropsCrown", "_hoboUnderlingSummons", "_holoWristDrops", "_holoWristProgress", "_hotAshesDrops", "_hotJellyUses", "_hotTubSoaks", "_humanMuskUses", "_iceballUses", "_inigosCasts", "_jerksHealthMagazinesUsed", "_jiggleCheese", "_jiggleCream", "_jiggleLife", "_jiggleSteak", "_jitbCharge", "_juneCleaverFightsLeft", "_juneCleaverEncounters", "_juneCleaverStench", "_juneCleaverSpooky", "_juneCleaverSleaze", "_juneCleaverHot", "_juneCleaverCold", "_juneCleaverSkips", "_jungDrops", "_kgbClicksUsed", "_kgbDispenserUses", "_kgbTranquilizerDartUses", "_klawSummons", "_kloopCharge", "_kloopDrops", "_kolhsAdventures", "_kolhsSavedByTheBell", "_lastDailyDungeonRoom", "_lastSausageMonsterTurn", "_lastZomboEye", "_latteRefillsUsed", "_leafblowerML", "_leafLassosCrafted", "_leafMonstersFought", "_leavesBurned", "_legionJackhammerCrafting", "_llamaCharge", "_longConUsed", "_lovebugsBeachBuck", "_lovebugsChroner", "_lovebugsCoinspiracy", "_lovebugsFreddy", "_lovebugsFunFunds", "_lovebugsHoboNickel", "_lovebugsWalmart", "_loveChocolatesUsed", "_lynyrdSnareUses", "_machineTunnelsAdv", "_macrometeoriteUses", "_mafiaThumbRingAdvs", "_mapToACandyRichBlockDrops", "_mayamRests", "_mayflowerDrops", "_mayflySummons", "_mediumSiphons", "_meteoriteAdesUsed", "_meteorShowerUses", "_micrometeoriteUses", "_mildEvilPerpetrated", "_mimicEggsDonated", "_mimicEggsObtained", "_miniKiwiDrops", "_miniMartiniDrops", "_monkeyPawWishesUsed", "_monsterHabitatsFightsLeft", "_monsterHabitatsRecalled", "_monstersMapped", "_mushroomGardenFights", "_nanorhinoCharge", "_navelRunaways", "_neverendingPartyFreeTurns", "_newYouQuestSharpensDone", "_newYouQuestSharpensToDo", "_nextColdMedicineConsult", "_nextQuantumAlignment", "_nightmareFuelCharges", "_noobSkillCount", "_nuclearStockpileUsed", "_oilExtracted", "_olfactionsUsed", "_optimisticCandleDropsCrown", "_oreDropsCrown", "_otoscopeUsed", "_oysterEggsFound", "_pantsgivingBanish", "_pantsgivingCount", "_pantsgivingCrumbs", "_pantsgivingFullness", "_pasteDrops", "_peteJukeboxFixed", "_peteJumpedShark", "_petePeeledOut", "_pieDrops", "_piePartsCount", "_pixieCharge", "_pocketProfessorLectures", "_poisonArrows", "_pokeGrowFertilizerDrops", "_poolGames", "_powderedGoldDrops", "_powderedMadnessUses", "_powerfulGloveBatteryPowerUsed", "_powerPillDrops", "_powerPillUses", "_precisionCasts", "_questPartyFairItemsOpened", "_radlibSummons", "_raindohCopiesMade", "_rapidPrototypingUsed", "_raveStealCount", "_reflexHammerUsed", "_resolutionAdv", "_resolutionRareSummons", "_riftletAdv", "_robinEggDrops", "_roboDrops", "_rogueProgramCharge", "_romanticFightsLeft", "_saberForceMonsterCount", "_saberForceUses", "_saberMod", "_saltGrainsConsumed", "_sandwormCharge", "_saplingsPlanted", "_sausageFights", "_sausagesEaten", "_sausagesMade", "_sealFigurineUses", "_sealScreeches", "_sealsSummoned", "_shadowBricksUsed", "_shadowRiftCombats", "_shatteringPunchUsed", "_shortOrderCookCharge", "_shrubCharge", "_sloppyDinerBeachBucks", "_smilesOfMrA", "_smithsnessSummons", "_snojoFreeFights", "_snojoParts", "_snokebombUsed", "_snowconeSummons", "_snowglobeDrops", "_snowSuitCount", "_sourceTerminalDigitizeMonsterCount", "_sourceTerminalDigitizeUses", "_sourceTerminalDuplicateUses", "_sourceTerminalEnhanceUses", "_sourceTerminalExtrudes", "_sourceTerminalPortscanUses", "_spaceFurDropsCrown", "_spacegatePlanetIndex", "_spacegateTurnsLeft", "_spaceJellyfishDrops", "_speakeasyDrinksDrunk", "_speakeasyFreeFights", "_spelunkerCharges", "_spelunkingTalesDrops", "_spikolodonSpikeUses", "_spookyJellyUses", "_stackLumpsUses", "_steamCardDrops", "_stickerSummons", "_stinkyCheeseCount", "_stressBallSqueezes", "_sugarSummons", "_surprisinglySweetSlashUsed", "_surprisinglySweetStabUsed", "_sweatOutSomeBoozeUsed", "_taffyRareSummons", "_taffyYellowSummons", "_tearawayPantsAdvs", "_thanksgettingFoodsEaten", "_thingfinderCasts", "_thinknerdPackageDrops", "_thorsPliersCrafting", "_timeHelmetAdv", "_timeSpinnerMinutesUsed", "_tokenDrops", "_transponderDrops", "_turkeyBlastersUsed", "_turkeyBooze", "_turkeyMuscle", "_turkeyMyst", "_turkeyMoxie", "_unaccompaniedMinerUsed", "_unconsciousCollectiveCharge", "_universalSeasoningsUsed", "_universeCalculated", "_universeImploded", "_usedReplicaBatoomerang", "_vampyreCloakeFormUses", "_villainLairProgress", "_vitachocCapsulesUsed", "_vmaskAdv", "_voidFreeFights", "_volcanoItem1", "_volcanoItem2", "_volcanoItem3", "_volcanoItemCount1", "_volcanoItemCount2", "_volcanoItemCount3", "_voteFreeFights", "_VYKEACompanionLevel", "_warbearAutoAnvilCrafting", "_waxGlobDrops", "_whiteRiceDrops", "_witchessFights", "_xoHugsUsed", "_yellowPixelDropsCrown", "_zapCount", "_zombieSmashPocketsUsed"];
var monsterProperties = ["beGregariousMonster", "cameraMonster", "chateauMonster", "clumsinessGroveBoss", "crappyCameraMonster", "crudeMonster", "enamorangMonster", "envyfishMonster", "glacierOfJerksBoss", "holdHandsMonster", "iceSculptureMonster", "lastCopyableMonster", "longConMonster", "maelstromOfLoversBoss", "makeFriendsMonster", "merkinLockkeyMonster", "monkeyPointMonster", "motifMonster", "nosyNoseMonster", "olfactedMonster", "photocopyMonster", "rainDohMonster", "romanticTarget", "rufusDesiredEntity", "rwbMonster", "screencappedMonster", "spookyPuttyMonster", "spookyVHSTapeMonster", "stenchCursedMonster", "superficiallyInterestedMonster", "waxMonster", "yearbookCameraTarget", "_gallapagosMonster", "_jiggleCreamedMonster", "_latteMonster", "_monsterHabitatsMonster", "_nanorhinoBanishedMonster", "_newYouQuestMonster", "_prankCardMonster", "_relativityMonster", "_saberForceMonster", "_sourceTerminalDigitizeMonster", "_trickCoinMonster", "_voteMonster"];
var locationProperties = ["autumnatonQuestLocation", "currentJunkyardLocation", "doctorBagQuestLocation", "ghostLocation", "guzzlrQuestLocation", "lastAdventure", "nextAdventure", "nextSpookyravenElizabethRoom", "nextSpookyravenStephenRoom", "rwbLocation", "sourceOracleTarget", "_floundryBassLocation", "_floundryCarpLocation", "_floundryCodLocation", "_floundryHatchetfishLocation", "_floundryTroutLocation", "_floundryTunaLocation", "_sotParcelLocation"];
var stringProperties = ["autoLogin", "browserBookmarks", "chatFontSize", "combatHotkey0", "combatHotkey1", "combatHotkey2", "combatHotkey3", "combatHotkey4", "combatHotkey5", "combatHotkey6", "combatHotkey7", "combatHotkey8", "combatHotkey9", "commandBufferGCLI", "commandBufferTabbedChat", "commandLineNamespace", "dailyDeedsOptions", "defaultBorderColor", "displayName", "externalEditor", "getBreakfast", "headerStates", "highlightList", "http.proxyHost", "http.proxyPassword", "http.proxyPort", "http.proxyUser", "https.proxyHost", "https.proxyPassword", "https.proxyPort", "https.proxyUser", "initialDesktop", "initialFrames", "lastRelayUpdate", "lastUserAgent", "lastUsername", "logPreferenceChangeFilter", "loginScript", "loginServerName", "loginWindowLogo", "logoutScript", "pingDefaultTestPage", "pingLatest", "pingLoginAbort", "pingLoginCheck", "pingLoginFail", "pingLongest", "pingShortest", "pingTestPage", "previousNotifyList", "previousUpdateVersion", "saveState", "saveStateActive", "scriptList", "swingLookAndFeel", "userAgent", "8BitColor", "afterAdventureScript", "antiScientificMethod", "autoOlfact", "autoPutty", "autumnatonUpgrades", "backupCameraMode", "banishedMonsters", "banishedPhyla", "banishingShoutMonsters", "batmanStats", "batmanZone", "batmanUpgrades", "battleAction", "beachHeadsUnlocked", "beastSkillsAvailable", "beastSkillsKnown", "beforePVPScript", "betweenBattleScript", "boomBoxSong", "breakfastAlways", "breakfastHardcore", "breakfastSoftcore", "buffBotCasting", "buyScript", "cargoPocketsEmptied", "cargoPocketScraps", "chatbotScript", "chatPlayerScript", "chibiName", "choiceAdventureScript", "chosenTrip", "clanFortuneReply1", "clanFortuneReply2", "clanFortuneReply3", "clanFortuneWord1", "clanFortuneWord2", "clanFortuneWord3", "commerceGhostItem", "counterScript", "copperheadClubHazard", "crimbo23ArmoryControl", "crimbo23BarControl", "crimbo23CafeControl", "crimbo23CottageControl", "crimbo23FoundryControl", "crimbotChassis", "crimbotArm", "crimbotPropulsion", "crystalBallPredictions", "csServicesPerformed", "currentAstralTrip", "currentDistillateMods", "currentEasyBountyItem", "currentHardBountyItem", "currentHippyStore", "currentJunkyardTool", "currentLlamaForm", "currentMood", "currentPVPSeason", "currentPvpVictories", "currentSpecialBountyItem", "currentSITSkill", "customCombatScript", "cyrusAdjectives", "defaultFlowerLossMessage", "defaultFlowerWinMessage", "demonName1", "demonName2", "demonName3", "demonName4", "demonName5", "demonName6", "demonName7", "demonName8", "demonName9", "demonName10", "demonName11", "demonName12", "demonName13", "dinseyGatorStenchDamage", "dinseyRollercoasterStats", "doctorBagQuestItem", "dolphinItem", "duckAreasCleared", "duckAreasSelected", "edPiece", "enamorangMonsterTurn", "ensorcelee", "EVEDirections", "everfullDartPerks", "extraCosmeticModifiers", "familiarScript", "forbiddenStores", "gameProBossSpecialPower", "gooseReprocessed", "grimoireSkillsHardcore", "grimoireSkillsSoftcore", "grimstoneMaskPath", "guzzlrQuestClient", "guzzlrQuestBooze", "guzzlrQuestTier", "harvestGardenHardcore", "harvestGardenSoftcore", "hpAutoRecoveryItems", "invalidBuffMessage", "jickSwordModifier", "juneCleaverQueue", "kingLiberatedScript", "lassoTraining", "lastBangPotion819", "lastBangPotion820", "lastBangPotion821", "lastBangPotion822", "lastBangPotion823", "lastBangPotion824", "lastBangPotion825", "lastBangPotion826", "lastBangPotion827", "lastChanceBurn", "lastChessboard", "lastCombatEnvironments", "lastDwarfDiceRolls", "lastDwarfDigitRunes", "lastDwarfEquipmentRunes", "lastDwarfFactoryItem118", "lastDwarfFactoryItem119", "lastDwarfFactoryItem120", "lastDwarfFactoryItem360", "lastDwarfFactoryItem361", "lastDwarfFactoryItem362", "lastDwarfFactoryItem363", "lastDwarfFactoryItem364", "lastDwarfFactoryItem365", "lastDwarfFactoryItem910", "lastDwarfFactoryItem3199", "lastDwarfOfficeItem3208", "lastDwarfOfficeItem3209", "lastDwarfOfficeItem3210", "lastDwarfOfficeItem3211", "lastDwarfOfficeItem3212", "lastDwarfOfficeItem3213", "lastDwarfOfficeItem3214", "lastDwarfOreRunes", "lastDwarfHopper1", "lastDwarfHopper2", "lastDwarfHopper3", "lastDwarfHopper4", "lastEncounter", "lastMacroError", "lastMessageId", "lastPaperStrip3144", "lastPaperStrip4138", "lastPaperStrip4139", "lastPaperStrip4140", "lastPaperStrip4141", "lastPaperStrip4142", "lastPaperStrip4143", "lastPaperStrip4144", "lastPirateEphemera", "lastPorkoBoard", "lastPorkoPayouts", "lastPorkoExpected", "lastSlimeVial3885", "lastSlimeVial3886", "lastSlimeVial3887", "lastSlimeVial3888", "lastSlimeVial3889", "lastSlimeVial3890", "lastSlimeVial3891", "lastSlimeVial3892", "lastSlimeVial3893", "lastSlimeVial3894", "lastSlimeVial3895", "lastSlimeVial3896", "lastSelectedFaxbot", "lastSuccessfulFaxbot", "latteIngredients", "latteModifier", "latteUnlocks", "ledCandleMode", "libramSkillsHardcore", "libramSkillsSoftcore", "louvreOverride", "lovePotion", "lttQuestName", "maximizerList", "maximizerMRUList", "mayoInMouth", "mayoMinderSetting", "merkinQuestPath", "mineLayout1", "mineLayout2", "mineLayout3", "mineLayout4", "mineLayout5", "mineLayout6", "mpAutoRecoveryItems", "muffinOnOrder", "nextDistillateMods", "nextQuantumFamiliarName", "nextQuantumFamiliarOwner", "nsChallenge2", "nsChallenge3", "nsChallenge4", "nsChallenge5", "nsTowerDoorKeysUsed", "oceanAction", "oceanDestination", "parkaMode", "pastaThrall1", "pastaThrall2", "pastaThrall3", "pastaThrall4", "pastaThrall5", "pastaThrall6", "pastaThrall7", "pastaThrall8", "peteMotorbikeTires", "peteMotorbikeGasTank", "peteMotorbikeHeadlight", "peteMotorbikeCowling", "peteMotorbikeMuffler", "peteMotorbikeSeat", "pieStuffing", "plantingDate", "plantingLength", "plantingScript", "plumberCostumeWorn", "pokefamBoosts", "postAscensionScript", "preAscensionScript", "questClumsinessGrove", "questDoctorBag", "questECoBucket", "questESlAudit", "questESlBacteria", "questESlCheeseburger", "questESlCocktail", "questESlDebt", "questESlFish", "questESlMushStash", "questESlSalt", "questESlSprinkles", "questESpClipper", "questESpEVE", "questESpFakeMedium", "questESpGore", "questESpJunglePun", "questESpOutOfOrder", "questESpSerum", "questESpSmokes", "questEStFishTrash", "questEStGiveMeFuel", "questEStNastyBears", "questEStSocialJusticeI", "questEStSocialJusticeII", "questEStSuperLuber", "questEStWorkWithFood", "questEStZippityDooDah", "questEUNewYou", "questF01Primordial", "questF02Hyboria", "questF03Future", "questF04Elves", "questF05Clancy", "questG01Meatcar", "questG02Whitecastle", "questG03Ego", "questG04Nemesis", "questG05Dark", "questG06Delivery", "questG07Myst", "questG08Moxie", "questG09Muscle", "questGlacierOfJerks", "questGuzzlr", "questI01Scapegoat", "questI02Beat", "questL02Larva", "questL03Rat", "questL04Bat", "questL05Goblin", "questL06Friar", "questL07Cyrptic", "questL08Trapper", "questL09Topping", "questL10Garbage", "questL11Black", "questL11Business", "questL11Curses", "questL11Desert", "questL11Doctor", "questL11MacGuffin", "questL11Manor", "questL11Palindome", "questL11Pyramid", "questL11Ron", "questL11Shen", "questL11Spare", "questL11Worship", "questL12HippyFrat", "questL12War", "questL13Final", "questL13Warehouse", "questLTTQuestByWire", "questM01Untinker", "questM02Artist", "questM03Bugbear", "questM05Toot", "questM06Gourd", "questM07Hammer", "questM08Baker", "questM09Rocks", "questM10Azazel", "questM11Postal", "questM12Pirate", "questM13Escape", "questM14Bounty", "questM15Lol", "questM16Temple", "questM17Babies", "questM18Swamp", "questM19Hippy", "questM20Necklace", "questM21Dance", "questM22Shirt", "questM23Meatsmith", "questM24Doc", "questM25Armorer", "questM26Oracle", "questMaelstromOfLovers", "questPAGhost", "questRufus", "questS01OldGuy", "questS02Monkees", "raveCombo1", "raveCombo2", "raveCombo3", "raveCombo4", "raveCombo5", "raveCombo6", "recoveryScript", "relayCounters", "retroCapeSuperhero", "retroCapeWashingInstructions", "royalty", "rufusDesiredArtifact", "rufusDesiredItems", "rufusQuestTarget", "rufusQuestType", "scriptMRUList", "seahorseName", "shadowLabyrinthGoal", "shadowRiftIngress", "shenQuestItem", "shrubGarland", "shrubGifts", "shrubLights", "shrubTopper", "sideDefeated", "sidequestArenaCompleted", "sidequestFarmCompleted", "sidequestJunkyardCompleted", "sidequestLighthouseCompleted", "sidequestNunsCompleted", "sidequestOrchardCompleted", "skateParkStatus", "snowsuit", "sourceTerminalChips", "sourceTerminalEducate1", "sourceTerminalEducate2", "sourceTerminalEnquiry", "sourceTerminalEducateKnown", "sourceTerminalEnhanceKnown", "sourceTerminalEnquiryKnown", "sourceTerminalExtrudeKnown", "spadingData", "spadingScript", "speakeasyName", "spelunkyStatus", "spelunkyUpgrades", "spookyravenRecipeUsed", "stationaryButton1", "stationaryButton2", "stationaryButton3", "stationaryButton4", "stationaryButton5", "streamCrossDefaultTarget", "sweetSynthesisBlacklist", "telescope1", "telescope2", "telescope3", "telescope4", "telescope5", "testudinalTeachings", "textColors", "thanksMessage", "tomeSkillsHardcore", "tomeSkillsSoftcore", "trackVoteMonster", "trainsetConfiguration", "trapperOre", "umbrellaState", "umdLastObtained", "vintnerWineEffect", "vintnerWineName", "vintnerWineType", "violetFogLayout", "volcanoMaze1", "volcanoMaze2", "volcanoMaze3", "volcanoMaze4", "volcanoMaze5", "walfordBucketItem", "warProgress", "watchedPreferences", "wereProfessorAdvancedResearch", "workteaClue", "yourFavoriteBird", "yourFavoriteBirdMods", "youRobotCPUUpgrades", "_automatedFutureSide", "_bastilleBoosts", "_bastilleChoice1", "_bastilleChoice2", "_bastilleChoice3", "_bastilleCurrentStyles", "_bastilleEnemyCastle", "_bastilleEnemyName", "_bastilleLastBattleResults", "_bastilleLastEncounter", "_bastilleStats", "_beachHeadsUsed", "_beachLayout", "_beachMinutes", "_birdOfTheDay", "_birdOfTheDayMods", "_bittycar", "_campAwaySmileBuffSign", "_citizenZone", "_citizenZoneMods", "_cloudTalkMessage", "_cloudTalkSmoker", "_coatOfPaintModifier", "_currentDartboard", "_dailySpecial", "_deckCardsSeen", "_feastedFamiliars", "_floristPlantsUsed", "_frAreasUnlocked", "_frHoursLeft", "_frMonstersKilled", "_futuristicCollarModifier", "_futuristicHatModifier", "_futuristicShirtModifier", "_horsery", "_horseryCrazyMox", "_horseryCrazyMus", "_horseryCrazyMys", "_horseryCrazyName", "_horseryCurrentName", "_horseryDarkName", "_horseryNormalName", "_horseryPaleName", "_jickJarAvailable", "_jiggleCheesedMonsters", "_lastCombatStarted", "_lastPirateRealmIsland", "_locketMonstersFought", "_mayamSymbolsUsed", "_mummeryMods", "_mummeryUses", "_newYouQuestSkill", "_noHatModifier", "_pantogramModifier", "_pottedPowerPlant", "_questESp", "_questPartyFair", "_questPartyFairProgress", "_questPartyFairQuest", "_roboDrinks", "_roninStoragePulls", "_savageBeastMods", "_spacegateAnimalLife", "_spacegateCoordinates", "_spacegateGear", "_spacegateHazards", "_spacegateIntelligentLife", "_spacegatePlanetName", "_spacegatePlantLife", "_stolenAccordions", "_tempRelayCounters", "_timeSpinnerFoodAvailable", "_trickOrTreatBlock", "_unknownEasyBountyItem", "_unknownHardBountyItem", "_unknownSpecialBountyItem", "_untakenEasyBountyItem", "_untakenHardBountyItem", "_untakenSpecialBountyItem", "_userMods", "_villainLairColor", "_villainLairKey", "_voteLocal1", "_voteLocal2", "_voteLocal3", "_voteLocal4", "_voteMonster1", "_voteMonster2", "_voteModifier", "_VYKEACompanionType", "_VYKEACompanionRune", "_VYKEACompanionName"];
var numericOrStringProperties = ["statusEngineering", "statusGalley", "statusMedbay", "statusMorgue", "statusNavigation", "statusScienceLab", "statusSonar", "statusSpecialOps", "statusWasteProcessing", "choiceAdventure2", "choiceAdventure3", "choiceAdventure4", "choiceAdventure5", "choiceAdventure6", "choiceAdventure7", "choiceAdventure8", "choiceAdventure9", "choiceAdventure10", "choiceAdventure11", "choiceAdventure12", "choiceAdventure14", "choiceAdventure15", "choiceAdventure16", "choiceAdventure17", "choiceAdventure18", "choiceAdventure19", "choiceAdventure20", "choiceAdventure21", "choiceAdventure22", "choiceAdventure23", "choiceAdventure24", "choiceAdventure25", "choiceAdventure26", "choiceAdventure27", "choiceAdventure28", "choiceAdventure29", "choiceAdventure40", "choiceAdventure41", "choiceAdventure42", "choiceAdventure45", "choiceAdventure46", "choiceAdventure47", "choiceAdventure71", "choiceAdventure72", "choiceAdventure73", "choiceAdventure74", "choiceAdventure75", "choiceAdventure76", "choiceAdventure77", "choiceAdventure86", "choiceAdventure87", "choiceAdventure88", "choiceAdventure89", "choiceAdventure90", "choiceAdventure91", "choiceAdventure105", "choiceAdventure106", "choiceAdventure107", "choiceAdventure108", "choiceAdventure109", "choiceAdventure110", "choiceAdventure111", "choiceAdventure112", "choiceAdventure113", "choiceAdventure114", "choiceAdventure115", "choiceAdventure116", "choiceAdventure117", "choiceAdventure118", "choiceAdventure120", "choiceAdventure123", "choiceAdventure125", "choiceAdventure126", "choiceAdventure127", "choiceAdventure129", "choiceAdventure131", "choiceAdventure132", "choiceAdventure135", "choiceAdventure136", "choiceAdventure137", "choiceAdventure138", "choiceAdventure139", "choiceAdventure140", "choiceAdventure141", "choiceAdventure142", "choiceAdventure143", "choiceAdventure144", "choiceAdventure145", "choiceAdventure146", "choiceAdventure147", "choiceAdventure148", "choiceAdventure149", "choiceAdventure151", "choiceAdventure152", "choiceAdventure153", "choiceAdventure154", "choiceAdventure155", "choiceAdventure156", "choiceAdventure157", "choiceAdventure158", "choiceAdventure159", "choiceAdventure160", "choiceAdventure161", "choiceAdventure162", "choiceAdventure163", "choiceAdventure164", "choiceAdventure165", "choiceAdventure166", "choiceAdventure167", "choiceAdventure168", "choiceAdventure169", "choiceAdventure170", "choiceAdventure171", "choiceAdventure172", "choiceAdventure177", "choiceAdventure178", "choiceAdventure180", "choiceAdventure181", "choiceAdventure182", "choiceAdventure184", "choiceAdventure185", "choiceAdventure186", "choiceAdventure187", "choiceAdventure188", "choiceAdventure189", "choiceAdventure191", "choiceAdventure197", "choiceAdventure198", "choiceAdventure199", "choiceAdventure200", "choiceAdventure201", "choiceAdventure202", "choiceAdventure203", "choiceAdventure204", "choiceAdventure205", "choiceAdventure206", "choiceAdventure207", "choiceAdventure208", "choiceAdventure211", "choiceAdventure212", "choiceAdventure213", "choiceAdventure214", "choiceAdventure215", "choiceAdventure216", "choiceAdventure217", "choiceAdventure218", "choiceAdventure219", "choiceAdventure220", "choiceAdventure221", "choiceAdventure222", "choiceAdventure223", "choiceAdventure224", "choiceAdventure225", "choiceAdventure230", "choiceAdventure272", "choiceAdventure273", "choiceAdventure276", "choiceAdventure277", "choiceAdventure278", "choiceAdventure279", "choiceAdventure280", "choiceAdventure281", "choiceAdventure282", "choiceAdventure283", "choiceAdventure284", "choiceAdventure285", "choiceAdventure286", "choiceAdventure287", "choiceAdventure288", "choiceAdventure289", "choiceAdventure290", "choiceAdventure291", "choiceAdventure292", "choiceAdventure293", "choiceAdventure294", "choiceAdventure295", "choiceAdventure296", "choiceAdventure297", "choiceAdventure298", "choiceAdventure299", "choiceAdventure302", "choiceAdventure303", "choiceAdventure304", "choiceAdventure305", "choiceAdventure306", "choiceAdventure307", "choiceAdventure308", "choiceAdventure309", "choiceAdventure310", "choiceAdventure311", "choiceAdventure317", "choiceAdventure318", "choiceAdventure319", "choiceAdventure320", "choiceAdventure321", "choiceAdventure322", "choiceAdventure326", "choiceAdventure327", "choiceAdventure328", "choiceAdventure329", "choiceAdventure330", "choiceAdventure331", "choiceAdventure332", "choiceAdventure333", "choiceAdventure334", "choiceAdventure335", "choiceAdventure336", "choiceAdventure337", "choiceAdventure338", "choiceAdventure339", "choiceAdventure340", "choiceAdventure341", "choiceAdventure342", "choiceAdventure343", "choiceAdventure344", "choiceAdventure345", "choiceAdventure346", "choiceAdventure347", "choiceAdventure348", "choiceAdventure349", "choiceAdventure350", "choiceAdventure351", "choiceAdventure352", "choiceAdventure353", "choiceAdventure354", "choiceAdventure355", "choiceAdventure356", "choiceAdventure357", "choiceAdventure358", "choiceAdventure360", "choiceAdventure361", "choiceAdventure362", "choiceAdventure363", "choiceAdventure364", "choiceAdventure365", "choiceAdventure366", "choiceAdventure367", "choiceAdventure372", "choiceAdventure376", "choiceAdventure387", "choiceAdventure388", "choiceAdventure389", "choiceAdventure390", "choiceAdventure391", "choiceAdventure392", "choiceAdventure393", "choiceAdventure395", "choiceAdventure396", "choiceAdventure397", "choiceAdventure398", "choiceAdventure399", "choiceAdventure400", "choiceAdventure401", "choiceAdventure402", "choiceAdventure403", "choiceAdventure423", "choiceAdventure424", "choiceAdventure425", "choiceAdventure426", "choiceAdventure427", "choiceAdventure428", "choiceAdventure429", "choiceAdventure430", "choiceAdventure431", "choiceAdventure432", "choiceAdventure433", "choiceAdventure435", "choiceAdventure438", "choiceAdventure439", "choiceAdventure442", "choiceAdventure444", "choiceAdventure445", "choiceAdventure446", "choiceAdventure447", "choiceAdventure448", "choiceAdventure449", "choiceAdventure451", "choiceAdventure452", "choiceAdventure453", "choiceAdventure454", "choiceAdventure455", "choiceAdventure456", "choiceAdventure457", "choiceAdventure458", "choiceAdventure460", "choiceAdventure461", "choiceAdventure462", "choiceAdventure463", "choiceAdventure464", "choiceAdventure465", "choiceAdventure467", "choiceAdventure468", "choiceAdventure469", "choiceAdventure470", "choiceAdventure471", "choiceAdventure472", "choiceAdventure473", "choiceAdventure474", "choiceAdventure475", "choiceAdventure477", "choiceAdventure478", "choiceAdventure480", "choiceAdventure483", "choiceAdventure484", "choiceAdventure485", "choiceAdventure486", "choiceAdventure488", "choiceAdventure489", "choiceAdventure490", "choiceAdventure491", "choiceAdventure496", "choiceAdventure497", "choiceAdventure502", "choiceAdventure503", "choiceAdventure504", "choiceAdventure505", "choiceAdventure506", "choiceAdventure507", "choiceAdventure509", "choiceAdventure510", "choiceAdventure511", "choiceAdventure512", "choiceAdventure513", "choiceAdventure514", "choiceAdventure515", "choiceAdventure517", "choiceAdventure518", "choiceAdventure519", "choiceAdventure521", "choiceAdventure522", "choiceAdventure523", "choiceAdventure527", "choiceAdventure528", "choiceAdventure529", "choiceAdventure530", "choiceAdventure531", "choiceAdventure532", "choiceAdventure533", "choiceAdventure534", "choiceAdventure535", "choiceAdventure536", "choiceAdventure538", "choiceAdventure539", "choiceAdventure542", "choiceAdventure543", "choiceAdventure544", "choiceAdventure546", "choiceAdventure548", "choiceAdventure549", "choiceAdventure550", "choiceAdventure551", "choiceAdventure552", "choiceAdventure553", "choiceAdventure554", "choiceAdventure556", "choiceAdventure557", "choiceAdventure558", "choiceAdventure559", "choiceAdventure560", "choiceAdventure561", "choiceAdventure562", "choiceAdventure563", "choiceAdventure564", "choiceAdventure565", "choiceAdventure566", "choiceAdventure567", "choiceAdventure568", "choiceAdventure569", "choiceAdventure571", "choiceAdventure572", "choiceAdventure573", "choiceAdventure574", "choiceAdventure575", "choiceAdventure576", "choiceAdventure577", "choiceAdventure578", "choiceAdventure579", "choiceAdventure581", "choiceAdventure582", "choiceAdventure583", "choiceAdventure584", "choiceAdventure594", "choiceAdventure595", "choiceAdventure596", "choiceAdventure597", "choiceAdventure598", "choiceAdventure599", "choiceAdventure600", "choiceAdventure603", "choiceAdventure604", "choiceAdventure616", "choiceAdventure634", "choiceAdventure640", "choiceAdventure654", "choiceAdventure655", "choiceAdventure656", "choiceAdventure657", "choiceAdventure658", "choiceAdventure664", "choiceAdventure669", "choiceAdventure670", "choiceAdventure671", "choiceAdventure672", "choiceAdventure673", "choiceAdventure674", "choiceAdventure675", "choiceAdventure676", "choiceAdventure677", "choiceAdventure678", "choiceAdventure679", "choiceAdventure681", "choiceAdventure683", "choiceAdventure684", "choiceAdventure685", "choiceAdventure686", "choiceAdventure687", "choiceAdventure688", "choiceAdventure689", "choiceAdventure690", "choiceAdventure691", "choiceAdventure692", "choiceAdventure693", "choiceAdventure694", "choiceAdventure695", "choiceAdventure696", "choiceAdventure697", "choiceAdventure698", "choiceAdventure700", "choiceAdventure701", "choiceAdventure705", "choiceAdventure706", "choiceAdventure707", "choiceAdventure708", "choiceAdventure709", "choiceAdventure710", "choiceAdventure711", "choiceAdventure712", "choiceAdventure713", "choiceAdventure714", "choiceAdventure715", "choiceAdventure716", "choiceAdventure717", "choiceAdventure721", "choiceAdventure725", "choiceAdventure729", "choiceAdventure733", "choiceAdventure737", "choiceAdventure741", "choiceAdventure745", "choiceAdventure749", "choiceAdventure753", "choiceAdventure771", "choiceAdventure778", "choiceAdventure780", "choiceAdventure781", "choiceAdventure783", "choiceAdventure784", "choiceAdventure785", "choiceAdventure786", "choiceAdventure787", "choiceAdventure788", "choiceAdventure789", "choiceAdventure791", "choiceAdventure793", "choiceAdventure794", "choiceAdventure795", "choiceAdventure796", "choiceAdventure797", "choiceAdventure803", "choiceAdventure805", "choiceAdventure808", "choiceAdventure809", "choiceAdventure813", "choiceAdventure815", "choiceAdventure830", "choiceAdventure832", "choiceAdventure833", "choiceAdventure834", "choiceAdventure835", "choiceAdventure837", "choiceAdventure838", "choiceAdventure839", "choiceAdventure840", "choiceAdventure841", "choiceAdventure842", "choiceAdventure851", "choiceAdventure852", "choiceAdventure853", "choiceAdventure854", "choiceAdventure855", "choiceAdventure856", "choiceAdventure857", "choiceAdventure858", "choiceAdventure866", "choiceAdventure873", "choiceAdventure875", "choiceAdventure876", "choiceAdventure877", "choiceAdventure878", "choiceAdventure879", "choiceAdventure880", "choiceAdventure881", "choiceAdventure882", "choiceAdventure888", "choiceAdventure889", "choiceAdventure918", "choiceAdventure919", "choiceAdventure920", "choiceAdventure921", "choiceAdventure923", "choiceAdventure924", "choiceAdventure925", "choiceAdventure926", "choiceAdventure927", "choiceAdventure928", "choiceAdventure929", "choiceAdventure930", "choiceAdventure931", "choiceAdventure932", "choiceAdventure940", "choiceAdventure941", "choiceAdventure942", "choiceAdventure943", "choiceAdventure944", "choiceAdventure945", "choiceAdventure946", "choiceAdventure950", "choiceAdventure955", "choiceAdventure957", "choiceAdventure958", "choiceAdventure959", "choiceAdventure960", "choiceAdventure961", "choiceAdventure962", "choiceAdventure963", "choiceAdventure964", "choiceAdventure965", "choiceAdventure966", "choiceAdventure970", "choiceAdventure973", "choiceAdventure974", "choiceAdventure975", "choiceAdventure976", "choiceAdventure977", "choiceAdventure979", "choiceAdventure980", "choiceAdventure981", "choiceAdventure982", "choiceAdventure983", "choiceAdventure988", "choiceAdventure989", "choiceAdventure993", "choiceAdventure998", "choiceAdventure1000", "choiceAdventure1003", "choiceAdventure1005", "choiceAdventure1006", "choiceAdventure1007", "choiceAdventure1008", "choiceAdventure1009", "choiceAdventure1010", "choiceAdventure1011", "choiceAdventure1012", "choiceAdventure1013", "choiceAdventure1015", "choiceAdventure1016", "choiceAdventure1017", "choiceAdventure1018", "choiceAdventure1019", "choiceAdventure1020", "choiceAdventure1021", "choiceAdventure1022", "choiceAdventure1023", "choiceAdventure1026", "choiceAdventure1027", "choiceAdventure1028", "choiceAdventure1029", "choiceAdventure1030", "choiceAdventure1031", "choiceAdventure1032", "choiceAdventure1033", "choiceAdventure1034", "choiceAdventure1035", "choiceAdventure1036", "choiceAdventure1037", "choiceAdventure1038", "choiceAdventure1039", "choiceAdventure1040", "choiceAdventure1041", "choiceAdventure1042", "choiceAdventure1044", "choiceAdventure1045", "choiceAdventure1046", "choiceAdventure1048", "choiceAdventure1051", "choiceAdventure1052", "choiceAdventure1053", "choiceAdventure1054", "choiceAdventure1055", "choiceAdventure1056", "choiceAdventure1057", "choiceAdventure1059", "choiceAdventure1060", "choiceAdventure1061", "choiceAdventure1062", "choiceAdventure1065", "choiceAdventure1067", "choiceAdventure1068", "choiceAdventure1069", "choiceAdventure1070", "choiceAdventure1071", "choiceAdventure1073", "choiceAdventure1077", "choiceAdventure1080", "choiceAdventure1081", "choiceAdventure1082", "choiceAdventure1083", "choiceAdventure1084", "choiceAdventure1085", "choiceAdventure1091", "choiceAdventure1094", "choiceAdventure1095", "choiceAdventure1096", "choiceAdventure1097", "choiceAdventure1102", "choiceAdventure1106", "choiceAdventure1107", "choiceAdventure1108", "choiceAdventure1110", "choiceAdventure1114", "choiceAdventure1115", "choiceAdventure1116", "choiceAdventure1118", "choiceAdventure1119", "choiceAdventure1120", "choiceAdventure1121", "choiceAdventure1122", "choiceAdventure1123", "choiceAdventure1171", "choiceAdventure1172", "choiceAdventure1173", "choiceAdventure1174", "choiceAdventure1175", "choiceAdventure1193", "choiceAdventure1195", "choiceAdventure1196", "choiceAdventure1197", "choiceAdventure1198", "choiceAdventure1199", "choiceAdventure1202", "choiceAdventure1203", "choiceAdventure1204", "choiceAdventure1205", "choiceAdventure1206", "choiceAdventure1207", "choiceAdventure1208", "choiceAdventure1209", "choiceAdventure1210", "choiceAdventure1211", "choiceAdventure1212", "choiceAdventure1213", "choiceAdventure1214", "choiceAdventure1215", "choiceAdventure1219", "choiceAdventure1222", "choiceAdventure1223", "choiceAdventure1224", "choiceAdventure1225", "choiceAdventure1226", "choiceAdventure1227", "choiceAdventure1228", "choiceAdventure1229", "choiceAdventure1236", "choiceAdventure1237", "choiceAdventure1238", "choiceAdventure1239", "choiceAdventure1240", "choiceAdventure1241", "choiceAdventure1242", "choiceAdventure1243", "choiceAdventure1244", "choiceAdventure1245", "choiceAdventure1246", "choiceAdventure1247", "choiceAdventure1248", "choiceAdventure1249", "choiceAdventure1250", "choiceAdventure1251", "choiceAdventure1252", "choiceAdventure1253", "choiceAdventure1254", "choiceAdventure1255", "choiceAdventure1256", "choiceAdventure1266", "choiceAdventure1280", "choiceAdventure1281", "choiceAdventure1282", "choiceAdventure1283", "choiceAdventure1284", "choiceAdventure1285", "choiceAdventure1286", "choiceAdventure1287", "choiceAdventure1288", "choiceAdventure1289", "choiceAdventure1290", "choiceAdventure1291", "choiceAdventure1292", "choiceAdventure1293", "choiceAdventure1294", "choiceAdventure1295", "choiceAdventure1296", "choiceAdventure1297", "choiceAdventure1298", "choiceAdventure1299", "choiceAdventure1300", "choiceAdventure1301", "choiceAdventure1302", "choiceAdventure1303", "choiceAdventure1304", "choiceAdventure1305", "choiceAdventure1307", "choiceAdventure1310", "choiceAdventure1312", "choiceAdventure1313", "choiceAdventure1314", "choiceAdventure1315", "choiceAdventure1316", "choiceAdventure1317", "choiceAdventure1318", "choiceAdventure1319", "choiceAdventure1321", "choiceAdventure1322", "choiceAdventure1323", "choiceAdventure1324", "choiceAdventure1325", "choiceAdventure1326", "choiceAdventure1327", "choiceAdventure1328", "choiceAdventure1332", "choiceAdventure1333", "choiceAdventure1335", "choiceAdventure1340", "choiceAdventure1341", "choiceAdventure1345", "choiceAdventure1389", "choiceAdventure1392", "choiceAdventure1397", "choiceAdventure1399", "choiceAdventure1405", "choiceAdventure1411", "choiceAdventure1415", "choiceAdventure1427", "choiceAdventure1428", "choiceAdventure1429", "choiceAdventure1430", "choiceAdventure1431", "choiceAdventure1432", "choiceAdventure1433", "choiceAdventure1434", "choiceAdventure1436", "choiceAdventure1460", "choiceAdventure1461", "choiceAdventure1467", "choiceAdventure1468", "choiceAdventure1469", "choiceAdventure1470", "choiceAdventure1471", "choiceAdventure1472", "choiceAdventure1473", "choiceAdventure1474", "choiceAdventure1475", "choiceAdventure1486", "choiceAdventure1487", "choiceAdventure1488", "choiceAdventure1489", "choiceAdventure1491", "choiceAdventure1494", "choiceAdventure1505", "choiceAdventure1528"];
var familiarProperties = ["commaFamiliar", "nextQuantumFamiliar", "stillsuitFamiliar"];
var statProperties = ["nsChallenge1", "snojoSetting"];
var phylumProperties = ["dnaSyringe", "locketPhylum", "redSnapperPhylum", "_circadianRhythmsPhylum"];

/***/ }),

/***/ 137:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AM": () => (/* binding */ isStatProperty),
/* harmony export */   "M1": () => (/* binding */ isMonsterProperty),
/* harmony export */   "OY": () => (/* binding */ isNumericProperty),
/* harmony export */   "Oz": () => (/* binding */ isStringProperty),
/* harmony export */   "Ph": () => (/* binding */ isLocationProperty),
/* harmony export */   "eI": () => (/* binding */ isPhylumProperty),
/* harmony export */   "j1": () => (/* binding */ isBooleanProperty),
/* harmony export */   "jc": () => (/* binding */ isNumericOrStringProperty),
/* harmony export */   "mP": () => (/* binding */ isFamiliarProperty)
/* harmony export */ });
/* harmony import */ var _propertyTypes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(902);

var booleanPropertiesSet = new Set(_propertyTypes_js__WEBPACK_IMPORTED_MODULE_0__.booleanProperties);
var numericPropertiesSet = new Set(_propertyTypes_js__WEBPACK_IMPORTED_MODULE_0__.numericProperties);
var numericOrStringPropertiesSet = new Set(_propertyTypes_js__WEBPACK_IMPORTED_MODULE_0__.numericOrStringProperties);
var stringPropertiesSet = new Set(_propertyTypes_js__WEBPACK_IMPORTED_MODULE_0__.stringProperties);
var locationPropertiesSet = new Set(_propertyTypes_js__WEBPACK_IMPORTED_MODULE_0__.locationProperties);
var monsterPropertiesSet = new Set(_propertyTypes_js__WEBPACK_IMPORTED_MODULE_0__.monsterProperties);
var familiarPropertiesSet = new Set(_propertyTypes_js__WEBPACK_IMPORTED_MODULE_0__.familiarProperties);
var statPropertiesSet = new Set(_propertyTypes_js__WEBPACK_IMPORTED_MODULE_0__.statProperties);
var phylumPropertiesSet = new Set(_propertyTypes_js__WEBPACK_IMPORTED_MODULE_0__.phylumProperties);
/**
 * Determine whether a property has a boolean value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a boolean value
 */

function isBooleanProperty(property) {
  return booleanPropertiesSet.has(property);
}
/**
 * Determine whether a property has a numeric value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a numeric value
 */

function isNumericProperty(property) {
  return numericPropertiesSet.has(property);
}
/**
 * Determine whether a property has a numeric or string value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a numeric or string value
 */

function isNumericOrStringProperty(property) {
  return numericOrStringPropertiesSet.has(property);
}
/**
 * Determine whether a property has a string value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a string value
 */

function isStringProperty(property) {
  return stringPropertiesSet.has(property);
}
/**
 * Determine whether a property has a Location value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a Location value
 */

function isLocationProperty(property) {
  return locationPropertiesSet.has(property);
}
/**
 * Determine whether a property has a Monster value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a Monster value
 */

function isMonsterProperty(property) {
  return monsterPropertiesSet.has(property);
}
/**
 * Determine whether a property has a Familiar value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a Familiar value
 */

function isFamiliarProperty(property) {
  return familiarPropertiesSet.has(property);
}
/**
 * Determine whether a property has a Stat value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a Stat value
 */

function isStatProperty(property) {
  return statPropertiesSet.has(property);
}
/**
 * Determine whether a property has a Phylum value
 *
 * @param property Property to check
 * @returns Whether the supplied property has a Phylum value
 */

function isPhylumProperty(property) {
  return phylumPropertiesSet.has(property);
}

/***/ }),

/***/ 543:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ceilings": () => (/* binding */ ceilings),
/* harmony export */   "changeCeiling": () => (/* binding */ changeCeiling),
/* harmony export */   "changeDesk": () => (/* binding */ changeDesk),
/* harmony export */   "changeNightstand": () => (/* binding */ changeNightstand),
/* harmony export */   "desks": () => (/* binding */ desks),
/* harmony export */   "fightPainting": () => (/* binding */ fightPainting),
/* harmony export */   "getCeiling": () => (/* binding */ getCeiling),
/* harmony export */   "getDesk": () => (/* binding */ getDesk),
/* harmony export */   "getNightstand": () => (/* binding */ getNightstand),
/* harmony export */   "have": () => (/* binding */ have),
/* harmony export */   "nightstands": () => (/* binding */ nightstands),
/* harmony export */   "paintingFought": () => (/* binding */ paintingFought),
/* harmony export */   "paintingMonster": () => (/* binding */ paintingMonster)
/* harmony export */ });
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var _property_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(785);


/**
 * @returns Whether we own the Chateau Mantegna
 */

function have() {
  return (0,_property_js__WEBPACK_IMPORTED_MODULE_1__.get)("chateauAvailable");
}
/**
 * @returns `null` for an empty painting; otherwise, the monster trapped in our painting
 */

function paintingMonster() {
  return (0,_property_js__WEBPACK_IMPORTED_MODULE_1__.get)("chateauMonster");
}
/**
 * @returns Whether or not we've fought our painted monster today
 */

function paintingFought() {
  return (0,_property_js__WEBPACK_IMPORTED_MODULE_1__.get)("_chateauMonsterFought");
}
/**
 * Fights your currently installed painting monster if able
 *
 * @param combatParams Any parameters you'd like to pass to `runCombat`
 * @returns The result of `runCombat`, which is the page html of the final round of combat
 */

function fightPainting() {
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("place.php?whichplace=chateau&action=chateau_painting", false);
  return kolmafia__WEBPACK_IMPORTED_MODULE_0__.runCombat.apply(void 0, arguments);
}
var desks = ["fancy stationery set", "Swiss piggy bank", "continental juice bar"];
var ceilings = ["antler chandelier", "ceiling fan", "artificial skylight"];
var nightstands = ["foreign language tapes", "bowl of potpourri", "electric muscle stimulator"];
/**
 * @returns The currently installed desk in your chateau; `null` for none
 */

function getDesk() {
  var _desks$find;

  return (_desks$find = desks.find(desk => Object.keys((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getChateau)()).includes(desk))) !== null && _desks$find !== void 0 ? _desks$find : null;
}
/**
 * @returns The currently installed ceiling in your chateau; `null` for none
 */

function getCeiling() {
  var _ceilings$find;

  return (_ceilings$find = ceilings.find(ceiling => Object.keys((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getChateau)()).includes(ceiling))) !== null && _ceilings$find !== void 0 ? _ceilings$find : null;
}
/**
 * @returns The currently installed nightstand in your chateau; `null` for none
 */

function getNightstand() {
  var _nightstands$find;

  return (_nightstands$find = nightstands.find(nightstand => Object.keys((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getChateau)()).includes(nightstand))) !== null && _nightstands$find !== void 0 ? _nightstands$find : null;
}
/**
 * @param desk The desk to change to
 * @returns Whether our desk currently matches the one requested
 */

function changeDesk(desk) {
  if (getDesk() === desk) return true;
  if (!desks.includes(desk)) return false;
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.buy)(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get(desk));
  return getDesk() === desk;
}
/**
 * @param ceiling The ceiling to change to
 * @returns Whether our ceiling currently matches the one requested
 */

function changeCeiling(ceiling) {
  if (getCeiling() === ceiling) return true;
  if (!ceilings.includes(ceiling)) return false;
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.buy)(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get(ceiling));
  return getCeiling() === ceiling;
}
/**
 * @param nightstand The nightstand to change to
 * @returns Whether our nightstand currently matches the one requested
 */

function changeNightstand(nightstand) {
  if (getNightstand() === nightstand) return true;
  if (!nightstands.includes(nightstand)) return false;
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.buy)(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get(nightstand));
  return getNightstand() === nightstand;
}

/***/ }),

/***/ 550:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Driving": () => (/* binding */ Driving),
/* harmony export */   "drive": () => (/* binding */ drive),
/* harmony export */   "fillTo": () => (/* binding */ fillTo),
/* harmony export */   "fillWithInventoryTo": () => (/* binding */ fillWithInventoryTo),
/* harmony export */   "have": () => (/* binding */ have),
/* harmony export */   "insertFuel": () => (/* binding */ insertFuel),
/* harmony export */   "installed": () => (/* binding */ installed),
/* harmony export */   "isFuelItem": () => (/* binding */ isFuelItem)
/* harmony export */ });
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(71);
/* harmony import */ var _template_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(328);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(130);
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var PriceAge;

(function (PriceAge) {
  PriceAge[PriceAge["HISTORICAL"] = 0] = "HISTORICAL";
  PriceAge[PriceAge["RECENT"] = 1] = "RECENT";
  PriceAge[PriceAge["TODAY"] = 2] = "TODAY";
})(PriceAge || (PriceAge = {}));
/**
 * @returns Whether the Asdon is our current active workshed
 */


function installed() {
  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getWorkshed)() === (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject || (_templateObject = _taggedTemplateLiteral(["Asdon Martin keyfob (on ring)"])));
}
/**
 * @returns `true` if we `have` the Asdon or if it's installed
 */

function have() {
  return installed() || (0,_lib_js__WEBPACK_IMPORTED_MODULE_2__/* .have */ .lf)((0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Asdon Martin keyfob (on ring)"]))));
}
var fuelSkiplist = (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$items */ .vS)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["cup of \"tea\", thermos of \"whiskey\", Lucky Lindy, Bee's Knees, Sockdollager, Ish Kabibble, Hot Socks, Phonus Balonus, Flivver, Sloppy Jalopy, glass of \"milk\""])));
/**
 * Internal function used to determine whether a historical price is recent enough
 *
 * @param item The item to check
 * @returns Whether a price is too old to trust
 */

function priceTooOld(item) {
  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.historicalPrice)(item) === 0 || (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.historicalAge)(item) >= 7;
}
/**
 * @param item The item in question
 * @returns Mall max if historicalPrice is -1; otherwise, the historical price
 */


function historicalPriceOrMax(item) {
  var historical = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.historicalPrice)(item);
  return historical < 0 ? 999999999 : historical;
}
/**
 * @param item The item in question
 * @returns Mall max if historicalPrice is -1; otherwise, the mall price
 */


function mallPriceOrMax(item) {
  var mall = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.mallPrice)(item);
  return mall < 0 ? 999999999 : mall;
}
/**
 * Combined internal function to determine the price of an item
 *
 * @param item The item in question
 * @param priceAge How do we decide when to use historical vs real mall prices?
 * @returns The price of the item in question
 */


function price(item, priceAge) {
  switch (priceAge) {
    case PriceAge.HISTORICAL:
      {
        var historical = historicalPriceOrMax(item);
        return historical === 0 ? mallPriceOrMax(item) : historical;
      }

    case PriceAge.RECENT:
      return priceTooOld(item) ? mallPriceOrMax(item) : historicalPriceOrMax(item);

    case PriceAge.TODAY:
      return mallPriceOrMax(item);
  }
}

function inventoryItems() {
  return kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.all().filter(isFuelItem).filter(item => (0,_lib_js__WEBPACK_IMPORTED_MODULE_2__/* .have */ .lf)(item) && [100, (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.autosellPrice)(item)].includes(price(item, PriceAge.RECENT)));
}
/**
 * @param it The item in question
 * @param priceAge The PriceAge option to apply
 * @returns Meat per fuel of an item
 */


function calculateFuelUnitCost(it) {
  var priceAge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PriceAge.RECENT;
  var units = (0,_lib_js__WEBPACK_IMPORTED_MODULE_2__/* .getAverageAdventures */ .N)(it);
  return price(it, priceAge) / units;
}
/**
 * @param it the item in question
 * @returns Can `it` be used as Asdon fuel?
 */


function isFuelItem(it) {
  return !(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.isNpcItem)(it) && it.fullness + it.inebriety > 0 && (0,_lib_js__WEBPACK_IMPORTED_MODULE_2__/* .getAverageAdventures */ .N)(it) > 0 && it.tradeable && it.discardable && !fuelSkiplist.includes(it);
}
/**
 * @returns The best fuel options available to us at this time
 */

function getBestFuels() {
  // Three stages.
  // 1. Filter to reasonable items using historical cost (within 5x of historical best).
  var allFuel = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.all().filter(isFuelItem);

  if (allFuel.filter(item => (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.historicalPrice)(item) === 0).length > 100) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.mallPrices)("food");
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.mallPrices)("booze");
  }

  var keyHistorical = item => calculateFuelUnitCost(item, PriceAge.HISTORICAL);

  allFuel.sort((x, y) => keyHistorical(x) - keyHistorical(y));
  var bestUnitCost = keyHistorical(allFuel[0]);
  var firstBadIndex = allFuel.findIndex(item => keyHistorical(item) > 5 * bestUnitCost);
  var potentialFuel = firstBadIndex > 0 ? allFuel.slice(0, firstBadIndex) : allFuel; // 2. Filter to top 10 candidates using prices at most a week old.

  if (potentialFuel.filter(item => priceTooOld(item)).length > 100) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.mallPrices)("food");
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.mallPrices)("booze");
  }

  var key1 = item => -(0,_lib_js__WEBPACK_IMPORTED_MODULE_2__/* .getAverageAdventures */ .N)(item);

  var key2 = item => calculateFuelUnitCost(item, PriceAge.RECENT);

  potentialFuel.sort((x, y) => key1(x) - key1(y));
  potentialFuel.sort((x, y) => key2(x) - key2(y)); // 3. Find result using precise price for those top candidates.

  var candidates = potentialFuel.slice(0, 10);

  var key3 = item => calculateFuelUnitCost(item, PriceAge.TODAY);

  candidates.sort((x, y) => key3(x) - key3(y));

  if (calculateFuelUnitCost(candidates[0], PriceAge.TODAY) > 100) {
    throw new Error("Could not identify any fuel with efficiency better than 100 meat per fuel. " + "This means something went wrong.");
  }

  return candidates;
}
/**
 * Fuel your Asdon Martin with a given quantity of a given item
 *
 * @param it Item to fuel with.
 * @param quantity Number of items to fuel with.
 * @returns Whether we succeeded at fueling with the given items.
 */


function insertFuel(it) {
  var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var result = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("campground.php?action=fuelconvertor&pwd&qty=".concat(quantity, "&iid=").concat(it.id, "&go=Convert%21"));
  return result.includes("The display updates with a");
}
/**
 * Fill your Asdon Martin to the given fuel level in the cheapest way possible
 *
 * @param targetUnits Fuel level to attempt to reach.
 * @returns Whether we succeeded at filling to the target fuel level.
 */

function fillTo(targetUnits) {
  if (!installed()) return false;

  while ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getFuel)() < targetUnits) {
    // if in Hardcore/ronin, skip the price calculation and just use soda bread
    var _ref = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.canInteract)() ? getBestFuels() : [(0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$item */ .xr)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["loaf of soda bread"]))), undefined],
        _ref2 = _slicedToArray(_ref, 2),
        bestFuel = _ref2[0],
        secondBest = _ref2[1];

    var count = Math.ceil(targetUnits / (0,_lib_js__WEBPACK_IMPORTED_MODULE_2__/* .getAverageAdventures */ .N)(bestFuel));
    var ceiling = undefined;

    if (secondBest) {
      var efficiencyOfSecondBest = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.mallPrice)(secondBest) / (0,_lib_js__WEBPACK_IMPORTED_MODULE_2__/* .getAverageAdventures */ .N)(secondBest);
      ceiling = Math.ceil(efficiencyOfSecondBest * (0,_lib_js__WEBPACK_IMPORTED_MODULE_2__/* .getAverageAdventures */ .N)(bestFuel));
    }

    if (!(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.canInteract)()) (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.retrieveItem)(count, bestFuel);else ceiling ? (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.buy)(count, bestFuel, ceiling) : (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.buy)(count, bestFuel);

    if (!insertFuel(bestFuel, Math.min((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.itemAmount)(bestFuel), count))) {
      throw new Error("Failed to fuel Asdon Martin.");
    }
  }

  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getFuel)() >= targetUnits;
}
/**
 * @param targetUnits The fuel level we aim to achieve
 * @returns Whether we successfully filled our Asdon's tank
 */

function fillWithBestInventoryItem(targetUnits) {
  var options = inventoryItems().sort((a, b) => (0,_lib_js__WEBPACK_IMPORTED_MODULE_2__/* .getAverageAdventures */ .N)(b) / (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.autosellPrice)(b) - (0,_lib_js__WEBPACK_IMPORTED_MODULE_2__/* .getAverageAdventures */ .N)(a) / (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.autosellPrice)(a));
  if (options.length === 0) return false;
  var best = options[0];
  if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.autosellPrice)(best) / (0,_lib_js__WEBPACK_IMPORTED_MODULE_2__/* .getAverageAdventures */ .N)(best) > 100) return false;
  var amountToUse = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__/* .clamp */ .uZ)(Math.ceil(targetUnits / (0,_lib_js__WEBPACK_IMPORTED_MODULE_2__/* .getAverageAdventures */ .N)(best)), 0, (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.itemAmount)(best));
  return insertFuel(best, amountToUse);
}
/**
 * Fill your Asdon Martin by prioritizing mallmin items in your inventory. Default to the behavior of fillTo.
 *
 * @param targetUnits Fuel level to attempt to reach.
 * @returns Whether we succeeded at filling to the target fuel level.
 */


function fillWithInventoryTo(targetUnits) {
  if (!installed()) return false;
  var continueFuelingFromInventory = true;

  while ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getFuel)() < targetUnits && continueFuelingFromInventory) {
    continueFuelingFromInventory && (continueFuelingFromInventory = fillWithBestInventoryItem(targetUnits));
  }

  return fillTo(targetUnits);
}
/**
 * Object consisting of the various Asdon driving styles
 */

var Driving = {
  Obnoxiously: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$effect */ ._G)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Driving Obnoxiously"]))),
  Stealthily: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$effect */ ._G)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Driving Stealthily"]))),
  Wastefully: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$effect */ ._G)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Driving Wastefully"]))),
  Safely: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$effect */ ._G)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Driving Safely"]))),
  Recklessly: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$effect */ ._G)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Driving Recklessly"]))),
  Intimidatingly: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$effect */ ._G)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["Driving Intimidatingly"]))),
  Quickly: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$effect */ ._G)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["Driving Quickly"]))),
  Observantly: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$effect */ ._G)(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["Driving Observantly"]))),
  Waterproofly: (0,_template_string_js__WEBPACK_IMPORTED_MODULE_1__/* .$effect */ ._G)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["Driving Waterproofly"])))
};
/**
 * Attempt to drive with a particular style for a particular number of turns.
 *
 * @param style The driving style to use.
 * @param turns The number of turns to attempt to get.
 * @param preferInventory Whether we should preferentially value items currently in our inventory.
 * @returns Whether we have at least as many turns as requested of said driving style.
 */

function drive(style) {
  var turns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var preferInventory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (!Object.values(Driving).includes(style)) return false;
  if (!installed()) return false;
  if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveEffect)(style) >= turns) return true;
  var fuelNeeded = 37 * Math.ceil((turns - (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveEffect)(style)) / 30);
  (preferInventory ? fillWithInventoryTo : fillTo)(fuelNeeded);

  while ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getFuel)() >= 37 && (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveEffect)(style) < turns) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("asdonmartin drive ".concat(style.name.replace("Driving ", "")));
  }

  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveEffect)(style) >= turns;
}

/***/ }),

/***/ 352:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "z": () => (/* binding */ Session)
/* harmony export */ });
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(71);
/* harmony import */ var _template_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(328);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(130);
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }





/**
 * Return a mapping of the session items, mapping foldable items to a single of their forms
 *
 * @param sessionOnly should closet, DC, and storage be ignored for the session calculation
 * @returns the item session results, with foldables mapped to a single of their folding forms
 */

function mySessionItemsWrapper() {
  var sessionOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  var manyToOne = (primary, mapped) => mapped.map(target => [target, primary]);

  var foldable = item => manyToOne(item, (0,_lib_js__WEBPACK_IMPORTED_MODULE_1__/* .getFoldGroup */ ._D)(item));

  var itemMappings = new Map([].concat(_toConsumableArray(foldable((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject || (_templateObject = _taggedTemplateLiteral(["liar's pants"]))))), _toConsumableArray(foldable((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["ice pick"]))))), _toConsumableArray(manyToOne((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Spooky Putty sheet"]))), [(0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Spooky Putty monster"])))].concat(_toConsumableArray((0,_lib_js__WEBPACK_IMPORTED_MODULE_1__/* .getFoldGroup */ ._D)((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Spooky Putty sheet"])))))))), _toConsumableArray(foldable((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["stinky cheese sword"]))))), _toConsumableArray(foldable((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["naughty paper shuriken"]))))), _toConsumableArray(foldable((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Loathing Legion knife"]))))), _toConsumableArray(foldable((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["deceased crimbo tree"]))))), _toConsumableArray(foldable((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["makeshift turban"]))))), _toConsumableArray(foldable((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["turtle wax shield"]))))), _toConsumableArray(foldable((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["metallic foil bow"]))))), _toConsumableArray(foldable((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["ironic moustache"]))))), _toConsumableArray(foldable((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["bugged balaclava"]))))), _toConsumableArray(foldable((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["toggle switch (Bartend)"]))))), _toConsumableArray(foldable((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["mushroom cap"]))))), _toConsumableArray(manyToOne((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["can of Rain-Doh"]))), (0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$items */ .vS)(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["empty Rain-Doh can"]))))), _toConsumableArray(manyToOne((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["meteorite fragment"]))), (0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$items */ .vS)(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["meteorite earring, meteorite necklace, meteorite ring"]))))), _toConsumableArray(manyToOne((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["Sneaky Pete's leather jacket"]))), (0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$items */ .vS)(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["Sneaky Pete's leather jacket (collar popped)"]))))), _toConsumableArray(manyToOne((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["Boris's Helm"]))), (0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$items */ .vS)(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["Boris's Helm (askew)"]))))), _toConsumableArray(manyToOne((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["Jarlsberg's pan"]))), (0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$items */ .vS)(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["Jarlsberg's pan (Cosmic portal mode)"]))))), _toConsumableArray(manyToOne((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["tiny plastic sword"]))), (0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$items */ .vS)(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["grogtini, bodyslam, dirty martini, vesper, cherry bomb, sangria del diablo"]))))), _toConsumableArray(manyToOne((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["earthenware muffin tin"]))), (0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$items */ .vS)(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["blueberry muffin, bran muffin, chocolate chip muffin"]))))), _toConsumableArray(manyToOne((0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["ChibiBuddy\u2122 (on)"]))), (0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$items */ .vS)(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["ChibiBuddy\u2122 (off)"])))))));
  var inventory = new Map();
  var invLocations = sessionOnly ? [kolmafia__WEBPACK_IMPORTED_MODULE_0__.mySessionItems] : [kolmafia__WEBPACK_IMPORTED_MODULE_0__.mySessionItems, kolmafia__WEBPACK_IMPORTED_MODULE_0__.getCloset, kolmafia__WEBPACK_IMPORTED_MODULE_0__.getDisplay, kolmafia__WEBPACK_IMPORTED_MODULE_0__.getStorage];

  if (!sessionOnly) {
    for (var _i = 0, _Object$entries = Object.entries((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getCampground)()); _i < _Object$entries.length; _i++) {
      var _itemMappings$get, _inventory$get;

      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          itemStr = _Object$entries$_i[0],
          quantity = _Object$entries$_i[1];

      if (!quantity) continue;
      var item = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toItem)(itemStr);
      if (item === (0,_template_string_js__WEBPACK_IMPORTED_MODULE_2__/* .$item */ .xr)(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["big rock"])))) continue; // Used to represent an empty house slot

      var mappedItem = (_itemMappings$get = itemMappings.get(item)) !== null && _itemMappings$get !== void 0 ? _itemMappings$get : item;
      inventory.set(mappedItem, quantity + ((_inventory$get = inventory.get(mappedItem)) !== null && _inventory$get !== void 0 ? _inventory$get : 0));
    }
  }

  for (var _i2 = 0, _invLocations = invLocations; _i2 < _invLocations.length; _i2++) {
    var inventoryFunc = _invLocations[_i2];

    for (var _i3 = 0, _Object$entries2 = Object.entries(inventoryFunc()); _i3 < _Object$entries2.length; _i3++) {
      var _itemMappings$get2, _inventory$get2;

      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),
          _itemStr = _Object$entries2$_i[0],
          _quantity = _Object$entries2$_i[1];

      if (!_quantity) continue;

      var _item = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toItem)(_itemStr);

      var _mappedItem = (_itemMappings$get2 = itemMappings.get(_item)) !== null && _itemMappings$get2 !== void 0 ? _itemMappings$get2 : _item;

      inventory.set(_mappedItem, _quantity + ((_inventory$get2 = inventory.get(_mappedItem)) !== null && _inventory$get2 !== void 0 ? _inventory$get2 : 0));
      if (inventory.get(_mappedItem) === 0) inventory.delete(_mappedItem);
    }
  }

  return inventory;
}
/**
 * Perform a binary element-wise operation on two inventories
 *
 * @param a The LHS inventory to perform the operation on
 * @param b The RHS inventory to perform the operation on
 * @param op an operator to compute between the sets
 * @returns a new map representing the combined inventories
 */


function inventoryOperation(a, b, op) {
  // return every entry that is in a and not in b
  var difference = new Map();

  var _iterator = _createForOfIteratorHelper(new Set([].concat(_toConsumableArray(a.keys()), _toConsumableArray(b.keys())))),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _a$get, _b$get;

      var item = _step.value;
      difference.set(item, op((_a$get = a.get(item)) !== null && _a$get !== void 0 ? _a$get : 0, (_b$get = b.get(item)) !== null && _b$get !== void 0 ? _b$get : 0));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var diffEntries = _toConsumableArray(difference.entries());

  return new Map(diffEntries.filter(_ref => {
    var _ref2 = _slicedToArray(_ref, 2),
        value = _ref2[1];

    return value !== 0;
  }));
}
/**
 * A wrapper around tracking items and meat gained from this session
 * Smartly handles foldables being added/removed based on their state
 * Provides operations to add sessions and subtract Sessions so you can isolate the value of each Session using a baseline
 *
 * @member meat the raw meat associated with this Session
 * @member items a map representing the items gained/lost during this Session
 */


var Session = /*#__PURE__*/function () {
  /**
   * Construct a new session
   *
   * @param meat the amount of meat associated with this session
   * @param items the items associated with this session
   * @param totalTurns the number of turns associated with this session
   */
  function Session(meat, items, totalTurns) {
    _classCallCheck(this, Session);

    _defineProperty(this, "meat", void 0);

    _defineProperty(this, "items", void 0);

    _defineProperty(this, "totalTurns", void 0);

    this.meat = meat;
    this.items = items;
    this.totalTurns = totalTurns;
  }
  /**
   * Register session results that do not get tracked natively
   *
   * @param target either the Item or a string saying "meat" of what quantity to modify
   * @param quantity How much to modify the tracked amount by
   */


  _createClass(Session, [{
    key: "register",
    value: function register(target, quantity) {
      if (target === "meat") {
        this.meat += quantity;
      } else {
        var _this$items$get;

        this.items.set(target, ((_this$items$get = this.items.get(target)) !== null && _this$items$get !== void 0 ? _this$items$get : 0) + quantity);
      }
    }
    /**
     * Value this session
     *
     * @param itemValue a function that, when given an item, will give a meat value of the item
     * @returns ItemResult with the full value of this session given the input function
     */

  }, {
    key: "value",
    value: function value(itemValue) {
      // TODO: add garbo specific pricing (sugar equipment for synth, etc.)
      var turns = this.totalTurns;
      var meat = Math.floor(this.meat);

      var itemDetails = _toConsumableArray(this.items.entries()).map(_ref3 => {
        var _ref4 = _slicedToArray(_ref3, 2),
            item = _ref4[0],
            quantity = _ref4[1];

        return {
          item: item,
          quantity: quantity,
          // only run itemValue if quantity is nonzero
          value: quantity ? itemValue(item) * quantity : 0
        };
      });

      var items = Math.floor((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__/* .sum */ .Sm)(itemDetails, "value"));
      return {
        meat: meat,
        items: items,
        total: meat + items,
        itemDetails: itemDetails,
        turns: turns
      };
    }
    /**
     * Subtract the contents of another session from this one, removing any items that have a resulting quantity of 0
     *  (this will ignore elements in b but not in a)
     *
     * @param other the session from which to pull values to remove from this session
     * @returns a new session representing the difference between this session and the other session
     */

  }, {
    key: "diff",
    value: function diff(other) {
      return new Session(this.meat - other.meat, inventoryOperation(this.items, other.items, (a, b) => a - b), this.totalTurns - other.totalTurns);
    }
    /**
     * Subtract the contents of snasphot b from session a, removing any items that have a resulting quantity of 0
     *  (this will ignore elements in b but not in a)
     *
     * @param a the session from which to subtract elements
     * @param b the session from which to add elements
     * @returns a new session representing the difference between a and b
     */

  }, {
    key: "add",
    value:
    /**
     * Generate a new session combining multiple sessions together
     *
     * @param other the session from which to add elements to this set
     * @returns a new session representing the addition of other to this
     */
    function add(other) {
      return new Session(this.meat + other.meat, inventoryOperation(this.items, other.items, (a, b) => a + b), this.totalTurns + other.totalTurns);
    }
    /**
     * Combine the contents of sessions
     *
     * @param sessions the set of sessions to combine together
     * @returns a new session representing the difference between a and b
     */

  }, {
    key: "toFile",
    value:
    /**
     * Export this session to a file in the data/ directory. Conventionally this file should end in ".json"
     *
     * @param filename The file into which to export
     */
    function toFile(filename) {
      var val = {
        meat: this.meat,
        items: Object.fromEntries(this.items),
        totalTurns: this.totalTurns
      };
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.bufferToFile)(JSON.stringify(val), Session.getFilepath(filename));
    }
    /**
     * Import a session from a file in the data/ directory. Conventionally the file should end in ".json"
     *
     * @param filename The file from which to import
     * @returns the session represented by the file
     */

  }, {
    key: "computeMPA",
    value:
    /**
     * @param other the session to diff against this session when computing MPA
     * @param options options for computing MPA
     * @param options.value a function to compute the meat value of a given item
     * @param options.isOutlier a function to compute if an item is considered an outlier. By default, no items are outliers
     * @param options.excludeValue meat values to exclude when calculating specific portions of the MPA
     * @param options.excludeValue.meat how much meat to exclude when calculating the meat portion of MPA
     * @param options.excludeValue.item how much meat to exclude when calculating hte item portion of MPA
     * @returns an analysis of the effective MPA for the given session
     */
    function computeMPA(other, options) {
      return Session.computeMPA(this, other, options);
    }
  }], [{
    key: "diff",
    value: function diff(a, b) {
      return a.diff(b);
    }
  }, {
    key: "add",
    value: function add() {
      for (var _len = arguments.length, sessions = new Array(_len), _key = 0; _key < _len; _key++) {
        sessions[_key] = arguments[_key];
      }

      return sessions.reduce((previousSession, currentSession) => previousSession.add(currentSession));
    }
  }, {
    key: "getFilepath",
    value: function getFilepath(filename) {
      return filename.endsWith(".json") ? filename : "snapshots/".concat((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myName)(), "/").concat((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.todayToString)(), "_").concat(filename, ".json");
    }
  }, {
    key: "fromFile",
    value: function fromFile(filename) {
      var fileValue = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.fileToBuffer)(Session.getFilepath(filename)); // fileToBuffer returns empty string for files that don't exist

      if (fileValue.length > 0) {
        var _val$totalTurns;

        var val = JSON.parse(fileValue);
        var parsedItems = Object.entries(val.items).map(_ref5 => {
          var _ref6 = _slicedToArray(_ref5, 2),
              itemStr = _ref6[0],
              quantity = _ref6[1];

          return [(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toItem)(itemStr), quantity];
        });
        return new Session(val.meat, new Map(parsedItems), (_val$totalTurns = val.totalTurns) !== null && _val$totalTurns !== void 0 ? _val$totalTurns : 0);
      } else {
        // if the file does not exist, return an empty session
        return new Session(0, new Map(), 0);
      }
    }
    /**
     * Return the meat and items for the current session
     *
     * @param sessionOnly should closet, DC, and storage be ignored for the session calculation
     * @returns current session
     */

  }, {
    key: "current",
    value: function current() {
      var sessionOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var meat = sessionOnly ? [kolmafia__WEBPACK_IMPORTED_MODULE_0__.mySessionMeat] : [kolmafia__WEBPACK_IMPORTED_MODULE_0__.mySessionMeat, kolmafia__WEBPACK_IMPORTED_MODULE_0__.myClosetMeat, kolmafia__WEBPACK_IMPORTED_MODULE_0__.myStorageMeat];
      return new Session((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__/* .sum */ .Sm)(meat, f => f()), mySessionItemsWrapper(sessionOnly), (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.totalTurnsPlayed)());
    }
    /**
     * @param baseline the base session to use when computing MPA
     * @param full the full session to use when computing MPA
     * @param options options for computing MPA
     * @param options.value a function to compute the meat value of a given item
     * @param options.isOutlier a function to compute if an item is considered an outlier. By default, no items are outliers
     * @param options.excludeValue meat values to exclude when calculating specific portions of the MPA
     * @param options.excludeValue.meat how much meat to exclude when calculating the meat portion of MPA
     * @param options.excludeValue.item how much meat to exclude when calculating hte item portion of MPA
     * @returns an analysis of the effective MPA for the given session
     */

  }, {
    key: "computeMPA",
    value: function computeMPA(baseline, full, options) {
      var _options$excludeValue, _excludeValue$meat, _excludeValue$item;

      var value = options.value;
      var excludeValue = (_options$excludeValue = options.excludeValue) !== null && _options$excludeValue !== void 0 ? _options$excludeValue : {
        meat: 0,
        item: 0
      };
      var isOutlier = options.isOutlier;
      var result = full.diff(baseline).value(value);
      var meatValue = result.meat - ((_excludeValue$meat = excludeValue.meat) !== null && _excludeValue$meat !== void 0 ? _excludeValue$meat : 0);
      var outlierItems = isOutlier ? result.itemDetails.filter(isOutlier) : [];
      var outliersValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__/* .sum */ .Sm)(outlierItems, detail => detail.value);
      var itemValue = result.items - outliersValue - ((_excludeValue$item = excludeValue.item) !== null && _excludeValue$item !== void 0 ? _excludeValue$item : 0);
      var turns = result.turns;
      return {
        mpa: {
          effective: (meatValue + itemValue) / turns,
          total: (meatValue + itemValue + outliersValue) / turns,
          meat: meatValue / turns,
          items: itemValue / turns
        },
        values: {
          effective: meatValue + itemValue,
          total: meatValue + itemValue + outliersValue,
          meat: meatValue,
          items: itemValue
        },
        outlierItems: outlierItems,
        turns: turns
      };
    }
  }]);

  return Session;
}();

/***/ }),

/***/ 328:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$L": () => (/* binding */ $coinmaster),
/* harmony export */   "HP": () => (/* binding */ $familiar),
/* harmony export */   "IG": () => (/* binding */ $bounties),
/* harmony export */   "JT": () => (/* binding */ $classes),
/* harmony export */   "Jh": () => (/* binding */ $slot),
/* harmony export */   "LG": () => (/* binding */ $familiars),
/* harmony export */   "O4": () => (/* binding */ $monster),
/* harmony export */   "PG": () => (/* binding */ $location),
/* harmony export */   "Ri": () => (/* binding */ $stat),
/* harmony export */   "SS": () => (/* binding */ $element),
/* harmony export */   "Ys": () => (/* binding */ $elements),
/* harmony export */   "_$": () => (/* binding */ $class),
/* harmony export */   "_0": () => (/* binding */ $thralls),
/* harmony export */   "_G": () => (/* binding */ $effect),
/* harmony export */   "bi": () => (/* binding */ $phyla),
/* harmony export */   "ei": () => (/* binding */ $slots),
/* harmony export */   "ev": () => (/* binding */ $thrall),
/* harmony export */   "f9": () => (/* binding */ $modifier),
/* harmony export */   "fr": () => (/* binding */ $monsters),
/* harmony export */   "gw": () => (/* binding */ $stats),
/* harmony export */   "j": () => (/* binding */ $modifiers),
/* harmony export */   "l$": () => (/* binding */ $path),
/* harmony export */   "lh": () => (/* binding */ $effects),
/* harmony export */   "n7": () => (/* binding */ $paths),
/* harmony export */   "nx": () => (/* binding */ $skills),
/* harmony export */   "o6": () => (/* binding */ $servant),
/* harmony export */   "qi": () => (/* binding */ $servants),
/* harmony export */   "tm": () => (/* binding */ $skill),
/* harmony export */   "tq": () => (/* binding */ $phylum),
/* harmony export */   "uO": () => (/* binding */ $bounty),
/* harmony export */   "vS": () => (/* binding */ $items),
/* harmony export */   "xr": () => (/* binding */ $item),
/* harmony export */   "xw": () => (/* binding */ $locations),
/* harmony export */   "yF": () => (/* binding */ $coinmasters)
/* harmony export */ });
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(130);



var concatTemplateString = function concatTemplateString(literals) {
  for (var _len = arguments.length, placeholders = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    placeholders[_key - 1] = arguments[_key];
  }

  return literals.raw.reduce((acc, literal, i) => {
    var _placeholders$i;

    return acc + literal + ((_placeholders$i = placeholders[i]) !== null && _placeholders$i !== void 0 ? _placeholders$i : "");
  }, "");
};

var handleTypeGetError = (Type, error) => {
  var message = "".concat(error);
  var match = message.match(RegExp("Bad ".concat(Type.name.toLowerCase(), " value: .*")));

  if (match) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)("".concat(match[0], "; if you're certain that this ").concat(Type.name, " exists and is spelled correctly, please update KoLMafia"), "red");
  } else {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)(message);
  }
};

var createSingleConstant = Type => {
  var tagFunction = function tagFunction(literals) {
    for (var _len2 = arguments.length, placeholders = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      placeholders[_key2 - 1] = arguments[_key2];
    }

    var input = concatTemplateString.apply(void 0, [literals].concat(placeholders));

    try {
      return Type.get(input);
    } catch (error) {
      handleTypeGetError(Type, error);
    }

    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.abort)();
  };

  tagFunction.cls = Type;
  tagFunction.none = Type.none;
  return tagFunction;
};

var createPluralConstant = Type => {
  var tagFunction = function tagFunction(literals) {
    for (var _len3 = arguments.length, placeholders = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      placeholders[_key3 - 1] = arguments[_key3];
    }

    var input = concatTemplateString.apply(void 0, [literals].concat(placeholders));

    if (input === "") {
      return Type.all();
    }

    try {
      return Type.get((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__/* .splitByCommasWithEscapes */ .ZQ)(input));
    } catch (error) {
      handleTypeGetError(Type, error);
    }

    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.abort)();
  };

  tagFunction.all = () => Type.all();

  return tagFunction;
};
/**
 * A Bounty specified by name.
 *
 * @category In-game constant
 */


var $bounty = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Bounty);
/**
 * A list of Bounties specified by a comma-separated list of names.
 * For a list of all possible Bounties, leave the template string blank.
 *
 * @category In-game constant
 */

var $bounties = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Bounty);
/**
 * A Class specified by name.
 *
 * @category In-game constant
 */

var $class = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Class);
/**
 * A list of Classes specified by a comma-separated list of names.
 * For a list of all possible Classes, leave the template string blank.
 *
 * @category In-game constant
 */

var $classes = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Class);
/**
 * A Coinmaster specified by name.
 *
 * @category In-game constant
 */

var $coinmaster = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Coinmaster);
/**
 * A list of Coinmasters specified by a comma-separated list of names.
 * For a list of all possible Coinmasters, leave the template string blank.
 *
 * @category In-game constant
 */

var $coinmasters = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Coinmaster);
/**
 * An Effect specified by name.
 *
 * @category In-game constant
 */

var $effect = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Effect);
/**
 * A list of Effects specified by a comma-separated list of names.
 * For a list of all possible Effects, leave the template string blank.
 *
 * @category In-game constant
 */

var $effects = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Effect);
/**
 * An Element specified by name.
 *
 * @category In-game constant
 */

var $element = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Element);
/**
 * A list of Elements specified by a comma-separated list of names.
 * For a list of all possible Elements, leave the template string blank.
 *
 * @category In-game constant
 */

var $elements = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Element);
/**
 * A Familiar specified by name.
 *
 * @category In-game constant
 */

var $familiar = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Familiar);
/**
 * A list of Familiars specified by a comma-separated list of names.
 * For a list of all possible Familiars, leave the template string blank.
 *
 * @category In-game constant
 */

var $familiars = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Familiar);
/**
 * An Item specified by name.
 *
 * @category In-game constant
 */

var $item = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item);
/**
 * A list of Items specified by a comma-separated list of names.
 * For a list of all possible Items, leave the template string blank.
 *
 * @category In-game constant
 */

var $items = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item);
/**
 * A Location specified by name.
 *
 * @category In-game constant
 */

var $location = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Location);
/**
 * A list of Locations specified by a comma-separated list of names.
 * For a list of all possible Locations, leave the template string blank.
 *
 * @category In-game constant
 */

var $locations = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Location);
/**
 * A Modifier specified by name.
 *
 * @category In-game constant
 */

var $modifier = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Modifier);
/**
 * A list of Modifiers specified by a comma-separated list of names.
 * For a list of all possible Modifiers, leave the template string blank.
 *
 * @category In-game constant
 */

var $modifiers = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Modifier);
/**
 * A Monster specified by name.
 *
 * @category In-game constant
 */

var $monster = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Monster);
/**
 * A list of Monsters specified by a comma-separated list of names.
 * For a list of all possible Monsters, leave the template string blank.
 *
 * @category In-game constant
 */

var $monsters = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Monster);
/**
 * A Phylum specified by name.
 *
 * @category In-game constant
 */

var $phylum = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Phylum);
/**
 * A list of Phyla specified by a comma-separated list of names.
 * For a list of all possible Phyla, leave the template string blank.
 *
 * @category In-game constant
 */

var $phyla = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Phylum);
/**
 * A Servant specified by name.
 *
 * @category In-game constant
 */

var $servant = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Servant);
/**
 * A list of Servants specified by a comma-separated list of names.
 * For a list of all possible Servants, leave the template string blank.
 *
 * @category In-game constant
 */

var $servants = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Servant);
/**
 * A Skill specified by name.
 *
 * @category In-game constant
 */

var $skill = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill);
/**
 * A list of Skills specified by a comma-separated list of names.
 * For a list of all possible Skills, leave the template string blank.
 *
 * @category In-game constant
 */

var $skills = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill);
/**
 * A Slot specified by name.
 *
 * @category In-game constant
 */

var $slot = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Slot);
/**
 * A list of Slots specified by a comma-separated list of names.
 * For a list of all possible Slots, leave the template string blank.
 *
 * @category In-game constant
 */

var $slots = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Slot);
/**
 * A Stat specified by name.
 *
 * @category In-game constant
 */

var $stat = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Stat);
/**
 * A list of Stats specified by a comma-separated list of names.
 * For a list of all possible Stats, leave the template string blank.
 *
 * @category In-game constant
 */

var $stats = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Stat);
/**
 * A Thrall specified by name.
 *
 * @category In-game constant
 */

var $thrall = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Thrall);
/**
 * A list of Thralls specified by a comma-separated list of names.
 * For a list of all possible Thralls, leave the template string blank.
 *
 * @category In-game constant
 */

var $thralls = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Thrall);
/**
 * A Path specified by name.
 *
 * @category In-game constant
 */

var $path = createSingleConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Path);
/**
 * A list of Paths specified by a comma-separated list of names.
 * For a list of all possible Paths, leave the template string blank.
 *
 * @category In-game constant
 */

var $paths = createPluralConstant(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Path);

/***/ }),

/***/ 130:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$H": () => (/* binding */ flat),
/* harmony export */   "$x": () => (/* binding */ setEqual),
/* harmony export */   "IA": () => (/* binding */ arrayContains),
/* harmony export */   "JD": () => (/* binding */ sumNumbers),
/* harmony export */   "MX": () => (/* binding */ random),
/* harmony export */   "Mp": () => (/* binding */ invertMap),
/* harmony export */   "N3": () => (/* binding */ countedMapToString),
/* harmony export */   "Nf": () => (/* binding */ notNull),
/* harmony export */   "Qg": () => (/* binding */ makeByXFunction),
/* harmony export */   "Sm": () => (/* binding */ sum),
/* harmony export */   "UT": () => (/* binding */ maxBy),
/* harmony export */   "Y8": () => (/* binding */ countedMapToArray),
/* harmony export */   "ZQ": () => (/* binding */ splitByCommasWithEscapes),
/* harmony export */   "_g": () => (/* binding */ arrayEquals),
/* harmony export */   "aF": () => (/* binding */ undelay),
/* harmony export */   "nf": () => (/* binding */ notNullish),
/* harmony export */   "p3": () => (/* binding */ parseNumber),
/* harmony export */   "tc": () => (/* binding */ tc),
/* harmony export */   "tv": () => (/* binding */ arrayToCountedMap),
/* harmony export */   "uZ": () => (/* binding */ clamp),
/* harmony export */   "yo": () => (/* binding */ chunk)
/* harmony export */ });
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Type guard against null value
 *
 * @param value Value that could be null
 * @returns Confirmation that the value is not null
 */
function notNull(value) {
  return value !== null;
}
/**
 * Type guard against nullish value
 *
 * @param value Value that could be null or undefined
 * @returns Confirmation that the value is not null nor undefined
 */

function notNullish(value) {
  return notNull(value) && value !== undefined;
}
/**
 * Parse string to number, stripping commas
 *
 * @param n Numberical string to parse
 * @returns Numerical value of string
 */

function parseNumber(n) {
  return Number.parseInt(n.replace(/,/g, ""));
}
/**
 * Clamp a number between lower and upper bounds.
 *
 * @param n Number to clamp.
 * @param min Lower bound.
 * @param max Upper bound.
 * @returns Clamped value
 */

function clamp(n, min, max) {
  return Math.max(min, Math.min(max, n));
}
/**
 * Split an {@param array} into {@param chunkSize} sized chunks
 *
 * @param array Array to split
 * @param chunkSize Size of chunk
 * @returns Split array
 */

function chunk(array, chunkSize) {
  var result = [];

  for (var i = 0; i < array.length; i += chunkSize) {
    result.push(array.slice(i, i + chunkSize));
  }

  return result;
}
/**
 * Count distinct values in an array
 *
 * @param array Array of values
 * @returns Map of distinct values to count
 */

function arrayToCountedMap(array) {
  if (!Array.isArray(array)) return array;
  var map = new Map();
  array.forEach(item => {
    map.set(item, (map.get(item) || 0) + 1);
  });
  return map;
}
/**
 * Turn map of distinct values to count into array of values
 *
 * @param map Map to turn into array
 * @returns Array of values
 */

function countedMapToArray(map) {
  var _ref;

  return (_ref = []).concat.apply(_ref, _toConsumableArray(_toConsumableArray(map).map(_ref2 => {
    var _ref3 = _slicedToArray(_ref2, 2),
        item = _ref3[0],
        quantity = _ref3[1];

    return Array(quantity).fill(item);
  })));
}
/**
 * Stringify a counted map
 *
 * @param map Map of counted values
 * @returns String representing map of counted values
 */

function countedMapToString(map) {
  return _toConsumableArray(map).map(_ref4 => {
    var _ref5 = _slicedToArray(_ref4, 2),
        item = _ref5[0],
        quantity = _ref5[1];

    return "".concat(quantity, " x ").concat(item);
  }).join(", ");
}
/**
 * Sum an array of numbers.
 *
 * @param addends Addends to sum.
 * @param x Property or mapping function of addends to sum
 * @returns Sum of numbers
 */

function sum(addends, x) {
  return addends.reduce((subtotal, element) => subtotal + (typeof x === "function" ? x(element) : element[x]), 0);
}
/**
 * Sum array of numbers
 *
 * @param addends Numbers to sum
 * @returns Sum of numbers
 */

function sumNumbers(addends) {
  return sum(addends, x => x);
}
/**
 * Checks if a given item is in a readonly array, acting as a typeguard.
 *
 * @param item Needle
 * @param array Readonly array haystack
 * @returns Whether the item is in the array, and narrows the type of the item.
 */

function arrayContains(item, array) {
  return array.includes(item);
}
/**
 * Checks if two arrays contain the same elements in the same quantity.
 *
 * @param a First array for comparison
 * @param b Second array for comparison
 * @returns Whether the two arrays are equal, irrespective of order.
 */

function setEqual(a, b) {
  var sortedA = _toConsumableArray(a).sort();

  var sortedB = _toConsumableArray(b).sort();

  return a.length === b.length && sortedA.every((item, index) => item === sortedB[index]);
}
/**
 * Reverses keys and values for a given map
 *
 * @param map Map to invert
 * @returns Inverted map
 */

function invertMap(map) {
  var returnValue = new Map();

  var _iterator = _createForOfIteratorHelper(map),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
          key = _step$value[0],
          value = _step$value[1];

      returnValue.set(value, key);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return returnValue;
}
/**
 * Splits a string by commas while also respecting escaping commas with a backslash
 *
 * @param str String to split
 * @returns List of tokens
 */

function splitByCommasWithEscapes(str) {
  var returnValue = [];
  var ignoreNext = false;
  var currentString = "";

  var _iterator2 = _createForOfIteratorHelper(str.split("")),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var char = _step2.value;

      if (char === "\\") {
        ignoreNext = true;
      } else {
        if (char == "," && !ignoreNext) {
          returnValue.push(currentString.trim());
          currentString = "";
        } else {
          currentString += char;
        }

        ignoreNext = false;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  returnValue.push(currentString.trim());
  return returnValue;
}
/**
 * Find the best element of an array, where "best" is defined by some given criteria.
 *
 * @param array The array to traverse and find the best element of.
 * @param optimizer Either a key on the objects we're looking at that corresponds to numerical values, or a function for mapping these objects to numbers. Essentially, some way of assigning value to the elements of the array.
 * @param reverse Make this true to find the worst element of the array, and false to find the best. Defaults to false.
 * @returns Best element by optimizer function
 */

function maxBy(array, optimizer) {
  var reverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (!array.length) throw new Error("Cannot call maxBy on an empty array!");

  if (typeof optimizer === "function") {
    return _toConsumableArray(array).reduce((_ref6, other) => {
      var value = _ref6.value,
          item = _ref6.item;
      var otherValue = optimizer(other);
      return value >= otherValue !== reverse ? {
        value: value,
        item: item
      } : {
        value: otherValue,
        item: other
      };
    }, {
      item: array[0],
      value: optimizer(array[0])
    }).item;
  } else {
    return array.reduce((a, b) => a[optimizer] >= b[optimizer] !== reverse ? a : b);
  }
}
/**
 * Compare arrays shallowly
 *
 * @param left One array to compare
 * @param right The other array to compare
 * @returns Whether the two arrays are shallowly equal
 */

function arrayEquals(left, right) {
  if (left.length !== right.length) return false;
  return left.every((element, index) => element === right[index]);
}
/**
 * Used to collapse a Delayed<T, S> object into an entity of type "T" as represented by the object.
 *
 * @param delayedObject Object of type Delayed<T, S> that represents either a value of type T or a function returning a value of type T.
 * @param args The arguments to pass to the delay function
 * @returns The return value of the function, if delayedObject is a function. Otherwise, this returns the original element.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any

function undelay(delayedObject) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return typeof delayedObject === "function" ? delayedObject.apply(void 0, args) : delayedObject;
}
/**
 * Makes a byX function, like byStat or byClass
 *
 * @param source A method for finding your stat, or class, or whatever X is in this context
 * @returns A function akin to byStat or byClass; it accepts an object that either is "complete" in the sense that it has a key for every conceivable value, or contains a `default` parameter. If an inappropriate input is provided, returns undefined.
 */

function makeByXFunction(source) {
  return function (options, alternateSource) {
    var _options$val;

    var val = undelay(alternateSource !== null && alternateSource !== void 0 ? alternateSource : source);
    if ("default" in options) return (_options$val = options[val]) !== null && _options$val !== void 0 ? _options$val : options.default;
    return options[val];
  };
}
/**
 * Flattens an array. Basically replacing Array.prototype.flat for which Rhino doesn't yet have an implementation
 *
 * @param arr Array to flatten
 * @param depth Number of layers to flatten by; Infinity for a fully flat array
 * @returns Flattened array
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any

function flat(arr) {
  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
  var flatArray = [];

  var _iterator3 = _createForOfIteratorHelper(arr),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var item = _step3.value;

      if (Array.isArray(item) && depth > 0) {
        var child = flat(item, depth - 1);
        flatArray = flatArray.concat(child);
      } else {
        flatArray.push(item);
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return flatArray;
}
/**
 * @param array Array to select from
 * @returns Random item from array
 */

function random(array) {
  return array[Math.floor(Math.random() * array.length)];
}
/**
 * Title cases a single word
 *
 * @param word Word to transform
 * @returns Word in title case
 */

var tc = word => word.charAt(0).toUpperCase() + word.slice(1);

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "main": () => (/* binding */ main)
});

// EXTERNAL MODULE: external "kolmafia"
var external_kolmafia_ = __webpack_require__(530);
;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/args.js
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/* eslint-disable @typescript-eslint/no-explicit-any */

var Args = /*#__PURE__*/function () {
  function Args() {
    _classCallCheck(this, Args);
  }

  _createClass(Args, null, [{
    key: "custom",
    value: function custom(spec, _parser, valueHelpName) {
      var _a, _b;

      var raw_options = (_a = spec.options) === null || _a === void 0 ? void 0 : _a.map(option => option[0]); // Check that the default value actually appears in the options.

      if ("default" in spec && raw_options) {
        if (!raw_options.includes(spec.default)) {
          throw "Invalid default value ".concat(spec.default);
        }
      }

      return _objectSpread(_objectSpread({}, spec), {}, {
        valueHelpName: valueHelpName,
        parser: value => {
          var parsed_value = _parser(value);

          if (parsed_value === undefined || parsed_value instanceof ParseError) return parsed_value;

          if (raw_options) {
            if (!raw_options.includes(parsed_value)) {
              return new ParseError("received ".concat(value, " which was not in the allowed options"));
            }
          }

          return parsed_value;
        },
        options: (_b = spec.options) === null || _b === void 0 ? void 0 : _b.map(a => ["".concat(a[0]), a[1]])
      });
    }
  }, {
    key: "arrayFromArg",
    value: function arrayFromArg(spec, argFromSpec) {
      var _a, _b, _c; // First, construct a non-array version of this argument.
      // We do this by calling argFromSpec in order to extract the parser and
      // valueHelpName (to make it easier to define the functions below).
      //
      // The default argument of an ArraySpec is of type T[], which causes
      // problems, so we must remove it.


      var spec_without_default = _objectSpread({}, spec); // Avoid "the operand of a 'delete' operator must be optional"


      if ("default" in spec_without_default) delete spec_without_default["default"];
      var arg = argFromSpec.call(this, spec_without_default); // Next, check that all default values actually appear in the options.

      var raw_options = (_a = spec.options) === null || _a === void 0 ? void 0 : _a.map(option => option[0]);

      if ("default" in spec && raw_options) {
        var _iterator = _createForOfIteratorHelper(spec.default),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var default_entry = _step.value;
            if (!raw_options.includes(default_entry)) throw "Invalid default value ".concat(spec.default);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      var separator = (_b = spec.separator) !== null && _b !== void 0 ? _b : ",";

      var arrayParser = value => {
        // Split the array
        var values = value.split(separator);
        if (!spec.noTrim) values = values.map(v => v.trim()); // Parse all values, return the first error found if any

        var result = values.map(v => arg.parser(v));
        var error = result.find(v => v instanceof ParseError);
        if (error) return error;
        var failure_index = result.indexOf(undefined);
        if (failure_index !== -1) return new ParseError("components expected ".concat(arg.valueHelpName, " but could not parse ").concat(values[failure_index])); // Otherwise, all values are good

        return result;
      };

      return _objectSpread(_objectSpread({}, spec), {}, {
        valueHelpName: "".concat(arg.valueHelpName).concat(separator, " ").concat(arg.valueHelpName).concat(separator, " ..."),
        parser: arrayParser,
        options: (_c = spec.options) === null || _c === void 0 ? void 0 : _c.map(a => ["".concat(a[0]), a[1]])
      });
    }
  }, {
    key: "string",
    value: function string(spec) {
      return this.custom(spec, value => value, "TEXT");
    }
  }, {
    key: "strings",
    value: function strings(spec) {
      return this.arrayFromArg(spec, this.string);
    }
  }, {
    key: "number",
    value: function number(spec) {
      return this.custom(spec, value => isNaN(Number(value)) ? undefined : Number(value), "NUMBER");
    }
  }, {
    key: "numbers",
    value: function numbers(spec) {
      return this.arrayFromArg(spec, this.number);
    }
  }, {
    key: "boolean",
    value: function boolean(spec) {
      return this.custom(spec, value => {
        if (value.toLowerCase() === "true") return true;
        if (value.toLowerCase() === "false") return false;
        return undefined;
      }, "BOOLEAN");
    }
  }, {
    key: "booleans",
    value: function booleans(spec) {
      return this.arrayFromArg(spec, this.boolean);
    }
  }, {
    key: "flag",
    value: function flag(spec) {
      return this.custom(spec, value => {
        if (value.toLowerCase() === "true") return true;
        if (value.toLowerCase() === "false") return false;
        return undefined;
      }, "FLAG");
    }
  }, {
    key: "class",
    value: function _class(spec) {
      return this.custom(spec, value => {
        var match = external_kolmafia_.Class.get(value); // Class.get does fuzzy matching:
        //  e.g. Class.get("sc") returns disco bandit.
        // To avoid this foot-gun, only return exact matches or id lookups.

        if (match.toString().toUpperCase() === value.toString().toUpperCase()) return match;
        if (!isNaN(Number(value))) return match;
        return undefined;
      }, "CLASS");
    }
  }, {
    key: "classes",
    value: function classes(spec) {
      return this.arrayFromArg(spec, this.class);
    }
  }, {
    key: "effect",
    value: function effect(spec) {
      return this.custom(spec, external_kolmafia_.Effect.get, "EFFECT");
    }
  }, {
    key: "effects",
    value: function effects(spec) {
      return this.arrayFromArg(spec, this.effect);
    }
  }, {
    key: "familiar",
    value: function familiar(spec) {
      return this.custom(spec, external_kolmafia_.Familiar.get, "FAMILIAR");
    }
  }, {
    key: "familiars",
    value: function familiars(spec) {
      return this.arrayFromArg(spec, this.familiar);
    }
  }, {
    key: "item",
    value: function item(spec) {
      return this.custom(spec, external_kolmafia_.Item.get, "ITEM");
    }
  }, {
    key: "items",
    value: function items(spec) {
      return this.arrayFromArg(spec, this.item);
    }
  }, {
    key: "location",
    value: function location(spec) {
      return this.custom(spec, external_kolmafia_.Location.get, "LOCATION");
    }
  }, {
    key: "locations",
    value: function locations(spec) {
      return this.arrayFromArg(spec, this.location);
    }
  }, {
    key: "monster",
    value: function monster(spec) {
      return this.custom(spec, external_kolmafia_.Monster.get, "MONSTER");
    }
  }, {
    key: "monsters",
    value: function monsters(spec) {
      return this.arrayFromArg(spec, this.monster);
    }
  }, {
    key: "path",
    value: function path(spec) {
      return this.custom(spec, external_kolmafia_.Path.get, "PATH");
    }
  }, {
    key: "paths",
    value: function paths(spec) {
      return this.arrayFromArg(spec, this.path);
    }
  }, {
    key: "skill",
    value: function skill(spec) {
      return this.custom(spec, external_kolmafia_.Skill.get, "SKILL");
    }
  }, {
    key: "skills",
    value: function skills(spec) {
      return this.arrayFromArg(spec, this.skill);
    }
    /**
     * Create a group of arguments that will be printed separately in the help.
     *
     * Note that keys in the group must still be globally distinct.
     *
     * @param groupName The display name for the group in help.
     * @param args A JS object specifying the script arguments. Its values should
     *    be {@link Arg} objects (created by Args.string, Args.number, or others)
     *    or groups of arguments (created by Args.group).
     */

  }, {
    key: "group",
    value: function group(groupName, args) {
      return {
        name: groupName,
        args: args
      };
    }
    /**
     * Create a set of input arguments for a script.
     * @param scriptName Prefix for property names; often the name of the script.
     * @param scriptHelp Brief description of this script, for the help message.
     * @param args A JS object specifying the script arguments. Its values should
     *    be {@link Arg} objects (created by Args.string, Args.number, or others)
     *    or groups of arguments (created by Args.group).
     * @param options Config options for the args and arg parser.
     * @returns An object which can hold parsed argument values. The keys of this
     *    object are identical to the keys in 'args'.
     */

  }, {
    key: "create",
    value: function create(scriptName, scriptHelp, args, options) {
      var _objectSpread2;

      _traverse(args, (keySpec, key) => {
        if (key === "help" || keySpec.key === "help") throw "help is a reserved argument name";
      });

      var argsWithHelp = _objectSpread(_objectSpread({}, args), {}, {
        help: this.flag({
          help: "Show this message and exit.",
          setting: ""
        })
      }); // Create an object to hold argument results, with a default value for
      // each argument.


      var res = _objectSpread(_objectSpread({}, _loadDefaultValues(argsWithHelp)), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, specSymbol, argsWithHelp), _defineProperty(_objectSpread2, scriptSymbol, scriptName), _defineProperty(_objectSpread2, scriptHelpSymbol, scriptHelp), _defineProperty(_objectSpread2, optionsSymbol, options !== null && options !== void 0 ? options : {}), _objectSpread2));

      if (options === null || options === void 0 ? void 0 : options.positionalArgs) {
        var keys = [];
        var metadata = Args.getMetadata(res);
        metadata.traverse((keySpec, key) => {
          var _a;

          keys.push((_a = keySpec.key) !== null && _a !== void 0 ? _a : key);
        });

        var _iterator2 = _createForOfIteratorHelper(options.positionalArgs),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var arg = _step2.value;
            if (!keys.includes(arg)) throw "Unknown key for positional arg: ".concat(arg);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      return res;
    }
    /**
     * Parse the command line input into the provided script arguments.
     * @param args An object to hold the parsed argument values, from Args.create(*).
     * @param command The command line input.
     * @param includeSettings If true, parse values from settings as well.
     */

  }, {
    key: "fill",
    value: function fill(args, command) {
      var includeSettings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      var _a;

      var metadata = Args.getMetadata(args); // Load the list of keys and flags from the arg spec

      var keys = new Set();
      var flags = new Set();
      metadata.traverse((keySpec, key) => {
        var _a;

        var name = (_a = keySpec.key) !== null && _a !== void 0 ? _a : key;
        if (flags.has(name) || keys.has(name)) throw "Duplicate arg key ".concat(name, " is not allowed");
        if (keySpec.valueHelpName === "FLAG") flags.add(name);else keys.add(name);
      }); // Parse values from settings.

      if (includeSettings) {
        metadata.traverseAndMaybeSet(args, (keySpec, key) => {
          var _a, _b;

          var setting = (_a = keySpec.setting) !== null && _a !== void 0 ? _a : "".concat(metadata.scriptName, "_").concat((_b = keySpec.key) !== null && _b !== void 0 ? _b : key);
          if (setting === "") return undefined; // no setting

          var value_str = (0,external_kolmafia_.getProperty)(setting);
          if (value_str === "") return undefined; // no setting

          return parseAndValidate(keySpec, "Setting ".concat(setting), value_str);
        });
      } // Parse new argments from the command line


      if (command === undefined || command === "") return;
      var parsed = new CommandParser(command, keys, flags, (_a = metadata.options.positionalArgs) !== null && _a !== void 0 ? _a : []).parse();
      metadata.traverseAndMaybeSet(args, (keySpec, key) => {
        var _a;

        var argKey = (_a = keySpec.key) !== null && _a !== void 0 ? _a : key;
        var value_str = parsed.get(argKey);
        if (value_str === undefined) return undefined; // no setting

        return parseAndValidate(keySpec, "Argument ".concat(argKey), value_str);
      });
    }
    /**
     * Parse command line input into a new set of script arguments.
     * @param scriptName Prefix to use in property names; typically the name of the script.
     * @param scriptHelp Brief description of this script, for the help message.
     * @param spec An object specifying the script arguments.
     * @param command The command line input.
     * @param options Config options for the args and arg parser.
     */

  }, {
    key: "parse",
    value: function parse(scriptName, scriptHelp, spec, command, options) {
      var args = this.create(scriptName, scriptHelp, spec, options);
      this.fill(args, command);
      return args;
    }
    /**
     * Print a description of the script arguments to the CLI.
     *
     * First, all top-level argument descriptions are printed in the order they
     * were defined. Afterwards, descriptions for groups of arguments are printed
     * in the order they were defined.
     *
     * @param args An object of parsed arguments, from Args.create(*).
     * @param maxOptionsToDisplay If given, do not list more than this many options for each arg.
     */

  }, {
    key: "showHelp",
    value: function showHelp(args, maxOptionsToDisplay) {
      var _a;

      var metadata = Args.getMetadata(args);
      (0,external_kolmafia_.printHtml)("".concat(metadata.scriptHelp));
      (0,external_kolmafia_.printHtml)("");
      (0,external_kolmafia_.printHtml)("<b>".concat((_a = metadata.options.defaultGroupName) !== null && _a !== void 0 ? _a : "Options", ":</b>"));
      metadata.traverse((arg, key) => {
        var _a, _b, _c, _d, _e;

        if (arg.hidden) return;
        var nameText = "<font color='".concat((0,external_kolmafia_.isDarkMode)() ? "yellow" : "blue", "'>").concat((_a = arg.key) !== null && _a !== void 0 ? _a : key, "</font>");
        var valueText = arg.valueHelpName === "FLAG" ? "" : "<font color='purple'>".concat(arg.valueHelpName, "</font>");
        var helpText = (_b = arg.help) !== null && _b !== void 0 ? _b : "";
        var defaultText = "default" in arg ? "<font color='#888888'>[default: ".concat(arg.default, "]</font>") : "";
        var settingText = arg.setting === "" ? "" : "<font color='#888888'>[setting: ".concat((_c = arg.setting) !== null && _c !== void 0 ? _c : "".concat(metadata.scriptName, "_").concat((_d = arg.key) !== null && _d !== void 0 ? _d : key), "]</font>");
        (0,external_kolmafia_.printHtml)("&nbsp;&nbsp;".concat([nameText, valueText, "-", helpText, defaultText, settingText].join(" ")));
        var valueOptions = (_e = arg.options) !== null && _e !== void 0 ? _e : [];

        if (valueOptions.length < (maxOptionsToDisplay !== null && maxOptionsToDisplay !== void 0 ? maxOptionsToDisplay : Number.MAX_VALUE)) {
          var _iterator3 = _createForOfIteratorHelper(valueOptions),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var option = _step3.value;

              if (option.length === 1 || option[1] === undefined) {
                (0,external_kolmafia_.printHtml)("&nbsp;&nbsp;&nbsp;&nbsp;<font color='blue'>".concat(nameText, "</font> ").concat(option[0]));
              } else {
                (0,external_kolmafia_.printHtml)("&nbsp;&nbsp;&nbsp;&nbsp;<font color='blue'>".concat(nameText, "</font> ").concat(option[0], " - ").concat(option[1]));
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      }, group => {
        (0,external_kolmafia_.printHtml)("");
        (0,external_kolmafia_.printHtml)("<b>".concat(group.name, ":</b>"));
      });
    }
    /**
     * Load the metadata information for a set of arguments. Only for advanced usage.
     *
     * @param args A JS object specifying the script arguments. Its values should
     *    be {@link Arg} objects (created by Args.string, Args.number, or others)
     *    or groups of arguments (created by Args.group).
     * @returns A class containing metadata information.
     */

  }, {
    key: "getMetadata",
    value: function getMetadata(args) {
      return new WrappedArgMetadata(args);
    }
  }]);

  return Args;
}();
var ParseError = /*#__PURE__*/_createClass(function ParseError(message) {
  _classCallCheck(this, ParseError);

  this.message = message;
});
/**
 * Metadata for the parsed arguments.
 *
 * This information is hidden within the parsed argument object so that it
 * is invisible to the user but available to fill(*) and showHelp(*).
 */

var specSymbol = Symbol("spec");
var scriptSymbol = Symbol("script");
var scriptHelpSymbol = Symbol("scriptHelp");
var optionsSymbol = Symbol("options");
/**
 * Parse a string into a value for a given argument, throwing if the parsing fails.
 * @param arg An argument that takes values in T.
 * @param source A description of where this value came from, for the error message.
 * @param value The value to parse.
 * @returns the parsed value.
 */

function parseAndValidate(arg, source, value) {
  var parsed_value;

  try {
    parsed_value = arg.parser(value);
  } catch (_a) {
    parsed_value = undefined;
  }

  if (parsed_value === undefined) throw "".concat(source, " expected ").concat(arg.valueHelpName, " but could not parse ").concat(value);
  if (parsed_value instanceof ParseError) throw "".concat(source, " ").concat(parsed_value.message);
  return parsed_value;
}
/**
 * A class that reveals the hidden metadata and specs for arguments.
 *
 * Only for advanced usage.
 */


var WrappedArgMetadata = /*#__PURE__*/function () {
  function WrappedArgMetadata(args) {
    _classCallCheck(this, WrappedArgMetadata);

    this.spec = args[specSymbol];
    this.scriptName = args[scriptSymbol];
    this.scriptHelp = args[scriptHelpSymbol];
    this.options = args[optionsSymbol];
  }
  /**
   * Create a parsed args object from this spec using all default values.
   */


  _createClass(WrappedArgMetadata, [{
    key: "loadDefaultValues",
    value: function loadDefaultValues() {
      return _loadDefaultValues(this.spec);
    }
    /**
     * Traverse the spec and possibly generate a value for each argument.
     *
     * @param result The object to hold the resulting argument values, typically
     *    the result of loadDefaultValues().
     * @param setTo A function to generate an argument value from each arg spec.
     *    If this function returns undefined, then the argument value is unchanged.
     */

  }, {
    key: "traverseAndMaybeSet",
    value: function traverseAndMaybeSet(result, setTo) {
      return _traverseAndMaybeSet(this.spec, result, setTo);
    }
    /**
     * Traverse the spec and call a method for each argument.
     *
     * @param process A function to call at each arg spec.
     */

  }, {
    key: "traverse",
    value: function traverse(process, onGroup) {
      return _traverse(this.spec, process, onGroup);
    }
  }]);

  return WrappedArgMetadata;
}();
/**
 * Create a parsed args object from a spec using all default values.
 *
 * @param spec The spec for all arguments.
 */


function _loadDefaultValues(spec) {
  var result = {};

  for (var k in spec) {
    var argSpec = spec[k];

    if ("args" in argSpec) {
      result[k] = _loadDefaultValues(argSpec.args);
    } else {
      if ("default" in argSpec) result[k] = argSpec.default;else result[k] = undefined;
    }
  }

  return result;
}
/**
 * Traverse the spec and possibly generate a value for each argument.
 *
 * @param spec The spec for all arguments.
 * @param result The object to hold the resulting argument values.
 * @param setTo A function to generate an argument value from each arg spec.
 *    If this function returns undefined, then the argument value is unchanged.
 */


function _traverseAndMaybeSet(spec, result, setTo) {
  var groups = [];

  for (var k in spec) {
    var argSpec = spec[k];

    if ("args" in argSpec) {
      groups.push([argSpec, k]);
    } else {
      var value = setTo(argSpec, k);
      if (value === undefined) continue;
      result[k] = value;
    }
  }

  for (var _i = 0, _groups = groups; _i < _groups.length; _i++) {
    var group_and_key = _groups[_i];

    _traverseAndMaybeSet(group_and_key[0].args, result[group_and_key[1]], setTo);
  }
}
/**
 * Traverse the spec and possibly generate a value for each argument.
 *
 * @param spec The spec for all arguments.
 * @param process A function to call at each arg spec.
 */


function _traverse(spec, process, onGroup) {
  var groups = [];

  for (var k in spec) {
    var argSpec = spec[k];

    if ("args" in argSpec) {
      groups.push([argSpec, k]);
    } else {
      process(argSpec, k);
    }
  }

  for (var _i2 = 0, _groups2 = groups; _i2 < _groups2.length; _i2++) {
    var group_and_key = _groups2[_i2];
    onGroup === null || onGroup === void 0 ? void 0 : onGroup(group_and_key[0], group_and_key[1]);

    _traverse(group_and_key[0].args, process, onGroup);
  }
}
/**
 * A parser to extract key/value pairs from a command line input.
 * @member command The command line input.
 * @member keys The set of valid keys that can appear.
 * @member flags The set of valid flags that can appear.
 * @member index An internal marker for the progress of the parser over the input.
 */


var CommandParser = /*#__PURE__*/function () {
  function CommandParser(command, keys, flags, positionalArgs) {
    _classCallCheck(this, CommandParser);

    this.command = command;
    this.index = 0;
    this.keys = keys;
    this.flags = flags;
    this.positionalArgs = positionalArgs;
    this.positionalArgsParsed = 0;
  }
  /**
   * Perform the parsing of (key, value) pairs.
   * @returns The set of extracted (key, value) pairs.
   */


  _createClass(CommandParser, [{
    key: "parse",
    value: function parse() {
      var _a, _b, _c, _d;

      this.index = 0; // reset the parser

      var result = new Map();

      while (!this.finished()) {
        // A flag F may appear as !F to be parsed as false.
        var parsing_negative_flag = false;

        if (this.peek() === "!") {
          parsing_negative_flag = true;
          this.consume(["!"]);
        }

        var startIndex = this.index;
        var key = this.parseKey();

        if (result.has(key)) {
          throw "Duplicate key ".concat(key, " (first set to ").concat((_a = result.get(key)) !== null && _a !== void 0 ? _a : "", ")");
        }

        if (this.flags.has(key)) {
          // The key corresponds to a flag.
          // Parse [key] as true and ![key] as false.
          result.set(key, parsing_negative_flag ? "false" : "true");
          if (this.peek() === "=") throw "Flag ".concat(key, " cannot be assigned a value");
          if (!this.finished()) this.consume([" "]);
          this.prevUnquotedKey = undefined;
        } else if (this.keys.has(key)) {
          // Parse [key]=[value] or [key] [value]
          this.consume(["=", " "]);
          var value = this.parseValue();
          if (["'", '"'].includes((_b = this.prev()) !== null && _b !== void 0 ? _b : "")) this.prevUnquotedKey = undefined;else this.prevUnquotedKey = key;
          if (!this.finished()) this.consume([" "]);
          result.set(key, value);
        } else if (this.positionalArgsParsed < this.positionalArgs.length && this.peek() !== "=") {
          // Parse [value] as the next positional arg
          var positionalKey = this.positionalArgs[this.positionalArgsParsed];
          this.positionalArgsParsed++;
          this.index = startIndex; // back up to reparse the key as a value

          var _value = this.parseValue();

          if (["'", '"'].includes((_c = this.prev()) !== null && _c !== void 0 ? _c : "")) this.prevUnquotedKey = undefined;else this.prevUnquotedKey = key;
          if (!this.finished()) this.consume([" "]);
          if (result.has(positionalKey)) throw "Cannot assign ".concat(_value, " to ").concat(positionalKey, " (positionally) since ").concat(positionalKey, " was already set to ").concat((_d = result.get(positionalKey)) !== null && _d !== void 0 ? _d : "");
          result.set(positionalKey, _value);
        } else {
          // Key not found; include a better error message if it is possible for quotes to have been missed
          if (this.prevUnquotedKey && this.peek() !== "=") throw "Unknown argument: ".concat(key, " (if this should have been parsed as part of ").concat(this.prevUnquotedKey, ", you should surround the entire value in quotes)");else throw "Unknown argument: ".concat(key);
        }
      }

      return result;
    }
    /**
     * @returns True if the entire command has been parsed.
     */

  }, {
    key: "finished",
    value: function finished() {
      return this.index >= this.command.length;
    }
    /**
     * @returns The next character to parse, if it exists.
     */

  }, {
    key: "peek",
    value: function peek() {
      if (this.index >= this.command.length) return undefined;
      return this.command.charAt(this.index);
    }
    /**
     * @returns The character just parsed, if it exists.
     */

  }, {
    key: "prev",
    value: function prev() {
      if (this.index <= 0) return undefined;
      if (this.index >= this.command.length + 1) return undefined;
      return this.command.charAt(this.index - 1);
    }
    /**
     * Advance the internal marker over the next expected character.
     * Throws an error on unexpected characters.
     *
     * @param allowed Characters that are expected.
     */

  }, {
    key: "consume",
    value: function consume(allowed) {
      var _a;

      if (this.finished()) throw "Expected ".concat(allowed);

      if (allowed.includes((_a = this.peek()) !== null && _a !== void 0 ? _a : "")) {
        this.index += 1;
      }
    }
    /**
     * Find the next occurance of one of the provided characters, or the end of
     * the string if the characters never appear again.
     *
     * @param searchValue The characters to locate.
     */

  }, {
    key: "findNext",
    value: function findNext(searchValue) {
      var result = this.command.length;

      var _iterator4 = _createForOfIteratorHelper(searchValue),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var value = _step4.value;
          var index = this.command.indexOf(value, this.index);
          if (index !== -1 && index < result) result = index;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return result;
    }
    /**
     * Starting from the internal marker, parse a single key.
     * This also advances the internal marker.
     *
     * @returns The next key.
     */

  }, {
    key: "parseKey",
    value: function parseKey() {
      var keyEnd = this.findNext(["=", " "]);
      var key = this.command.substring(this.index, keyEnd);
      this.index = keyEnd;
      return key;
    }
    /**
     * Starting from the internal marker, parse a single value.
     * This also advances the internal marker.
     *
     * Values are a single word or enclosed in matching quotes, i.e. one of:
     *    "[^"]*"
     *    '[^']*"
     *    [^'"][^ ]*
     *
     * @returns The next value.
     */

  }, {
    key: "parseValue",
    value: function parseValue() {
      var _a, _b;

      var valueEnder = " ";
      var quotes = ["'", '"'];

      if (quotes.includes((_a = this.peek()) !== null && _a !== void 0 ? _a : "")) {
        valueEnder = (_b = this.peek()) !== null && _b !== void 0 ? _b : ""; // The value is everything until the next quote

        this.consume([valueEnder]); // Consume opening quote
      }

      var valueEnd = this.findNext([valueEnder]);
      var value = this.command.substring(this.index, valueEnd);

      if (valueEnder !== " " && valueEnd === this.command.length) {
        throw "No closing ".concat(valueEnder, " found for ").concat(valueEnder).concat(value);
      } // Consume the value (and closing quote)


      this.index = valueEnd;
      if (valueEnder !== " ") this.consume([valueEnder]);
      return value;
    }
  }]);

  return CommandParser;
}();
// EXTERNAL MODULE: ./node_modules/libram/dist/combat.js + 1 modules
var combat = __webpack_require__(284);
// EXTERNAL MODULE: ./node_modules/libram/dist/utils.js
var utils = __webpack_require__(130);
;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/combat.js
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || combat_unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return combat_arrayLikeToArray(arr); }

function combat_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = combat_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function combat_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return combat_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return combat_arrayLikeToArray(o, minLen); }

function combat_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function combat_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function combat_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function combat_createClass(Constructor, protoProps, staticProps) { if (protoProps) combat_defineProperties(Constructor.prototype, protoProps); if (staticProps) combat_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



/**
 * The strategy to use for combat for a task, which indicates what to do
 * for each monster.
 *
 * There are two ways to specify in a task what to do for a given monster:
 *   1. Provide a macro directly through .macro(macro, ...monsters)
 *   2. Provide an action through .action(action, ...monsters)
 *
 * An action is a strategy for dealing with a monster that is not fully
 * defined in the task. The possible actions are set with the type parameter A.
 * Actions should typically end the fight.
 *
 * For example, a task may want to banish a monster but not necessarily know or
 * care which banisher is used. Instead, it is best for the engine to determine
 * which banisher to use on the monster. To facilitate this, "banish" can be
 * defined as an action, e.g. with CombatStrategy<"banish">;
 *
 * Each action can be resolved by the engine by:
 *   1. Providing a default macro for the action through ActionDefaults<A>,
 *      which can be done through combat_defaults in Engine options, or
 *   2. Providing a CombatResource for the action through CombatResources<A>.
 *      This is typically done in Engine.customize() by checking if a given
 *      action is requested by the task with combat.can(.), and then providing
 *      an appropriate resource with resources.provide(.).
 *
 * A monster may have both a macro and an action defined, and a macro or action
 * can be specified to be done on all monsters. The order of combat is then:
 * 1. The macro(s) given in .startingMacro().
 * 2. The monster-specific macro(s) from .macro().
 * 3. The general macro(s) from .macro().
 * 4. The monster-specific action from .action().
 * 5. The general action from .action().
 *
 * If an autoattack is set with .autoattack(), the order of the autoattack is:
 * 1. The monster-specific macro(s) from .autoattack().
 * 2. The general macro(s) from .autoattack().
 */

var CombatStrategy = /*#__PURE__*/function () {
  function CombatStrategy() {
    combat_classCallCheck(this, CombatStrategy);

    this.macros = new Map();
    this.autoattacks = new Map();
    this.actions = new Map();
    this.ccs_entries = new Map();
  }
  /**
   * Add a macro to perform for this monster. If multiple macros are given
   * for the same monster, they are concatinated.
   *
   * @param macro The macro to perform.
   * @param monsters Which monsters to use the macro on. If not given, add the
   *  macro as a general macro.
   * @param prepend If true, add the macro before all previous macros for
   *    the same monster. If false, add after all previous macros.
   * @returns this
   */


  combat_createClass(CombatStrategy, [{
    key: "macro",
    value: function macro(_macro, monsters, prepend) {
      var _a, _b;

      if (monsters === undefined) {
        if (this.default_macro === undefined) this.default_macro = [];
        if (prepend) this.default_macro.unshift(_macro);else this.default_macro.push(_macro);
      } else {
        if (monsters instanceof external_kolmafia_.Monster) monsters = [monsters];

        var _iterator = combat_createForOfIteratorHelper(monsters),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var monster = _step.value;
            if (!this.macros.has(monster)) this.macros.set(monster, []);
            if (prepend) (_a = this.macros.get(monster)) === null || _a === void 0 ? void 0 : _a.unshift(_macro);else (_b = this.macros.get(monster)) === null || _b === void 0 ? void 0 : _b.push(_macro);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return this;
    }
    /**
     * Add a macro to perform as an autoattack for this monster. If multiple
     * macros are given for the same monster, they are concatinated.
     *
     * @param macro The macro to perform as autoattack.
     * @param monsters Which monsters to use the macro on. If not given, add the
     *  macro as a general macro.
     * @param prepend If true, add the macro before all previous autoattack
     *    macros for the same monster. If false, add after all previous macros.
     * @returns this
     */

  }, {
    key: "autoattack",
    value: function autoattack(macro, monsters, prepend) {
      var _a, _b;

      if (monsters === undefined) {
        if (this.default_autoattack === undefined) this.default_autoattack = [];
        if (prepend) this.default_autoattack.unshift(macro);else this.default_autoattack.push(macro);
      } else {
        if (monsters instanceof external_kolmafia_.Monster) monsters = [monsters];

        var _iterator2 = combat_createForOfIteratorHelper(monsters),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var monster = _step2.value;
            if (!this.autoattacks.has(monster)) this.autoattacks.set(monster, []);
            if (prepend) (_a = this.autoattacks.get(monster)) === null || _a === void 0 ? void 0 : _a.unshift(macro);else (_b = this.autoattacks.get(monster)) === null || _b === void 0 ? void 0 : _b.push(macro);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      return this;
    }
    /**
     * Add a macro to perform at the start of combat.
     * @param macro The macro to perform.
     * @param prepend If true, add the macro before all previous starting
     *    macros. If false, add after all previous starting macros.
     * @returns this
     */

  }, {
    key: "startingMacro",
    value: function startingMacro(macro, prepend) {
      if (this.starting_macro === undefined) this.starting_macro = [];
      if (prepend) this.starting_macro.unshift(macro);else this.starting_macro.push(macro);
      return this;
    }
    /**
     * Add an action to perform for this monster. Only one action can be set for
     * each monster; any previous actions are overwritten.
     *
     * @param action The action to perform.
     * @param monsters Which monsters to use the action on. If not given, set the
     *  action as the general action for all monsters.
     * @returns this
     */

  }, {
    key: "action",
    value: function action(_action, monsters) {
      if (monsters === undefined) {
        this.default_action = _action;
      } else if (monsters instanceof external_kolmafia_.Monster) {
        this.actions.set(monsters, _action);
      } else {
        var _iterator3 = combat_createForOfIteratorHelper(monsters),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var monster = _step3.value;
            this.actions.set(monster, _action);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }

      return this;
    }
    /**
     * Add a separate entry in the grimoire-generated CCS file for the specified
     * monster. If multiple entries are given for the same monster, they are
     * concatinated.
     *
     * This should typically be only used rarely, on monsters for which KoL does
     * not support macros in combat (e.g. rampaging adding machine).
     *
     * @param entry The entry to add for the given monster.
     * @param monsters Which monsters to add the entry to.
     * @param prepend If true, add the entry before all previous entries. If
     *   false, add after all previous entries.
     */

  }, {
    key: "ccs",
    value: function ccs(entry, monsters, prepend) {
      var _a, _b;

      if (monsters instanceof external_kolmafia_.Monster) monsters = [monsters];

      var _iterator4 = combat_createForOfIteratorHelper(monsters),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var monster = _step4.value;
          if (!this.ccs_entries.has(monster)) this.ccs_entries.set(monster, []);
          if (prepend) (_a = this.ccs_entries.get(monster)) === null || _a === void 0 ? void 0 : _a.unshift(entry);else (_b = this.ccs_entries.get(monster)) === null || _b === void 0 ? void 0 : _b.push(entry);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return this;
    }
    /**
     * Check if the provided action was requested for any monsters, or for the
     * general action.
     */

  }, {
    key: "can",
    value: function can(action) {
      if (action === this.default_action) return true;
      return Array.from(this.actions.values()).includes(action);
    }
    /**
     * Return the general action (if it exists).
     */

  }, {
    key: "getDefaultAction",
    value: function getDefaultAction() {
      return this.default_action;
    }
    /**
     * Return all monsters where the provided action was requested.
     */

  }, {
    key: "where",
    value: function where(action) {
      return Array.from(this.actions.keys()).filter(key => this.actions.get(key) === action);
    }
    /**
     * Return the requested action (if it exists) for the provided monster.
     */

  }, {
    key: "currentStrategy",
    value: function currentStrategy(monster) {
      var _a;

      return (_a = this.actions.get(monster)) !== null && _a !== void 0 ? _a : this.default_action;
    }
    /**
     * Perform a deep copy of this combat strategy.
     */

  }, {
    key: "clone",
    value: function clone() {
      var result = new CombatStrategy();
      if (this.starting_macro) result.starting_macro = _toConsumableArray(this.starting_macro);
      if (this.default_macro) result.default_macro = _toConsumableArray(this.default_macro);

      var _iterator5 = combat_createForOfIteratorHelper(this.macros),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var pair = _step5.value;
          result.macros.set(pair[0], _toConsumableArray(pair[1]));
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      if (this.default_autoattack) result.default_autoattack = _toConsumableArray(this.default_autoattack);

      var _iterator6 = combat_createForOfIteratorHelper(this.autoattacks),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _pair = _step6.value;
          result.autoattacks.set(_pair[0], _toConsumableArray(_pair[1]));
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      result.default_action = this.default_action;

      var _iterator7 = combat_createForOfIteratorHelper(this.actions),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _pair2 = _step7.value;
          result.actions.set(_pair2[0], _pair2[1]);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      var _iterator8 = combat_createForOfIteratorHelper(this.ccs_entries),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var _pair3 = _step8.value;
          result.ccs_entries.set(_pair3[0], _toConsumableArray(_pair3[1]));
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }

      return result;
    }
    /**
     * Compile this combat strategy into a complete macro.
     *
     * @param resources The resources to use to fulfil actions.
     * @param defaults Macros to perform for each action without a resource.
     * @param location The adventuring location, if known.
     * @returns The compiled macro.
     */

  }, {
    key: "compile",
    value: function compile(resources, defaults, location) {
      var _a, _b;

      var result = new combat/* Macro */.LE(); // If there is macro precursor, do it now

      if (this.starting_macro) {
        result.step.apply(result, _toConsumableArray(this.starting_macro.map(macro => (0,utils/* undelay */.aF)(macro))));
      } // Perform any monster-specific macros (these may or may not end the fight)


      var monster_macros = new CompressedMacro();
      this.macros.forEach((value, key) => {
        var _Macro;

        monster_macros.add(key, (_Macro = new combat/* Macro */.LE()).step.apply(_Macro, _toConsumableArray(value.map(macro => (0,utils/* undelay */.aF)(macro)))));
      });
      result.step(monster_macros.compile()); // Perform the non-monster specific macro

      if (this.default_macro) result.step.apply(result, _toConsumableArray(this.default_macro.map(macro => (0,utils/* undelay */.aF)(macro)))); // Perform any monster-specific actions (these should end the fight)

      var monster_actions = new CompressedMacro();
      this.actions.forEach((action, key) => {
        var _a, _b;

        var macro = (_a = resources.getMacro(action)) !== null && _a !== void 0 ? _a : (_b = defaults === null || defaults === void 0 ? void 0 : defaults[action]) === null || _b === void 0 ? void 0 : _b.call(defaults, key);
        if (macro) monster_actions.add(key, new combat/* Macro */.LE().step(macro));
      });
      result.step(monster_actions.compile()); // Perform the non-monster specific action (these should end the fight)

      if (this.default_action) {
        var macro = (_a = resources.getMacro(this.default_action)) !== null && _a !== void 0 ? _a : (_b = defaults === null || defaults === void 0 ? void 0 : defaults[this.default_action]) === null || _b === void 0 ? void 0 : _b.call(defaults, location);
        if (macro) result.step(macro);
      }

      return result;
    }
    /**
     * Compile the autoattack of this combat strategy into a complete macro.
     *
     * @returns The compiled autoattack macro.
     */

  }, {
    key: "compileAutoattack",
    value: function compileAutoattack() {
      var result = new combat/* Macro */.LE(); // Perform any monster-specific autoattacks (these may or may not end the fight)

      var monster_macros = new CompressedMacro();
      this.autoattacks.forEach((value, key) => {
        var _Macro2;

        monster_macros.add(key, (_Macro2 = new combat/* Macro */.LE()).step.apply(_Macro2, _toConsumableArray(value.map(macro => (0,utils/* undelay */.aF)(macro)))));
      });
      result.step(monster_macros.compile()); // Perform the non-monster specific macro

      if (this.default_autoattack) result.step.apply(result, _toConsumableArray(this.default_autoattack.map(macro => (0,utils/* undelay */.aF)(macro))));
      return result;
    }
    /**
     * Compile the CCS entries of this combat strategy into a single array.
     *
     * @returns The lines of a CCS file, not including the [default] macro.
     */

  }, {
    key: "compileCcs",
    value: function compileCcs() {
      var result = [];

      var _iterator9 = combat_createForOfIteratorHelper(this.ccs_entries),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var ccs_entry = _step9.value;
          result.push.apply(result, ["[".concat(ccs_entry[0].name, "]")].concat(_toConsumableArray(ccs_entry[1])));
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      return result;
    }
    /**
     * For advanced users, this method will generate a fluent API for requesting
     * actions. That is, it allows you to do
     *   combat.banish(monster1).kill(monster2)
     * instead of
     *   combat.action("banish", monster1).action("kill", monster2)
     *
     * Example usage:
     *   const myActions = ["kill", "banish"] as const;
     *   class MyCombatStrategy extends CombatStrategy.withActions(myActions) {}
     *
     *   const foo: MyCombatStrategy = new MyCombatStrategy();
     *   const bar: MyCombatStrategy = foo.banish($monster`crate`).kill($monster`tumbleweed`);
     */

  }], [{
    key: "withActions",
    value: function withActions(actions) {
      var CombatStrategyWithActions = /*#__PURE__*/function (_this) {
        _inherits(CombatStrategyWithActions, _this);

        var _super = _createSuper(CombatStrategyWithActions);

        function CombatStrategyWithActions() {
          combat_classCallCheck(this, CombatStrategyWithActions);

          return _super.apply(this, arguments);
        }

        return combat_createClass(CombatStrategyWithActions);
      }(this); // eslint-disable-next-line @typescript-eslint/no-explicit-any


      var proto = CombatStrategyWithActions.prototype;

      var _iterator10 = combat_createForOfIteratorHelper(actions),
          _step10;

      try {
        var _loop = function _loop() {
          var action = _step10.value;

          proto[action] = function (monsters) {
            return this.action(action, monsters);
          };
        };

        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          _loop();
        } // eslint-disable-next-line @typescript-eslint/no-explicit-any

      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }

      return CombatStrategyWithActions;
    }
  }]);

  return CombatStrategy;
}();
/**
 * A class to build a macro that combines if statements (keyed on monster) with
 * identical body into a single if statement, to avoid the 37-action limit.
 * Ex: [if x; A; if y; B; if z; A;] will turn into [if x || z; A; if y; B]
 */

var CompressedMacro = /*#__PURE__*/function () {
  function CompressedMacro() {
    combat_classCallCheck(this, CompressedMacro);

    this.components = new Map();
  }
  /**
   * Set the macro for a given monster (replacing any previous macros).
   */


  combat_createClass(CompressedMacro, [{
    key: "add",
    value: function add(monster, macro) {
      var _a;

      var macro_text = macro.toString();
      if (macro_text.length === 0) return;
      if (!this.components.has(macro_text)) this.components.set(macro_text, [monster]);else (_a = this.components.get(macro_text)) === null || _a === void 0 ? void 0 : _a.push(monster);
    }
    /**
     * Compile the compressed form of the macro.
     */

  }, {
    key: "compile",
    value: function compile() {
      var result = new combat/* Macro */.LE();
      this.components.forEach((monsters, macro) => {
        var condition = monsters.map(mon => "monsterid ".concat(mon.id)).join(" || ");
        result.if_(condition, macro);
      });
      return result;
    }
  }]);

  return CompressedMacro;
}();
/**
 * A class for providing resources to fulfil combat actions.
 */


var CombatResources = /*#__PURE__*/function () {
  function CombatResources() {
    combat_classCallCheck(this, CombatResources);

    this.resources = new Map();
  }
  /**
   * Use the provided resource to fulfil the provided action.
   * (If the resource is undefined, this does nothing).
   */


  combat_createClass(CombatResources, [{
    key: "provide",
    value: function provide(action, resource) {
      if (resource === undefined) return;
      this.resources.set(action, resource);
    }
    /**
     * Return true if the provided action has a resource provided.
     */

  }, {
    key: "has",
    value: function has(action) {
      return this.resources.has(action);
    }
    /**
     * Return all provided combat resources.
     */

  }, {
    key: "all",
    value: function all() {
      return Array.from(this.resources.values());
    }
    /**
     * Get the macro provided by the resource for this action, or undefined if
     * no resource was provided.
     */

  }, {
    key: "getMacro",
    value: function getMacro(action) {
      var resource = this.resources.get(action);
      if (resource === undefined) return undefined;
      if (resource.do instanceof external_kolmafia_.Item) return new combat/* Macro */.LE().item(resource.do);
      if (resource.do instanceof external_kolmafia_.Skill) return new combat/* Macro */.LE().skill(resource.do);
      return (0,utils/* undelay */.aF)(resource.do);
    }
  }]);

  return CombatResources;
}();
// EXTERNAL MODULE: ./node_modules/libram/dist/property.js
var dist_property = __webpack_require__(785);
// EXTERNAL MODULE: ./node_modules/libram/dist/lib.js
var lib = __webpack_require__(71);
// EXTERNAL MODULE: ./node_modules/libram/dist/template-string.js
var template_string = __webpack_require__(328);
// EXTERNAL MODULE: ./node_modules/libram/dist/maximize.js
var maximize = __webpack_require__(627);
;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/outfit.js
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38, _templateObject39, _templateObject40, _templateObject41, _templateObject42, _templateObject43, _templateObject44, _templateObject45, _templateObject46, _templateObject47, _templateObject48, _templateObject49, _templateObject50, _templateObject51, _templateObject52, _templateObject53, _templateObject54, _templateObject55, _templateObject56, _templateObject57, _templateObject58, _templateObject59, _templateObject60, _templateObject61;

function outfit_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function outfit_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? outfit_ownKeys(Object(source), !0).forEach(function (key) { outfit_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : outfit_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function outfit_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || outfit_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function outfit_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = outfit_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function outfit_toConsumableArray(arr) { return outfit_arrayWithoutHoles(arr) || outfit_iterableToArray(arr) || outfit_unsupportedIterableToArray(arr) || outfit_nonIterableSpread(); }

function outfit_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function outfit_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return outfit_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return outfit_arrayLikeToArray(o, minLen); }

function outfit_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function outfit_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return outfit_arrayLikeToArray(arr); }

function outfit_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function outfit_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function outfit_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function outfit_createClass(Constructor, protoProps, staticProps) { if (protoProps) outfit_defineProperties(Constructor.prototype, protoProps); if (staticProps) outfit_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



var FORCE_REFRESH_REQUIREMENT = new maximize/* Requirement */.nb([], {
  forceUpdate: true
});
var outfitSlots = ["hat", "back", "weapon", "offhand", "shirt", "pants", "acc1", "acc2", "acc3", "famequip"];
var riderSlots = (/* unused pure expression or super */ null && (["buddy-bjorn", "crown-of-thrones"]));

var weaponHands = i => i ? (0,external_kolmafia_.weaponHands)(i) : 0;

var modeableCommands = ["backupcamera", "umbrella", "snowsuit", "edpiece", "retrocape", "parka", "jillcandle"];
var Outfit = /*#__PURE__*/function () {
  function Outfit() {
    outfit_classCallCheck(this, Outfit);

    this.equips = new Map();
    this.riders = new Map();
    this.modes = {};
    this.skipDefaults = false;
    this.modifier = [];
    this.avoid = [];
    this.bonuses = new Map();
    this.postActions = [];
    this.preActions = [];
  }
  /**
   * Create an outfit from your current player state.
   */


  outfit_createClass(Outfit, [{
    key: "equippedAmount",
    value:
    /**
     * Check how many of an item is equipped on the outfit.
     */
    function equippedAmount(item) {
      return outfit_toConsumableArray(this.equips.values()).filter(i => i === item).length;
    }
  }, {
    key: "isAvailable",
    value: function isAvailable(item) {
      var _a;

      if ((_a = this.avoid) === null || _a === void 0 ? void 0 : _a.includes(item)) return false;
      if (!(0,lib/* have */.lf)(item, this.equippedAmount(item) + 1)) return false;
      if ((0,external_kolmafia_.booleanModifier)(item, "Single Equip") && this.equippedAmount(item) > 0) return false;
      return true;
    }
    /**
     * Check whether an item is equipped on the outfit, optionally in a specific slot.
     */

  }, {
    key: "haveEquipped",
    value: function haveEquipped(item, slot) {
      if (slot === undefined) return this.equippedAmount(item) > 0;
      return this.equips.get(slot) === item;
    }
  }, {
    key: "equipItemNone",
    value: function equipItemNone(item, slot) {
      if (item !== template_string/* $item.none */.xr.none) return false;
      if (slot === undefined) return true;
      if (this.equips.has(slot)) return false;
      this.equips.set(slot, item);
      return true;
    }
  }, {
    key: "equipNonAccessory",
    value: function equipNonAccessory(item, slot) {
      if ((0,template_string/* $slots */.ei)(_templateObject || (_templateObject = _taggedTemplateLiteral(["acc1, acc2, acc3"]))).includes((0,external_kolmafia_.toSlot)(item))) return false;
      if (slot !== undefined && slot !== (0,external_kolmafia_.toSlot)(item)) return false;
      if (this.equips.has((0,external_kolmafia_.toSlot)(item))) return false;

      switch ((0,external_kolmafia_.toSlot)(item)) {
        case (0,template_string/* $slot */.Jh)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["off-hand"]))):
          if (this.equips.has((0,template_string/* $slot */.Jh)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["weapon"])))) && weaponHands(this.equips.get((0,template_string/* $slot */.Jh)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["weapon"]))))) !== 1) {
            return false;
          }

          break;

        case (0,template_string/* $slot */.Jh)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["familiar"]))):
          if (this.familiar !== undefined && !(0,external_kolmafia_.canEquip)(this.familiar, item)) return false;
      }

      if ((0,external_kolmafia_.toSlot)(item) !== (0,template_string/* $slot */.Jh)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["familiar"]))) && !(0,external_kolmafia_.canEquip)(item)) return false;
      this.equips.set((0,external_kolmafia_.toSlot)(item), item);
      return true;
    }
  }, {
    key: "equipAccessory",
    value: function equipAccessory(item, slot) {
      if (![undefined].concat(outfit_toConsumableArray((0,template_string/* $slots */.ei)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["acc1, acc2, acc3"]))))).includes(slot)) return false;
      if ((0,external_kolmafia_.toSlot)(item) !== (0,template_string/* $slot */.Jh)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["acc1"])))) return false;
      if (!(0,external_kolmafia_.canEquip)(item)) return false;

      if (slot === undefined) {
        // We don't care which of the accessory slots we equip in
        var empty = (0,template_string/* $slots */.ei)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["acc1, acc2, acc3"]))).find(s => !this.equips.has(s));
        if (empty === undefined) return false;
        this.equips.set(empty, item);
      } else {
        if (this.equips.has(slot)) return false;
        this.equips.set(slot, item);
      }

      return true;
    }
  }, {
    key: "equipUsingDualWield",
    value: function equipUsingDualWield(item, slot) {
      if (![undefined, (0,template_string/* $slot */.Jh)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["off-hand"])))].includes(slot)) return false;
      if ((0,external_kolmafia_.toSlot)(item) !== (0,template_string/* $slot */.Jh)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["weapon"])))) return false;

      if (this.equips.has((0,template_string/* $slot */.Jh)(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["weapon"])))) && weaponHands(this.equips.get((0,template_string/* $slot */.Jh)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["weapon"]))))) !== 1) {
        return false;
      }

      if (this.equips.has((0,template_string/* $slot */.Jh)(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["off-hand"]))))) return false;
      if (!(0,lib/* have */.lf)((0,template_string/* $skill */.tm)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["Double-Fisted Skull Smashing"]))))) return false;
      if (weaponHands(item) !== 1) return false;
      if (!(0,external_kolmafia_.canEquip)(item)) return false;
      this.equips.set((0,template_string/* $slot */.Jh)(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["off-hand"]))), item);
      return true;
    }
  }, {
    key: "getHoldingFamiliar",
    value: function getHoldingFamiliar(item) {
      switch ((0,external_kolmafia_.toSlot)(item)) {
        case (0,template_string/* $slot */.Jh)(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["weapon"]))):
          return (0,template_string/* $familiar */.HP)(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["Disembodied Hand"])));

        case (0,template_string/* $slot */.Jh)(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["off-hand"]))):
          return (0,template_string/* $familiar */.HP)(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["Left-Hand Man"])));

        default:
          return undefined;
      }
    }
    /**
     * Returns the bonus value associated with a given item.
     *
     * @param item The item to check the bonus of.
     * @returns The bonus assigned to that item.
     */

  }, {
    key: "getBonus",
    value: function getBonus(item) {
      var _a;

      return (_a = this.bonuses.get(item)) !== null && _a !== void 0 ? _a : 0;
    }
    /**
     * Applies a value to any existing bonus this item has, using a rule assigned by the `reducer` parameter
     *
     * @param item The item to try to apply a bonus to.
     * @param value The value to try to apply.
     * @param reducer Function that combines new and current bonus
     * @returns The total assigned bonus to that item.
     */

  }, {
    key: "applyBonus",
    value: function applyBonus(item, value, reducer) {
      var previous = this.getBonus(item);
      return this.setBonus(item, reducer(value, previous));
    }
    /**
     * Sets the bonus value of an item equal to a given value, overriding any current bonus assigned.
     *
     * @param item The item to try to apply a bonus to.
     * @param value The value to try to apply.
     * @returns The total assigned bonus to that item.
     */

  }, {
    key: "setBonus",
    value: function setBonus(item, value) {
      this.bonuses.set(item, value);
      return value;
    }
    /**
     * Adds a value to any existing bonus this item has
     *
     * @param item The item to try to add a bonus to.
     * @param value The value to try to add.
     * @returns The total assigned bonus to that item.
     */

  }, {
    key: "addBonus",
    value: function addBonus(item, value) {
      return this.applyBonus(item, value, (a, b) => a + b);
    }
    /**
     * Apply the given items' bonuses to the outfit, using a rule given by the reducer
     *
     * @param items A map containing items and their bonuses
     * @param reducer A way of combining new bonuses with existing bonuses
     */

  }, {
    key: "applyBonuses",
    value: function applyBonuses(items, reducer) {
      var _iterator = outfit_createForOfIteratorHelper(items),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              item = _step$value[0],
              value = _step$value[1];

          this.applyBonus(item, value, reducer);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    /**
     * Sets the bonuses of the given items, overriding existing bonuses
     *
     * @param items Map containing items and bonuses
     */

  }, {
    key: "setBonuses",
    value: function setBonuses(items) {
      this.applyBonuses(items, a => a);
    }
    /**
     * Adds the bonuses of the given items to any existing bonuses they ahave
     *
     * @param items Map containing items and bonuses
     */

  }, {
    key: "addBonuses",
    value: function addBonuses(items) {
      this.applyBonuses(items, (a, b) => a + b);
    }
  }, {
    key: "equipUsingFamiliar",
    value: function equipUsingFamiliar(item, slot) {
      if (![undefined, (0,template_string/* $slot */.Jh)(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["familiar"])))].includes(slot)) return false;
      if (this.equips.has((0,template_string/* $slot */.Jh)(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["familiar"]))))) return false;
      if ((0,external_kolmafia_.booleanModifier)(item, "Single Equip")) return false;
      var familiar = this.getHoldingFamiliar(item);
      if (familiar === undefined || !this.equip(familiar)) return false;
      this.equips.set((0,template_string/* $slot */.Jh)(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["familiar"]))), item);
      return true;
    }
  }, {
    key: "equipItem",
    value: function equipItem(item, slot) {
      return this.haveEquipped(item, slot) || this.equipItemNone(item, slot) || this.isAvailable(item) && (this.equipNonAccessory(item, slot) || this.equipAccessory(item, slot) || this.equipUsingDualWield(item, slot) || this.equipUsingFamiliar(item, slot));
    }
  }, {
    key: "equipFamiliar",
    value: function equipFamiliar(familiar) {
      if (familiar === this.familiar) return true;
      if (this.familiar !== undefined) return false;

      if (familiar !== template_string/* $familiar.none */.HP.none) {
        if (!(0,lib/* have */.lf)(familiar)) return false;
        if (Array.from(this.riders.values()).includes(familiar)) return false;
      }

      var item = this.equips.get((0,template_string/* $slot */.Jh)(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["familiar"]))));
      if (item !== undefined && item !== template_string/* $item.none */.xr.none && !(0,external_kolmafia_.canEquip)(familiar, item)) return false;
      this.familiar = familiar;
      return true;
    }
  }, {
    key: "equipSpec",
    value: function equipSpec(spec) {
      var _this$avoid;

      var _a, _b, _c, _d, _e, _f;

      var succeeded = true;

      var _iterator2 = outfit_createForOfIteratorHelper(outfitSlots),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var slotName = _step2.value;
          var slot = (_a = new Map([["famequip", (0,template_string/* $slot */.Jh)(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["familiar"])))], ["offhand", (0,template_string/* $slot */.Jh)(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["off-hand"])))]]).get(slotName)) !== null && _a !== void 0 ? _a : (0,external_kolmafia_.toSlot)(slotName);
          var itemOrItems = spec[slotName];
          if (itemOrItems !== undefined && !this.equip(itemOrItems, slot)) succeeded = false;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var _iterator3 = outfit_createForOfIteratorHelper((_b = spec === null || spec === void 0 ? void 0 : spec.equip) !== null && _b !== void 0 ? _b : []),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var item = _step3.value;
          if (!this.equip(item)) succeeded = false;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      if ((spec === null || spec === void 0 ? void 0 : spec.familiar) !== undefined) {
        if (!this.equip(spec.familiar)) succeeded = false;
      }

      (_this$avoid = this.avoid).push.apply(_this$avoid, outfit_toConsumableArray((_c = spec === null || spec === void 0 ? void 0 : spec.avoid) !== null && _c !== void 0 ? _c : []));

      this.skipDefaults = this.skipDefaults || ((_d = spec.skipDefaults) !== null && _d !== void 0 ? _d : false);

      if (spec.modifier) {
        var _this$modifier;

        if (Array.isArray(spec.modifier)) (_this$modifier = this.modifier).push.apply(_this$modifier, outfit_toConsumableArray(spec.modifier));else this.modifier.push(spec.modifier);
      }

      if (spec.modes) {
        if (!this.setModes(spec.modes)) {
          succeeded = false;
        }
      }

      if (spec.riders) {
        if (spec.riders["buddy-bjorn"] && !this.bjornify(spec.riders["buddy-bjorn"])) succeeded = false;
        if (spec.riders["crown-of-thrones"] && !this.enthrone(spec.riders["crown-of-thrones"])) succeeded = false;
      }

      if (spec.bonuses) {
        this.addBonuses(spec.bonuses);
      }

      this.beforeDress.apply(this, outfit_toConsumableArray((_e = spec.beforeDress) !== null && _e !== void 0 ? _e : []));
      this.afterDress.apply(this, outfit_toConsumableArray((_f = spec.afterDress) !== null && _f !== void 0 ? _f : []));
      return succeeded;
    }
    /**
     * Equip the first thing that can be equipped to the outfit.
     *
     * @param things The things to equip.
     * @param slot The slot to equip them.
     * @returns True if one of the things is equipped, and false otherwise.
     */

  }, {
    key: "equipFirst",
    value: function equipFirst(things, slot) {
      // some() returns false on an empty array, yet every() returns true.
      // This keeps behavior consistent between slotful and slotless equipping.
      if (things.length === 0) return true;
      return things.some(val => this.equip(val, slot));
    }
    /**
     * Equip a thing to the outfit.
     *
     * If no slot is given, then the thing will be equipped wherever possible
     * (possibly using dual-wielding, any of the accessory slots, or as
     * familiar equipment). If it is impossible to add this thing anywhere to
     * the outfit, this function will return false.
     *
     * If a slot is given, the item will be equipped only in that slot. If the
     * slot is filled with a different item, this function will return false.
     *
     * If the thing is already equipped in the provided slot, or if no slot is
     * given and the thing is already equipped in any slot, this function will
     * return true and not change the outfit.
     *
     * @param thing The thing or things to equip.
     * @param slot The slot to equip them.
     * @returns True if the thing was sucessfully equipped, and false otherwise.
     */

  }, {
    key: "equip",
    value: function equip(thing, slot) {
      if (Array.isArray(thing)) {
        if (slot !== undefined) return this.equipFirst(thing, slot);
        return thing.every(val => this.equip(val));
      }

      if (thing instanceof external_kolmafia_.Item) return this.equipItem(thing, slot);
      if (thing instanceof external_kolmafia_.Familiar) return this.equipFamiliar(thing);
      if (thing instanceof Outfit) return this.equipSpec(thing.spec());
      return this.equipSpec(thing);
    }
  }, {
    key: "equipRider",
    value:
    /**
     * Add a rider to the outfit.
     *
     * This function does *not* equip the corresponding item; it must be equipped separately.
     *
     * If a familiar is already specified as the rider that is different from the provided target, this function will return false and not change the rider.
     * @param target The familiar to use as the rider, or a ranked list of familiars to try to use as the rider.
     * @returns True if we successfully set the slot to a valid rider.
     */
    function equipRider(target, slot) {
      var current = this.riders.get(slot);
      var targets = Array.isArray(target) ? target : [target];

      if (current) {
        return targets.includes(current);
      } // Gather the set of riders that are equipped in other rider slots.


      var otherRiders = outfit_toConsumableArray(this.riders.entries()).filter(_ref => {
        var _ref2 = _slicedToArray(_ref, 1),
            key = _ref2[0];

        return slot !== key;
      }).map(_ref3 => {
        var _ref4 = _slicedToArray(_ref3, 2),
            value = _ref4[1];

        return value;
      });

      var fam = targets.find(f => (0,lib/* have */.lf)(f) && this.familiar !== f && !otherRiders.includes(f));

      if (fam) {
        this.riders.set(slot, fam);
        return true;
      }

      return false;
    }
    /**
     * Add a bjornified familiar to the outfit.
     *
     * This function does *not* equip the buddy bjorn itself; it must be equipped separately.
     *
     * If a familiar is already specified for the buddy bjorn that is different from the provided target, this function will return false and not change the buddy bjorn.
     * @param target The familiar to bjornify, or a ranked list of familiars to try to bjornify.
     * @returns True if we successfully set the bjorn to a valid target.
     */

  }, {
    key: "bjornify",
    value: function bjornify(target) {
      return this.equipRider(target, (0,template_string/* $slot */.Jh)(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["buddy-bjorn"]))));
    }
    /**
     * Add anenthroned familiar to the outfit.
     *
     * This function does *not* equip the crown of thrones itself; it must be equipped separately.
     *
     * If a familiar is already specified for the crown of thrones that is different from the provided target, this function will return false and not change the crown of thrones.
     * @param target The familiar to enthrone, or a ranked list of familiars to try to enthrone.
     * @returns True if we successfully set the enthrone to a valid target.
     */

  }, {
    key: "enthrone",
    value: function enthrone(target) {
      return this.equipRider(target, (0,template_string/* $slot */.Jh)(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["crown-of-thrones"]))));
    }
    /**
     * Set the provided modes for items that may be equipped in the outfit.
     *
     * This function does *not* equip items for the set modes; they must be
     * equipped separately.
     *
     * If a mode is already set for an item that is different from the provided
     * mode, this function will return false and not change the mode for that
     * item. (But other modes might still be changed if they are compatible.)
     *
     * Note that the superhero and instuctions of a retrocape can be set
     * independently (`undefined` is treated as "don't care").
     *
     * @param modes Modes to set in this outfit.
     * @returns True if all modes were sucessfully set, and false otherwise.
     */

  }, {
    key: "setModes",
    value: function setModes(modes) {
      var _a, _b;

      var compatible = true; // Check if the new modes are compatible with existing modes

      var _iterator4 = outfit_createForOfIteratorHelper(modeableCommands),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var mode = _step4.value;
          if (mode === "retrocape") continue; // checked below

          if (this.modes[mode] && modes[mode] && this.modes[mode] !== modes[mode]) {
            compatible = false;
          }
        } // Check if retrocape modes are compatible
        // (Parts that are undefined are compatible with everything)

      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      if (this.modes["retrocape"] && modes["retrocape"]) {
        if (this.modes["retrocape"][0] && modes["retrocape"][0] && this.modes["retrocape"][0] !== modes["retrocape"][0]) {
          compatible = false;
        }

        if (this.modes["retrocape"][1] && modes["retrocape"][1] && this.modes["retrocape"][1] !== modes["retrocape"][1]) {
          compatible = false;
        }

        this.modes["retrocape"][0] = (_a = this.modes["retrocape"][0]) !== null && _a !== void 0 ? _a : modes["retrocape"][0];
        this.modes["retrocape"][1] = (_b = this.modes["retrocape"][1]) !== null && _b !== void 0 ? _b : modes["retrocape"][1];
      }

      this.modes = outfit_objectSpread(outfit_objectSpread({}, modes), this.modes);
      return compatible;
    }
    /**
     * Check if it is possible to equip a thing to this outfit using .equip().
     *
     * This does not change the current outfit.
     *
     * @param thing The thing to equip.
     * @param slot The slot to equip them.
     * @returns True if this thing can be equipped.
     */

  }, {
    key: "canEquip",
    value: function canEquip(thing, slot) {
      var outfit = this.clone();
      return outfit.equip(thing, slot);
    }
    /**
     * Check if it is possible to equip a thing to this outfit using .equip(); if it is, do so.
     *
     * This does change the current outfit.
     * @param thing The thing to equip.
     * @param slot The slot to equip them.
     * @returns True if this thing was successfully equipped.
     */

  }, {
    key: "tryEquip",
    value: function tryEquip(thing, slot) {
      return this.canEquip(thing, slot) && this.equip(thing, slot);
    }
  }, {
    key: "afterDress",
    value: function afterDress() {
      var _this$postActions;

      (_this$postActions = this.postActions).push.apply(_this$postActions, arguments);
    }
  }, {
    key: "beforeDress",
    value: function beforeDress() {
      var _this$preActions;

      (_this$preActions = this.preActions).push.apply(_this$preActions, arguments);
    }
    /**
     * Equip this outfit.
     */

  }, {
    key: "_dress",
    value: function _dress(refreshed) {
      if (this.familiar) (0,external_kolmafia_.useFamiliar)(this.familiar);
      var targetEquipment = Array.from(this.equips.values());
      var usedSlots = new Set(); // First, we equip non-accessory equipment.

      var nonaccessorySlots = (0,template_string/* $slots */.ei)(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["weapon, off-hand, hat, back, shirt, pants, familiar"])));
      var bjorn = this.riders.get((0,template_string/* $slot */.Jh)(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["buddy-bjorn"]))));

      if (bjorn && (this.equips.get((0,template_string/* $slot */.Jh)(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["back"])))) === (0,template_string/* $item */.xr)(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["Buddy Bjorn"]))) || this.getBonus((0,template_string/* $item */.xr)(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["Buddy Bjorn"])))))) {
        usedSlots.add((0,template_string/* $slot */.Jh)(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["buddy-bjorn"]))));
        usedSlots.add((0,template_string/* $slot */.Jh)(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral(["crown-of-thrones"]))));
      }

      var crown = this.riders.get((0,template_string/* $slot */.Jh)(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral(["crown-of-thrones"]))));

      if (crown && (this.equips.get((0,template_string/* $slot */.Jh)(_templateObject37 || (_templateObject37 = _taggedTemplateLiteral(["hat"])))) === (0,template_string/* $item */.xr)(_templateObject38 || (_templateObject38 = _taggedTemplateLiteral(["Crown of Thrones"]))) || this.getBonus((0,template_string/* $item */.xr)(_templateObject39 || (_templateObject39 = _taggedTemplateLiteral(["Crown of Thrones"])))))) {
        usedSlots.add((0,template_string/* $slot */.Jh)(_templateObject40 || (_templateObject40 = _taggedTemplateLiteral(["buddy-bjorn"]))));
        usedSlots.add((0,template_string/* $slot */.Jh)(_templateObject41 || (_templateObject41 = _taggedTemplateLiteral(["crown-of-thrones"]))));
      } // We must manually remove equipment that we want to use in a different
      // slot than where it is currently equipped, to avoid a mafia issue.
      // Order is anchored here to prevent DFSS shenanigans


      var _iterator5 = outfit_createForOfIteratorHelper(nonaccessorySlots),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var slot = _step5.value;
          if (targetEquipment.includes((0,external_kolmafia_.equippedItem)(slot)) && this.equips.get(slot) !== (0,external_kolmafia_.equippedItem)(slot) || this.avoid.includes((0,external_kolmafia_.equippedItem)(slot)) || slot === (0,template_string/* $slot */.Jh)(_templateObject49 || (_templateObject49 = _taggedTemplateLiteral(["weapon"]))) && weaponHands((0,external_kolmafia_.equippedItem)(slot)) !== 1 && this.equips.has((0,template_string/* $slot */.Jh)(_templateObject50 || (_templateObject50 = _taggedTemplateLiteral(["offhand"])))) && !this.equips.has((0,template_string/* $slot */.Jh)(_templateObject51 || (_templateObject51 = _taggedTemplateLiteral(["weapon"]))))) (0,external_kolmafia_.equip)(slot, template_string/* $item.none */.xr.none);
        } // Then we equip all the non-accessory equipment.

      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      var _iterator6 = outfit_createForOfIteratorHelper(nonaccessorySlots),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _slot = _step6.value;
          var equipment = this.equips.get(_slot);

          if (equipment) {
            (0,external_kolmafia_.equip)(_slot, equipment);
            usedSlots.add(_slot);
          }
        } // Next, we equip accessories

      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      var accessorySlots = (0,template_string/* $slots */.ei)(_templateObject42 || (_templateObject42 = _taggedTemplateLiteral(["acc1, acc2, acc3"])));
      var accessoryEquips = accessorySlots.map(slot => this.equips.get(slot)).filter(item => item !== undefined); // To plan how to equip accessories, first check which accessories are
      // already equipped in some accessory slot. There is no need to move them,
      // since KoL doesn't care what order accessories are equipped in.

      var missingAccessories = []; // accessories that are not already equipped

      var _iterator7 = outfit_createForOfIteratorHelper(accessoryEquips),
          _step7;

      try {
        var _loop = function _loop() {
          var accessory = _step7.value;
          var alreadyEquipped = accessorySlots.find(slot => !usedSlots.has(slot) && (0,external_kolmafia_.equippedItem)(slot) === accessory);

          if (alreadyEquipped) {
            usedSlots.add(alreadyEquipped);
          } else {
            missingAccessories.push(accessory);
          }
        };

        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          _loop();
        } // Then, for all accessories that are not currently equipped, use the first
        // open slot to place them.

      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      for (var _i2 = 0, _missingAccessories = missingAccessories; _i2 < _missingAccessories.length; _i2++) {
        var accessory = _missingAccessories[_i2];
        var unusedSlot = accessorySlots.find(slot => !usedSlots.has(slot));

        if (unusedSlot === undefined) {
          // This should only occur if there is a bug in .dress()
          throw "No accessory slots remaining";
        }

        (0,external_kolmafia_.equip)(unusedSlot, accessory);
        usedSlots.add(unusedSlot);
      } // Remaining slots are filled by the maximizer


      var modes = convertToLibramModes(this.modes);

      if (this.modifier.length > 0 || outfit_toConsumableArray(this.bonuses).filter(_ref5 => {
        var _ref6 = _slicedToArray(_ref5, 2),
            value = _ref6[1];

        return value;
      }).length > 0) {
        var allRequirements = [new maximize/* Requirement */.nb(this.modifier, {
          preventSlot: outfit_toConsumableArray(usedSlots),
          preventEquip: this.avoid,
          modes: modes,
          bonusEquip: this.bonuses
        })];
        if (refreshed) allRequirements.push(FORCE_REFRESH_REQUIREMENT);

        if (!maximize/* Requirement.merge */.nb.merge(allRequirements).maximize()) {
          if (!refreshed) {
            (0,external_kolmafia_.cliExecute)("refresh inventory");

            this._dress(true);

            return;
          } else throw new Error("Failed to maximize properly!");
        }

        (0,external_kolmafia_.logprint)("Maximize: ".concat(this.modifier));
      } // Set the modes of any equipped items.


      (0,maximize/* applyModes */.ls)(modes); // Handle the rider slots next

      if (bjorn && (0,external_kolmafia_.haveEquipped)((0,template_string/* $item */.xr)(_templateObject43 || (_templateObject43 = _taggedTemplateLiteral(["Buddy Bjorn"]))))) {
        if ((0,external_kolmafia_.myEnthronedFamiliar)() === bjorn) (0,external_kolmafia_.enthroneFamiliar)(template_string/* $familiar.none */.HP.none);
        if ((0,external_kolmafia_.myBjornedFamiliar)() !== bjorn) (0,external_kolmafia_.bjornifyFamiliar)(bjorn);
      }

      if (crown && (0,external_kolmafia_.haveEquipped)((0,template_string/* $item */.xr)(_templateObject44 || (_templateObject44 = _taggedTemplateLiteral(["Crown of Thrones"]))))) {
        if ((0,external_kolmafia_.myBjornedFamiliar)() === crown) (0,external_kolmafia_.bjornifyFamiliar)(template_string/* $familiar.none */.HP.none);
        if ((0,external_kolmafia_.myEnthronedFamiliar)() !== crown) (0,external_kolmafia_.enthroneFamiliar)(crown);
      } // Verify that all equipment was indeed equipped


      if (this.familiar !== undefined && (0,external_kolmafia_.myFamiliar)() !== this.familiar) throw "Failed to fully dress (expected: familiar ".concat(this.familiar, ")");

      var _iterator8 = outfit_createForOfIteratorHelper(nonaccessorySlots),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var _slot2 = _step8.value;

          if (this.equips.has(_slot2) && (0,external_kolmafia_.equippedItem)(_slot2) !== this.equips.get(_slot2)) {
            throw "Failed to fully dress (expected: ".concat(_slot2, " ").concat(this.equips.get(_slot2), ")");
          }
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }

      var _iterator9 = outfit_createForOfIteratorHelper(accessoryEquips),
          _step9;

      try {
        var _loop2 = function _loop2() {
          var accessory = _step9.value;

          if ((0,external_kolmafia_.equippedAmount)(accessory) < accessoryEquips.filter(acc => acc === accessory).length) {
            throw "Failed to fully dress (expected: acc ".concat(accessory, ")");
          }
        };

        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      for (var _i3 = 0, _arr2 = [[(0,template_string/* $slot */.Jh)(_templateObject45 || (_templateObject45 = _taggedTemplateLiteral(["buddy-bjorn"]))), (0,template_string/* $item */.xr)(_templateObject46 || (_templateObject46 = _taggedTemplateLiteral(["Buddy Bjorn"]))), external_kolmafia_.myBjornedFamiliar], [(0,template_string/* $slot */.Jh)(_templateObject47 || (_templateObject47 = _taggedTemplateLiteral(["crown-of-thrones"]))), (0,template_string/* $item */.xr)(_templateObject48 || (_templateObject48 = _taggedTemplateLiteral(["Crown of Thrones"]))), external_kolmafia_.myEnthronedFamiliar]]; _i3 < _arr2.length; _i3++) {
        var _arr2$_i = _slicedToArray(_arr2[_i3], 3),
            rider = _arr2$_i[0],
            throne = _arr2$_i[1],
            checkingFunction = _arr2$_i[2];

        var wanted = this.riders.get(rider);

        if (outfit_toConsumableArray(this.equips.values()).includes(throne) && wanted && checkingFunction() !== wanted) {
          throw "Failed to fully dress: (expected ".concat(rider, " ").concat(wanted, ")");
        }
      }
    }
  }, {
    key: "dress",
    value: function dress() {
      var _iterator10 = outfit_createForOfIteratorHelper(this.preActions),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var action = _step10.value;
          action();
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }

      this._dress(false);

      var _iterator11 = outfit_createForOfIteratorHelper(this.postActions),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var _action = _step11.value;

          _action();
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
    }
    /**
     * Build an Outfit identical to this outfit.
     */

  }, {
    key: "clone",
    value: function clone() {
      var result = new Outfit();
      result.equips = new Map(this.equips);
      result.skipDefaults = this.skipDefaults;
      result.familiar = this.familiar;
      result.modifier = outfit_toConsumableArray(this.modifier);
      result.avoid = outfit_toConsumableArray(this.avoid);
      result.modes = outfit_objectSpread({}, this.modes);
      result.riders = new Map(this.riders);
      result.bonuses = new Map(this.bonuses);
      result.beforeDress.apply(result, outfit_toConsumableArray(this.preActions));
      result.afterDress.apply(result, outfit_toConsumableArray(this.postActions));
      return result;
    }
    /**
     * Build an OutfitSpec identical to this outfit.
     */

  }, {
    key: "spec",
    value: function spec() {
      var _a;

      var result = {
        modifier: outfit_toConsumableArray(this.modifier),
        avoid: outfit_toConsumableArray(this.avoid),
        skipDefaults: this.skipDefaults,
        modes: outfit_objectSpread({}, this.modes),
        bonuses: new Map(this.bonuses)
      };
      if (this.familiar) result.familiar = this.familiar; // Add all equipment forced in a particular slot

      var _iterator12 = outfit_createForOfIteratorHelper(outfitSlots),
          _step12;

      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var slotName = _step12.value;
          var entry = this.equips.get((_a = new Map([["famequip", (0,template_string/* $slot */.Jh)(_templateObject54 || (_templateObject54 = _taggedTemplateLiteral(["familiar"])))], ["offhand", (0,template_string/* $slot */.Jh)(_templateObject55 || (_templateObject55 = _taggedTemplateLiteral(["off-hand"])))]]).get(slotName)) !== null && _a !== void 0 ? _a : (0,external_kolmafia_.toSlot)(slotName));
          if (entry) result[slotName] = entry;
        } // Include the riders

      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }

      var riders = {};
      var buddyRider = this.riders.get((0,template_string/* $slot */.Jh)(_templateObject52 || (_templateObject52 = _taggedTemplateLiteral(["buddy-bjorn"]))));
      if (buddyRider !== undefined) riders["buddy-bjorn"] = buddyRider;
      var throneRider = this.riders.get((0,template_string/* $slot */.Jh)(_templateObject53 || (_templateObject53 = _taggedTemplateLiteral(["crown-of-thrones"]))));
      if (throneRider !== undefined) riders["crown-of-thrones"] = throneRider;
      if (buddyRider !== undefined || throneRider !== undefined) result.riders = riders;
      if (this.preActions.length) result.beforeDress = this.preActions;
      if (this.postActions.length) result.afterDress = this.postActions;
      return result;
    }
  }], [{
    key: "current",
    value: function current() {
      var _a;

      var outfit = new Outfit();
      var familiar = (0,external_kolmafia_.myFamiliar)();

      if (outfit.equip(familiar)) {
        throw "Failed to create outfit from current state (expected: familiar ".concat(familiar, ")");
      }

      var _iterator13 = outfit_createForOfIteratorHelper(outfitSlots),
          _step13;

      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var slotName = _step13.value;
          var slot = (_a = new Map([["famequip", (0,template_string/* $slot */.Jh)(_templateObject60 || (_templateObject60 = _taggedTemplateLiteral(["familiar"])))], ["offhand", (0,template_string/* $slot */.Jh)(_templateObject61 || (_templateObject61 = _taggedTemplateLiteral(["off-hand"])))]]).get(slotName)) !== null && _a !== void 0 ? _a : (0,external_kolmafia_.toSlot)(slotName);
          var item = (0,external_kolmafia_.equippedItem)(slot);

          if (!outfit.equip(item, slot)) {
            throw "Failed to create outfit from current state (expected: ".concat(slot, " ").concat(item, ")");
          }
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }

      if ((0,external_kolmafia_.haveEquipped)((0,template_string/* $item */.xr)(_templateObject56 || (_templateObject56 = _taggedTemplateLiteral(["Crown of Thrones"]))))) outfit.riders.set((0,template_string/* $slot */.Jh)(_templateObject57 || (_templateObject57 = _taggedTemplateLiteral(["crown-of-thrones"]))), (0,external_kolmafia_.myEnthronedFamiliar)());
      if ((0,external_kolmafia_.haveEquipped)((0,template_string/* $item */.xr)(_templateObject58 || (_templateObject58 = _taggedTemplateLiteral(["Buddy Bjorn"]))))) outfit.riders.set((0,template_string/* $slot */.Jh)(_templateObject59 || (_templateObject59 = _taggedTemplateLiteral(["buddy-bjorn"]))), (0,external_kolmafia_.myBjornedFamiliar)());
      outfit.setModes(getCurrentModes());
      return outfit;
    }
  }, {
    key: "from",
    value: function from(spec) {
      var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      var _a;

      var outfit = new Outfit();

      if (spec instanceof maximize/* Requirement */.nb) {
        var result = {};
        result.modifier = spec.maximizeParameters;

        if ((_a = spec.maximizeOptions.forceEquip) === null || _a === void 0 ? void 0 : _a.length) {
          result.equip = spec.maximizeOptions.forceEquip;
        }

        result.avoid = spec.maximizeOptions.preventEquip;
        result.bonuses = spec.maximizeOptions.bonusEquip;

        if (spec.maximizeOptions.modes) {
          result.modes = convertFromLibramModes(spec.maximizeOptions.modes);
        } // Not sure if this is necessary


        var cleanedResult = Object.fromEntries(outfit_toConsumableArray(Object.entries(result)).filter(_ref7 => {
          var _ref8 = _slicedToArray(_ref7, 2),
              v = _ref8[1];

          return v !== undefined;
        }));
        return Outfit.from(cleanedResult);
      }

      var success = outfit.equip(spec);
      if (!success && error) throw error;
      return success ? outfit : null;
    }
  }]);

  return Outfit;
}();
/**
 * Get the modes of this outfit in a type compatible with Libram.
 *
 * This conversion is needed since we store the retrocape modes
 * internally as an array, but libram uses a string.
 *
 * @returns The modes equipped to this outfit.
 */

function convertToLibramModes(modes) {
  var _a;

  return {
    backupcamera: modes["backupcamera"],
    umbrella: modes["umbrella"],
    snowsuit: modes["snowsuit"],
    edpiece: modes["edpiece"],
    retrocape: (_a = modes["retrocape"]) === null || _a === void 0 ? void 0 : _a.filter(s => s !== undefined).join(" "),
    parka: modes["parka"],
    jillcandle: modes["jillcandle"]
  };
}
function convertFromLibramModes(modes) {
  return modes.retrocape ? outfit_objectSpread(outfit_objectSpread({}, modes), {}, {
    retrocape: modes.retrocape.split(" ")
  }) : modes;
}
/**
 * Get the current modes of all items.
 *
 * @returns The current mode settings for all items, equipped or not.
 */

function getCurrentModes() {
  return {
    backupcamera: getMode("backupCameraMode", ["ml", "meat", "init"]),
    umbrella: getMode("umbrellaState", ["broken", "forward-facing", "bucket style", "pitchfork style", "constantly twirling", "cocoon"]),
    snowsuit: getMode("snowsuit", ["eyebrows", "smirk", "nose", "goatee", "hat"]),
    edpiece: getMode("edPiece", ["bear", "owl", "puma", "hyena", "mouse", "weasel", "fish"]),
    retrocape: [getMode("retroCapeSuperhero", ["vampire", "heck", "robot"]), getMode("retroCapeWashingInstructions", ["hold", "thrill", "kiss", "kill"])],
    parka: getMode("parkaMode", ["kachungasaur", "dilophosaur", "ghostasaurus", "spikolodon", "pterodactyl"]),
    jillcandle: getMode("jillcandle", ["disco", "ultraviolet", "reading", "red"])
  };
}
/**
 * Get the current value for a mode in a type-safe way.
 *
 * @param property The mafia property for the mode.
 * @param options A typed list of options for the mode.
 * @returns The mode if the property value matched a valid option, or undefined.
 */

function getMode(property, options) {
  var val = (0,dist_property.get)(property, "");
  return options.find(s => s === val); // .includes has type issues
}
;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/engine.js
var engine_templateObject, engine_templateObject2;

function engine_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function engine_toConsumableArray(arr) { return engine_arrayWithoutHoles(arr) || engine_iterableToArray(arr) || engine_unsupportedIterableToArray(arr) || engine_nonIterableSpread(); }

function engine_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function engine_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function engine_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return engine_arrayLikeToArray(arr); }

function engine_slicedToArray(arr, i) { return engine_arrayWithHoles(arr) || engine_iterableToArrayLimit(arr, i) || engine_unsupportedIterableToArray(arr, i) || engine_nonIterableRest(); }

function engine_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function engine_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function engine_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function engine_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = engine_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function engine_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return engine_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return engine_arrayLikeToArray(o, minLen); }

function engine_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function engine_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function engine_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? engine_ownKeys(Object(source), !0).forEach(function (key) { engine_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : engine_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function engine_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function engine_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function engine_createClass(Constructor, protoProps, staticProps) { if (protoProps) engine_defineProperties(Constructor.prototype, protoProps); if (staticProps) engine_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function engine_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





var EngineOptions = /*#__PURE__*/(/* unused pure expression or super */ null && (engine_createClass(function EngineOptions() {
  engine_classCallCheck(this, EngineOptions);
})));
var grimoireCCS = "grimoire_macro";
var Engine = /*#__PURE__*/function () {
  /**
   * Create the engine.
   * @param tasks A list of tasks for looking up task dependencies.
   * @param options Basic configuration of the engine.
   */
  function Engine(tasks, options) {
    engine_classCallCheck(this, Engine);

    this.attempts = {};
    this.propertyManager = new dist_property.PropertiesManager();
    this.tasks_by_name = new Map();
    this.cachedCcsContents = "";
    this.options = options !== null && options !== void 0 ? options : {};
    this.tasks = tasks.map(task => engine_objectSpread(engine_objectSpread({}, this.options.default_task_options), task));

    var _iterator = engine_createForOfIteratorHelper(this.tasks),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var task = _step.value;
        this.tasks_by_name.set(task.name, task);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    this.initPropertiesManager(this.propertyManager);
  }
  /**
   * Determine the next task to perform.
   * By default, this is the first task in the task list that is available.
   * @returns The next task to perform, or undefined if no tasks are available.
   */


  engine_createClass(Engine, [{
    key: "getNextTask",
    value: function getNextTask() {
      return this.tasks.find(task => this.available(task));
    }
    /**
     * Continually get the next task and execute it.
     * @param actions If given, only perform up to this many tasks.
     */

  }, {
    key: "run",
    value: function run(actions) {
      for (var i = 0; i < (actions !== null && actions !== void 0 ? actions : Infinity); i++) {
        var task = this.getNextTask();
        if (!task) return;
        this.execute(task);
      }
    }
    /**
     * Close the engine and reset all properties.
     * After this has been called, this object should not be used.
     */

  }, {
    key: "destruct",
    value: function destruct() {
      this.propertyManager.resetAll();
      (0,external_kolmafia_.setAutoAttack)(0);
    }
    /**
     * Check if the given task is available at this moment.
     * @returns true if all dependencies are complete and the task is ready.
     *  Note that dependencies are not checked transitively. That is, if
     *  A depends on B which depends on C, then A is ready if B is complete
     *  (regardless of if C is complete or not).
     */

  }, {
    key: "available",
    value: function available(task) {
      var _a, _b;

      if (((_a = task.limit) === null || _a === void 0 ? void 0 : _a.skip) !== undefined && this.attempts[task.name] >= task.limit.skip) return false;

      var _iterator2 = engine_createForOfIteratorHelper((_b = task.after) !== null && _b !== void 0 ? _b : []),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var after = _step2.value;
          var after_task = this.tasks_by_name.get(after);
          if (after_task === undefined) throw "Unknown task dependency ".concat(after, " on ").concat(task.name);
          if (!after_task.completed()) return false;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      if (task.ready && !task.ready()) return false;
      if (task.completed()) return false;
      return true;
    }
    /**
     * Perform all steps to execute the provided task.
     * This is the main entry point for the Engine.
     * @param task The current executing task.
     */

  }, {
    key: "execute",
    value: function execute(task) {
      var _a, _b, _c, _d, _e;

      (0,external_kolmafia_.print)("");
      (0,external_kolmafia_.print)("Executing ".concat(task.name), "blue"); // Determine the proper postcondition for after the task executes.

      var postcondition = (_b = (_a = task.limit) === null || _a === void 0 ? void 0 : _a.guard) === null || _b === void 0 ? void 0 : _b.call(_a); // Acquire any items and effects first, possibly for later execution steps.

      this.acquireItems(task);
      this.acquireEffects(task); // Prepare the outfit, with resources.

      var task_combat = (_d = (_c = task.combat) === null || _c === void 0 ? void 0 : _c.clone()) !== null && _d !== void 0 ? _d : new CombatStrategy();
      var outfit = this.createOutfit(task);
      var task_resources = new CombatResources();
      this.customize(task, outfit, task_combat, task_resources);
      this.dress(task, outfit); // Prepare combat and choices

      this.setCombat(task, task_combat, task_resources);
      this.setChoices(task, this.propertyManager); // Actually perform the task

      var _iterator3 = engine_createForOfIteratorHelper(task_resources.all()),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var resource = _step3.value;
          (_e = resource.prepare) === null || _e === void 0 ? void 0 : _e.call(resource);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      this.prepare(task);
      this.do(task);

      while (this.shouldRepeatAdv(task)) {
        (0,dist_property.set)("lastEncounter", "");
        this.do(task);
      }

      this.post(task); // Mark that we tried the task, and apply limits

      this.markAttempt(task);
      this.checkLimits(task, postcondition);
    }
    /**
     * Acquire all items for the task.
     * @param task The current executing task.
     */

  }, {
    key: "acquireItems",
    value: function acquireItems(task) {
      var _a;

      var acquire = (0,utils/* undelay */.aF)(task.acquire);

      var _iterator4 = engine_createForOfIteratorHelper(acquire || []),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var to_get = _step4.value;
          var num_needed = (_a = to_get.num) !== null && _a !== void 0 ? _a : 1;
          var num_have = (0,external_kolmafia_.itemAmount)(to_get.item) + (0,external_kolmafia_.equippedAmount)(to_get.item);
          if (num_needed <= num_have) continue;
          if (to_get.useful !== undefined && !to_get.useful()) continue;

          if (to_get.get) {
            to_get.get();
          } else if (to_get.price !== undefined) {
            (0,external_kolmafia_.buy)(to_get.item, num_needed - num_have, to_get.price);
          } else if (Object.keys((0,external_kolmafia_.getRelated)(to_get.item, "fold")).length > 0) {
            (0,external_kolmafia_.cliExecute)("fold ".concat(to_get.item));
          } else {
            (0,external_kolmafia_.retrieveItem)(to_get.item, num_needed);
          }

          if ((0,external_kolmafia_.itemAmount)(to_get.item) + (0,external_kolmafia_.equippedAmount)(to_get.item) < num_needed && !to_get.optional) {
            throw "Task ".concat(task.name, " was unable to acquire ").concat(num_needed, " ").concat(to_get.item);
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
    /**
     * Acquire all effects for the task.
     * @param task The current executing task.
     */

  }, {
    key: "acquireEffects",
    value: function acquireEffects(task) {
      var _a;

      var effects = (_a = (0,utils/* undelay */.aF)(task.effects)) !== null && _a !== void 0 ? _a : [];
      var songs = effects.filter(effect => (0,lib/* isSong */.rU)(effect));
      if (songs.length > maxSongs()) throw "Too many AT songs";
      var extraSongs = Object.keys((0,external_kolmafia_.myEffects)()).map(effectName => (0,external_kolmafia_.toEffect)(effectName)).filter(effect => (0,lib/* isSong */.rU)(effect) && !songs.includes(effect));

      while (songs.length + extraSongs.length > maxSongs()) {
        var toRemove = extraSongs.pop();

        if (toRemove === undefined) {
          break;
        } else {
          (0,lib/* uneffect */.Lo)(toRemove);
        }
      }

      var _iterator5 = engine_createForOfIteratorHelper(effects),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var effect = _step5.value;
          (0,lib/* ensureEffect */.pq)(effect);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
    /**
     * Create an outfit for the task with all required equipment.
     * @param task The current executing task.
     */

  }, {
    key: "createOutfit",
    value: function createOutfit(task) {
      var spec = (0,utils/* undelay */.aF)(task.outfit);
      if (spec instanceof Outfit) return spec.clone();
      var outfit = new Outfit();

      if (spec !== undefined) {
        if (!outfit.equip(spec) && !this.options.allow_partial_outfits) {
          throw "Unable to equip all items for ".concat(task.name);
        }
      }

      return outfit;
    }
    /**
     * Equip the outfit for the task.
     * @param task The current executing task.
     * @param outfit The outfit for the task, possibly augmented by the engine.
     */

  }, {
    key: "dress",
    value: function dress(task, outfit) {
      if (task.do instanceof external_kolmafia_.Location) (0,external_kolmafia_.setLocation)(task.do);
      outfit.dress();
    }
    /* eslint-disable @typescript-eslint/no-unused-vars */

    /**
     * Perform any engine-specific customization for the outfit and combat plan.
     *
     * This is a natural method to override in order to:
     *   * Enable the use of any resources in the outfit or combat (e.g., allocate banishers).
     *   * Equip a default outfit.
     *   * Determine additional monster macros at a global level (e.g., use flyers).
     * @param task The current executing task.
     * @param outfit The outfit for the task.
     * @param combat The combat strategy so far for the task.
     * @param resources The combat resources assigned so far for the task.
     */

  }, {
    key: "customize",
    value: function customize(task, outfit, combat, resources) {// do nothing by default
    }
    /* eslint-enable @typescript-eslint/no-unused-vars */

    /**
     * Set the choice settings for the task.
     * @param task The current executing task.
     * @param manager The property manager to use.
     */

  }, {
    key: "setChoices",
    value: function setChoices(task, manager) {
      var _a;

      for (var _i = 0, _Object$entries = Object.entries((0,utils/* undelay */.aF)((_a = task.choices) !== null && _a !== void 0 ? _a : {})); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = engine_slicedToArray(_Object$entries[_i], 2),
            key = _Object$entries$_i[0],
            value = _Object$entries$_i[1];

        if (value === undefined) continue;
        manager.setChoice(parseInt(key), value);
      }
    }
    /**
     * Save the combat macro for this task.
     * @param task The current executing task.
     * @param task_combat The completed combat strategy far for the task.
     * @param task_resources The combat resources assigned for the task.
     */

  }, {
    key: "setCombat",
    value: function setCombat(task, task_combat, task_resources) {
      var _a; // Save regular combat macro


      var macro = task_combat.compile(task_resources, (_a = this.options) === null || _a === void 0 ? void 0 : _a.combat_defaults, task.do instanceof external_kolmafia_.Location ? task.do : undefined);
      macro.save();

      if (!this.options.ccs) {
        // Use the macro through a CCS file
        var otherCCSEntries = task_combat.compileCcs();
        var ccsContents = ["[default]", "\"".concat(macro.toString(), "\"")].concat(engine_toConsumableArray(otherCCSEntries)).join("\n"); // Log Macro + other CCS

        (0,external_kolmafia_.logprint)("CCS: ".concat(ccsContents.replace("\n", "\\n ")));

        if (ccsContents !== this.cachedCcsContents) {
          (0,external_kolmafia_.writeCcs)(ccsContents, grimoireCCS);
          (0,external_kolmafia_.cliExecute)("ccs ".concat(grimoireCCS)); // force Mafia to reparse the ccs

          this.cachedCcsContents = ccsContents;
        }
      } // Save autoattack combat macro


      var autoattack = task_combat.compileAutoattack();

      if (autoattack.toString().length > 1) {
        (0,external_kolmafia_.logprint)("Autoattack macro: ".concat(autoattack.toString()));
        autoattack.setAutoAttack();
      } else {
        (0,external_kolmafia_.setAutoAttack)(0);
      }
    }
    /**
     * Do any task-specific preparation.
     * @param task The current executing task.
     */

  }, {
    key: "prepare",
    value: function prepare(task) {
      var _a;

      (_a = task.prepare) === null || _a === void 0 ? void 0 : _a.call(task);
    }
    /**
     * Actually perform the task.
     * @param task The current executing task.
     */

  }, {
    key: "do",
    value: function _do(task) {
      var result = typeof task.do === "function" ? task.do() : task.do;
      if (result instanceof external_kolmafia_.Location) (0,external_kolmafia_.adv1)(result, -1, "");
      (0,external_kolmafia_.runCombat)();

      while ((0,external_kolmafia_.inMultiFight)()) {
        (0,external_kolmafia_.runCombat)();
      }

      if ((0,external_kolmafia_.choiceFollowsFight)()) (0,external_kolmafia_.runChoice)(-1);
    }
    /**
     * Check if the task.do should be immediately repeated without any prep.
     *
     * By default, this is only used to repeat a task if we hit one of:
     *   1. Halloweener dog noncombats,
     *   2. June cleaver noncombats,
     *   3. Lil' Doctor™ bag noncombat, or
     *   4. Turtle taming noncombats.
     * @param task The current executing task.
     * @returns True if the task should be immediately repeated.
     */

  }, {
    key: "shouldRepeatAdv",
    value: function shouldRepeatAdv(task) {
      return task.do instanceof external_kolmafia_.Location && lastEncounterWasWanderingNC();
    }
    /**
     * Do any task-specific wrapup activities.
     * @param task The current executing task.
     */

  }, {
    key: "post",
    value: function post(task) {
      var _a;

      (_a = task.post) === null || _a === void 0 ? void 0 : _a.call(task);
    }
    /**
     * Mark that an attempt was made on the current task.
     * @param task The current executing task.
     */

  }, {
    key: "markAttempt",
    value: function markAttempt(task) {
      if (!(task.name in this.attempts)) this.attempts[task.name] = 0;
      this.attempts[task.name]++;
    }
    /**
     * Check if the task has passed any of its internal limits.
     * @param task The task to check.
     * @throws An error if any of the internal limits have been passed.
     */

  }, {
    key: "checkLimits",
    value: function checkLimits(task, postcondition) {
      var _a;

      if (!task.limit) return;
      var failureMessage = task.limit.message ? " ".concat(task.limit.message) : "";

      if (!task.completed()) {
        if (task.limit.tries && this.attempts[task.name] >= task.limit.tries) throw "Task ".concat(task.name, " did not complete within ").concat(task.limit.tries, " attempts. Please check what went wrong.").concat(failureMessage);
        if (task.limit.soft && this.attempts[task.name] >= task.limit.soft) throw "Task ".concat(task.name, " did not complete within ").concat(task.limit.soft, " attempts. Please check what went wrong (you may just be unlucky).").concat(failureMessage);
        if (task.limit.turns && task.do instanceof external_kolmafia_.Location && task.do.turnsSpent >= task.limit.turns) throw "Task ".concat(task.name, " did not complete within ").concat(task.limit.turns, " turns. Please check what went wrong.").concat(failureMessage);
        if (task.limit.unready && ((_a = task.ready) === null || _a === void 0 ? void 0 : _a.call(task))) throw "Task ".concat(task.name, " is still ready, but it should not be. Please check what went wrong.").concat(failureMessage);
        if (task.limit.completed) throw "Task ".concat(task.name, " is not completed, but it should be. Please check what went wrong.").concat(failureMessage);
      }

      if (postcondition && !postcondition()) {
        throw "Task ".concat(task.name, " failed its guard. Please check what went wrong.").concat(failureMessage);
      }
    }
  }, {
    key: "getDefaultSettings",
    value: function getDefaultSettings() {
      return this.constructor.defaultSettings;
    }
    /**
     * Initialize properties for the script.
     * @param manager The properties manager to use.
     */

  }, {
    key: "initPropertiesManager",
    value: function initPropertiesManager(manager) {
      var _a; // Properties adapted from garbo


      manager.set(this.getDefaultSettings());

      if (this.options.ccs !== "") {
        if (this.options.ccs === undefined && (0,external_kolmafia_.readCcs)(grimoireCCS) === "") {
          // Write a simple CCS so we can switch to it
          (0,external_kolmafia_.writeCcs)("[ default ]\nabort", grimoireCCS);
        }

        manager.set({
          customCombatScript: (_a = this.options.ccs) !== null && _a !== void 0 ? _a : grimoireCCS
        });
      }
    }
  }]);

  return Engine;
}();
Engine.defaultSettings = {
  logPreferenceChange: true,
  logPreferenceChangeFilter: engine_toConsumableArray(new Set([].concat(engine_toConsumableArray((0,dist_property.get)("logPreferenceChangeFilter").split(",")), ["libram_savedMacro", "maximizerMRUList", "testudinalTeachings", "_lastCombatStarted"]))).sort().filter(a => a).join(","),
  battleAction: "custom combat script",
  autoSatisfyWithMall: true,
  autoSatisfyWithNPCs: true,
  autoSatisfyWithCoinmasters: true,
  autoSatisfyWithStash: false,
  dontStopForCounters: true,
  maximizerFoldables: true,
  hpAutoRecovery: "-0.05",
  hpAutoRecoveryTarget: "0.0",
  mpAutoRecovery: "-0.05",
  mpAutoRecoveryTarget: "0.0",
  afterAdventureScript: "",
  betweenBattleScript: "",
  choiceAdventureScript: "",
  familiarScript: "",
  currentMood: "apathetic",
  autoTuxedo: true,
  autoPinkyRing: true,
  autoGarish: true,
  allowNonMoodBurning: false,
  allowSummonBurning: true,
  libramSkillsSoftcore: "none"
};
function maxSongs() {
  return (0,lib/* have */.lf)((0,template_string/* $skill */.tm)(engine_templateObject || (engine_templateObject = engine_taggedTemplateLiteral(["Mariachi Memory"])))) ? 4 : 3;
}
var wanderingNCs = new Set([// Halloweener dog noncombats
"Wooof! Wooooooof!", "Playing Fetch*", // June cleaver noncombats
"Aunts not Ants", "Bath Time", "Beware of Aligator", "Delicious Sprouts", "Hypnotic Master", "Lost and Found", "Poetic Justice", "Summer Days", "Teacher's Pet", // Lil' Doctor™ bag noncombat
"A Pound of Cure", // Turtle taming noncombats
"Nantucket Snapper", "Blue Monday", "Capital!", "Training Day", "Boxed In", "Duel Nature", "Slow Food", "A Rolling Turtle Gathers No Moss", "Slow Road to Hell", "C'mere, Little Fella", "The Real Victims", "Like That Time in Tortuga", "Cleansing your Palette", "Harem Scarum", "Turtle in peril", "No Man, No Hole", "Slow and Steady Wins the Brawl", "Stormy Weather", "Turtles of the Universe", "O Turtle Were Art Thou", "Allow 6-8 Weeks For Delivery", "Kick the Can", "Turtles All The Way Around", "More eXtreme Than Usual", "Jewel in the Rough", "The worst kind of drowning", "Even Tamer Than Usual", "Never Break the Chain", "Close, but Yes Cigar", "Armchair Quarterback", "This Turtle Rocks!", "Really Sticking Her Neck Out", "It Came from Beneath the Sewer? Great!", "Don't Be Alarmed, Now", "Puttin' it on Wax", "More Like... Hurtle", "Musk! Musk! Musk!", "Silent Strolling"]);
var zoneSpecificNCs = new Map([["The Horror...", (0,template_string/* $locations */.xw)(engine_templateObject2 || (engine_templateObject2 = engine_taggedTemplateLiteral(["Frat House"])))] // Duplicate choice name
]);
/**
 * Return true if the last adv was one of:
 *   1. Halloweener dog noncombats,
 *   2. June cleaver noncombats,
 *   3. Lil' Doctor™ bag noncombat, or
 *   4. Turtle taming noncombats.
 */

function lastEncounterWasWanderingNC() {
  var _a, _b;

  var last = (0,dist_property.get)("lastEncounter");

  if (zoneSpecificNCs.has(last)) {
    // Handle NCs with a duplicated name
    var zones = (_a = zoneSpecificNCs.get(last)) !== null && _a !== void 0 ? _a : [];
    return zones.includes((_b = (0,dist_property.get)("lastAdventure")) !== null && _b !== void 0 ? _b : template_string/* $location.none */.PG.none);
  } else {
    return wanderingNCs.has(last);
  }
}
;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/route.js
function route_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function route_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? route_ownKeys(Object(source), !0).forEach(function (key) { route_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : route_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function route_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function route_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = route_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function route_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return route_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return route_arrayLikeToArray(o, minLen); }

function route_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Extract a list of tasks from the provided quests.
 *
 * Each task name is prepended with the quest name ("Quest Name/Task Name").
 * The quest-local names referred to in task.after are updated appropriately.
 * The task completion condition is updated to include the quest completion.
 *
 * Tasks are returned in-order: all tasks from the first quest, then all tasks
 * from the second quest, etc.
 *
 * @param quests The list of quests. This method does not modify the quest
 *    objects or their tasks.
 * @param implicitAfter If true, each task with task.after = undefined will
 *    have a dependency added on the previous task in the list.
 * @returns A list of tasks from the input quests (with updated properties).
 */
function getTasks(quests) {
  var implicitAfter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var _a, _b;

  var result = [];

  var _iterator = route_createForOfIteratorHelper(quests),
      _step;

  try {
    var _loop = function _loop() {
      var quest = _step.value;
      var questCompleted = quest.completed;
      var questReady = quest.ready;

      var _iterator3 = route_createForOfIteratorHelper(quest.tasks),
          _step3;

      try {
        var _loop2 = function _loop2() {
          var task = _step3.value;

          // Include quest name in task names and dependencies (unless dependency quest is given)
          var renamedTask = route_objectSpread({}, task);

          renamedTask.name = "".concat(quest.name, "/").concat(task.name);
          renamedTask.after = (_a = task.after) === null || _a === void 0 ? void 0 : _a.map(after => after.includes("/") ? after : "".concat(quest.name, "/").concat(after)); // Include previous task as a dependency

          if (implicitAfter && task.after === undefined && result.length > 0) renamedTask.after = [result[result.length - 1].name]; // Include quest completion in task completion

          if (questCompleted !== undefined) {
            var taskCompleted = task.completed;

            renamedTask.completed = () => questCompleted() || taskCompleted();
          }

          var taskReady = renamedTask.ready;

          if (questReady !== undefined && taskReady !== undefined) {
            renamedTask.ready = () => questReady() && taskReady();
          } else if (questReady !== undefined) {
            renamedTask.ready = () => questReady();
          }

          result.push(renamedTask);
        };

        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    } // Verify the dependency names of all tasks

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var names = new Set();

  for (var _i = 0, _result = result; _i < _result.length; _i++) {
    var task = _result[_i];
    names.add(task.name);
  }

  for (var _i2 = 0, _result2 = result; _i2 < _result2.length; _i2++) {
    var _task = _result2[_i2];

    var _iterator2 = route_createForOfIteratorHelper((_b = _task.after) !== null && _b !== void 0 ? _b : []),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var after = _step2.value;

        if (!names.has(after)) {
          throw "Unknown task dependency ".concat(after, " of ").concat(_task.name);
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

  return result;
}
function orderByRoute(tasks, routing, ignore_missing_tasks) {
  var priorities = new Map();

  var _iterator4 = route_createForOfIteratorHelper(tasks),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var task = _step4.value;
      priorities.set(task.name, [1000, task]);
    } // Prioritize the routing list of tasks first

  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  function setPriorityRecursive(task, priority) {
    var _a;

    var old_priority = priorities.get(task);

    if (old_priority === undefined) {
      if (ignore_missing_tasks) return;
      throw "Unknown routing task ".concat(task);
    }

    if (old_priority[0] <= priority) return;
    priorities.set(task, [priority, old_priority[1]]);

    var _iterator5 = route_createForOfIteratorHelper((_a = old_priority[1].after) !== null && _a !== void 0 ? _a : []),
        _step5;

    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var requirement = _step5.value;
        setPriorityRecursive(requirement, priority - 0.01);
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  }

  for (var i = 0; i < routing.length; i++) {
    setPriorityRecursive(routing[i], i);
  } // Sort all tasks by priority.
  // Since this sort is stable, we default to earlier tasks.


  var result = tasks.slice();
  result.sort((a, b) => (priorities.get(a.name) || [1000])[0] - (priorities.get(b.name) || [1000])[0]);
  return result;
}
;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/task.js

/**
 * Returns the state of a quest as a numeric value as follows:
 *   "unstarted" => -1
 *   "started" => 0
 *   "stepNUM" => NUM
 *   "finished" => 999
 */

function step(questName) {
  var stringStep = (0,dist_property.get)(questName);
  if (stringStep === "unstarted") return -1;else if (stringStep === "started") return 0;else if (stringStep === "finished") return 999;else {
    if (stringStep.substring(0, 4) !== "step") {
      throw "Quest state parsing error.";
    }

    return parseInt(stringStep.substring(4), 10);
  }
}
;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/index.js







;// CONCATENATED MODULE: ./src/args.ts
var args_templateObject, args_templateObject2;

function args_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



var args = Args.create("bloop", "MrFizzy(B)ubbs' loop script", {
  major: Args.group("Major Options", {
    strategy: Args.string({
      help: "Farming strategy to use.",
      options: [["auto", "Automatically choose based on game state"], ["garbo", "Farm meat using garbage-collector"], ["freecandy", "Farm Halloween candy using freecandy"], ["chrono", "Farm the TTT using chrono-collector"], ["crimbo", ""]],
      default: "auto"
    }),
    path: Args.string({
      help: "Path to ascend into.",
      options: [["cs", "Community Service"], ["casual", "Casual"], ["smol", "A Shrunken Adventurer am I"], ["robot", "You, Robot"], ["custom", "Jump the gash manually"], ["none", "Stay in aftercore"]],
      default: "cs"
    }),
    class: Args["class"]({
      help: "Class to ascend as.",
      default: (0,template_string/* $class */._$)(args_templateObject || (args_templateObject = args_taggedTemplateLiteral(["Seal Clubber"])))
    })
  }),
  minor: Args.group("Minor Options", {
    voa: Args.number({
      help: "Value of an adventure in meat to use for garbo.",
      default: 6500
    }),
    halloweenvoa: Args.number({
      help: "Value of an adventure in meat to use for halloween.",
      default: 15000
    }),
    tune: Args.string({
      help: "Which moon sign to tune using the hewn moon-rune spoon.",
      options: [["Mongoose", "friendly Degrassi Knoll | Muscle | +20% Physical Damage"], ["Wallaby", "friendly Degrassi Knoll | Mysticality | +20% Spell Damage"], ["Vole", "friendly Degrassi Knoll | Moxie | +20% Combat Initiative and +20 Maximum HP/MP"], ["Platypus", "Little Canadia | Muscle | Familiar Weight +5 lbs."], ["Opossum", "Little Canadia | Mysticality | +5 Adventures per day from Food "], ["Marmot", "Little Canadia 	Moxie | Slight Resistance to All Elements (+1)"], ["Wombat", "The Gnomish Gnomad Camp | Muscle | +20% Meat from Monsters"], ["Blender", "The Gnomish Gnomad Camp | Mysticality | +5 Adventures per day from Booze"], ["Packrat", "The Gnomish Gnomad Camp | Moxie | +10% Items from Monsters"]],
      default: "Platypus"
    }),
    duplicate: Args.item({
      help: "Item to duplicate in the Deep Machine Tunnels.",
      default: (0,template_string/* $item */.xr)(args_templateObject2 || (args_templateObject2 = args_taggedTemplateLiteral(["Daily Affirmation: Always be Collecting"])))
    }),
    maxmeat: Args.number({
      help: "Maximum amount of meat to keep in inventory after breaking the prism.",
      default: 2000000
    }),
    batfellow: Args.boolean({
      help: "Whether to consider batfellow consumables.",
      default: true
    }),
    skipholiday: Args.flag({
      help: "If given, ignore the fact that today is a holiday.",
      default: false
    })
  }),
  debug: Args.group("Debug Options", {
    abort: Args.string({
      help: "If given, abort during the prepare() step for the task with matching name."
    }),
    confirm: Args.flag({
      help: "Whether the user must confirm execution of each unique task.",
      default: false
    }),
    completedtasks: Args.string({
      help: "A comma-separated list of task names the should be treated as completed. Can be used as a workaround for script bugs."
    }),
    list: Args.flag({
      help: "Show the status of all tasks and exit.",
      setting: ""
    })
  })
});
// EXTERNAL MODULE: ./node_modules/libram/dist/session.js
var session = __webpack_require__(352);
// EXTERNAL MODULE: ./node_modules/libram/dist/ascend.js
var ascend = __webpack_require__(832);
// EXTERNAL MODULE: ./node_modules/garbo-lib/dist/index.js
var dist = __webpack_require__(969);
;// CONCATENATED MODULE: ./src/lib.ts
var lib_templateObject, lib_templateObject2, lib_templateObject3, lib_templateObject4, lib_templateObject5;

function lib_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





function debug(message, color) {
  if (color) {
    (0,external_kolmafia_.print)(message, color);
  } else {
    (0,external_kolmafia_.print)(message);
  }
}
function isStealable(item) {
  return item.tradeable && item.discardable && !item.gift;
}
function isDMTDuplicable(item) {
  return isStealable(item) && ["food", "booze", "spleen item", "potion"].includes(itemType(item));
}
function canPickpocket() {
  var class_ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : myClass();
  return class_.primestat === $stat(lib_templateObject || (lib_templateObject = lib_taggedTemplateLiteral(["Moxie"])));
}
function canConsume() {
  return (0,external_kolmafia_.myFullness)() < (0,external_kolmafia_.fullnessLimit)() || (0,external_kolmafia_.myInebriety)() < (0,external_kolmafia_.inebrietyLimit)() || (0,external_kolmafia_.mySpleenUse)() < (0,external_kolmafia_.spleenLimit)();
}
function stooperInebrietyLimit() {
  return (0,external_kolmafia_.inebrietyLimit)() + Number((0,external_kolmafia_.myFamiliar)() !== (0,template_string/* $familiar */.HP)(lib_templateObject2 || (lib_templateObject2 = lib_taggedTemplateLiteral(["Stooper"]))));
}
function numberWithCommas(x) {
  var str = x.toString();
  if (str.includes(".")) return x.toFixed(2);
  return str.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}
function createPermOptions() {
  var permedSkills = (0,external_kolmafia_.getPermedSkills)();
  return {
    permSkills: new Map(external_kolmafia_.Skill.all().filter(skill => (0,lib/* have */.lf)(skill) && skill.permable && !permedSkills[skill.name]).map(skill => [skill, ascend/* Lifestyle.hardcore */.VO.hardcore])),
    neverAbort: false
  };
}
function cliExecuteThrow(command) {
  if (!(0,external_kolmafia_.cliExecute)(command)) throw "Failed to execute ".concat(command);
}
var byAscendingStat = (0,utils/* makeByXFunction */.Qg)(() => args.major["class"].primestat.toString());
function withCloseted(items, callback) {
  var closetedItems = new Map(items.map(item => [item, (0,external_kolmafia_.itemAmount)(item)]));
  closetedItems.forEach((amount, item) => (0,external_kolmafia_.putCloset)(amount, item));

  try {
    return callback();
  } finally {
    closetedItems.forEach((amount, item) => (0,external_kolmafia_.takeCloset)(amount, item));
  }
}
function ascendedToday() {
  return (0,external_kolmafia_.myDaycount)() === 1;
}
function holidays() {
  return (0,external_kolmafia_.holiday)().split("/");
}
function isHalloween() {
  return holidays().includes("Halloween") && !args.minor.skipholiday;
}
function isAprilFools() {
  return holidays().includes("April Fool's Day");
}
function mostRecentPath() {
  var page = visitUrl("ascensionhistory.php?back=self&who=2460823");
  var pattern = /.+"([\w ]+)"><\/td><\/tr>/;
  var match = pattern.exec(page);
  return match !== null ? Path.get(match[1]) : null;
}

var _makeValue = (0,dist/* makeValue */.l1)({
  itemValues: new Map([[(0,template_string/* $item */.xr)(lib_templateObject3 || (lib_templateObject3 = lib_taggedTemplateLiteral(["fake hand"]))), 50000]])
}),
    loopValue = _makeValue.value;


function rolloverTurns() {
  var base = (0,external_kolmafia_.myAdventures)() + 40 + (0,external_kolmafia_.numericModifier)("Adventures") + (0,utils/* clamp */.uZ)(2 * (0,dist_property.get)("_resolutionAdv"), 0, 10) + (0,dist_property.get)("_gibbererAdv") + (0,dist_property.get)("_hareAdv");
  return {
    actual: (0,utils/* clamp */.uZ)(base, 0, 200) + ((0,lib/* have */.lf)((0,template_string/* $item */.xr)(lib_templateObject4 || (lib_templateObject4 = lib_taggedTemplateLiteral(["potato alarm clock"])))) ? 5 : 0) + ((0,lib/* have */.lf)((0,template_string/* $item */.xr)(lib_templateObject5 || (lib_templateObject5 = lib_taggedTemplateLiteral(["etched hourglass"])))) ? 5 : 0),
    lost: base - (0,utils/* clamp */.uZ)(base, 0, 200)
  };
}
;// CONCATENATED MODULE: ./src/engine/profits.ts
function profits_slicedToArray(arr, i) { return profits_arrayWithHoles(arr) || profits_iterableToArrayLimit(arr, i) || profits_unsupportedIterableToArray(arr, i) || profits_nonIterableRest(); }

function profits_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function profits_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function profits_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function profits_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = profits_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function profits_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return profits_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return profits_arrayLikeToArray(o, minLen); }

function profits_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function profits_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function profits_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function profits_createClass(Constructor, protoProps, staticProps) { if (protoProps) profits_defineProperties(Constructor.prototype, protoProps); if (staticProps) profits_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function profits_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





var DailySetting = /*#__PURE__*/function () {
  function DailySetting(key) {
    profits_classCallCheck(this, DailySetting);

    profits_defineProperty(this, "key", void 0);

    this.key = key;
  }

  profits_createClass(DailySetting, [{
    key: "get",
    value: function get(def) {
      var saved = (0,external_kolmafia_.fileToBuffer)("profit/".concat((0,external_kolmafia_.myName)(), "/").concat(this.key, ".json"));
      if (saved === "") return def;
      var json = JSON.parse(saved);
      if ("day" in json && "value" in json && json["day"] === (0,external_kolmafia_.todayToString)()) return json["value"];else return def;
    }
  }, {
    key: "set",
    value: function set(value) {
      (0,external_kolmafia_.bufferToFile)(JSON.stringify({
        day: (0,external_kolmafia_.todayToString)(),
        value: value
      }), "profit/".concat((0,external_kolmafia_.myName)(), "/").concat(this.key, ".json"));
    }
  }]);

  return DailySetting;
}();

var ProfitTracker = /*#__PURE__*/function () {
  function ProfitTracker(key) {
    profits_classCallCheck(this, ProfitTracker);

    profits_defineProperty(this, "setting", void 0);

    profits_defineProperty(this, "records", void 0);

    profits_defineProperty(this, "session", void 0);

    profits_defineProperty(this, "turns", void 0);

    profits_defineProperty(this, "hours", void 0);

    profits_defineProperty(this, "pulled", void 0);

    profits_defineProperty(this, "ascensions", void 0);

    this.setting = new DailySetting(key);
    this.records = this.setting.get({});
    this.session = session/* Session.current */.z.current();
    this.turns = (0,external_kolmafia_.myTurncount)();
    this.hours = (0,external_kolmafia_.gametimeToInt)() / (1000 * 60 * 60);
    this.ascensions = (0,external_kolmafia_.myAscensions)();
    this.pulled = new Set((0,dist_property.get)("_roninStoragePulls").split(",").map(id => parseInt(id)).filter(id => id > 0).map(id => external_kolmafia_.Item.get(id)));
  }

  profits_createClass(ProfitTracker, [{
    key: "reset",
    value: function reset() {
      this.session = session/* Session.current */.z.current();
      this.turns = (0,external_kolmafia_.myTurncount)();
      this.hours = (0,external_kolmafia_.gametimeToInt)() / (1000 * 60 * 60);
      this.ascensions = (0,external_kolmafia_.myAscensions)();
      this.pulled = new Set((0,dist_property.get)("_roninStoragePulls").split(",").map(id => parseInt(id)).filter(id => id > 0).map(id => external_kolmafia_.Item.get(id)));
    }
  }, {
    key: "record",
    value: function record(tag) {
      if (this.ascensions < (0,external_kolmafia_.myAscensions)()) {
        // Session tracking is not accurate across ascensions
        this.reset();
        return;
      }

      if (tag.includes("Ignore")) {
        this.reset();
        return;
      } // Pulled items are tracked oddly in the Session
      // (they are included in the Session diff by default)


      var newPulls = new Set((0,dist_property.get)("_roninStoragePulls").split(",").map(id => parseInt(id)).filter(id => id > 0).map(id => external_kolmafia_.Item.get(id)));

      var _iterator = profits_createForOfIteratorHelper(newPulls),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _this$session$items$g;

          var item = _step.value;
          if (this.pulled.has(item)) continue;
          this.session.items.set(item, 1 + ((_this$session$items$g = this.session.items.get(item)) !== null && _this$session$items$g !== void 0 ? _this$session$items$g : 0));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var diff = session/* Session.current */.z.current().diff(this.session);

      if (!(tag in this.records)) {
        this.records[tag] = {
          gametime: (0,external_kolmafia_.gametimeToInt)(),
          meat: 0,
          items: 0,
          turns: 0,
          hours: 0
        };
      }

      var value = diff.value(loopValue);
      this.records[tag].meat += value.meat;
      this.records[tag].items += value.items;
      this.records[tag].turns += (0,external_kolmafia_.myTurncount)() - this.turns;
      this.records[tag].hours += (0,external_kolmafia_.gametimeToInt)() / (1000 * 60 * 60) - this.hours;
      (0,external_kolmafia_.print)("Profit: ".concat(value.meat, ", ").concat(value.items, ", ").concat((0,external_kolmafia_.myTurncount)() - this.turns, ", ").concat((0,external_kolmafia_.gametimeToInt)() / (1000 * 60 * 60) - this.hours));
      this.reset();
    }
  }, {
    key: "all",
    value: function all() {
      return this.records;
    }
  }, {
    key: "save",
    value: function save() {
      this.setting.set(this.records);
    }
  }]);

  return ProfitTracker;
}();

function sum(record, where) {
  var included = [];

  for (var _key in record) {
    if (where(_key)) included.push(record[_key]);
  }

  return {
    gametime: included.reduce((v, p) => Math.min(v, p.gametime), 0),
    meat: included.reduce((v, p) => v + p.meat, 0),
    items: included.reduce((v, p) => v + p.items, 0),
    turns: included.reduce((v, p) => v + p.turns, 0),
    hours: included.reduce((v, p) => v + p.hours, 0)
  };
}

function printProfitSegment(key, record, color) {
  if (record === undefined) return;
  (0,external_kolmafia_.print)("".concat(key, ": ").concat(numberWithCommas(record.meat), " meat + ").concat(numberWithCommas(record.items), " items (").concat(record.turns, " turns + ").concat(numberWithCommas(record.hours), " hours)"), color);
}

function printProfits(records) {
  (0,external_kolmafia_.print)("");
  (0,external_kolmafia_.print)("== Daily Loop Profit ==");
  var sortedKeys = Object.entries(records).sort((a, b) => a[1].gametime - b[1].gametime).map(_ref => {
    var _ref2 = profits_slicedToArray(_ref, 1),
        key = _ref2[0];

    return key;
  });
  var groups = new Set(sortedKeys.map(x => x.split("@")[0]));

  var _iterator2 = profits_createForOfIteratorHelper(groups),
      _step2;

  try {
    var _loop = function _loop() {
      var group = _step2.value;
      printProfitSegment(group, sum(records, key => key.startsWith(group)), "blue");
      var groupKeys = sortedKeys.filter(key => key.startsWith(group));
      var indexOfOther = groupKeys.findIndex(key => key.endsWith("Other"));
      groupKeys.push(groupKeys.splice(indexOfOther, 1)[0]);

      var _iterator3 = profits_createForOfIteratorHelper(groupKeys),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _key2 = _step3.value;
          printProfitSegment("* ".concat(_key2.split("@")[1]), records[_key2], "green");
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    };

    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  printProfitSegment("Total", sum(records, () => true), "black");
}
// EXTERNAL MODULE: ./node_modules/libram/dist/Kmail.js + 1 modules
var Kmail = __webpack_require__(479);
;// CONCATENATED MODULE: ./src/engine/engine.ts
var engine_engine_templateObject, engine_engine_templateObject2;

function engine_engine_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function engine_engine_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = engine_engine_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function engine_engine_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return engine_engine_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return engine_engine_arrayLikeToArray(o, minLen); }

function engine_engine_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function engine_engine_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function engine_engine_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? engine_engine_ownKeys(Object(source), !0).forEach(function (key) { engine_engine_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : engine_engine_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function engine_engine_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function engine_engine_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function engine_engine_createClass(Constructor, protoProps, staticProps) { if (protoProps) engine_engine_defineProperties(Constructor.prototype, protoProps); if (staticProps) engine_engine_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = engine_getPrototypeOf(object); if (object === null) break; } return object; }

function engine_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) engine_setPrototypeOf(subClass, superClass); }

function engine_setPrototypeOf(o, p) { engine_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return engine_setPrototypeOf(o, p); }

function engine_createSuper(Derived) { var hasNativeReflectConstruct = engine_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = engine_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = engine_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return engine_possibleConstructorReturn(this, result); }; }

function engine_possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return engine_assertThisInitialized(self); }

function engine_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function engine_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function engine_getPrototypeOf(o) { engine_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return engine_getPrototypeOf(o); }

function engine_engine_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







var LoopEngine = /*#__PURE__*/function (_Engine) {
  engine_inherits(LoopEngine, _Engine);

  var _super = engine_createSuper(LoopEngine);

  function LoopEngine(tasks, completedTasks, key) {
    var _this;

    engine_engine_classCallCheck(this, LoopEngine);

    var completed_set = new Set(completedTasks.map(n => n.trim())); // Completed tasks are always completed

    tasks = tasks.map(task => {
      if (completed_set.has(task.name)) return engine_engine_objectSpread(engine_engine_objectSpread({}, task), {}, {
        completed: () => true
      });
      return task;
    });
    _this = _super.call(this, tasks);

    engine_engine_defineProperty(engine_assertThisInitialized(_this), "profits", void 0);

    _this.profits = new ProfitTracker(key);

    var _iterator = engine_engine_createForOfIteratorHelper(completed_set),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var task = _step.value;
        if (!_this.tasks_by_name.has(task)) debug("Warning: Unknown completedtask ".concat(task));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return _this;
  }

  engine_engine_createClass(LoopEngine, [{
    key: "available",
    value: function available(task) {
      return !task.completed();
    }
  }, {
    key: "run",
    value: function run(actions) {
      for (var i = 0; i < (actions !== null && actions !== void 0 ? actions : Infinity); i++) {
        var _task$after;

        var task = this.getNextTask();
        if (!task) return;

        var _iterator2 = engine_engine_createForOfIteratorHelper((_task$after = task.after) !== null && _task$after !== void 0 ? _task$after : []),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var after = _step2.value;
            var after_task = this.tasks_by_name.get(after);
            if (after_task === undefined) throw "Unknown task dependency ".concat(after, " on ").concat(task.name);
            if (!after_task.completed()) throw "Task dependency ".concat(after, " is not completed");
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        if (task.ready && !task.ready()) throw "Task ".concat(task.name, " is not ready");
        this.execute(task);
      }
    }
  }, {
    key: "execute",
    value: function execute(task) {
      try {
        if (args.debug.confirm && !(0,external_kolmafia_.userConfirm)("Executing ".concat(task.name, ", continue?"))) {
          throw "User rejected execution of task ".concat(task.name);
        }

        _get(engine_getPrototypeOf(LoopEngine.prototype), "execute", this).call(this, task);
      } finally {
        var _task$tracking;

        var questName = task.name.split("/")[0];
        this.profits.record("".concat(questName, "@").concat((_task$tracking = task.tracking) !== null && _task$tracking !== void 0 ? _task$tracking : "Other"));
        this.profits.save();
      }
    }
  }, {
    key: "post",
    value: function post(task) {
      _get(engine_getPrototypeOf(LoopEngine.prototype), "post", this).call(this, task);

      if ((0,dist_property.get)("_lastCombatLost")) throw "Fight was lost; stop.";
      if ((0,lib/* have */.lf)((0,template_string/* $effect */._G)(engine_engine_templateObject || (engine_engine_templateObject = engine_engine_taggedTemplateLiteral(["Beaten Up"]))))) (0,lib/* uneffect */.Lo)((0,template_string/* $effect */._G)(engine_engine_templateObject2 || (engine_engine_templateObject2 = engine_engine_taggedTemplateLiteral(["Beaten Up"]))));
    }
  }, {
    key: "destruct",
    value: function destruct() {
      _get(engine_getPrototypeOf(LoopEngine.prototype), "destruct", this).call(this);

      Kmail/* default.delete */.Z["delete"](Kmail/* default.inbox */.Z.inbox().filter(k => ["Lady Spookyraven's Ghost", "The Loathing Postal Service", "CheeseFax", "OnlyFax"].includes(k.senderName)));
      printProfits(this.profits.all());
    }
  }, {
    key: "initPropertiesManager",
    value: function initPropertiesManager(manager) {
      _get(engine_getPrototypeOf(LoopEngine.prototype), "initPropertiesManager", this).call(this, manager);

      manager.set({
        valueOfAdventure: args.minor.voa
      }); // June cleaver choices, sourced from phccs

      manager.setChoices({
        1467: 3,
        1468: 2,
        1469: 3,
        1470: 2,
        1471: 3,
        1472: 1,
        1473: 1,
        1474: 1,
        1475: 1
      });
      (0,dist_property.set)("garbo_yachtzeechain", true);
      (0,dist_property.set)("garbo_candydish", true);
    }
  }]);

  return LoopEngine;
}(Engine);
;// CONCATENATED MODULE: ./src/snapshot.ts
var snapshot_templateObject, snapshot_templateObject2, snapshot_templateObject3, snapshot_templateObject4, snapshot_templateObject5, snapshot_templateObject6, snapshot_templateObject7, snapshot_templateObject8, snapshot_templateObject9, snapshot_templateObject10, snapshot_templateObject11, snapshot_templateObject12, snapshot_templateObject13, snapshot_templateObject14, snapshot_templateObject15, snapshot_templateObject16, snapshot_templateObject17, snapshot_templateObject18, snapshot_templateObject19, snapshot_templateObject20, snapshot_templateObject21, snapshot_templateObject22, snapshot_templateObject23, snapshot_templateObject24, snapshot_templateObject25, snapshot_templateObject26, snapshot_templateObject27, snapshot_templateObject28, snapshot_templateObject29, snapshot_templateObject30, snapshot_templateObject31;

function snapshot_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function snapshot_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function snapshot_createClass(Constructor, protoProps, staticProps) { if (protoProps) snapshot_defineProperties(Constructor.prototype, protoProps); if (staticProps) snapshot_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function snapshot_slicedToArray(arr, i) { return snapshot_arrayWithHoles(arr) || snapshot_iterableToArrayLimit(arr, i) || snapshot_unsupportedIterableToArray(arr, i) || snapshot_nonIterableRest(); }

function snapshot_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function snapshot_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function snapshot_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function snapshot_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = snapshot_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function snapshot_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function snapshot_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? snapshot_ownKeys(Object(source), !0).forEach(function (key) { snapshot_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : snapshot_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function snapshot_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function snapshot_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function snapshot_toConsumableArray(arr) { return snapshot_arrayWithoutHoles(arr) || snapshot_iterableToArray(arr) || snapshot_unsupportedIterableToArray(arr) || snapshot_nonIterableSpread(); }

function snapshot_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function snapshot_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return snapshot_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return snapshot_arrayLikeToArray(o, minLen); }

function snapshot_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function snapshot_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return snapshot_arrayLikeToArray(arr); }

function snapshot_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



var worksheds = ["warbear LP-ROM burner", "warbear jackhammer drill press", "warbear induction oven", "warbear high-efficiency still", "warbear chemistry lab", "warbear auto-anvil", "spinning wheel", "snow machine", "Little Geneticist DNA-Splicing Lab", "portable Mayo Clinic", "Asdon Martin keyfob", "diabolic pizza cube", "cold medicine cabinet"];
var gardens = ["packet of pumpkin seeds", "Peppermint Pip Packet", "packet of dragon's teeth", "packet of beer seeds", "packet of winter seeds", "packet of thanksgarden seeds", "packet of tall grass seeds", "packet of mushroom spores"];

function getEquipment() {
  var items = snapshot_toConsumableArray(new Set(external_kolmafia_.Slot.all().map(slot => (0,external_kolmafia_.equippedItem)(slot))));

  return items.reduce((obj, item) => {
    if ((0,external_kolmafia_.equippedAmount)(item) > 0) obj[item.name] = (0,external_kolmafia_.equippedAmount)(item);
    return obj;
  }, {});
}

function getTerrariumEquipment() {
  var items = external_kolmafia_.Familiar.all().filter(fam => (0,lib/* have */.lf)(fam) && (0,external_kolmafia_.myFamiliar)() !== fam).map(fam => (0,external_kolmafia_.familiarEquippedEquipment)(fam)).filter(item => item !== (0,template_string/* $item */.xr)(snapshot_templateObject || (snapshot_templateObject = snapshot_taggedTemplateLiteral(["none"]))));
  return items.reduce((obj, item) => {
    var _obj$item$name;

    return snapshot_objectSpread(snapshot_objectSpread({}, obj), {}, snapshot_defineProperty({}, item.name, (_obj$item$name = obj[item.name]) !== null && _obj$item$name !== void 0 ? _obj$item$name : 0 + 1));
  }, {});
}

function getTradeableCampground() {
  var itemNames = Object.keys((0,external_kolmafia_.getCampground)()).filter(x => [].concat(worksheds, gardens).includes(x));
  return itemNames.reduce((obj, itemName) => snapshot_objectSpread(snapshot_objectSpread({}, obj), {}, snapshot_defineProperty({}, itemName, 1)), {});
}

function myItems() {
  (0,external_kolmafia_.print)("");
  (0,external_kolmafia_.cliExecute)("refresh shop");
  (0,external_kolmafia_.cliExecute)("refresh storage");
  (0,external_kolmafia_.cliExecute)("refresh inv");
  var inv = (0,external_kolmafia_.getInventory)();
  var equips = getEquipment();
  var shop = (0,external_kolmafia_.getShop)();
  var closet = (0,external_kolmafia_.getCloset)();
  var storage = (0,external_kolmafia_.getStorage)();
  var camp = getTradeableCampground();
  var terrarium = getTerrariumEquipment();
  var display = (0,external_kolmafia_.getDisplay)();
  var overall = new Map();

  var _loop = function _loop(itemName) {
    overall.set((0,external_kolmafia_.toItem)(itemName), [inv, equips, shop, closet, storage, camp, terrarium, display].reduce((a, b) => {
      var _b$itemName;

      return a + ((_b$itemName = b[itemName]) !== null && _b$itemName !== void 0 ? _b$itemName : 0);
    }, 0));
  };

  for (var itemName in snapshot_objectSpread(snapshot_objectSpread(snapshot_objectSpread(snapshot_objectSpread(snapshot_objectSpread(snapshot_objectSpread(snapshot_objectSpread(snapshot_objectSpread({}, inv), equips), shop), closet), storage), camp), terrarium), display)) {
    _loop(itemName);
  }

  return overall;
}
/**
 * Return a mapping of the snapshot items, mapping foldable items to a single of their forms
 * @returns the item snapshot results, with foldables mapped to a single of their folding forms
 */


function myItemsWrapper() {
  var manyToOne = (primary, mapped) => mapped.map(target => [target, primary]);

  var foldable = item => manyToOne(item, (0,lib/* getFoldGroup */._D)(item));

  var itemMappings = new Map([].concat(snapshot_toConsumableArray(foldable((0,template_string/* $item */.xr)(snapshot_templateObject2 || (snapshot_templateObject2 = snapshot_taggedTemplateLiteral(["liar's pants"]))))), snapshot_toConsumableArray(foldable((0,template_string/* $item */.xr)(snapshot_templateObject3 || (snapshot_templateObject3 = snapshot_taggedTemplateLiteral(["ice pick"]))))), snapshot_toConsumableArray(manyToOne((0,template_string/* $item */.xr)(snapshot_templateObject4 || (snapshot_templateObject4 = snapshot_taggedTemplateLiteral(["Spooky Putty sheet"]))), [(0,template_string/* $item */.xr)(snapshot_templateObject5 || (snapshot_templateObject5 = snapshot_taggedTemplateLiteral(["Spooky Putty monster"])))].concat(snapshot_toConsumableArray((0,lib/* getFoldGroup */._D)((0,template_string/* $item */.xr)(snapshot_templateObject6 || (snapshot_templateObject6 = snapshot_taggedTemplateLiteral(["Spooky Putty sheet"])))))))), snapshot_toConsumableArray(foldable((0,template_string/* $item */.xr)(snapshot_templateObject7 || (snapshot_templateObject7 = snapshot_taggedTemplateLiteral(["stinky cheese sword"]))))), snapshot_toConsumableArray(foldable((0,template_string/* $item */.xr)(snapshot_templateObject8 || (snapshot_templateObject8 = snapshot_taggedTemplateLiteral(["naughty paper shuriken"]))))), snapshot_toConsumableArray(foldable((0,template_string/* $item */.xr)(snapshot_templateObject9 || (snapshot_templateObject9 = snapshot_taggedTemplateLiteral(["Loathing Legion knife"]))))), snapshot_toConsumableArray(foldable((0,template_string/* $item */.xr)(snapshot_templateObject10 || (snapshot_templateObject10 = snapshot_taggedTemplateLiteral(["deceased crimbo tree"]))))), snapshot_toConsumableArray(foldable((0,template_string/* $item */.xr)(snapshot_templateObject11 || (snapshot_templateObject11 = snapshot_taggedTemplateLiteral(["makeshift turban"]))))), snapshot_toConsumableArray(foldable((0,template_string/* $item */.xr)(snapshot_templateObject12 || (snapshot_templateObject12 = snapshot_taggedTemplateLiteral(["turtle wax shield"]))))), snapshot_toConsumableArray(foldable((0,template_string/* $item */.xr)(snapshot_templateObject13 || (snapshot_templateObject13 = snapshot_taggedTemplateLiteral(["metallic foil bow"]))))), snapshot_toConsumableArray(foldable((0,template_string/* $item */.xr)(snapshot_templateObject14 || (snapshot_templateObject14 = snapshot_taggedTemplateLiteral(["ironic moustache"]))))), snapshot_toConsumableArray(foldable((0,template_string/* $item */.xr)(snapshot_templateObject15 || (snapshot_templateObject15 = snapshot_taggedTemplateLiteral(["bugged balaclava"]))))), snapshot_toConsumableArray(foldable((0,template_string/* $item */.xr)(snapshot_templateObject16 || (snapshot_templateObject16 = snapshot_taggedTemplateLiteral(["toggle switch (Bartend)"]))))), snapshot_toConsumableArray(foldable((0,template_string/* $item */.xr)(snapshot_templateObject17 || (snapshot_templateObject17 = snapshot_taggedTemplateLiteral(["mushroom cap"]))))), snapshot_toConsumableArray(manyToOne((0,template_string/* $item */.xr)(snapshot_templateObject18 || (snapshot_templateObject18 = snapshot_taggedTemplateLiteral(["can of Rain-Doh"]))), (0,template_string/* $items */.vS)(snapshot_templateObject19 || (snapshot_templateObject19 = snapshot_taggedTemplateLiteral(["empty Rain-Doh can"]))))), snapshot_toConsumableArray(manyToOne((0,template_string/* $item */.xr)(snapshot_templateObject20 || (snapshot_templateObject20 = snapshot_taggedTemplateLiteral(["meteorite fragment"]))), (0,template_string/* $items */.vS)(snapshot_templateObject21 || (snapshot_templateObject21 = snapshot_taggedTemplateLiteral(["meteorite earring, meteorite necklace, meteorite ring"]))))), snapshot_toConsumableArray(manyToOne((0,template_string/* $item */.xr)(snapshot_templateObject22 || (snapshot_templateObject22 = snapshot_taggedTemplateLiteral(["Sneaky Pete's leather jacket"]))), (0,template_string/* $items */.vS)(snapshot_templateObject23 || (snapshot_templateObject23 = snapshot_taggedTemplateLiteral(["Sneaky Pete's leather jacket (collar popped)"]))))), snapshot_toConsumableArray(manyToOne((0,template_string/* $item */.xr)(snapshot_templateObject24 || (snapshot_templateObject24 = snapshot_taggedTemplateLiteral(["Boris's Helm"]))), (0,template_string/* $items */.vS)(snapshot_templateObject25 || (snapshot_templateObject25 = snapshot_taggedTemplateLiteral(["Boris's Helm (askew)"]))))), snapshot_toConsumableArray(manyToOne((0,template_string/* $item */.xr)(snapshot_templateObject26 || (snapshot_templateObject26 = snapshot_taggedTemplateLiteral(["Jarlsberg's pan"]))), (0,template_string/* $items */.vS)(snapshot_templateObject27 || (snapshot_templateObject27 = snapshot_taggedTemplateLiteral(["Jarlsberg's pan (Cosmic portal mode)"]))))), snapshot_toConsumableArray(manyToOne((0,template_string/* $item */.xr)(snapshot_templateObject28 || (snapshot_templateObject28 = snapshot_taggedTemplateLiteral(["tiny plastic sword"]))), (0,template_string/* $items */.vS)(snapshot_templateObject29 || (snapshot_templateObject29 = snapshot_taggedTemplateLiteral(["grogtini, bodyslam, dirty martini, vesper, cherry bomb, sangria del diablo"]))))), snapshot_toConsumableArray(manyToOne((0,template_string/* $item */.xr)(snapshot_templateObject30 || (snapshot_templateObject30 = snapshot_taggedTemplateLiteral(["earthenware muffin tin"]))), (0,template_string/* $items */.vS)(snapshot_templateObject31 || (snapshot_templateObject31 = snapshot_taggedTemplateLiteral(["blueberry muffin, bran muffin, chocolate chip muffin"])))))));
  var inventory = new Map();

  var _iterator = snapshot_createForOfIteratorHelper(myItems().entries()),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _itemMappings$get, _inventory$get;

      var _step$value = snapshot_slicedToArray(_step.value, 2),
          _item = _step$value[0],
          quantity = _step$value[1];

      var mappedItem = (_itemMappings$get = itemMappings.get(_item)) !== null && _itemMappings$get !== void 0 ? _itemMappings$get : _item;
      inventory.set(mappedItem, quantity + ((_inventory$get = inventory.get(mappedItem)) !== null && _inventory$get !== void 0 ? _inventory$get : 0));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return inventory;
}
/**
 * Perform a binary element-wise operation on two inventories
 * @param a The LHS inventory to perform the operation on
 * @param b The RHS inventory to perform the operation on
 * @param op an operator to compute between the sets
 * @returns a new map representing the combined inventories
 */

function inventoryOperation(a, b, op) {
  var difference = new Map();

  for (var _i2 = 0, _arr2 = [].concat(snapshot_toConsumableArray(a.keys()), snapshot_toConsumableArray(b.keys())); _i2 < _arr2.length; _i2++) {
    var _a$get, _b$get;

    var _item2 = _arr2[_i2];
    var quantity = op((_a$get = a.get(_item2)) !== null && _a$get !== void 0 ? _a$get : 0, (_b$get = b.get(_item2)) !== null && _b$get !== void 0 ? _b$get : 0);
    difference.set(_item2, quantity);
  }

  var diffEntries = snapshot_toConsumableArray(difference.entries());

  return new Map(diffEntries.filter(value => value[1] !== 0));
}
/**
 * An entry showing the value of each Item in a snapshot
 * @member item the item associated with this detail
 * @member value the numeric value of the full quantity of items (to get value of each item, do value / quantity) (can be negative)
 * @member quantity the number of items for this detail
 */


var Snapshot = /*#__PURE__*/function () {
  function Snapshot(meat, items) {
    snapshot_classCallCheck(this, Snapshot);

    snapshot_defineProperty(this, "meat", void 0);

    snapshot_defineProperty(this, "items", void 0);

    this.meat = meat;
    this.items = items;
  }
  /**
   * Value this snapshot
   * @param itemValue a function that, when given an item, will give a meat value of the item
   * @returns ItemResult with the full value of this snapshot given the input function
   */


  snapshot_createClass(Snapshot, [{
    key: "value",
    value: function value(itemValue) {
      // TODO: add garbo specific pricing (sugar equipment for synth, etc.)
      var meat = Math.floor(this.meat);

      var itemDetails = snapshot_toConsumableArray(this.items.entries()).map(_ref => {
        var _ref2 = snapshot_slicedToArray(_ref, 2),
            item = _ref2[0],
            quantity = _ref2[1];

        return {
          item: item,
          quantity: quantity,
          value: itemValue(item) * quantity
        };
      });

      var items = Math.floor((0,utils/* sumNumbers */.JD)(itemDetails.map(detail => detail.value)));
      return {
        meat: meat,
        items: items,
        total: meat + items,
        itemDetails: itemDetails
      };
    }
    /**
     * Subtract the contents of another snapshot from this one, removing any items that have a resulting quantity of 0
     * @param other the snapshot from which to pull values to remove from this snapshot
     * @returns a new snapshot representing the difference between this snapshot and the other snapshot
     */

  }, {
    key: "diff",
    value: function diff(other) {
      return new Snapshot(this.meat - other.meat, inventoryOperation(this.items, other.items, (a, b) => a - b));
    }
    /**
     * Subtract the contents of snasphot b from snapshot a, removing any items that have a resulting quantity of 0
     * @param a the snapshot from which to subtract elements
     * @param b the snapshot from which to add elements
     * @returns a new snapshot representing the difference between a and b
     */

  }, {
    key: "add",
    value:
    /**
     * Generate a new snapshot combining multiple snapshots together
     * @param other the snapshot from which to add elements to this set
     * @returns a new snapshot representing the addition of other to this
     */
    function add(other) {
      return new Snapshot(this.meat + other.meat, inventoryOperation(this.items, other.items, (a, b) => a + b));
    }
    /**
     * Combine the contents of snapshots
     * @param snapshots the set of snapshots to combine together
     * @returns a new snapshot representing the difference between a and b
     */

  }, {
    key: "toFile",
    value:
    /**
     * Export this snapshot to a file in the data/ directory. Conventionally this file should end in ".json"
     * @param filename The file into which to export
     */
    function toFile(filename) {
      var val = {
        meat: this.meat,
        items: Object.fromEntries(this.items)
      };
      (0,external_kolmafia_.bufferToFile)(JSON.stringify(val), Snapshot.getFilepath(filename));
    }
    /**
     * Import a snapshot from a file in the data/ directory. Conventionally the file should end in ".json"
     * @param filename The file from which to import
     * @returns the snapshot represented by the file
     */

  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.meat + this.items.size === 0;
    }
  }], [{
    key: "diff",
    value: function diff(a, b) {
      return a.diff(b);
    }
  }, {
    key: "add",
    value: function add() {
      for (var _len = arguments.length, snapshots = new Array(_len), _key = 0; _key < _len; _key++) {
        snapshots[_key] = arguments[_key];
      }

      return snapshots.reduce((previousSnapshot, currentSnapshot) => previousSnapshot.add(currentSnapshot));
    }
  }, {
    key: "getFilepath",
    value: function getFilepath(filename) {
      return filename.endsWith(".json") ? filename : "snapshots/".concat((0,external_kolmafia_.myName)(), "/").concat((0,external_kolmafia_.todayToString)(), "_").concat(filename, ".json");
    }
  }, {
    key: "fromFile",
    value: function fromFile(filename) {
      var fileValue = (0,external_kolmafia_.fileToBuffer)(Snapshot.getFilepath(filename)); // fileToBuffer returns empty string for files that don't exist

      if (fileValue.length > 0) {
        var val = JSON.parse(fileValue);
        var parsedItems = Object.entries(val.items).map(_ref3 => {
          var _ref4 = snapshot_slicedToArray(_ref3, 2),
              itemStr = _ref4[0],
              quantity = _ref4[1];

          return [(0,external_kolmafia_.toItem)(itemStr), quantity];
        });
        return new Snapshot(val.meat, new Map(parsedItems));
      } else {
        // if the file does not exist, return an empty snapshot
        return new Snapshot(0, new Map());
      }
    }
  }, {
    key: "current",
    value: function current() {
      return new Snapshot((0,external_kolmafia_.myMeat)() + (0,external_kolmafia_.myStorageMeat)() + (0,external_kolmafia_.myClosetMeat)(), myItemsWrapper());
    }
  }, {
    key: "importOrCreate",
    value: function importOrCreate(filename) {
      var snapshot = Snapshot.fromFile(filename);

      if (snapshot.isEmpty()) {
        snapshot = Snapshot.current();
        snapshot.toFile(filename);
      }

      return snapshot;
    }
  }]);

  return Snapshot;
}();
// EXTERNAL MODULE: ./node_modules/libram/dist/Clan.js
var Clan = __webpack_require__(169);
;// CONCATENATED MODULE: ./src/paths/common.ts
var common_templateObject, common_templateObject2, common_templateObject3, common_templateObject4, common_templateObject5, common_templateObject6, common_templateObject7, common_templateObject8, common_templateObject9, common_templateObject10, common_templateObject11, common_templateObject12, common_templateObject13, common_templateObject14, common_templateObject15, common_templateObject16, common_templateObject17, common_templateObject18, common_templateObject19, common_templateObject20, common_templateObject21, common_templateObject22, common_templateObject23, common_templateObject24, common_templateObject25, common_templateObject26, common_templateObject27, common_templateObject28, common_templateObject29, common_templateObject30, common_templateObject31, common_templateObject32, common_templateObject33, common_templateObject34, common_templateObject35, common_templateObject36, common_templateObject37, common_templateObject38, common_templateObject39;

function common_toConsumableArray(arr) { return common_arrayWithoutHoles(arr) || common_iterableToArray(arr) || common_unsupportedIterableToArray(arr) || common_nonIterableSpread(); }

function common_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function common_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return common_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return common_arrayLikeToArray(o, minLen); }

function common_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function common_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return common_arrayLikeToArray(arr); }

function common_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function common_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var astralContainers = (0,template_string/* $items */.vS)(common_templateObject || (common_templateObject = common_taggedTemplateLiteral(["astral hot dog dinner, astral six-pack, [10882]carton of astral energy drinks"])));
function pullAll() {
  return {
    name: "Pull All",
    completed: () => Object.keys((0,external_kolmafia_.getStorage)()).length === 0 && (0,external_kolmafia_.myStorageMeat)() === 0,
    do: () => (0,external_kolmafia_.cliExecute)("pull all"),
    post: () => (0,external_kolmafia_.cliExecute)("refresh all"),
    limit: {
      tries: 1
    }
  };
}
function breakfast() {
  var after = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return [breakStone(), {
    name: "Closet Meat",
    after: after,
    completed: () => (0,external_kolmafia_.myMeat)() <= args.minor.maxmeat || (0,external_kolmafia_.myClosetMeat)() > 0,
    do: () => (0,external_kolmafia_.cliExecute)("closet put ".concat((0,external_kolmafia_.myMeat)() - args.minor.maxmeat, " meat")),
    limit: {
      tries: 1
    }
  }, {
    name: "Rain-Doh",
    after: after,
    completed: () => !(0,lib/* have */.lf)((0,template_string/* $item */.xr)(common_templateObject2 || (common_templateObject2 = common_taggedTemplateLiteral(["can of Rain-Doh"])))),
    do: () => (0,external_kolmafia_.use)((0,template_string/* $item */.xr)(common_templateObject3 || (common_templateObject3 = common_taggedTemplateLiteral(["can of Rain-Doh"])))),
    limit: {
      tries: 1
    }
  }, {
    name: "Astral Constainer",
    after: after,
    completed: () => astralContainers.every(item => !(0,lib/* have */.lf)(item)),
    do: () => astralContainers.filter(item => (0,lib/* have */.lf)(item)).forEach(item => (0,external_kolmafia_.use)(item)),
    limit: {
      tries: 1
    }
  }, {
    name: "Every Skill",
    after: after,
    completed: () => (0,dist_property.get)("_bookOfEverySkillUsed", false),
    do: () => (0,external_kolmafia_.use)((0,template_string/* $item */.xr)(common_templateObject4 || (common_templateObject4 = common_taggedTemplateLiteral(["The Big Book of Every Skill"])))),
    limit: {
      tries: 1
    }
  }, {
    name: "Enable Reverser",
    after: after,
    completed: () => (0,dist_property.get)("backupCameraReverserEnabled"),
    do: () => (0,external_kolmafia_.cliExecute)("backupcamera reverser on"),
    limit: {
      tries: 1
    }
  }, {
    name: "Tune Moon",
    after: after,
    completed: () => (0,external_kolmafia_.mySign)() === args.minor.tune || (0,dist_property.get)("moonTuned"),
    do: () => (0,external_kolmafia_.cliExecute)("spoon ".concat(args.minor.tune)),
    limit: {
      tries: 1
    }
  }, {
    name: "Duplicate",
    after: after,
    ready: () => (0,lib/* have */.lf)(args.minor.duplicate) && (0,dist_property.get)("encountersUntilDMTChoice") <= (0,template_string/* $familiar */.HP)(common_templateObject5 || (common_templateObject5 = common_taggedTemplateLiteral(["Machine Elf"]))).fightsLimit - (0,template_string/* $familiar */.HP)(common_templateObject6 || (common_templateObject6 = common_taggedTemplateLiteral(["Machine Elf"]))).fightsToday,
    completed: () => (0,dist_property.get)("lastDMTDuplication") >= (0,external_kolmafia_.myAscensions)(),
    prepare: () => (0,dist_property.set)("choiceAdventure1125", "1&iid=".concat((0,external_kolmafia_.toInt)(args.minor.duplicate))),
    do: (0,template_string/* $location */.PG)(common_templateObject7 || (common_templateObject7 = common_taggedTemplateLiteral(["The Deep Machine Tunnels"]))),
    post: () => (0,external_kolmafia_.putCloset)((0,external_kolmafia_.itemAmount)(args.minor.duplicate), args.minor.duplicate),
    acquire: () => [{
      item: args.minor.duplicate
    }],
    choices: {
      1119: 4
    },
    combat: new CombatStrategy().macro(new combat/* Macro */.LE().attack().repeat()),
    outfit: {
      weapon: (0,template_string/* $item */.xr)(common_templateObject8 || (common_templateObject8 = common_taggedTemplateLiteral(["Fourth of May Cosplay Saber"]))),
      familiar: (0,template_string/* $familiar */.HP)(common_templateObject9 || (common_templateObject9 = common_taggedTemplateLiteral(["Machine Elf"]))),
      modifier: "muscle, -ml"
    },
    limit: {
      tries: 6
    }
  }, {
    name: "Detective Solver",
    after: after,
    completed: () => (0,dist_property.get)("_detectiveCasesCompleted") >= 3,
    do: () => cliExecuteThrow("Detective Solver"),
    limit: {
      tries: 1
    }
  }, {
    name: "Clan Fortune",
    after: after,
    completed: () => (0,dist_property.get)("_clanFortuneConsultUses") >= 3 || !(0,external_kolmafia_.isOnline)("CheeseFax"),
    do: () => Clan/* Clan.with */._["with"]("Bonus Adventures from Hell", () => (0,external_kolmafia_.cliExecute)("fortune ".concat((0,external_kolmafia_.getPlayerId)("CheeseFax")))),
    post: () => (0,external_kolmafia_.wait)(10),
    limit: {
      tries: 3
    }
  }, {
    name: "Breakfast",
    after: after,
    completed: () => (0,dist_property.get)("breakfastCompleted"),
    do: () => (0,external_kolmafia_.cliExecute)("breakfast"),
    limit: {
      tries: 1
    }
  }];
}

function fullnessToRemove() {
  var drinkDocClock = !(0,dist_property.get)("_docClocksThymeCocktailDrunk") && (0,lib/* have */.lf)((0,template_string/* $item */.xr)(common_templateObject10 || (common_templateObject10 = common_taggedTemplateLiteral(["Doc Clock's thyme cocktail"])))) && (0,lib/* getRemainingLiver */.bf)() >= 4;
  var drinkMadLiquor = !(0,dist_property.get)("_madLiquorDrunk") && (0,lib/* have */.lf)((0,template_string/* $item */.xr)(common_templateObject11 || (common_templateObject11 = common_taggedTemplateLiteral(["The Mad Liquor"])))) && (0,lib/* getRemainingLiver */.bf)() - (drinkDocClock ? 4 : 0) >= 3;
  return (drinkDocClock ? 2 : 0) + (drinkMadLiquor ? 1 : 0);
}

function batfellow() {
  return [{
    name: "Kickstart Liver",
    completed: () => (0,external_kolmafia_.myInebriety)() >= 2 || (0,dist_property.get)("_mrBurnsgerEaten"),
    ready: () => args.minor.batfellow && (0,lib/* have */.lf)((0,template_string/* $item */.xr)(common_templateObject12 || (common_templateObject12 = common_taggedTemplateLiteral(["Mr. Burnsger"])))) && (0,lib/* getRemainingStomach */.ex)() >= 4,
    do: () => {
      withCloseted((0,template_string/* $items */.vS)(common_templateObject13 || (common_templateObject13 = common_taggedTemplateLiteral(["mime army shotglass"]))), () => {
        if ((0,lib/* have */.lf)((0,template_string/* $item */.xr)(common_templateObject14 || (common_templateObject14 = common_taggedTemplateLiteral(["astral pilsner"]))), 2)) (0,external_kolmafia_.drink)((0,template_string/* $item */.xr)(common_templateObject15 || (common_templateObject15 = common_taggedTemplateLiteral(["astral pilsner"]))), 2);else if ((0,external_kolmafia_.mallPrice)((0,template_string/* $item */.xr)(common_templateObject16 || (common_templateObject16 = common_taggedTemplateLiteral(["splendid martini"])))) < 15000) (0,external_kolmafia_.drink)((0,template_string/* $item */.xr)(common_templateObject17 || (common_templateObject17 = common_taggedTemplateLiteral(["splendid martini"]))), 2);else throw new Error("Unable to find a suitable booze to kickstart our liver with.");
      });
    },
    effects: (0,template_string/* $effects */.lh)(common_templateObject18 || (common_templateObject18 = common_taggedTemplateLiteral(["Ode to Booze"]))),
    limit: {
      tries: 1
    }
  }, {
    name: "Burnsger",
    completed: () => (0,dist_property.get)("_mrBurnsgerEaten"),
    ready: () => args.minor.batfellow && (0,lib/* have */.lf)((0,template_string/* $item */.xr)(common_templateObject19 || (common_templateObject19 = common_taggedTemplateLiteral(["Mr. Burnsger"])))) && (0,lib/* getRemainingStomach */.ex)() >= 4 && (0,external_kolmafia_.myInebriety)() >= 2,
    prepare: () => {
      if (!(0,dist_property.get)("_milkOfMagnesiumUsed")) {
        (0,external_kolmafia_.retrieveItem)((0,template_string/* $item */.xr)(common_templateObject20 || (common_templateObject20 = common_taggedTemplateLiteral(["milk of magnesium"]))));
        (0,external_kolmafia_.use)((0,template_string/* $item */.xr)(common_templateObject21 || (common_templateObject21 = common_taggedTemplateLiteral(["milk of magnesium"]))));
      }
    },
    do: () => (0,external_kolmafia_.eat)((0,template_string/* $item */.xr)(common_templateObject22 || (common_templateObject22 = common_taggedTemplateLiteral(["Mr. Burnsger"])))),
    limit: {
      tries: 1
    }
  }, {
    name: "Kickstart Stomach",
    completed: () => (0,external_kolmafia_.myFullness)() >= fullnessToRemove(),
    ready: () => args.minor.batfellow,
    prepare: () => {
      if (!(0,dist_property.get)("_milkOfMagnesiumUsed")) {
        (0,external_kolmafia_.retrieveItem)((0,template_string/* $item */.xr)(common_templateObject23 || (common_templateObject23 = common_taggedTemplateLiteral(["milk of magnesium"]))));
        (0,external_kolmafia_.use)((0,template_string/* $item */.xr)(common_templateObject24 || (common_templateObject24 = common_taggedTemplateLiteral(["milk of magnesium"]))));
      }
    },
    do: () => {
      if ((0,external_kolmafia_.mallPrice)((0,template_string/* $item */.xr)(common_templateObject25 || (common_templateObject25 = common_taggedTemplateLiteral(["Yeast of Boris"])))) < 10000) {
        (0,external_kolmafia_.eat)((0,template_string/* $item */.xr)(common_templateObject26 || (common_templateObject26 = common_taggedTemplateLiteral(["Boris's bread"]))), fullnessToRemove());
      } else throw "Unable to find a suitable food to kickstart our stomach with.";
    },
    limit: {
      tries: 1
    }
  }, {
    name: "Doc Clock",
    completed: () => (0,dist_property.get)("_docClocksThymeCocktailDrunk"),
    ready: () => args.minor.batfellow && (0,lib/* have */.lf)((0,template_string/* $item */.xr)(common_templateObject27 || (common_templateObject27 = common_taggedTemplateLiteral(["Doc Clock's thyme cocktail"])))) && (0,lib/* getRemainingLiver */.bf)() >= 4 && (0,external_kolmafia_.myFullness)() >= 2,
    do: () => (0,external_kolmafia_.drink)((0,template_string/* $item */.xr)(common_templateObject28 || (common_templateObject28 = common_taggedTemplateLiteral(["Doc Clock's thyme cocktail"])))),
    effects: (0,template_string/* $effects */.lh)(common_templateObject29 || (common_templateObject29 = common_taggedTemplateLiteral(["Ode to Booze"]))),
    limit: {
      tries: 1
    }
  }, {
    name: "Mad Liquor",
    completed: () => (0,dist_property.get)("_madLiquorDrunk"),
    ready: () => args.minor.batfellow && (0,lib/* have */.lf)((0,template_string/* $item */.xr)(common_templateObject30 || (common_templateObject30 = common_taggedTemplateLiteral(["The Mad Liquor"])))) && (0,lib/* getRemainingLiver */.bf)() >= 3 && (0,external_kolmafia_.myFullness)() >= 1,
    do: () => (0,external_kolmafia_.drink)((0,template_string/* $item */.xr)(common_templateObject31 || (common_templateObject31 = common_taggedTemplateLiteral(["The Mad Liquor"])))),
    effects: (0,template_string/* $effects */.lh)(common_templateObject32 || (common_templateObject32 = common_taggedTemplateLiteral(["Ode to Booze"]))),
    limit: {
      tries: 1
    }
  }];
}
function duffo() {
  var after = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return [{
    name: "Party Fair",
    after: common_toConsumableArray(after),
    completed: () => (0,dist_property.get)("_questPartyFair") !== "unstarted",
    do: () => {
      (0,external_kolmafia_.visitUrl)((0,external_kolmafia_.toUrl)((0,template_string/* $location */.PG)(common_templateObject33 || (common_templateObject33 = common_taggedTemplateLiteral(["The Neverending Party"])))));

      if (["food", "booze"].includes((0,dist_property.get)("_questPartyFairQuest"))) {
        (0,external_kolmafia_.runChoice)(1); // Accept quest
      } else {
        (0,external_kolmafia_.runChoice)(2); // Decline quest
      }
    },
    limit: {
      tries: 1
    }
  }, {
    name: "Duffo",
    after: [].concat(common_toConsumableArray(after), ["Party Fair"]),
    completed: () => (0,dist_property.get)("_questPartyFairProgress") !== "" || ["", "finished"].includes((0,dist_property.get)("_questPartyFair")) || !["food", "booze"].includes((0,dist_property.get)("_questPartyFairQuest")),
    do: () => cliExecuteThrow("duffo go"),
    post: () => Clan/* Clan.join */._.join("Margaretting Tye"),
    limit: {
      tries: 1
    }
  }];
}
function breakStone() {
  return {
    name: "Break Stone",
    completed: () => (0,external_kolmafia_.hippyStoneBroken)(),
    do: () => (0,external_kolmafia_.visitUrl)("peevpee.php?action=smashstone&confirm=on"),
    limit: {
      tries: 1
    }
  };
}
function pvp() {
  var after = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return [{
    name: "Pledge Allegiance",
    after: after,
    completed: () => !(0,external_kolmafia_.visitUrl)("peevpee.php?place=fight").includes("Pledge allegiance to"),
    do: () => (0,external_kolmafia_.visitUrl)("peevpee.php?action=pledge&place=fight&pwd"),
    limit: {
      tries: 1
    }
  }, {
    name: "Swagger",
    after: [].concat(common_toConsumableArray(after), ["Pledge Allegiance"]),
    ready: () => (0,external_kolmafia_.hippyStoneBroken)(),
    completed: () => (0,external_kolmafia_.pvpAttacksLeft)() === 0,
    do: () => {
      (0,external_kolmafia_.cliExecute)("unequip");
      (0,external_kolmafia_.cliExecute)("UberPvPOptimizer");
      (0,external_kolmafia_.cliExecute)("swagger");
    },
    limit: {
      tries: 1
    }
  }];
}
function endOfDay() {
  var after = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return [{
    name: "Raffle",
    after: after,
    completed: () => (0,lib/* have */.lf)((0,template_string/* $item */.xr)(common_templateObject34 || (common_templateObject34 = common_taggedTemplateLiteral(["raffle ticket"])))),
    do: () => (0,external_kolmafia_.cliExecute)("raffle ".concat(Math.random() * 10 + 1)),
    limit: {
      tries: 1
    }
  }, {
    name: "Pajamas",
    after: after,
    completed: () => (0,external_kolmafia_.maximize)("adv, switch tot, switch left-hand man, switch disembodied hand", true) && (0,external_kolmafia_.numericModifier)("Generated:_spec", "Adventures") <= (0,external_kolmafia_.numericModifier)("Adventures"),
    prepare: () => (0,external_kolmafia_.cliExecute)("refresh all"),
    do: () => (0,external_kolmafia_.maximize)("adv, switch tot, switch left-hand man, switch disembodied hand", false),
    limit: {
      tries: 1
    }
  }, {
    name: "Clockwork Maid",
    after: after,
    completed: () => (0,lib/* haveInCampground */.sy)((0,template_string/* $item */.xr)(common_templateObject35 || (common_templateObject35 = common_taggedTemplateLiteral(["clockwork maid"])))) || (0,external_kolmafia_.numericModifier)((0,template_string/* $item */.xr)(common_templateObject36 || (common_templateObject36 = common_taggedTemplateLiteral(["clockwork maid"]))), "Adventures") * (0,dist_property.get)("valueOfAdventure") < (0,external_kolmafia_.retrievePrice)((0,template_string/* $item */.xr)(common_templateObject37 || (common_templateObject37 = common_taggedTemplateLiteral(["clockwork maid"])))),
    do: () => {
      (0,external_kolmafia_.retrieveItem)((0,template_string/* $item */.xr)(common_templateObject38 || (common_templateObject38 = common_taggedTemplateLiteral(["clockwork maid"]))));
      (0,external_kolmafia_.use)((0,template_string/* $item */.xr)(common_templateObject39 || (common_templateObject39 = common_taggedTemplateLiteral(["clockwork maid"]))));
    },
    limit: {
      tries: 1
    }
  }];
}
;// CONCATENATED MODULE: ./src/strategies/common.ts
var strategies_common_templateObject, strategies_common_templateObject2, strategies_common_templateObject3, strategies_common_templateObject4, strategies_common_templateObject5, strategies_common_templateObject6, strategies_common_templateObject7, strategies_common_templateObject8, strategies_common_templateObject9, strategies_common_templateObject10, strategies_common_templateObject11, strategies_common_templateObject12;

function strategies_common_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






function distillateAdvs() {
  return Math.round(Math.pow((0,dist_property.get)("familiarSweat"), 0.4));
}

function stooper() {
  return {
    name: "Stooper",
    ready: () => distillateAdvs() >= 9 && !canConsume(),
    // Check organs just to be safe
    completed: () => (0,external_kolmafia_.myInebriety)() >= stooperInebrietyLimit(),
    do: () => (0,external_kolmafia_.cliExecute)("drink stillsuit distillate"),
    limit: {
      tries: 1
    }
  };
}
function caldera() {
  return {
    name: "Caldera",
    completed: () => (0,dist_property.get)("hallowienerVolcoino"),
    prepare: () => {
      (0,external_kolmafia_.bjornifyFamiliar)((0,template_string/* $familiar */.HP)(strategies_common_templateObject || (strategies_common_templateObject = strategies_common_taggedTemplateLiteral(["Warbear Drone"]))));
      (0,external_kolmafia_.useSkill)((0,template_string/* $skill */.tm)(strategies_common_templateObject2 || (strategies_common_templateObject2 = strategies_common_taggedTemplateLiteral(["Cannelloni Cocoon"]))));
    },
    do: (0,template_string/* $location */.PG)(strategies_common_templateObject3 || (strategies_common_templateObject3 = strategies_common_taggedTemplateLiteral(["The Bubblin' Caldera"]))),
    post: () => {
      if ((0,dist_property.get)("hallowienerVolcoino")) (0,lib/* uneffect */.Lo)((0,template_string/* $effect */._G)(strategies_common_templateObject4 || (strategies_common_templateObject4 = strategies_common_taggedTemplateLiteral(["Drenched in Lava"]))));
    },
    acquire: [{
      item: (0,template_string/* $item */.xr)(strategies_common_templateObject5 || (strategies_common_templateObject5 = strategies_common_taggedTemplateLiteral(["heat-resistant sheet metal"]))),
      price: 5000,
      optional: true
    }],
    outfit: {
      weapon: (0,template_string/* $item */.xr)(strategies_common_templateObject6 || (strategies_common_templateObject6 = strategies_common_taggedTemplateLiteral(["June cleaver"]))),
      offhand: (0,template_string/* $item */.xr)(strategies_common_templateObject7 || (strategies_common_templateObject7 = strategies_common_taggedTemplateLiteral(["Drunkula's wineglass"]))),
      back: (0,template_string/* $item */.xr)(strategies_common_templateObject8 || (strategies_common_templateObject8 = strategies_common_taggedTemplateLiteral(["Buddy Bjorn"]))),
      acc1: (0,template_string/* $item */.xr)(strategies_common_templateObject9 || (strategies_common_templateObject9 = strategies_common_taggedTemplateLiteral(["lucky gold ring"]))),
      acc2: (0,template_string/* $item */.xr)(strategies_common_templateObject10 || (strategies_common_templateObject10 = strategies_common_taggedTemplateLiteral(["mafia thumb ring"]))),
      acc3: (0,template_string/* $item */.xr)(strategies_common_templateObject11 || (strategies_common_templateObject11 = strategies_common_taggedTemplateLiteral(["Mr. Screege's spectacles"]))),
      familiar: (0,template_string/* $familiar */.HP)(strategies_common_templateObject12 || (strategies_common_templateObject12 = strategies_common_taggedTemplateLiteral(["Puck Man"]))),
      modifier: "mainstat"
    },
    combat: new CombatStrategy().macro(combat/* Macro.attack */.LE.attack().repeat()),
    limit: {
      tries: 10
    } // Clear intro adventure

  };
}
;// CONCATENATED MODULE: ./src/strategies/freecandy.ts
var freecandy_templateObject, freecandy_templateObject2, freecandy_templateObject3;

function freecandy_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function freecandy_toConsumableArray(arr) { return freecandy_arrayWithoutHoles(arr) || freecandy_iterableToArray(arr) || freecandy_unsupportedIterableToArray(arr) || freecandy_nonIterableSpread(); }

function freecandy_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function freecandy_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return freecandy_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return freecandy_arrayLikeToArray(o, minLen); }

function freecandy_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function freecandy_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return freecandy_arrayLikeToArray(arr); }

function freecandy_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }






var freecandy = {
  name: "freecandy",
  tasks: ascend => [{
    name: "Require Outfit",
    completed: () => (0,dist_property.get)("freecandy_treatOutfit") !== "",
    do: () => {
      throw new Error("freecandy_treatOutfit preference is not set");
    }
  }, {
    name: "CONSUME",
    completed: () => !canConsume(),
    do: () => cliExecuteThrow("CONSUME ALL VALUE ".concat(args.minor.halloweenvoa, " NOMEAT")),
    limit: {
      tries: 1
    },
    tracking: "Garbo"
  }, {
    name: "Garbo Nobarf",
    completed: () => (0,dist_property.get)("_garboCompleted", "") !== "" && !canConsume() || (0,external_kolmafia_.myInebriety)() >= stooperInebrietyLimit(),
    do: () => cliExecuteThrow("garbo nobarf ".concat(ascend ? "ascend" : "")),
    limit: {
      tries: 1
    },
    tracking: "Garbo"
  }, {
    name: "Freecandy",
    completed: () => (0,external_kolmafia_.myAdventures)() < 5 || (0,external_kolmafia_.myInebriety)() >= stooperInebrietyLimit(),
    do: () => cliExecuteThrow("freecandy"),
    outfit: {
      familiar: (0,template_string/* $familiar */.HP)(freecandy_templateObject || (freecandy_templateObject = freecandy_taggedTemplateLiteral(["Reagnimated Gnome"])))
    },
    limit: {
      tries: 1
    },
    tracking: "Freecandy"
  }, stooper(), {
    name: "Overdrink",
    completed: () => (0,external_kolmafia_.myInebriety)() > stooperInebrietyLimit(),
    do: () => (0,dist_property.withProperty)("spiceMelangeUsed", true, () => cliExecuteThrow("CONSUME VALUE ".concat(args.minor.halloweenvoa, " NIGHTCAP ").concat(ascend ? "NOMEAT" : ""))),
    outfit: {
      familiar: (0,template_string/* $familiar */.HP)(freecandy_templateObject2 || (freecandy_templateObject2 = freecandy_taggedTemplateLiteral(["Stooper"])))
    },
    limit: {
      tries: 1
    }
  }].concat(freecandy_toConsumableArray(ascend ? [caldera()] : []), [{
    name: "Overdrunk",
    ready: () => (0,external_kolmafia_.myInebriety)() > stooperInebrietyLimit(),
    completed: () => (0,external_kolmafia_.myAdventures)() < 5,
    do: () => cliExecuteThrow("freecandy"),
    outfit: {
      familiar: (0,template_string/* $familiar */.HP)(freecandy_templateObject3 || (freecandy_templateObject3 = freecandy_taggedTemplateLiteral(["Reagnimated Gnome"])))
    },
    limit: {
      tries: 1
    },
    tracking: "Freecandy"
  }], freecandy_toConsumableArray(ascend ? [{
    name: "Combo",
    completed: () => (0,external_kolmafia_.myAdventures)() === 0,
    do: () => cliExecuteThrow("combo ".concat((0,external_kolmafia_.myAdventures)())),
    limit: {
      tries: 1
    }
  }] : []))
};
;// CONCATENATED MODULE: ./src/strategies/garbo.ts
var garbo_templateObject, garbo_templateObject2, garbo_templateObject3, garbo_templateObject4, garbo_templateObject5, garbo_templateObject6, garbo_templateObject7;

function garbo_toConsumableArray(arr) { return garbo_arrayWithoutHoles(arr) || garbo_iterableToArray(arr) || garbo_unsupportedIterableToArray(arr) || garbo_nonIterableSpread(); }

function garbo_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function garbo_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return garbo_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return garbo_arrayLikeToArray(o, minLen); }

function garbo_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function garbo_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return garbo_arrayLikeToArray(arr); }

function garbo_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function garbo_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






function chooseWorkshed() {
  if ((0,external_kolmafia_.getWorkshed)() !== (0,template_string/* $item */.xr)(garbo_templateObject || (garbo_templateObject = garbo_taggedTemplateLiteral(["Asdon Martin keyfob"]))) && !(0,lib/* have */.lf)((0,template_string/* $effect */._G)(garbo_templateObject2 || (garbo_templateObject2 = garbo_taggedTemplateLiteral(["Driving Observantly"]))))) {
    return (0,template_string/* $item */.xr)(garbo_templateObject3 || (garbo_templateObject3 = garbo_taggedTemplateLiteral(["Asdon Martin keyfob"])));
  }

  if ((0,external_kolmafia_.getWorkshed)() !== (0,template_string/* $item */.xr)(garbo_templateObject4 || (garbo_templateObject4 = garbo_taggedTemplateLiteral(["cold medicine cabinet"])))) {
    return (0,template_string/* $item */.xr)(garbo_templateObject5 || (garbo_templateObject5 = garbo_taggedTemplateLiteral(["cold medicine cabinet"])));
  }

  return (0,template_string/* $item */.xr)(garbo_templateObject6 || (garbo_templateObject6 = garbo_taggedTemplateLiteral(["model train set"])));
}

var garbo = {
  name: "garbo",
  tasks: ascend => [{
    name: "Garbo",
    completed: () => (0,dist_property.get)("_garboCompleted", "") !== "" && (0,external_kolmafia_.myAdventures)() === 0 && !canConsume() || (0,external_kolmafia_.myInebriety)() >= stooperInebrietyLimit(),
    do: () => cliExecuteThrow("garbo ".concat(ascend ? "ascend" : "", " workshed=\"").concat(chooseWorkshed(), "\"")),
    limit: {
      tries: 1
    },
    tracking: "Garbo"
  }, stooper(), {
    name: "Overdrink",
    completed: () => (0,external_kolmafia_.myInebriety)() > stooperInebrietyLimit(),
    do: () => (0,dist_property.withProperty)("spiceMelangeUsed", true, () => cliExecuteThrow("CONSUME NIGHTCAP ".concat(ascend ? "VALUE 3250" : ""))),
    outfit: {
      familiar: (0,template_string/* $familiar */.HP)(garbo_templateObject7 || (garbo_templateObject7 = garbo_taggedTemplateLiteral(["Stooper"])))
    },
    limit: {
      tries: 1
    }
  }].concat(garbo_toConsumableArray(ascend ? [caldera(), {
    name: "Overdrunk",
    ready: () => (0,external_kolmafia_.myInebriety)() > (0,external_kolmafia_.inebrietyLimit)(),
    completed: () => (0,external_kolmafia_.myAdventures)() === 0,
    do: () => cliExecuteThrow("garbo ascend"),
    limit: {
      tries: 1
    },
    tracking: "Garbo"
  }] : []))
};
;// CONCATENATED MODULE: ./src/strategies/util.ts
var util_templateObject;

function util_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function util_toConsumableArray(arr) { return util_arrayWithoutHoles(arr) || util_iterableToArray(arr) || util_unsupportedIterableToArray(arr) || util_nonIterableSpread(); }

function util_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function util_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return util_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return util_arrayLikeToArray(o, minLen); }

function util_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function util_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return util_arrayLikeToArray(arr); }

function util_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }






function capitalize(word) {
  return word.charAt(0).toUpperCase() + word.slice(1);
}

function getScriptName(command) {
  return capitalize(command.split(" ")[0]);
}

function createNoBarfStrategy(command) {
  var overdrunk = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var scriptName = getScriptName(command);
  return {
    name: scriptName,
    tasks: ascend => [{
      name: "Garbo Nobarf",
      completed: () => (0,dist_property.get)("_garboCompleted", "") !== "" && !canConsume() || (0,external_kolmafia_.myInebriety)() >= stooperInebrietyLimit(),
      do: () => cliExecuteThrow("garbo nobarf ".concat(ascend ? "ascend" : "")),
      limit: {
        tries: 1
      },
      tracking: "Garbo"
    }, {
      name: scriptName,
      completed: () => (0,external_kolmafia_.myAdventures)() === 0 || (0,external_kolmafia_.myInebriety)() >= stooperInebrietyLimit(),
      do: () => cliExecuteThrow(command),
      limit: {
        tries: 1
      },
      tracking: scriptName
    }, stooper(), {
      name: "Overdrink",
      completed: () => (0,external_kolmafia_.myInebriety)() > stooperInebrietyLimit(),
      do: () => (0,dist_property.withProperty)("spiceMelangeUsed", true, () => cliExecuteThrow("CONSUME NIGHTCAP ".concat(ascend ? "NOMEAT" : ""))),
      outfit: {
        familiar: (0,template_string/* $familiar */.HP)(util_templateObject || (util_templateObject = util_taggedTemplateLiteral(["Stooper"])))
      },
      limit: {
        tries: 1
      }
    }].concat(util_toConsumableArray(ascend ? [caldera(), {
      name: "Overdrunk",
      ready: () => (0,external_kolmafia_.myInebriety)() > stooperInebrietyLimit(),
      completed: () => (0,external_kolmafia_.myAdventures)() === 0,
      do: () => cliExecuteThrow(overdrunk ? command : "garbo ascend"),
      limit: {
        tries: 1
      },
      tracking: scriptName
    }] : []))
  };
}
;// CONCATENATED MODULE: ./src/strategies/chrono.ts

var chrono = createNoBarfStrategy("chrono", true);
;// CONCATENATED MODULE: ./src/strategies/crimbo.ts

var crimbo = createNoBarfStrategy("crimbo", true);
;// CONCATENATED MODULE: ./src/strategies/strategy.ts








var _strategy = null;
function setStrategy() {
  (0,external_kolmafia_.visitUrl)("town.php"); // Check if time tower is available

  switch (args.major.strategy) {
    case "auto":
      if ((0,dist_property.get)("timeTowerAvailable")) _strategy = chrono;else if (isHalloween()) _strategy = freecandy;else _strategy = garbo;
      (0,external_kolmafia_.print)("Auto-selecting ".concat(_strategy.name, " strategy"), "blue");
      (0,external_kolmafia_.wait)(5);
      break;

    case "garbo":
      _strategy = garbo;
      break;

    case "freecandy":
      _strategy = freecandy;
      break;

    case "chrono":
      _strategy = chrono;
      break;

    case "crimbo":
      _strategy = crimbo;
      break;

    default:
      throw "Unknown strategy name ".concat(args.major.strategy);
  }
}
function getStrategy() {
  if (_strategy === null) throw new Error("A strategy has not been set.");
  return _strategy;
}
;// CONCATENATED MODULE: ./src/paths/aftercore.ts
function aftercore_toConsumableArray(arr) { return aftercore_arrayWithoutHoles(arr) || aftercore_iterableToArray(arr) || aftercore_unsupportedIterableToArray(arr) || aftercore_nonIterableSpread(); }

function aftercore_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function aftercore_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return aftercore_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return aftercore_arrayLikeToArray(o, minLen); }

function aftercore_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function aftercore_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return aftercore_arrayLikeToArray(arr); }

function aftercore_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }




function aftercoreQuest() {
  return {
    name: "Aftercore",
    completed: () => ascendedToday(),
    tasks: [pullAll()].concat(aftercore_toConsumableArray(breakfast()), aftercore_toConsumableArray(duffo()), aftercore_toConsumableArray(batfellow()), aftercore_toConsumableArray(getStrategy().tasks(true)), aftercore_toConsumableArray(pvp()))
  };
}
;// CONCATENATED MODULE: ./src/paths/casual.ts
var casual_templateObject, casual_templateObject2, casual_templateObject3, casual_templateObject4, casual_templateObject5, casual_templateObject6;

function casual_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function casual_toConsumableArray(arr) { return casual_arrayWithoutHoles(arr) || casual_iterableToArray(arr) || casual_unsupportedIterableToArray(arr) || casual_nonIterableSpread(); }

function casual_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function casual_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return casual_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return casual_arrayLikeToArray(o, minLen); }

function casual_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function casual_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return casual_arrayLikeToArray(arr); }

function casual_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }






function casualQuest() {
  return {
    name: "Casual",
    tasks: [{
      name: "Ascend",
      completed: () => ascendedToday(),
      do: () => {
        (0,ascend/* prepareAscension */.lO)({
          garden: "packet of thanksgarden seeds",
          eudora: "New-You Club Membership Form",
          chateau: {
            desk: "Swiss piggy bank",
            nightstand: byAscendingStat({
              Muscle: "electric muscle stimulator",
              Mysticality: "foreign language tapes",
              Moxie: "bowl of potpourri"
            }),
            ceiling: "ceiling fan"
          }
        });
        (0,external_kolmafia_.visitUrl)("council.php"); // Collect thwaitgold

        (0,ascend/* ascend */.zU)({
          path: (0,template_string/* $path */.l$)(casual_templateObject || (casual_templateObject = casual_taggedTemplateLiteral(["none"]))),
          playerClass: args.major["class"],
          lifestyle: ascend/* Lifestyle.casual */.VO.casual,
          moon: "knoll",
          consumable: (0,template_string/* $item */.xr)(casual_templateObject2 || (casual_templateObject2 = casual_taggedTemplateLiteral(["astral six-pack"]))),
          pet: (0,template_string/* $item */.xr)(casual_templateObject3 || (casual_templateObject3 = casual_taggedTemplateLiteral(["astral pet sweater"]))),
          permOptions: createPermOptions()
        });
      },
      limit: {
        tries: 1
      }
    }, breakStone()].concat(casual_toConsumableArray(duffo([])), [{
      name: "Run",
      ready: () => (0,external_kolmafia_.myPath)() === (0,template_string/* $path */.l$)(casual_templateObject4 || (casual_templateObject4 = casual_taggedTemplateLiteral(["none"]))),
      completed: () => (0,dist_property.get)("kingLiberated") && (0,lib/* have */.lf)((0,template_string/* $skill */.tm)(casual_templateObject5 || (casual_templateObject5 = casual_taggedTemplateLiteral(["Liver of Steel"])))),
      do: () => {
        (0,external_kolmafia_.cliExecute)("loopcasual fluffers=false stomach=15 workshed='Asdon Martin keyfob'");

        if ((0,external_kolmafia_.myAdventures)() === 0 && !(0,lib/* have */.lf)((0,template_string/* $skill */.tm)(casual_templateObject6 || (casual_templateObject6 = casual_taggedTemplateLiteral(["Liver of Steel"]))))) {
          (0,external_kolmafia_.cliExecute)("cast 2 ancestral recall");
          (0,external_kolmafia_.cliExecute)("loopcasual fluffers=false stomach=15");
        }
      },
      limit: {
        tries: 1
      },
      tracking: "Run"
    }])
  };
}
;// CONCATENATED MODULE: ./src/paths/cs.ts
var cs_templateObject, cs_templateObject2, cs_templateObject3, cs_templateObject4, cs_templateObject5, cs_templateObject6, cs_templateObject7, cs_templateObject8, cs_templateObject9, cs_templateObject10, cs_templateObject11;

function cs_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }







function setBootSkin(skin) {
  if (!(0,lib/* have */.lf)((0,template_string/* $item */.xr)(cs_templateObject || (cs_templateObject = cs_taggedTemplateLiteral(["your cowboy boots"]))))) {
    (0,external_kolmafia_.visitUrl)("place.php?whichplace=town_right&action=townright_ltt");
  }

  if ((0,external_kolmafia_.equippedItem)((0,template_string/* $slot */.Jh)(cs_templateObject2 || (cs_templateObject2 = cs_taggedTemplateLiteral(["bootskin"])))) === skin) return true;
  return (0,external_kolmafia_.retrieveItem)(skin) && (0,external_kolmafia_.use)(skin);
}

function csQuest() {
  return {
    name: "Community Service",
    tasks: [{
      name: "Ascend",
      completed: () => ascendedToday(),
      do: () => {
        setBootSkin(byAscendingStat({
          Muscle: (0,template_string/* $item */.xr)(cs_templateObject3 || (cs_templateObject3 = cs_taggedTemplateLiteral(["grizzled bearskin"]))),
          Mysticality: (0,template_string/* $item */.xr)(cs_templateObject4 || (cs_templateObject4 = cs_taggedTemplateLiteral(["frontwinder skin"]))),
          Moxie: (0,template_string/* $item */.xr)(cs_templateObject5 || (cs_templateObject5 = cs_taggedTemplateLiteral(["mountain lion skin"])))
        }));
        (0,ascend/* prepareAscension */.lO)({
          garden: "Peppermint Pip Packet",
          eudora: "Our Daily Candles™ order form",
          chateau: {
            desk: "continental juice bar",
            nightstand: byAscendingStat({
              Muscle: "electric muscle stimulator",
              Mysticality: "foreign language tapes",
              Moxie: "bowl of potpourri"
            }),
            ceiling: "ceiling fan"
          }
        });
        (0,external_kolmafia_.visitUrl)("council.php"); // Collect thwaitgold

        (0,ascend/* ascend */.zU)({
          path: (0,template_string/* $path */.l$)(cs_templateObject6 || (cs_templateObject6 = cs_taggedTemplateLiteral(["Community Service"]))),
          playerClass: args.major["class"],
          lifestyle: ascend/* Lifestyle.softcore */.VO.softcore,
          moon: "knoll",
          consumable: (0,template_string/* $item */.xr)(cs_templateObject7 || (cs_templateObject7 = cs_taggedTemplateLiteral(["astral six-pack"]))),
          pet: (0,template_string/* $item */.xr)(cs_templateObject8 || (cs_templateObject8 = cs_taggedTemplateLiteral(["astral chapeau"]))),
          permOptions: createPermOptions()
        });
      },
      limit: {
        tries: 1
      }
    }, breakStone(), {
      name: "Run",
      ready: () => (0,external_kolmafia_.myPath)() === (0,template_string/* $path */.l$)(cs_templateObject9 || (cs_templateObject9 = cs_taggedTemplateLiteral(["Community Service"]))),
      completed: () => (0,dist_property.get)("kingLiberated"),
      do: () => (0,external_kolmafia_.cliExecute)("loopcs"),
      limit: {
        tries: 1
      },
      tracking: "Run"
    }, {
      name: "Uneffect Lost",
      completed: () => !(0,lib/* have */.lf)((0,template_string/* $effect */._G)(cs_templateObject10 || (cs_templateObject10 = cs_taggedTemplateLiteral(["Feeling Lost"])))),
      do: () => (0,lib/* uneffect */.Lo)((0,template_string/* $effect */._G)(cs_templateObject11 || (cs_templateObject11 = cs_taggedTemplateLiteral(["Feeling Lost"])))),
      limit: {
        tries: 1
      }
    }]
  };
}
;// CONCATENATED MODULE: ./src/paths/smol.ts
var smol_templateObject, smol_templateObject2, smol_templateObject3, smol_templateObject4, smol_templateObject5, smol_templateObject6, smol_templateObject7, smol_templateObject8, smol_templateObject9, smol_templateObject10, smol_templateObject11, smol_templateObject12, smol_templateObject13, smol_templateObject14, smol_templateObject15, smol_templateObject16, smol_templateObject17, smol_templateObject18, smol_templateObject19, smol_templateObject20, smol_templateObject21, smol_templateObject22;

function smol_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }







function smolQuest() {
  return {
    name: "Community Service",
    tasks: [{
      name: "Pizza of Legend",
      completed: () => (0,lib/* have */.lf)((0,template_string/* $item */.xr)(smol_templateObject || (smol_templateObject = smol_taggedTemplateLiteral(["Pizza of Legend"])))) || ascendedToday(),
      do: () => (0,external_kolmafia_.retrieveItem)((0,template_string/* $item */.xr)(smol_templateObject2 || (smol_templateObject2 = smol_taggedTemplateLiteral(["Pizza of Legend"])))),
      limit: {
        tries: 1
      }
    }, {
      name: "Ascend",
      completed: () => ascendedToday(),
      prepare: () => (0,ascend/* prepareAscension */.lO)({
        garden: "packet of tall grass seeds",
        eudora: "Our Daily Candles™ order form",
        chateau: {
          desk: "continental juice bar",
          ceiling: "ceiling fan",
          nightstand: byAscendingStat({
            Muscle: "electric muscle stimulator",
            Mysticality: "foreign language tapes",
            Moxie: "bowl of potpourri"
          })
        }
      }),
      do: () => {
        (0,ascend/* ascend */.zU)({
          path: (0,template_string/* $path */.l$)(smol_templateObject3 || (smol_templateObject3 = smol_taggedTemplateLiteral(["A Shrunken Adventurer am I"]))),
          playerClass: args.major["class"],
          lifestyle: ascend/* Lifestyle.softcore */.VO.softcore,
          moon: "knoll",
          consumable: (0,template_string/* $item */.xr)(smol_templateObject4 || (smol_templateObject4 = smol_taggedTemplateLiteral(["astral six-pack"]))),
          pet: (0,template_string/* $item */.xr)(smol_templateObject5 || (smol_templateObject5 = smol_taggedTemplateLiteral(["astral mask"])))
        });
        if ((0,external_kolmafia_.visitUrl)("main.php").includes("dense, trackless jungle")) (0,external_kolmafia_.runChoice)(-1);
      },
      limit: {
        tries: 1
      }
    }, breakStone(), {
      name: "Run",
      completed: () => step("questL13Final") > 11,
      do: () => (0,external_kolmafia_.cliExecute)("loopsmol"),
      limit: {
        tries: 1
      },
      tracking: "Run"
    }, {
      name: "Prism",
      completed: () => (0,external_kolmafia_.myPath)() !== (0,template_string/* $path */.l$)(smol_templateObject6 || (smol_templateObject6 = smol_taggedTemplateLiteral(["A Shrunken Adventurer am I"]))),
      do: () => (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower&action=ns_11_prism"),
      limit: {
        tries: 1
      }
    }, pullAll(), {
      name: "Uneat",
      after: ["Ascend", "Prism", "Pull All"],
      completed: () => (0,lib/* getRemainingStomach */.ex)() >= 0 && (0,lib/* getRemainingLiver */.bf)() >= 0 || (0,external_kolmafia_.myInebriety)() > (0,external_kolmafia_.inebrietyLimit)() + 5,
      do: () => {
        if ((0,external_kolmafia_.myFullness)() >= 3 && (0,external_kolmafia_.myInebriety)() >= 3 && !(0,dist_property.get)("spiceMelangeUsed")) {
          if (!(0,lib/* have */.lf)((0,template_string/* $item */.xr)(smol_templateObject7 || (smol_templateObject7 = smol_taggedTemplateLiteral(["spice melange"]))))) (0,external_kolmafia_.buy)((0,template_string/* $item */.xr)(smol_templateObject8 || (smol_templateObject8 = smol_taggedTemplateLiteral(["spice melange"]))), 600000);
          (0,external_kolmafia_.use)((0,template_string/* $item */.xr)(smol_templateObject9 || (smol_templateObject9 = smol_taggedTemplateLiteral(["spice melange"]))));
        }

        if ((0,lib/* getRemainingStomach */.ex)() < 0 && (0,dist_property.get)("_augSkillsCast") < 5 && !(0,dist_property.get)("_aug16Cast")) {
          (0,external_kolmafia_.useSkill)((0,template_string/* $skill */.tm)(smol_templateObject10 || (smol_templateObject10 = smol_taggedTemplateLiteral(["Aug. 16th: Roller Coaster Day!"]))));
        }

        if ((0,lib/* getRemainingStomach */.ex)() < 0 && (0,lib/* have */.lf)((0,template_string/* $item */.xr)(smol_templateObject11 || (smol_templateObject11 = smol_taggedTemplateLiteral(["distention pill"])))) && !(0,dist_property.get)("_distentionPillUsed")) {
          (0,external_kolmafia_.use)((0,template_string/* $item */.xr)(smol_templateObject12 || (smol_templateObject12 = smol_taggedTemplateLiteral(["distention pill"]))));
        }

        if ((0,lib/* getRemainingLiver */.bf)() < 0 && (0,lib/* have */.lf)((0,template_string/* $item */.xr)(smol_templateObject13 || (smol_templateObject13 = smol_taggedTemplateLiteral(["synthetic dog hair pill"])))) && !(0,dist_property.get)("_syntheticDogHairPillUsed")) {
          (0,external_kolmafia_.use)((0,template_string/* $item */.xr)(smol_templateObject14 || (smol_templateObject14 = smol_taggedTemplateLiteral(["synthetic dog hair pill"]))));
        }

        if ((0,lib/* getRemainingLiver */.bf)() < 0 && !(0,dist_property.get)("_sobrieTeaUsed")) {
          if (!(0,lib/* have */.lf)((0,template_string/* $item */.xr)(smol_templateObject15 || (smol_templateObject15 = smol_taggedTemplateLiteral(["cuppa Sobrie tea"]))))) (0,external_kolmafia_.buy)((0,template_string/* $item */.xr)(smol_templateObject16 || (smol_templateObject16 = smol_taggedTemplateLiteral(["cuppa Sobrie tea"]))), 100000);
          (0,external_kolmafia_.use)((0,template_string/* $item */.xr)(smol_templateObject17 || (smol_templateObject17 = smol_taggedTemplateLiteral(["cuppa Sobrie tea"]))));
        }
      },
      limit: {
        tries: 1
      }
    }, {
      name: "Organ",
      after: ["Ascend", "Prism", "Pull All", "Uneat"],
      completed: () => (0,lib/* have */.lf)((0,template_string/* $skill */.tm)(smol_templateObject18 || (smol_templateObject18 = smol_taggedTemplateLiteral(["Liver of Steel"])))),
      do: () => (0,external_kolmafia_.cliExecute)("loopcasual goal=organ"),
      limit: {
        tries: 1
      }
    }, {
      name: "Duplicate",
      after: ["Ascend", "Prism", "Pull All"],
      ready: () => (0,lib/* have */.lf)(args.minor.duplicate),
      completed: () => (0,dist_property.get)("lastDMTDuplication") === (0,external_kolmafia_.myAscensions)(),
      prepare: () => (0,dist_property.set)("choiceAdventure1125", "1&iid=".concat((0,external_kolmafia_.toInt)(args.minor.duplicate))),
      do: (0,template_string/* $location */.PG)(smol_templateObject19 || (smol_templateObject19 = smol_taggedTemplateLiteral(["The Deep Machine Tunnels"]))),
      post: () => {
        if ((0,lib/* have */.lf)((0,template_string/* $effect */._G)(smol_templateObject20 || (smol_templateObject20 = smol_taggedTemplateLiteral(["Beaten Up"]))))) (0,lib/* uneffect */.Lo)((0,template_string/* $effect */._G)(smol_templateObject21 || (smol_templateObject21 = smol_taggedTemplateLiteral(["Beaten Up"]))));
      },
      choices: {
        1119: 4
      },
      combat: new CombatStrategy().macro(new combat/* Macro */.LE().attack().repeat()),
      outfit: {
        familiar: (0,template_string/* $familiar */.HP)(smol_templateObject22 || (smol_templateObject22 = smol_taggedTemplateLiteral(["Machine Elf"]))),
        modifier: "muscle"
      },
      limit: {
        tries: 6
      }
    }]
  };
}
// EXTERNAL MODULE: ./node_modules/libram/dist/resources/2017/AsdonMartin.js
var AsdonMartin = __webpack_require__(550);
;// CONCATENATED MODULE: ./src/paths/post.ts
var post_templateObject, post_templateObject2, post_templateObject3;

function post_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function post_toConsumableArray(arr) { return post_arrayWithoutHoles(arr) || post_iterableToArray(arr) || post_unsupportedIterableToArray(arr) || post_nonIterableSpread(); }

function post_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function post_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return post_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return post_arrayLikeToArray(o, minLen); }

function post_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function post_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return post_arrayLikeToArray(arr); }

function post_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }





function postQuest() {
  return {
    name: "Post",
    tasks: [pullAll(), {
      name: "Workshed",
      completed: () => (0,external_kolmafia_.getWorkshed)() === (0,template_string/* $item */.xr)(post_templateObject || (post_templateObject = post_taggedTemplateLiteral(["cold medicine cabinet"]))) || (0,dist_property.get)("_workshedItemUsed"),
      do: () => {
        AsdonMartin.drive((0,template_string/* $effect */._G)(post_templateObject2 || (post_templateObject2 = post_taggedTemplateLiteral(["Driving Observantly"]))), 900);
        (0,external_kolmafia_.use)((0,template_string/* $item */.xr)(post_templateObject3 || (post_templateObject3 = post_taggedTemplateLiteral(["cold medicine cabinet"]))));
      },
      limit: {
        tries: 1
      }
    }].concat(post_toConsumableArray(breakfast()), post_toConsumableArray(duffo()), post_toConsumableArray(batfellow()), post_toConsumableArray(getStrategy().tasks(false)), post_toConsumableArray(endOfDay()))
  };
}
;// CONCATENATED MODULE: ./src/paths/robot.ts
var robot_templateObject, robot_templateObject2, robot_templateObject3, robot_templateObject4, robot_templateObject5, robot_templateObject6;

function robot_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






function robotQuest() {
  return {
    name: "Robot",
    tasks: [{
      name: "Ascend",
      completed: () => ascendedToday(),
      do: () => {
        (0,ascend/* prepareAscension */.lO)({
          garden: "packet of tall grass seeds",
          eudora: "Our Daily Candles™ order form",
          chateau: {
            desk: "continental juice bar",
            ceiling: "ceiling fan",
            nightstand: "foreign language tapes"
          }
        });
        (0,external_kolmafia_.visitUrl)("council.php"); // Collect thwaitgold

        (0,ascend/* ascend */.zU)({
          path: (0,template_string/* $path */.l$)(robot_templateObject || (robot_templateObject = robot_taggedTemplateLiteral(["You, Robot"]))),
          playerClass: (0,template_string/* $class */._$)(robot_templateObject2 || (robot_templateObject2 = robot_taggedTemplateLiteral(["Pastamancer"]))),
          lifestyle: ascend/* Lifestyle.softcore */.VO.softcore,
          moon: "vole",
          consumable: (0,template_string/* $item */.xr)(robot_templateObject3 || (robot_templateObject3 = robot_taggedTemplateLiteral(["astral six-pack"]))),
          pet: (0,template_string/* $item */.xr)(robot_templateObject4 || (robot_templateObject4 = robot_taggedTemplateLiteral(["astral mask"]))),
          permOptions: createPermOptions()
        });
        (0,dist_property.set)("choiceAdventure1446", 1);
        if ((0,external_kolmafia_.visitUrl)("main.php").includes("one made of rusty metal and scrap wiring")) (0,external_kolmafia_.runChoice)(-1);
      },
      limit: {
        tries: 1
      }
    }, breakStone(), {
      name: "Run",
      ready: () => (0,external_kolmafia_.myPath)() === (0,template_string/* $path */.l$)(robot_templateObject5 || (robot_templateObject5 = robot_taggedTemplateLiteral(["You, Robot"]))),
      completed: () => step("questL13Final") > 11,
      do: () => (0,external_kolmafia_.cliExecute)("looprobot"),
      limit: {
        tries: 1
      },
      tracking: "Run"
    }, {
      name: "Prism",
      completed: () => (0,external_kolmafia_.myPath)() !== (0,template_string/* $path */.l$)(robot_templateObject6 || (robot_templateObject6 = robot_taggedTemplateLiteral(["You, Robot"]))),
      do: () => (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower&action=ns_11_prism"),
      limit: {
        tries: 1
      },
      tracking: "Ignore"
    }]
  };
}
;// CONCATENATED MODULE: ./src/main.ts
function main_toConsumableArray(arr) { return main_arrayWithoutHoles(arr) || main_iterableToArray(arr) || main_unsupportedIterableToArray(arr) || main_nonIterableSpread(); }

function main_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function main_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function main_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return main_arrayLikeToArray(arr); }

function main_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = main_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function main_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return main_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return main_arrayLikeToArray(o, minLen); }

function main_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }















var snapshotStart = Snapshot.importOrCreate("Start");
function main(command) {
  var _args$debug$completed, _args$debug$completed2;

  Args.fill(args, command);

  if (args.help) {
    Args.showHelp(args);
    return;
  }

  setStrategy();
  var quests = getQuests(args.major.path);
  var tasks = getTasks(quests); // Abort during the prepare() step of the specified task

  if (args.debug.abort) {
    var to_abort = tasks.find(task => task.name === args.debug.abort);
    if (!to_abort) throw "Unable to identify task ".concat(args.debug.abort);

    to_abort.prepare = () => {
      throw "Abort requested on task ".concat(to_abort.name);
    };
  }

  if (!(0,dist_property.get)("_gitUpdated")) (0,external_kolmafia_.cliExecute)("git update");
  var engine = new LoopEngine(tasks, (_args$debug$completed = (_args$debug$completed2 = args.debug.completedtasks) === null || _args$debug$completed2 === void 0 ? void 0 : _args$debug$completed2.split(",")) !== null && _args$debug$completed !== void 0 ? _args$debug$completed : [], "bloop");

  try {
    if (args.debug.list) {
      listTasks(engine);
      return;
    }

    engine.run();
  } finally {
    engine.destruct();
  }

  printFulldaySnapshot();

  var _rolloverTurns = rolloverTurns(),
      actual = _rolloverTurns.actual,
      lost = _rolloverTurns.lost;

  (0,external_kolmafia_.print)("Will start tomorrow with ".concat(actual, " turns (after potato and hourglass)"));
  (0,external_kolmafia_.print)("Will lose ".concat(lost, " turns to rollover"), lost > 0 ? "red" : "black");
}

function getQuests(path) {
  switch (path) {
    case "cs":
      return [aftercoreQuest(), csQuest(), postQuest()];

    case "casual":
      return [aftercoreQuest(), casualQuest(), postQuest()];

    case "smol":
      return [aftercoreQuest(), smolQuest(), postQuest()];

    case "robot":
      return [aftercoreQuest(), robotQuest(), postQuest()];

    case "custom":
      return [aftercoreQuest()];

    case "none":
      return [postQuest()];

    default:
      throw "Unknown run type ".concat(path);
  }
}

function listTasks(engine) {
  var _iterator = main_createForOfIteratorHelper(engine.tasks),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var task = _step.value;

      if (task.completed()) {
        debug("".concat(task.name, ": Done"), "blue");
      } else if (engine.available(task)) {
        debug("".concat(task.name, ": Available"));
      } else {
        debug("".concat(task.name, ": Not Available"), "red");
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

function printFulldaySnapshot() {
  var _Snapshot$current$dif = Snapshot.current().diff(snapshotStart).value(loopValue),
      meat = _Snapshot$current$dif.meat,
      items = _Snapshot$current$dif.items,
      itemDetails = _Snapshot$current$dif.itemDetails;

  var winners = itemDetails.sort((a, b) => b.value - a.value).slice(0, 5);
  var losers = itemDetails.sort((a, b) => b.value - a.value).slice(-5);
  (0,external_kolmafia_.print)("");
  (0,external_kolmafia_.print)("So far today, you have generated ".concat(numberWithCommas(meat + items), " meat, with ").concat(numberWithCommas(meat), " raw meat and ").concat(numberWithCommas(items), " from items"));
  (0,external_kolmafia_.print)("Extreme Items:");

  for (var _i = 0, _arr = [].concat(main_toConsumableArray(winners), main_toConsumableArray(losers)); _i < _arr.length; _i++) {
    var detail = _arr[_i];
    (0,external_kolmafia_.print)("".concat(numberWithCommas(detail.quantity), " ").concat(detail.item, " worth ").concat(numberWithCommas(Math.round(detail.value)), " total"));
  }
}
})();

var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;